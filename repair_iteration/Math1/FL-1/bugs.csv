bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] throw new FractionConversionException(value, p2, q2); [FE] FractionConversionException [CONTEXT] boolean stop = false; do { ++n; final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((p2 > overflow) || (q2 > overflow)) {   [BUGGY] throw new FractionConversionException(value, p2, q2); [BUGGY] } final double convergent = (double) p2 / (double) q2; if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	
2	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] boolean stop = false; do { ++n; final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((p2 > overflow) || (q2 > overflow)) {   [BUGGY] [BUGGY] throw new FractionConversionException(value, p2, q2); } final double convergent = (double) p2 / (double) q2; if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	
3	[BUG] [BUGGY] numerator = BigInteger.valueOf(p1); [FE] FractionConversionException [CONTEXT] if (q2 < maxDenominator) { numerator = BigInteger.valueOf(p2); denominator = BigInteger.valueOf(q2); } else { [BUGGY] numerator = BigInteger.valueOf(p1); [BUGGY] denominator = BigInteger.valueOf(q1); } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	
4	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if (q2 < maxDenominator) { numerator = BigInteger.valueOf(p2); denominator = BigInteger.valueOf(q2); } else { [BUGGY] [BUGGY] numerator = BigInteger.valueOf(p1); denominator = BigInteger.valueOf(q1); } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	add	
5	[BUG] [BUGGY] denominator = BigInteger.valueOf(q1); [FE] FractionConversionException [CONTEXT] if (q2 < maxDenominator) { numerator = BigInteger.valueOf(p2); denominator = BigInteger.valueOf(q2); } else { numerator = BigInteger.valueOf(p1); [BUGGY] denominator = BigInteger.valueOf(q1); [BUGGY] } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	
6	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if (q2 < maxDenominator) { numerator = BigInteger.valueOf(p2); denominator = BigInteger.valueOf(q2); } else { numerator = BigInteger.valueOf(p1); [BUGGY] [BUGGY] denominator = BigInteger.valueOf(q1); } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	add	
7	[BUG] [BUGGY] this(value, 0, maxDenominator, 100); [FE] FractionConversionException [CONTEXT] public BigFraction(final double value, final int maxDenominator) throws FractionConversionException { [BUGGY] this(value, 0, maxDenominator, 100); [BUGGY] } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,int)  final double value final int maxDenominator [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double value int maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	
8	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] public BigFraction(final double value, final int maxDenominator) throws FractionConversionException { [BUGGY] [BUGGY] this(value, 0, maxDenominator, 100); } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,int)  final double value final int maxDenominator [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double value int maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	add	
9	[BUG] [BUGGY] } [FE] FractionConversionException [CONTEXT] public BigFraction(final double value, final int maxDenominator) throws FractionConversionException { this(value, 0, maxDenominator, 100); [BUGGY] } [BUGGY]  [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,int)  final double value final int maxDenominator [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double value int maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	
10	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] public BigFraction(final double value, final int maxDenominator) throws FractionConversionException { this(value, 0, maxDenominator, 100); [BUGGY] [BUGGY] } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,int)  final double value final int maxDenominator [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double value int maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	add	
11	[BUG] [BUGGY] this(value, 0, maxDenominator, 100); [FE] FractionConversionException [CONTEXT] public Fraction(double value, int maxDenominator) throws FractionConversionException { [BUGGY] this(value, 0, maxDenominator, 100); [BUGGY] } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,int)  double value int maxDenominator [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON epsilon value long serialVersionUID int denominator maxDenominator maxIterations numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	
12	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] public Fraction(double value, int maxDenominator) throws FractionConversionException { [BUGGY] [BUGGY] this(value, 0, maxDenominator, 100); } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,int)  double value int maxDenominator [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON epsilon value long serialVersionUID int denominator maxDenominator maxIterations numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	add	
13	[BUG] [BUGGY] } [FE] FractionConversionException [CONTEXT] public Fraction(double value, int maxDenominator) throws FractionConversionException { this(value, 0, maxDenominator, 100); [BUGGY] } [BUGGY]  [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,int)  double value int maxDenominator [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON epsilon value long serialVersionUID int denominator maxDenominator maxIterations numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	
14	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] public Fraction(double value, int maxDenominator) throws FractionConversionException { this(value, 0, maxDenominator, 100); [BUGGY] [BUGGY] } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,int)  double value int maxDenominator [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON epsilon value long serialVersionUID int denominator maxDenominator maxIterations numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	add	
15	[BUG] [BUGGY] throw new FractionConversionException(value, p2, q2); [FE] FractionConversionException [CONTEXT] do { ++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   [BUGGY] throw new FractionConversionException(value, p2, q2); [BUGGY] } double convergent = (double)p2 / (double)q2; if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	
16	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] do { ++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   [BUGGY] [BUGGY] throw new FractionConversionException(value, p2, q2); } double convergent = (double)p2 / (double)q2; if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	
17	[BUG] [BUGGY] this.numerator = (int) p1; [FE] FractionConversionException [CONTEXT] if (q2 < maxDenominator) { this.numerator = (int) p2; this.denominator = (int) q2; } else { [BUGGY] this.numerator = (int) p1; [BUGGY] this.denominator = (int) q1; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	
18	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if (q2 < maxDenominator) { this.numerator = (int) p2; this.denominator = (int) q2; } else { [BUGGY] [BUGGY] this.numerator = (int) p1; this.denominator = (int) q1; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	add	
19	[BUG] [BUGGY] this.denominator = (int) q1; [FE] FractionConversionException [CONTEXT] if (q2 < maxDenominator) { this.numerator = (int) p2; this.denominator = (int) q2; } else { this.numerator = (int) p1; [BUGGY] this.denominator = (int) q1; [BUGGY] } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	
20	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if (q2 < maxDenominator) { this.numerator = (int) p2; this.denominator = (int) q2; } else { this.numerator = (int) p1; [BUGGY] [BUGGY] this.denominator = (int) q1; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	add	
21	[BUG] [BUGGY] numerator = BigInteger.valueOf(p2); [FE] FractionConversionException [CONTEXT] } else { stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } if (q2 < maxDenominator) { [BUGGY] numerator = BigInteger.valueOf(p2); [BUGGY] denominator = BigInteger.valueOf(q2); } else { numerator = BigInteger.valueOf(p1); denominator = BigInteger.valueOf(q1); } } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	329	329	2	replace	
22	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] } else { stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } if (q2 < maxDenominator) { [BUGGY] [BUGGY] numerator = BigInteger.valueOf(p2); denominator = BigInteger.valueOf(q2); } else { numerator = BigInteger.valueOf(p1); denominator = BigInteger.valueOf(q1); } } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	329	329	2	add	
23	[BUG] [BUGGY] denominator = BigInteger.valueOf(q2); [FE] FractionConversionException [CONTEXT] stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } if (q2 < maxDenominator) { numerator = BigInteger.valueOf(p2); [BUGGY] denominator = BigInteger.valueOf(q2); [BUGGY] } else { numerator = BigInteger.valueOf(p1); denominator = BigInteger.valueOf(q1); } } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	
24	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } if (q2 < maxDenominator) { numerator = BigInteger.valueOf(p2); [BUGGY] [BUGGY] denominator = BigInteger.valueOf(q2); } else { numerator = BigInteger.valueOf(p1); denominator = BigInteger.valueOf(q1); } } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	add	
25	[BUG] [BUGGY] if (q2 < maxDenominator) { [FE] FractionConversionException [CONTEXT] r0 = r1; } else { stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } [BUGGY] if (q2 < maxDenominator) { [BUGGY] numerator = BigInteger.valueOf(p2); denominator = BigInteger.valueOf(q2); } else { numerator = BigInteger.valueOf(p1); denominator = BigInteger.valueOf(q1); } } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.31622776601683794	328	328	2	replace	
26	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] r0 = r1; } else { stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } [BUGGY] [BUGGY] if (q2 < maxDenominator) { numerator = BigInteger.valueOf(p2); denominator = BigInteger.valueOf(q2); } else { numerator = BigInteger.valueOf(p1); denominator = BigInteger.valueOf(q1); } } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.31622776601683794	328	328	2	add	
27	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if (q2 < maxDenominator) { numerator = BigInteger.valueOf(p2); denominator = BigInteger.valueOf(q2); } else { numerator = BigInteger.valueOf(p1); denominator = BigInteger.valueOf(q1); } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.31622776601683794	335	335	2	replace	
28	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if (q2 < maxDenominator) { numerator = BigInteger.valueOf(p2); denominator = BigInteger.valueOf(q2); } else { numerator = BigInteger.valueOf(p1); denominator = BigInteger.valueOf(q1); } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.31622776601683794	335	335	2	add	
29	[BUG] [BUGGY] this.numerator = (int) p2; [FE] FractionConversionException [CONTEXT] } else { stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } if (q2 < maxDenominator) { [BUGGY] this.numerator = (int) p2; [BUGGY] this.denominator = (int) q2; } else { this.numerator = (int) p1; this.denominator = (int) q1; } } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.31622776601683794	236	236	2	replace	
30	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] } else { stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } if (q2 < maxDenominator) { [BUGGY] [BUGGY] this.numerator = (int) p2; this.denominator = (int) q2; } else { this.numerator = (int) p1; this.denominator = (int) q1; } } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.31622776601683794	236	236	2	add	
31	[BUG] [BUGGY] this.denominator = (int) q2; [FE] FractionConversionException [CONTEXT] stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } if (q2 < maxDenominator) { this.numerator = (int) p2; [BUGGY] this.denominator = (int) q2; [BUGGY] } else { this.numerator = (int) p1; this.denominator = (int) q1; } } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.31622776601683794	237	237	2	replace	
32	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } if (q2 < maxDenominator) { this.numerator = (int) p2; [BUGGY] [BUGGY] this.denominator = (int) q2; } else { this.numerator = (int) p1; this.denominator = (int) q1; } } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.31622776601683794	237	237	2	add	
33	[BUG] [BUGGY] throws FractionConversionException { [FE] FractionConversionException [CONTEXT] [BUGGY] throws FractionConversionException { [BUGGY] long overflow = Integer.MAX_VALUE; double r0 = value; long a0 = (long) FastMath.floor(r0); if (a0 > overflow) { throw new FractionConversionException(value, a0, 1l); }   if (FastMath.abs(a0 - value) < epsilon) { [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	
34	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] [BUGGY] [BUGGY] throws FractionConversionException { long overflow = Integer.MAX_VALUE; double r0 = value; long a0 = (long) FastMath.floor(r0); if (a0 > overflow) { throw new FractionConversionException(value, a0, 1l); }   if (FastMath.abs(a0 - value) < epsilon) { [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	add	
35	[BUG] [BUGGY] long overflow = Integer.MAX_VALUE; [FE] FractionConversionException [CONTEXT] throws FractionConversionException { [BUGGY] long overflow = Integer.MAX_VALUE; [BUGGY] double r0 = value; long a0 = (long) FastMath.floor(r0); if (a0 > overflow) { throw new FractionConversionException(value, a0, 1l); }   if (FastMath.abs(a0 - value) < epsilon) { numerator = BigInteger.valueOf(a0); [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	272	272	2	replace	
36	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] throws FractionConversionException { [BUGGY] [BUGGY] long overflow = Integer.MAX_VALUE; double r0 = value; long a0 = (long) FastMath.floor(r0); if (a0 > overflow) { throw new FractionConversionException(value, a0, 1l); }   if (FastMath.abs(a0 - value) < epsilon) { numerator = BigInteger.valueOf(a0); [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	272	272	2	add	
37	[BUG] [BUGGY] double r0 = value; [FE] FractionConversionException [CONTEXT] throws FractionConversionException { long overflow = Integer.MAX_VALUE; [BUGGY] double r0 = value; [BUGGY] long a0 = (long) FastMath.floor(r0); if (a0 > overflow) { throw new FractionConversionException(value, a0, 1l); }   if (FastMath.abs(a0 - value) < epsilon) { numerator = BigInteger.valueOf(a0); denominator = BigInteger.ONE; [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	273	273	2	replace	
38	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] throws FractionConversionException { long overflow = Integer.MAX_VALUE; [BUGGY] [BUGGY] double r0 = value; long a0 = (long) FastMath.floor(r0); if (a0 > overflow) { throw new FractionConversionException(value, a0, 1l); }   if (FastMath.abs(a0 - value) < epsilon) { numerator = BigInteger.valueOf(a0); denominator = BigInteger.ONE; [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	273	273	2	add	
39	[BUG] [BUGGY] long a0 = (long) FastMath.floor(r0); [FE] FractionConversionException [CONTEXT] throws FractionConversionException { long overflow = Integer.MAX_VALUE; double r0 = value; [BUGGY] long a0 = (long) FastMath.floor(r0); [BUGGY] if (a0 > overflow) { throw new FractionConversionException(value, a0, 1l); }   if (FastMath.abs(a0 - value) < epsilon) { numerator = BigInteger.valueOf(a0); denominator = BigInteger.ONE; return; [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	274	274	2	replace	
40	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] throws FractionConversionException { long overflow = Integer.MAX_VALUE; double r0 = value; [BUGGY] [BUGGY] long a0 = (long) FastMath.floor(r0); if (a0 > overflow) { throw new FractionConversionException(value, a0, 1l); }   if (FastMath.abs(a0 - value) < epsilon) { numerator = BigInteger.valueOf(a0); denominator = BigInteger.ONE; return; [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	274	274	2	add	
41	[BUG] [BUGGY] if (a0 > overflow) { [FE] FractionConversionException [CONTEXT] throws FractionConversionException { long overflow = Integer.MAX_VALUE; double r0 = value; long a0 = (long) FastMath.floor(r0); [BUGGY] if (a0 > overflow) { [BUGGY] throw new FractionConversionException(value, a0, 1l); }   if (FastMath.abs(a0 - value) < epsilon) { numerator = BigInteger.valueOf(a0); denominator = BigInteger.ONE; return; } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	275	275	2	replace	
42	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] throws FractionConversionException { long overflow = Integer.MAX_VALUE; double r0 = value; long a0 = (long) FastMath.floor(r0); [BUGGY] [BUGGY] if (a0 > overflow) { throw new FractionConversionException(value, a0, 1l); }   if (FastMath.abs(a0 - value) < epsilon) { numerator = BigInteger.valueOf(a0); denominator = BigInteger.ONE; return; } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	275	275	2	add	
43	[BUG] [BUGGY] if (FastMath.abs(a0 - value) < epsilon) { [FE] FractionConversionException [CONTEXT] throws FractionConversionException { long overflow = Integer.MAX_VALUE; double r0 = value; long a0 = (long) FastMath.floor(r0); if (a0 > overflow) { throw new FractionConversionException(value, a0, 1l); }   [BUGGY] if (FastMath.abs(a0 - value) < epsilon) { [BUGGY] numerator = BigInteger.valueOf(a0); denominator = BigInteger.ONE; return; } long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1;  [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	281	281	2	replace	
44	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] throws FractionConversionException { long overflow = Integer.MAX_VALUE; double r0 = value; long a0 = (long) FastMath.floor(r0); if (a0 > overflow) { throw new FractionConversionException(value, a0, 1l); }   [BUGGY] [BUGGY] if (FastMath.abs(a0 - value) < epsilon) { numerator = BigInteger.valueOf(a0); denominator = BigInteger.ONE; return; } long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1;  [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	281	281	2	add	
45	[BUG] [BUGGY] long p0 = 1; [FE] FractionConversionException [CONTEXT] }   if (FastMath.abs(a0 - value) < epsilon) { numerator = BigInteger.valueOf(a0); denominator = BigInteger.ONE; return; } [BUGGY] long p0 = 1; [BUGGY] long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	287	287	2	replace	
46	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] }   if (FastMath.abs(a0 - value) < epsilon) { numerator = BigInteger.valueOf(a0); denominator = BigInteger.ONE; return; } [BUGGY] [BUGGY] long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	287	287	2	add	
47	[BUG] [BUGGY] long q0 = 0; [FE] FractionConversionException [CONTEXT]   if (FastMath.abs(a0 - value) < epsilon) { numerator = BigInteger.valueOf(a0); denominator = BigInteger.ONE; return; } long p0 = 1; [BUGGY] long q0 = 0; [BUGGY] long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	288	288	2	replace	
48	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT]   if (FastMath.abs(a0 - value) < epsilon) { numerator = BigInteger.valueOf(a0); denominator = BigInteger.ONE; return; } long p0 = 1; [BUGGY] [BUGGY] long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	288	288	2	add	
49	[BUG] [BUGGY] long p1 = a0; [FE] FractionConversionException [CONTEXT]   if (FastMath.abs(a0 - value) < epsilon) { numerator = BigInteger.valueOf(a0); denominator = BigInteger.ONE; return; } long p0 = 1; long q0 = 0; [BUGGY] long p1 = a0; [BUGGY] long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; final double r1 = 1.0 / (r0 - a0); [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	289	289	2	replace	
50	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT]   if (FastMath.abs(a0 - value) < epsilon) { numerator = BigInteger.valueOf(a0); denominator = BigInteger.ONE; return; } long p0 = 1; long q0 = 0; [BUGGY] [BUGGY] long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; final double r1 = 1.0 / (r0 - a0); [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	289	289	2	add	
51	[BUG] [BUGGY] long q1 = 1; [FE] FractionConversionException [CONTEXT]  if (FastMath.abs(a0 - value) < epsilon) { numerator = BigInteger.valueOf(a0); denominator = BigInteger.ONE; return; } long p0 = 1; long q0 = 0; long p1 = a0; [BUGGY] long q1 = 1; [BUGGY]  long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	290	290	2	replace	
52	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT]  if (FastMath.abs(a0 - value) < epsilon) { numerator = BigInteger.valueOf(a0); denominator = BigInteger.ONE; return; } long p0 = 1; long q0 = 0; long p1 = a0; [BUGGY] [BUGGY] long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	290	290	2	add	
53	[BUG] [BUGGY] long p2 = 0; [FE] FractionConversionException [CONTEXT] numerator = BigInteger.valueOf(a0); denominator = BigInteger.ONE; return; } long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1; [BUGGY] long p2 = 0; [BUGGY] long q2 = 1; int n = 0; boolean stop = false; do { ++n; final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	292	292	2	replace	
54	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] numerator = BigInteger.valueOf(a0); denominator = BigInteger.ONE; return; } long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1; [BUGGY] [BUGGY] long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	292	292	2	add	
55	[BUG] [BUGGY] long q2 = 1; [FE] FractionConversionException [CONTEXT] denominator = BigInteger.ONE; return; } long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; [BUGGY] long q2 = 1; [BUGGY]  int n = 0; boolean stop = false; do { ++n; final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((p2 > overflow) || (q2 > overflow)) { [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	293	293	2	replace	
56	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] denominator = BigInteger.ONE; return; } long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; [BUGGY] [BUGGY] long q2 = 1; int n = 0; boolean stop = false; do { ++n; final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((p2 > overflow) || (q2 > overflow)) { [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	293	293	2	add	
57	[BUG] [BUGGY] int n = 0; [FE] FractionConversionException [CONTEXT] } long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; [BUGGY] int n = 0; [BUGGY] boolean stop = false; do { ++n; final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((p2 > overflow) || (q2 > overflow)) {   [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	295	295	2	replace	
58	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] } long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; [BUGGY] [BUGGY] int n = 0; boolean stop = false; do { ++n; final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((p2 > overflow) || (q2 > overflow)) {   [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	295	295	2	add	
59	[BUG] [BUGGY] boolean stop = false; [FE] FractionConversionException [CONTEXT] long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; [BUGGY] boolean stop = false; [BUGGY] do { ++n; final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((p2 > overflow) || (q2 > overflow)) {   throw new FractionConversionException(value, p2, q2); [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	296	296	2	replace	
60	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; [BUGGY] [BUGGY] boolean stop = false; do { ++n; final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((p2 > overflow) || (q2 > overflow)) {   throw new FractionConversionException(value, p2, q2); [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	296	296	2	add	
61	[BUG] [BUGGY] ++n; [FE] FractionConversionException [CONTEXT] long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { [BUGGY] ++n; [BUGGY] final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((p2 > overflow) || (q2 > overflow)) {   throw new FractionConversionException(value, p2, q2); }  [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	298	298	2	replace	
62	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { [BUGGY] [BUGGY] ++n; final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((p2 > overflow) || (q2 > overflow)) {   throw new FractionConversionException(value, p2, q2); }  [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	298	298	2	add	
63	[BUG] [BUGGY] final double r1 = 1.0 / (r0 - a0); [FE] FractionConversionException [CONTEXT] long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; [BUGGY] final double r1 = 1.0 / (r0 - a0); [BUGGY] final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((p2 > overflow) || (q2 > overflow)) {   throw new FractionConversionException(value, p2, q2); } final double convergent = (double) p2 / (double) q2; [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	299	299	2	replace	
64	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; [BUGGY] [BUGGY] final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((p2 > overflow) || (q2 > overflow)) {   throw new FractionConversionException(value, p2, q2); } final double convergent = (double) p2 / (double) q2; [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	299	299	2	add	
65	[BUG] [BUGGY] final long a1 = (long) FastMath.floor(r1); [FE] FractionConversionException [CONTEXT] long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; final double r1 = 1.0 / (r0 - a0); [BUGGY] final long a1 = (long) FastMath.floor(r1); [BUGGY] p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((p2 > overflow) || (q2 > overflow)) {   throw new FractionConversionException(value, p2, q2); } final double convergent = (double) p2 / (double) q2; if ((n < maxIterations) && [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	300	300	2	replace	
66	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; final double r1 = 1.0 / (r0 - a0); [BUGGY] [BUGGY] final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((p2 > overflow) || (q2 > overflow)) {   throw new FractionConversionException(value, p2, q2); } final double convergent = (double) p2 / (double) q2; if ((n < maxIterations) && [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	300	300	2	add	
67	[BUG] [BUGGY] p2 = (a1 * p1) + p0; [FE] FractionConversionException [CONTEXT] long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); [BUGGY] p2 = (a1 * p1) + p0; [BUGGY] q2 = (a1 * q1) + q0; if ((p2 > overflow) || (q2 > overflow)) {   throw new FractionConversionException(value, p2, q2); } final double convergent = (double) p2 / (double) q2; if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	301	301	2	replace	
68	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); [BUGGY] [BUGGY] p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((p2 > overflow) || (q2 > overflow)) {   throw new FractionConversionException(value, p2, q2); } final double convergent = (double) p2 / (double) q2; if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	301	301	2	add	
69	[BUG] [BUGGY] q2 = (a1 * q1) + q0; [FE] FractionConversionException [CONTEXT] long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; [BUGGY] q2 = (a1 * q1) + q0; [BUGGY] if ((p2 > overflow) || (q2 > overflow)) {   throw new FractionConversionException(value, p2, q2); } final double convergent = (double) p2 / (double) q2; if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	302	302	2	replace	
70	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; [BUGGY] [BUGGY] q2 = (a1 * q1) + q0; if ((p2 > overflow) || (q2 > overflow)) {   throw new FractionConversionException(value, p2, q2); } final double convergent = (double) p2 / (double) q2; if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	302	302	2	add	
71	[BUG] [BUGGY] if ((p2 > overflow) || (q2 > overflow)) { [FE] FractionConversionException [CONTEXT] long q2 = 1; int n = 0; boolean stop = false; do { ++n; final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; [BUGGY] if ((p2 > overflow) || (q2 > overflow)) { [BUGGY]   throw new FractionConversionException(value, p2, q2); } final double convergent = (double) p2 / (double) q2; if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { p0 = p1; [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	
72	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] long q2 = 1; int n = 0; boolean stop = false; do { ++n; final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; [BUGGY] [BUGGY] if ((p2 > overflow) || (q2 > overflow)) {   throw new FractionConversionException(value, p2, q2); } final double convergent = (double) p2 / (double) q2; if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { p0 = p1; [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	
73	[BUG] [BUGGY] final double convergent = (double) p2 / (double) q2; [FE] FractionConversionException [CONTEXT] final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((p2 > overflow) || (q2 > overflow)) {   throw new FractionConversionException(value, p2, q2); } [BUGGY] final double convergent = (double) p2 / (double) q2; [BUGGY] if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	309	309	2	replace	
74	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((p2 > overflow) || (q2 > overflow)) {   throw new FractionConversionException(value, p2, q2); } [BUGGY] [BUGGY] final double convergent = (double) p2 / (double) q2; if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	309	309	2	add	
75	[BUG] [BUGGY] if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) &&  (q2 < maxDenominator)) { [FE] FractionConversionException [CONTEXT] final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((p2 > overflow) || (q2 > overflow)) {   throw new FractionConversionException(value, p2, q2); } final double convergent = (double) p2 / (double) q2; [BUGGY] if ((n < maxIterations) &&    (FastMath.abs(convergent - value) > epsilon) &&        (q2 < maxDenominator)) { [BUGGY] (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	
76	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((p2 > overflow) || (q2 > overflow)) {   throw new FractionConversionException(value, p2, q2); } final double convergent = (double) p2 / (double) q2; [BUGGY] [BUGGY] if ((n < maxIterations) &&    (FastMath.abs(convergent - value) > epsilon) &&        (q2 < maxDenominator)) { (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	add	
77	[BUG] [BUGGY] p0 = p1; [FE] FractionConversionException [CONTEXT] if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { [BUGGY] p0 = p1; [BUGGY] p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	313	313	2	replace	
78	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { [BUGGY] [BUGGY] p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	313	313	2	add	
79	[BUG] [BUGGY] p1 = p2; [FE] FractionConversionException [CONTEXT] if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { p0 = p1; [BUGGY] p1 = p2; [BUGGY] q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	314	314	2	replace	
80	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { p0 = p1; [BUGGY] [BUGGY] p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	314	314	2	add	
81	[BUG] [BUGGY] q0 = q1; [FE] FractionConversionException [CONTEXT] if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { p0 = p1; p1 = p2; [BUGGY] q0 = q1; [BUGGY] q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	315	315	2	replace	
82	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { p0 = p1; p1 = p2; [BUGGY] [BUGGY] q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	315	315	2	add	
83	[BUG] [BUGGY] q1 = q2; [FE] FractionConversionException [CONTEXT] if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { p0 = p1; p1 = p2; q0 = q1; [BUGGY] q1 = q2; [BUGGY] a0 = a1; r0 = r1; } else { stop = true; } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	316	316	2	replace	
84	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { p0 = p1; p1 = p2; q0 = q1; [BUGGY] [BUGGY] q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	316	316	2	add	
85	[BUG] [BUGGY] a0 = a1; [FE] FractionConversionException [CONTEXT] if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; [BUGGY] a0 = a1; [BUGGY] r0 = r1; } else { stop = true; } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	317	317	2	replace	
86	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; [BUGGY] [BUGGY] a0 = a1; r0 = r1; } else { stop = true; } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	317	317	2	add	
87	[BUG] [BUGGY] r0 = r1; [FE] FractionConversionException [CONTEXT] if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; [BUGGY] r0 = r1; [BUGGY] } else { stop = true; } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	318	318	2	replace	
88	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; [BUGGY] [BUGGY] r0 = r1; } else { stop = true; } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	318	318	2	add	
89	[BUG] [BUGGY] stop = true; [FE] FractionConversionException [CONTEXT] if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { [BUGGY] stop = true; [BUGGY] } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	320	320	2	replace	
90	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { [BUGGY] [BUGGY] stop = true; } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	320	320	2	add	
91	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] (q2 < maxDenominator)) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	322	322	2	replace	
92	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] (q2 < maxDenominator)) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	322	322	2	add	
93	[BUG] [BUGGY] if (n >= maxIterations) { [FE] FractionConversionException [CONTEXT] p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } } while (!stop); [BUGGY] if (n >= maxIterations) { [BUGGY] throw new FractionConversionException(value, maxIterations); } if (q2 < maxDenominator) { numerator = BigInteger.valueOf(p2); denominator = BigInteger.valueOf(q2); } else { numerator = BigInteger.valueOf(p1); denominator = BigInteger.valueOf(q1); } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	324	324	2	replace	
94	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } } while (!stop); [BUGGY] [BUGGY] if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } if (q2 < maxDenominator) { numerator = BigInteger.valueOf(p2); denominator = BigInteger.valueOf(q2); } else { numerator = BigInteger.valueOf(p1); denominator = BigInteger.valueOf(q1); } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigFraction(double,double,int,int)  final double value final double epsilon final int maxDenominator int maxIterations [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean stop BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long a0 a1 bits exponent m overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double convergent epsilon r0 r1 value int maxDenominator maxIterations n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	324	324	2	add	
95	[BUG] [BUGGY] if (q2 < maxDenominator) { [FE] FractionConversionException [CONTEXT] r0 = r1; } else { stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } [BUGGY] if (q2 < maxDenominator) { [BUGGY] this.numerator = (int) p2; this.denominator = (int) q2; } else { this.numerator = (int) p1; this.denominator = (int) q1; } } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2886751345948129	235	235	2	replace	
96	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] r0 = r1; } else { stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } [BUGGY] [BUGGY] if (q2 < maxDenominator) { this.numerator = (int) p2; this.denominator = (int) q2; } else { this.numerator = (int) p1; this.denominator = (int) q1; } } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2886751345948129	235	235	2	add	
98	[BUG] [BUGGY] stop = true; [FE] FractionConversionException [CONTEXT] if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { [BUGGY] stop = true; [BUGGY] } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2672612419124244	227	227	2	replace	
99	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { [BUGGY] [BUGGY] stop = true; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2672612419124244	227	227	2	add	
