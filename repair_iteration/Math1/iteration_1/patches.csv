bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	original_buggy	action	patch	execution_result	diagnosis	previous_bug_id	new_failing_test_number
1	[BUG]  [BUGGY]  if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  throw  new  FractionConversionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  throw  new  FractionConversionException( " ");  }	      setDenominator(value);    	non-compiled	[CE]  illegal  start  of  expression	65	None
2	[BUG]  [BUGGY]  if(maxDenominator  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  throw  new  FractionConversionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(maxDenominator  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	if(maxDenominator  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  throw  new  FractionConversionException( " ");  }	      setDenominator(value);    	non-compiled	[CE]  illegal  start  of  expression	65	None
4	[BUG]  [BUGGY]  if(value  >  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  throw  new  FractionConversionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(value  >  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	if(value  >  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  throw  new  FractionConversionException( " ");  }	      setDenominator(value);    	non-compiled	[CE]  illegal  start  of  expression	65	None
12	[BUG]  [BUGGY]  this(value,  0,  denominator,  1000);  [CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  denominator,  1000);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  denominator,  1000);	  this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called	34	None
21	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  denominator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator    =    BigInteger.valueOf(p2);    denominator  =  BigInteger.valueOf(q2);	  	non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	72	None
22	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(p2);  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  denominator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(p2);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator    =    BigInteger.valueOf(p2);    denominator  =  BigInteger.valueOf(p2);	  	non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	72	None
23	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p2);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  denominator  =  BigInteger.valueOf(p2);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator    =    BigInteger.valueOf(p2);    if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	72	None
24	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p2);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(q3);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  denominator  =  BigInteger.valueOf(p2);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator    =    BigInteger.valueOf(p2);    if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(q3);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	72	None
25	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p2);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(q3);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  denominator  =  BigInteger.valueOf(p2);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator    =    BigInteger.valueOf(p2);    if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(q3);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	72	None
61	[BUG]  [BUGGY]  setMaximumFractionDenominator(value,  maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumFractionDenominator(value,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumFractionDenominator(value,  maxDenominator);	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  cannot  find  symbol	44	None
62	[BUG]  [BUGGY]  setMaximumFractionDenominator(maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumFractionDenominator(maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumFractionDenominator(maxDenominator);	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  cannot  find  symbol	44	None
63	[BUG]  [BUGGY]  setMaximumFractionDenominator(minDenominator);  [CE]  cannot  find  symbol  minDenominator  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumFractionDenominator(minDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumFractionDenominator(minDenominator);	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  cannot  find  symbol  minDenominator	44	None
64	[BUG]  [BUGGY]  setMaximumFractionDenominator(maxDenominator,  value);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumFractionDenominator(maxDenominator,  value);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumFractionDenominator(maxDenominator,  value);	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  cannot  find  symbol	44	None
71	[BUG]  [BUGGY]  this(value,  0,  value,  maxDenominator,  0);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this(value,  0,  value,  maxDenominator,  0);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this(value,  0,  value,  maxDenominator,  0);	      p2    =    Math.floor(r1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	124	None
72	[BUG]  [BUGGY]  this(value,  0,  value,  maxDenominator,  denominator);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this(value,  0,  value,  maxDenominator,  denominator);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this(value,  0,  value,  maxDenominator,  denominator);	      p2    =    Math.floor(r1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	124	None
73	[BUG]  [BUGGY]  this(value,  0,  value,  maxDenominator,  null);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this(value,  0,  value,  maxDenominator,  null);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this(value,  0,  value,  maxDenominator,  null);	      p2    =    Math.floor(r1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	124	None
74	[BUG]  [BUGGY]  this(value,  0,  value,  maxDenominator,  ZERO);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this(value,  0,  value,  maxDenominator,  ZERO);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this(value,  0,  value,  maxDenominator,  ZERO);	      p2    =    Math.floor(r1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	124	None
82	[BUG]  [BUGGY]  this(value,  0,  value.doubleValue(),  denominator,  100);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value.doubleValue(),  denominator,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value.doubleValue(),  denominator,  100);	  this(value,    0,    value.doubleValue(),    maxDenominator,    100);    	non-compiled	[CE]  double  cannot  be  dereferenced	224	None
83	[BUG]  [BUGGY]  this(value,  0,  maxDenominator.doubleValue(),  value,  100);  [CE]  int  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator.doubleValue(),  value,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  maxDenominator.doubleValue(),  value,  100);	  this(value,    0,    value.doubleValue(),    maxDenominator,    100);    	non-compiled	[CE]  int  cannot  be  dereferenced	224	None
84	[BUG]  [BUGGY]  this(value,  0,  numerator.doubleValue(),  maxDenominator,  100);  [CE]  cannot  reference  numerator  before  supertype  constructor  has  been  called  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  numerator.doubleValue(),  maxDenominator,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  numerator.doubleValue(),  maxDenominator,  100);	  this(value,    0,    value.doubleValue(),    maxDenominator,    100);    	non-compiled	[CE]  cannot  reference  numerator  before  supertype  constructor  has  been  called	224	None
92	[BUG]  [BUGGY]  p2  =  Math.floor(r1);  q2  =  Math.abs(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(r1);  q2  =  Math.abs(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(r1);  q2  =  Math.abs(q2);	      p2    =    Math.floor(a1);    q2    =    Math.abs(q2);    	non-compiled	[CE]  possible  loss  of  precision	242	None
93	[BUG]  [BUGGY]  p2  =  Math.ceil(a1);  q2  =  Math.abs(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.ceil(a1);  q2  =  Math.abs(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.ceil(a1);  q2  =  Math.abs(q2);	      p2    =    Math.floor(a1);    q2    =    Math.abs(q2);    	non-compiled	[CE]  possible  loss  of  precision	242	None
94	[BUG]  [BUGGY]  p2  =  Math.floor(a2);  q2  =  Math.abs(q2);  [CE]  cannot  find  symbol  a2  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a2);  q2  =  Math.abs(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(a2);  q2  =  Math.abs(q2);	      p2    =    Math.floor(a1);    q2    =    Math.abs(q2);    	non-compiled	[CE]  cannot  find  symbol  a2	242	None
101	[BUG]  [BUGGY]  if(denominator  >  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( "   ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(denominator  >  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( "   ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(denominator  >  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( "   ");  }	  setDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  expression	101	None
102	[BUG]  [BUGGY]  if(numerator  >=  0)  {  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( "   ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(numerator  >=  0)  {  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( "   ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(numerator  >=  0)  {  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( "   ");  }	  setDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  expression	101	None
111	[BUG]  [BUGGY]  setMinimumFraction(maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setMinimumFraction(maxDenominator);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setMinimumFraction(maxDenominator);	  setMaximumFraction(maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	203	None
112	[BUG]  [BUGGY]  setMinimumFraction(minDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setMinimumFraction(minDenominator);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setMinimumFraction(minDenominator);	  setMaximumFraction(maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	203	None
113	[BUG]  [BUGGY]  setMinimumFraction(numerator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setMinimumFraction(numerator);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setMinimumFraction(numerator);	  setMaximumFraction(maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	203	None
123	[BUG]  [BUGGY]  this(value,  0,  minDenominator,  100);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  minDenominator,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this(value,  0,  minDenominator,  100);	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	63	None
124	[BUG]  [BUGGY]  this(value,  0,  epsilon,  100);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  epsilon,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this(value,  0,  epsilon,  100);	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	63	None
131	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(p2);  q2  =  Math.floor(q1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(p2);  q2  =  Math.floor(q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p2  =  Math.floor(p2);  q2  =  Math.floor(q1);	  	non-compiled	[CE]  possible  loss  of  precision	152	None
132	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(p1);  q2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(p1);  q2  =  Math.floor(q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p2  =  Math.floor(p1);  q2  =  Math.floor(q2);	  	non-compiled	[CE]  possible  loss  of  precision	152	None
133	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(p0);  q2  =  Math.floor(q1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(p0);  q2  =  Math.floor(q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p2  =  Math.floor(p0);  q2  =  Math.floor(q1);	  	non-compiled	[CE]  possible  loss  of  precision	152	None
134	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(p2);  q2  =  Math.floor(q3);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(p2);  q2  =  Math.floor(q3);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p2  =  Math.floor(p2);  q2  =  Math.floor(q3);	  	non-compiled	[CE]  possible  loss  of  precision	152	None
135	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.ceil(p2);  q2  =  Math.floor(q1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.ceil(p2);  q2  =  Math.floor(q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p2  =  Math.ceil(p2);  q2  =  Math.floor(q1);	  	non-compiled	[CE]  possible  loss  of  precision	152	None
141	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  maxDenominator,  1000);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  maxDenominator,  1000);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,    0,    maxDenominator,    1000);    this(value,  0,  maxDenominator,  1000);	  	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	33	None
142	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  maxDenominator,  10);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  maxDenominator,  10);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,    0,    maxDenominator,    1000);    this(value,  0,  maxDenominator,  10);	  	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	33	None
143	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  denominator,  1000);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  denominator,  1000);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,    0,    maxDenominator,    1000);    this(value,  0,  denominator,  1000);	  	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	33	None
144	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  maxDenominator,  999);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  maxDenominator,  999);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,    0,    maxDenominator,    1000);    this(value,  0,  maxDenominator,  999);	  	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	33	None
145	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  setDenominator(maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  setDenominator(maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,    0,    maxDenominator,    1000);    setDenominator(maxDenominator);	  	non-compiled	[CE]  cannot  find  symbol	33	None
151	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p1,  q1,  p2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(p1,  q1,  p2);	  throw    new    FractionConversionException(p0,    q1,    p2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	284	2
152	[BUG]  [BUGGY]  throw  new  FractionConversionException(p1,  q1,  p2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p1,  q1,  p2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(p1,  q1,  p2);	  throw    new    FractionConversionException(p0,    q1,    p2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	284	2
152	[BUG]  [BUGGY]  throw  new  FractionConversionException(p1,  p2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(long,long)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p1,  p2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(p1,  p2);	  throw    new    FractionConversionException(p0,    q1,    p2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(long,long)	284	None
154	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p0,  p1,  p2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(p0,  p1,  p2);	  throw    new    FractionConversionException(p0,    q1,    p2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	284	2
155	[BUG]  [BUGGY]  throw  new  FractionConversionException(p0,  p1,  p2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p0,  p1,  p2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(p0,  p1,  p2);	  throw    new    FractionConversionException(p0,    q1,    p2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	284	2
161	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  overflow);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  overflow);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  epsilon,  overflow);	  throw    new    FractionConversionException(value,    p2,    overflow);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long)	155	None
163	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  epsilon);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,double)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  epsilon);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  p2,  epsilon);	  throw    new    FractionConversionException(value,    p2,    overflow);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,double)	155	None
164	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p1,  overflow);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	throw  new  FractionConversionException(value,  p1,  overflow);	  throw    new    FractionConversionException(value,    p2,    overflow);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	155	2
165	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p1,  overflow);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p1,  overflow);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  p1,  overflow);	  throw    new    FractionConversionException(value,    p2,    overflow);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	155	2
172	[BUG]  [BUGGY]  super(value,  maxDenominator);  [CE]  constructor  Number  in  class  Number  cannot  be  applied  to  given  types;  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super(value,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super(value,  maxDenominator);	      super();    	non-compiled	[CE]  constructor  Number  in  class  Number  cannot  be  applied  to  given  types;	41	None
173	[BUG]  [BUGGY]  checkLimits(value,  numerator);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  checkLimits(value,  numerator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	checkLimits(value,  numerator);	      super();    	non-compiled	[CE]  cannot  find  symbol	41	None
174	[BUG]  [BUGGY]  checkInvariant();  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  checkInvariant();  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	checkInvariant();	      super();    	non-compiled	[CE]  cannot  find  symbol	41	None
191	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(numerator);  [CE]  no  suitable  method  found  for  valueOf(BigInteger)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  denominator  =  BigInteger.valueOf(numerator);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	denominator  =  BigInteger.valueOf(numerator);	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(BigInteger)	4	None
192	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(q2);  [CE]  variable  denominator  might  be  assigned  in  loop  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  denominator  =  BigInteger.valueOf(q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	denominator  =  BigInteger.valueOf(q2);	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  variable  denominator  might  be  assigned  in  loop	4	None
193	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p2);  [CE]  variable  denominator  might  be  assigned  in  loop  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  denominator  =  BigInteger.valueOf(p2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	denominator  =  BigInteger.valueOf(p2);	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  variable  denominator  might  be  assigned  in  loop	4	None
194	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(null);  [CE]  valueOf(int[])  has  private  access  in  BigInteger  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  denominator  =  BigInteger.valueOf(null);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	denominator  =  BigInteger.valueOf(null);	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  valueOf(int[])  has  private  access  in  BigInteger	4	None
202	[BUG]  [BUGGY]  this.denominator  =  Math.abs(q2  /  q1);  [CE]  possible  loss  of  precision  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =  Math.abs(q2  /  q1);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator  =  Math.abs(q2  /  q1);	      this.denominator    =    Math.abs(q2    -    q1);    	non-compiled	[CE]  possible  loss  of  precision	514	None
203	[BUG]  [BUGGY]  this.denominator  =  Math.abs(p2  -  q1);  [CE]  possible  loss  of  precision  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =  Math.abs(p2  -  q1);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator  =  Math.abs(p2  -  q1);	      this.denominator    =    Math.abs(q2    -    q1);    	non-compiled	[CE]  possible  loss  of  precision	514	None
204	[BUG]  [BUGGY]  this.denominator  =  Math.abs(maxDenominator  -  q1);  [CE]  possible  loss  of  precision  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =  Math.abs(maxDenominator  -  q1);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator  =  Math.abs(maxDenominator  -  q1);	      this.denominator    =    Math.abs(q2    -    q1);    	non-compiled	[CE]  possible  loss  of  precision	514	None
212	[BUG]  [BUGGY]  if(denominator  <  0)  {  this(value,  0,  denominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(denominator  <  0)  {  this(value,  0,  denominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	if(denominator  <  0)  {  this(value,  0,  denominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }	      this(value,    0,    denominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	64	None
213	[BUG]  [BUGGY]  if(denominator  <  0)  {  this(value,  0,  denominator,  100);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(denominator  <  0)  {  this(value,  0,  denominator,  100);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	if(denominator  <  0)  {  this(value,  0,  denominator,  100);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      this(value,    0,    denominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	64	None
214	[BUG]  [BUGGY]  if(denominator  <  0)  {  this(value,  0,  denominator,  100);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(denominator  <  0)  {  this(value,  0,  denominator,  100);  }  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	if(denominator  <  0)  {  this(value,  0,  denominator,  100);  }	      this(value,    0,    denominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	64	None
223	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p3);  [CE]  cannot  find  symbol  p3  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(p3);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator  =  BigInteger.valueOf(p3);	  numerator    =    BigInteger.valueOf(minDenominator);    	non-compiled	[CE]  cannot  find  symbol  p3	54	None
231	[BUG]  [BUGGY]  this.numerator  =(int)p2;  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.numerator  =(int)p2;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.numerator  =(int)p2;	      this.numerator    =(int)p1;    	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	512	None
242	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p2;  epsilon  =  q2;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	add	this.denominator  =(int)p2;  epsilon  =  q2;	      this.denominator    =(int)p1;    epsilon    =    q2;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	25	2
243	[BUG]  [BUGGY]  this.denominator  =(int)p2;  epsilon  =  q2;  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p2;  epsilon  =  q2;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator  =(int)p2;  epsilon  =  q2;	      this.denominator    =(int)p1;    epsilon    =    q2;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	25	2
243	[BUG]  [BUGGY]  if(epsilon  >  maxDenominator)  {  this.denominator  =(int)p1;  epsilon  =  q2;  }  else  {  this.numerator  =(int)p1;  }  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(epsilon  >  maxDenominator)  {  this.denominator  =(int)p1;  epsilon  =  q2;  }  else  {  this.numerator  =(int)p1;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(epsilon  >  maxDenominator)  {  this.denominator  =(int)p1;  epsilon  =  q2;  }  else  {  this.numerator  =(int)p1;  }	      this.denominator    =(int)p1;    epsilon    =    q2;    	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	25	None
244	[BUG]  [BUGGY]  if(epsilon  >  maxDenominator)  {  this.denominator  =(int)p1;  epsilon  =  q2;  }  [CE]  variable  denominator  might  not  have  been  initialized  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(epsilon  >  maxDenominator)  {  this.denominator  =(int)p1;  epsilon  =  q2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(epsilon  >  maxDenominator)  {  this.denominator  =(int)p1;  epsilon  =  q2;  }	      this.denominator    =(int)p1;    epsilon    =    q2;    	non-compiled	[CE]  variable  denominator  might  not  have  been  initialized	25	None
252	[BUG]  [BUGGY]  this.numerator  =  p2;  [CE]  possible  loss  of  precision  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =  p2;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =  p2;	      	non-compiled	[CE]  possible  loss  of  precision	115	None
253	[BUG]  [BUGGY]  this.numerator  =  epsilon;  [CE]  possible  loss  of  precision  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =  epsilon;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =  epsilon;	      	non-compiled	[CE]  possible  loss  of  precision	115	None
261	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.max(p2,  q0);  [CE]  cannot  find  symbol  a1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.max(p2,  q0);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(a1);  p2  =  Math.max(p2,  q0);	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    q2;    }    	non-compiled	[CE]  cannot  find  symbol  a1	85	None
262	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.max(p2,  q2);  [CE]  cannot  find  symbol  a1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.max(p2,  q2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(a1);  p2  =  Math.max(p2,  q2);	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    q2;    }    	non-compiled	[CE]  cannot  find  symbol  a1	85	None
263	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.max(q2,  p2);  [CE]  cannot  find  symbol  a1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.max(q2,  p2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(a1);  p2  =  Math.max(q2,  p2);	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    q2;    }    	non-compiled	[CE]  cannot  find  symbol  a1	85	None
264	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.max(q2,  a0);  [CE]  cannot  find  symbol  a1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.max(q2,  a0);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(a1);  p2  =  Math.max(q2,  a0);	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    q2;    }    	non-compiled	[CE]  cannot  find  symbol  a1	85	None
273	[BUG]  [BUGGY]  this(value,  0,  maximalDenominator,  100);  [CE]  cannot  find  symbol  maximalDenominator  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maximalDenominator,  100);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  maximalDenominator,  100);	  this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  cannot  find  symbol  maximalDenominator	193	None
274	[BUG]  [BUGGY]  this(value,  0,  numerator,  100);  [CE]  cannot  reference  numerator  before  supertype  constructor  has  been  called  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  numerator,  100);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  numerator,  100);	  this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  cannot  reference  numerator  before  supertype  constructor  has  been  called	193	None
282	[BUG]  [BUGGY]  throw  new  FractionConversionException(p1,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(long,long)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p1,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(p1,  q2);	  throw    new    FractionConversionException(value,    p0,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(long,long)	282	None
284	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p1,  q2,  p0);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(p1,  q2,  p0);	  throw    new    FractionConversionException(value,    p0,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	282	2
285	[BUG]  [BUGGY]  throw  new  FractionConversionException(p1,  q2,  p0);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p1,  q2,  p0);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(p1,  q2,  p0);	  throw    new    FractionConversionException(value,    p0,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	282	2
292	[BUG]  [BUGGY]  p2  =  Math.floor(r1);  q2  =  Math.round(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(r1);  q2  =  Math.round(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(r1);  q2  =  Math.round(q2);	      p2    =    Math.floor(a1);    q2    =    Math.round(q2);    	non-compiled	[CE]  possible  loss  of  precision	244	None
293	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.round(a1);  q2  =  Math.round(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	p2  =  Math.round(a1);  q2  =  Math.round(q2);	      p2    =    Math.floor(a1);    q2    =    Math.round(q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	244	2
294	[BUG]  [BUGGY]  p2  =  Math.round(a1);  q2  =  Math.round(q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.round(a1);  q2  =  Math.round(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.round(a1);  q2  =  Math.round(q2);	      p2    =    Math.floor(a1);    q2    =    Math.round(q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	244	2
294	[BUG]  [BUGGY]  p2  =  Math.floor(a2);  q2  =  Math.round(q2);  [CE]  cannot  find  symbol  a2  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a2);  q2  =  Math.round(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(a2);  q2  =  Math.round(q2);	      p2    =    Math.floor(a1);    q2    =    Math.round(q2);    	non-compiled	[CE]  cannot  find  symbol  a2	244	None
301	[BUG]  [BUGGY]  setMaximumDenominator(maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumDenominator(maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumDenominator(maxDenominator);	      super();    	non-compiled	[CE]  cannot  find  symbol	41	None
302	[BUG]  [BUGGY]  setMaximumDenominator(value,  maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumDenominator(value,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumDenominator(value,  maxDenominator);	      super();    	non-compiled	[CE]  cannot  find  symbol	41	None
303	[BUG]  [BUGGY]  setMaximumDenominator(minDenominator);  [CE]  cannot  find  symbol  minDenominator  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumDenominator(minDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumDenominator(minDenominator);	      super();    	non-compiled	[CE]  cannot  find  symbol  minDenominator	41	None
304	[BUG]  [BUGGY]  setMaximumDenominator(maxDenominator,  value);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumDenominator(maxDenominator,  value);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumDenominator(maxDenominator,  value);	      super();    	non-compiled	[CE]  cannot  find  symbol	41	None
312	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p0,  p2,  q1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(p0,  p2,  q1);	  throw    new    FractionConversionException(value,    p0,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	282	2
313	[BUG]  [BUGGY]  throw  new  FractionConversionException(p0,  p2,  q1);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p0,  p2,  q1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(p0,  p2,  q1);	  throw    new    FractionConversionException(value,    p0,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	282	2
313	[BUG]  [BUGGY]  p0  =  p1,  q1  -  q2;  [CE]  ';'  expected  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p0  =  p1,  q1  -  q2;  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p0  =  p1,  q1  -  q2;	  throw    new    FractionConversionException(value,    p0,    q2);    	non-compiled	[CE]  ';'  expected	282	None
314	[BUG]  [BUGGY]  p0  =  p1,  q1  -  a1.longValue();  [CE]  ';'  expected  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p0  =  p1,  q1  -  a1.longValue();  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p0  =  p1,  q1  -  a1.longValue();	  throw    new    FractionConversionException(value,    p0,    q2);    	non-compiled	[CE]  ';'  expected	282	None
321	[BUG]  [BUGGY]  setNumerator(denominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setNumerator(denominator);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setNumerator(denominator);	  this(value,    0,    denominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	104	None
322	[BUG]  [BUGGY]  setNumerator(numerator,  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setNumerator(numerator,  maxDenominator);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setNumerator(numerator,  maxDenominator);	  this(value,    0,    denominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	104	None
323	[BUG]  [BUGGY]  setNumerator(numerator,  denominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setNumerator(numerator,  denominator);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setNumerator(numerator,  denominator);	  this(value,    0,    denominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	104	None
332	[BUG]  [BUGGY]  p2  =  Math.floor(r1);  q2  =  Math.abs(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(r1);  q2  =  Math.abs(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(r1);  q2  =  Math.abs(q2);	      p2    =    Math.floor(a1);    q2    =    Math.abs(q2);    	non-compiled	[CE]  possible  loss  of  precision	123	None
333	[BUG]  [BUGGY]  p2  =  Math.ceil(a1);  q2  =  Math.abs(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.ceil(a1);  q2  =  Math.abs(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.ceil(a1);  q2  =  Math.abs(q2);	      p2    =    Math.floor(a1);    q2    =    Math.abs(q2);    	non-compiled	[CE]  possible  loss  of  precision	123	None
334	[BUG]  [BUGGY]  p2  =  Mat.floor(a1);  q2  =  Math.abs(q2);  [CE]  cannot  find  symbol  Mat  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Mat.floor(a1);  q2  =  Math.abs(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Mat.floor(a1);  q2  =  Math.abs(q2);	      p2    =    Math.floor(a1);    q2    =    Math.abs(q2);    	non-compiled	[CE]  cannot  find  symbol  Mat	123	None
342	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)/  Math.min(maxDenominator));  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setDenominator((  int)Math.abs(value)/  Math.min(maxDenominator));  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setDenominator((  int)Math.abs(value)/  Math.min(maxDenominator));	  setDenominator((    int)Math.abs(value)/    Math.abs(maxDenominator));    	non-compiled	[CE]  illegal  start  of  expression	574	None
343	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)/  Math.log(maxDenominator));  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setDenominator((  int)Math.abs(value)/  Math.log(maxDenominator));  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setDenominator((  int)Math.abs(value)/  Math.log(maxDenominator));	  setDenominator((    int)Math.abs(value)/    Math.abs(maxDenominator));    	non-compiled	[CE]  illegal  start  of  expression	574	None
344	[BUG]  [BUGGY]  setNumerator((  int)Math.abs(value)/  Math.abs(maxDenominator));  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setNumerator((  int)Math.abs(value)/  Math.abs(maxDenominator));  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setNumerator((  int)Math.abs(value)/  Math.abs(maxDenominator));	  setDenominator((    int)Math.abs(value)/    Math.abs(maxDenominator));    	non-compiled	[CE]  illegal  start  of  expression	574	None
351	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(numerator  >  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(numerator  >  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    if(numerator  >  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }	  	non-compiled	[CE]  while  expected	361	None
353	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(numerator  >  maxDenominator)  {  if(maxDenominator  <=  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(numerator  >  maxDenominator)  {  if(maxDenominator  <=  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    if(numerator  >  maxDenominator)  {  if(maxDenominator  <=  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }	  	non-compiled	[CE]  while  expected	361	None
354	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(numerator  >  maxDenominator)  {  if(maxDenominator  >=  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(numerator  >  maxDenominator)  {  if(maxDenominator  >=  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    if(numerator  >  maxDenominator)  {  if(maxDenominator  >=  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }	  	non-compiled	[CE]  while  expected	361	None
355	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(numerator  >  maxDenominator)  {  if(maxDenominator  >>  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(numerator  >  maxDenominator)  {  if(maxDenominator  >>  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    if(numerator  >  maxDenominator)  {  if(maxDenominator  >>  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }	  	non-compiled	[CE]  while  expected	361	None
361	[BUG]  [BUGGY]  if(value  <  0)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  0)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(value  <  0)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	43	None
362	[BUG]  [BUGGY]  if(value  >  0.0)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  >  0.0)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(value  >  0.0)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	43	None
363	[BUG]  [BUGGY]  if(value  >  maxDenominator)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  >  maxDenominator)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(value  >  maxDenominator)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	43	None
364	[BUG]  [BUGGY]  if(value  <  0.0)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  0.0)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(value  <  0.0)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	43	None
371	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p1,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	throw  new  FractionConversionException(value,  p1,  q2);	  throw    new    FractionConversionException(value,    p2,    q0);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	364	2
372	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p1,  q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p1,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  p1,  q2);	  throw    new    FractionConversionException(value,    p2,    q0);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	364	2
374	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p1,  q0);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	throw  new  FractionConversionException(value,  p1,  q0);	  throw    new    FractionConversionException(value,    p2,    q0);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	364	2
375	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p1,  q0);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p1,  q0);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  p1,  q0);	  throw    new    FractionConversionException(value,    p2,    q0);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	364	2
381	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  n,  p2,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,int,long,long)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  n,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  n,  p2,  q2);	  throw    new    FractionConversionException(n,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,int,long,long)	452	None
382	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  epsilon,  value,  p2,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(int,double,double,long,long)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  epsilon,  value,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(n,  epsilon,  value,  p2,  q2);	  throw    new    FractionConversionException(n,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(int,double,double,long,long)	452	None
384	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  value,  p2,  q1);  [CE]  no  suitable  constructor  found  for  FractionConversionException(int,double,long,long)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  value,  p2,  q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(n,  value,  p2,  q1);	  throw    new    FractionConversionException(n,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(int,double,long,long)	452	None
393	[BUG]  [BUGGY]  p2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(q2);	      p2    =    Math.floor(a1);    	non-compiled	[CE]  possible  loss  of  precision	122	None
394	[BUG]  [BUGGY]  p2  =  Math.ceil(a1);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.ceil(a1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.ceil(a1);	      p2    =    Math.floor(a1);    	non-compiled	[CE]  possible  loss  of  precision	122	None
404	[BUG]  [BUGGY]  value  =  BigInteger.valueOf(p2);  [CE]  incompatible  types  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  value  =  BigInteger.valueOf(p2);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	value  =  BigInteger.valueOf(p2);	      num    =    BigInteger.valueOf(p2);    	non-compiled	[CE]  incompatible  types	325	None
412	[BUG]  [BUGGY]  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(q3);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(q3);  }	      denominator    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	23	None
413	[BUG]  [BUGGY]  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(p2);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(p2);  }  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(p2);  }	      denominator    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	23	None
414	[BUG]  [BUGGY]  if(numerator  >=  0)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(q3);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  if(numerator  >=  0)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	if(numerator  >=  0)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(q3);  }	      denominator    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	23	None
422	[BUG]  [BUGGY]  this.numerator  =  Math.max(value,  denominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this.numerator  =  Math.max(value,  denominator);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this.numerator  =  Math.max(value,  denominator);	  this.numerator    =    Math.max(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	304	None
423	[BUG]  [BUGGY]  this.numerator  =  Math.min(maxDenominator,  value);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this.numerator  =  Math.min(maxDenominator,  value);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this.numerator  =  Math.min(maxDenominator,  value);	  this.numerator    =    Math.max(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	304	None
431	[BUG]  [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p2);  [CE]  incompatible  types  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p2);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    numerator  =  BigInteger.valueOf(p2);	  	non-compiled	[CE]  incompatible  types	164	None
433	[BUG]  [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(q2);  [CE]  incompatible  types  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(q2);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    numerator  =  BigInteger.valueOf(q2);	  	non-compiled	[CE]  incompatible  types	164	None
435	[BUG]  [BUGGY]  this.denominator  =(int)p1;  Numerator  =  BigInteger.valueOf(p2);  [CE]  cannot  find  symbol  Numerator  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  Numerator  =  BigInteger.valueOf(p2);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    Numerator  =  BigInteger.valueOf(p2);	  	non-compiled	[CE]  cannot  find  symbol  Numerator	164	None
441	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(minDenominator);  [CE]  cannot  find  symbol  minDenominator  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  denominator  =  BigInteger.valueOf(minDenominator);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	denominator  =  BigInteger.valueOf(minDenominator);	      num    =    BigInteger.valueOf(minDenominator);    	non-compiled	[CE]  cannot  find  symbol  minDenominator	385	None
454	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p2  -  1;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	add	this.numerator  =(int)p2  -  1;	  this.numerator    =(int)p1    -    1;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	264	2
455	[BUG]  [BUGGY]  this.numerator  =(int)p2  -  1;  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p2  -  1;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =(int)p2  -  1;	  this.numerator    =(int)p1    -    1;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	264	2
461	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(minDenominator);  denominator  =  BigInteger.valueOf(maxDenominator);  [CE]  cannot  find  symbol  minDenominator  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(minDenominator);  denominator  =  BigInteger.valueOf(maxDenominator);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator  =  BigInteger.valueOf(minDenominator);  denominator  =  BigInteger.valueOf(maxDenominator);	      num    =    BigInteger.valueOf(minDenominator);    denominator    =    BigInteger.valueOf(maxDenominator);    	non-compiled	[CE]  cannot  find  symbol  minDenominator	381	None
462	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(minDenominator);  denominator  =  BigInteger.valueOf(maxDenominator);  [CE]  cannot  find  symbol  minDenominator  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  denominator  =  BigInteger.valueOf(minDenominator);  denominator  =  BigInteger.valueOf(maxDenominator);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	denominator  =  BigInteger.valueOf(minDenominator);  denominator  =  BigInteger.valueOf(maxDenominator);	      num    =    BigInteger.valueOf(minDenominator);    denominator    =    BigInteger.valueOf(maxDenominator);    	non-compiled	[CE]  cannot  find  symbol  minDenominator	381	None
464	[BUG]  [BUGGY]  Numerator  =  BigInteger.valueOf(minDenominator);  denominator  =  BigInteger.valueOf(maxDenominator);  [CE]  cannot  find  symbol  Numerator  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  Numerator  =  BigInteger.valueOf(minDenominator);  denominator  =  BigInteger.valueOf(maxDenominator);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	Numerator  =  BigInteger.valueOf(minDenominator);  denominator  =  BigInteger.valueOf(maxDenominator);	      num    =    BigInteger.valueOf(minDenominator);    denominator    =    BigInteger.valueOf(maxDenominator);    	non-compiled	[CE]  cannot  find  symbol  Numerator	381	None
471	[BUG]  [BUGGY]  this.numerator  =(int)p1  -  1;  this.numerator  =(int)p2  -  1;  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p1  -  1;  this.numerator  =(int)p2  -  1;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator    =(int)p1    -    1;    this.numerator  =(int)p2  -  1;	  	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	263	None
472	[BUG]  [BUGGY]  this.numerator  =(int)p1  -  1;  this.numerator  =(int)p1  -  1;  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p1  -  1;  this.numerator  =(int)p1  -  1;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator    =(int)p1    -    1;    this.numerator  =(int)p1  -  1;	  	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	263	None
473	[BUG]  [BUGGY]  this.numerator  =(int)p1  -  1;  this.numerator  =(int)p2;  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p1  -  1;  this.numerator  =(int)p2;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator    =(int)p1    -    1;    this.numerator  =(int)p2;	  	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	263	None
474	[BUG]  [BUGGY]  this.numerator  =(int)p1  -  1;  this.numerator  =(int)p2  -  2;  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p1  -  1;  this.numerator  =(int)p2  -  2;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator    =(int)p1    -    1;    this.numerator  =(int)p2  -  2;	  	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	263	None
475	[BUG]  [BUGGY]  this.numerator  =(int)p1  -  1;  this.numerator  =(int)p1;  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p1  -  1;  this.numerator  =(int)p1;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator    =(int)p1    -    1;    this.numerator  =(int)p1;	  	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	263	None
481	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  denominator  =  BigInteger.valueOf(q2);  [CE]  unreachable  statement  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  denominator  =  BigInteger.valueOf(q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    denominator  =  BigInteger.valueOf(q2);	  	non-compiled	[CE]  unreachable  statement	2	None
482	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  denominator  =  BigInteger.valueOf(p2);  [CE]  unreachable  statement  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  denominator  =  BigInteger.valueOf(p2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    denominator  =  BigInteger.valueOf(p2);	  	non-compiled	[CE]  unreachable  statement	2	None
483	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	2	None
484	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(q3);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(q3);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	2	None
485	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(q1);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(q1);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(q1);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	2	None
491	[BUG]  [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  throw  new  FractionConversionException(0.0,  p2,  q2);  [CE]  unreachable  statement  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  throw  new  FractionConversionException(0.0,  p2,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(0.0,    p2,    q2);    throw  new  FractionConversionException(0.0,  p2,  q2);	  	non-compiled	[CE]  unreachable  statement	391	None
492	[BUG]  [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  p2  =  Math.floor(a1);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  p2  =  Math.floor(a1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(0.0,    p2,    q2);    p2  =  Math.floor(a1);	  	non-compiled	[CE]  possible  loss  of  precision	391	None
493	[BUG]  [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  throw  new  FractionConversionException(0.0,  p2,  q1);  [CE]  unreachable  statement  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  throw  new  FractionConversionException(0.0,  p2,  q1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(0.0,    p2,    q2);    throw  new  FractionConversionException(0.0,  p2,  q1);	  	non-compiled	[CE]  unreachable  statement	391	None
494	[BUG]  [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(0.0,    p2,    q2);    p2  =  Math.floor(a1);  q2  =  Math.floor(q2);	  	non-compiled	[CE]  possible  loss  of  precision	391	None
495	[BUG]  [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  p2  =  Math.floor(a1);  q2  =  Math.round(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  p2  =  Math.floor(a1);  q2  =  Math.round(q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(0.0,    p2,    q2);    p2  =  Math.floor(a1);  q2  =  Math.round(q2);	  	non-compiled	[CE]  possible  loss  of  precision	391	None
501	[BUG]  [BUGGY]  setDenominator(numerator,  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setDenominator(numerator,  maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setDenominator(numerator,  maxDenominator);	      setDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  expression	62	None
502	[BUG]  [BUGGY]  setDenominator(value,  numerator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setDenominator(value,  numerator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setDenominator(value,  numerator);	      setDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  expression	62	None
504	[BUG]  [BUGGY]  setDenominator(value,  denominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setDenominator(value,  denominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setDenominator(value,  denominator);	      setDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  expression	62	None
511	[BUG]  [BUGGY]  super();  this.numerator  =  Math.min(numerator,  maxDenominator,  denominator);  [CE]  no  suitable  method  found  for  min(BigInteger,int,BigInteger)  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.min(numerator,  maxDenominator,  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.min(numerator,  maxDenominator,  denominator);	      super();    this.numerator    =    Math.min(numerator,    maxDenominator);    	non-compiled	[CE]  no  suitable  method  found  for  min(BigInteger,int,BigInteger)	343	None
513	[BUG]  [BUGGY]  super();  this.numerator  =  Math.min(value,  maxDenominator);  [CE]  incompatible  types  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.min(value,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.min(value,  maxDenominator);	      super();    this.numerator    =    Math.min(numerator,    maxDenominator);    	non-compiled	[CE]  incompatible  types	343	None
514	[BUG]  [BUGGY]  super();  this.numerator  =  Math.min(numerator,  maxDenominator,  value);  [CE]  no  suitable  method  found  for  min(BigInteger,int,double)  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.min(numerator,  maxDenominator,  value);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.min(numerator,  maxDenominator,  value);	      super();    this.numerator    =    Math.min(numerator,    maxDenominator);    	non-compiled	[CE]  no  suitable  method  found  for  min(BigInteger,int,double)	343	None
521	[BUG]  [BUGGY]  this(value,  0,  value.intValue(),  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  value.intValue(),  maxDenominator);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this(value,  0,  value.intValue(),  maxDenominator);	  this.numerator    =    Math.min(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	303	None
522	[BUG]  [BUGGY]  this(value,  0,  value.intValue(),  denominator,  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  value.intValue(),  denominator,  maxDenominator);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this(value,  0,  value.intValue(),  denominator,  maxDenominator);	  this.numerator    =    Math.min(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	303	None
523	[BUG]  [BUGGY]  this(value,  0,  value.intValue(),  denominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  value.intValue(),  denominator);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this(value,  0,  value.intValue(),  denominator);	  this.numerator    =    Math.min(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	303	None
524	[BUG]  [BUGGY]  this(value,  0,  value.intValue(),  minDenominator,  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  value.intValue(),  minDenominator,  maxDenominator);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this(value,  0,  value.intValue(),  minDenominator,  maxDenominator);	  this.numerator    =    Math.min(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	303	None
531	[BUG]  [BUGGY]  if(numerator  >=  0)  {  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(numerator  >=  0)  {  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(numerator  >=  0)  {  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  }	      numerator    =    BigInteger.valueOf(q2);    denominator    =    BigInteger.valueOf(q3);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	11	None
532	[BUG]  [BUGGY]  if(q2  >  maxDenominator)  {  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  }  [CE]  cannot  find  symbol  q3  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(q2  >  maxDenominator)  {  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(q2  >  maxDenominator)  {  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  }	      numerator    =    BigInteger.valueOf(q2);    denominator    =    BigInteger.valueOf(q3);    	non-compiled	[CE]  cannot  find  symbol  q3	11	None
534	[BUG]  [BUGGY]  if(denominator  >  0)  {  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(denominator  >  0)  {  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(denominator  >  0)  {  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  }	      numerator    =    BigInteger.valueOf(q2);    denominator    =    BigInteger.valueOf(q3);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	11	None
542	[BUG]  [BUGGY]  peg(Calendar.getInstance(),  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  peg(Calendar.getInstance(),  maxDenominator);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	peg(Calendar.getInstance(),  maxDenominator);	  peg(Calendar.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	103	None
543	[BUG]  [BUGGY]  peg(Calendar.getInstance(),  denominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  peg(Calendar.getInstance(),  denominator);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	peg(Calendar.getInstance(),  denominator);	  peg(Calendar.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	103	None
544	[BUG]  [BUGGY]  setDefinition(Calendar.getInstance());  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setDefinition(Calendar.getInstance());  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setDefinition(Calendar.getInstance());	  peg(Calendar.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	103	None
553	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  0,  p2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	throw  new  FractionConversionException(value,  0,  p2);	  throw    new    FractionConversionException(value,    p0,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	362	2
554	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  0,  p2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  0,  p2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  0,  p2);	  throw    new    FractionConversionException(value,    p0,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	362	2
554	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  1,  p2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	throw  new  FractionConversionException(value,  1,  p2);	  throw    new    FractionConversionException(value,    p0,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	362	2
555	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  1,  p2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  1,  p2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  1,  p2);	  throw    new    FractionConversionException(value,    p0,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	362	2
562	[BUG]  [BUGGY]  p2  =  Math.floor(r1);  q2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(r1);  q2  =  Math.floor(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(r1);  q2  =  Math.floor(q2);	      p2    =    Math.floor(a1);    q2    =    Math.floor(q2);    	non-compiled	[CE]  possible  loss  of  precision	121	None
563	[BUG]  [BUGGY]  p2  =  Math.ceil(a1);  q2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.ceil(a1);  q2  =  Math.floor(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.ceil(a1);  q2  =  Math.floor(q2);	      p2    =    Math.floor(a1);    q2    =    Math.floor(q2);    	non-compiled	[CE]  possible  loss  of  precision	121	None
564	[BUG]  [BUGGY]  p2  =  Mat.floor(a1);  q2  =  Math.floor(q2);  [CE]  cannot  find  symbol  Mat  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Mat.floor(a1);  q2  =  Math.floor(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Mat.floor(a1);  q2  =  Math.floor(q2);	      p2    =    Math.floor(a1);    q2    =    Math.floor(q2);    	non-compiled	[CE]  cannot  find  symbol  Mat	121	None
571	[BUG]  [BUGGY]  if(maxDenominator  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  BigFraction  gcd  =  new  BigFraction(value,  gcd,  denominator);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(maxDenominator  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  BigFraction  gcd  =  new  BigFraction(value,  gcd,  denominator);  }  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	if(maxDenominator  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  BigFraction  gcd  =  new  BigFraction(value,  gcd,  denominator);  }	      setDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  expression	62	None
572	[BUG]  [BUGGY]  if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  BigFraction  gcd  =  new  BigFraction(value,  gcd,  denominator);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  BigFraction  gcd  =  new  BigFraction(value,  gcd,  denominator);  }  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  BigFraction  gcd  =  new  BigFraction(value,  gcd,  denominator);  }	      setDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  expression	62	None
573	[BUG]  [BUGGY]  if(numerator  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  BigFraction  gcd  =  new  BigFraction(value,  gcd,  denominator);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(numerator  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  BigFraction  gcd  =  new  BigFraction(value,  gcd,  denominator);  }  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	if(numerator  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  BigFraction  gcd  =  new  BigFraction(value,  gcd,  denominator);  }	      setDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  expression	62	None
574	[BUG]  [BUGGY]  if(maxDenominator  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(maxDenominator  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	if(maxDenominator  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }	      setDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  expression	62	None
581	[BUG]  [BUGGY]  setMaximumFractionDigits(value,  maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumFractionDigits(value,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumFractionDigits(value,  maxDenominator);	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol	42	None
582	[BUG]  [BUGGY]  setMaximumFractionDigits(maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumFractionDigits(maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumFractionDigits(maxDenominator);	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol	42	None
583	[BUG]  [BUGGY]  setMaximumFractionDigits(maxDenominator,  value);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumFractionDigits(maxDenominator,  value);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumFractionDigits(maxDenominator,  value);	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol	42	None
584	[BUG]  [BUGGY]  setMaximumFractionDigits(numerator,  maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumFractionDigits(numerator,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumFractionDigits(numerator,  maxDenominator);	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol	42	None
591	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.round(q2);  [CE]  cannot  find  symbol  a1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.round(q2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(a1);  p2  =  Math.round(q2);	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    (int)q2;    }    	non-compiled	[CE]  cannot  find  symbol  a1	84	None
592	[BUG]  [BUGGY]  p2  =  Math.floor(r1);  p2  =  Math.round(q2);  [CE]  cannot  find  symbol  r1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(r1);  p2  =  Math.round(q2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(r1);  p2  =  Math.round(q2);	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    (int)q2;    }    	non-compiled	[CE]  cannot  find  symbol  r1	84	None
593	[BUG]  [BUGGY]  p2  =  Math.round(a1);  p2  =  Math.round(q2);  [CE]  cannot  find  symbol  a1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.round(a1);  p2  =  Math.round(q2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.round(a1);  p2  =  Math.round(q2);	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    (int)q2;    }    	non-compiled	[CE]  cannot  find  symbol  a1	84	None
594	[BUG]  [BUGGY]  p2  =  Math.floor(q1);  p2  =  Math.round(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(q1);  p2  =  Math.round(q2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(q1);  p2  =  Math.round(q2);	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    (int)q2;    }    	non-compiled	[CE]  possible  loss  of  precision	84	None
611	[BUG]  [BUGGY]  if(numerator  >=  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(numerator  >=  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(numerator  >=  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }	      numerator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(q3);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	481	None
612	[BUG]  [BUGGY]  if(q2  >  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }  [CE]  cannot  find  symbol  q3  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(q2  >  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(q2  >  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }	      numerator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(q3);    	non-compiled	[CE]  cannot  find  symbol  q3	481	None
613	[BUG]  [BUGGY]  if(denominator  >  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(denominator  >  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(denominator  >  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }	      numerator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(q3);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	481	None
614	[BUG]  [BUGGY]  if(maxDenominator  >=  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }  [CE]  cannot  find  symbol  q3  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(maxDenominator  >=  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(maxDenominator  >=  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }	      numerator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(q3);    	non-compiled	[CE]  cannot  find  symbol  q3	481	None
624	[BUG]  [BUGGY]  super();  this(value,  0,  denominator,  1000);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this(value,  0,  denominator,  1000);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	super();  this(value,  0,  denominator,  1000);	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	95	None
631	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q1  =  Math.abs(q2);  [CE]  cannot  find  symbol  a1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(a1);  q1  =  Math.abs(q2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(a1);  q1  =  Math.abs(q2);	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    denominator)    {    this.numerator    =    (int)p2;    }    	non-compiled	[CE]  cannot  find  symbol  a1	83	None
632	[BUG]  [BUGGY]  p2  =  Math.floor(r1);  q1  =  Math.abs(q2);  [CE]  cannot  find  symbol  r1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(r1);  q1  =  Math.abs(q2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(r1);  q1  =  Math.abs(q2);	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    denominator)    {    this.numerator    =    (int)p2;    }    	non-compiled	[CE]  cannot  find  symbol  r1	83	None
633	[BUG]  [BUGGY]  p2  =  Math.ceil(a1);  q1  =  Math.abs(q2);  [CE]  cannot  find  symbol  a1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.ceil(a1);  q1  =  Math.abs(q2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.ceil(a1);  q1  =  Math.abs(q2);	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    denominator)    {    this.numerator    =    (int)p2;    }    	non-compiled	[CE]  cannot  find  symbol  a1	83	None
634	[BUG]  [BUGGY]  p2  =  Math.floor(q1);  q1  =  Math.abs(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(q1);  q1  =  Math.abs(q2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(q1);  q1  =  Math.abs(q2);	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    denominator)    {    this.numerator    =    (int)p2;    }    	non-compiled	[CE]  possible  loss  of  precision	83	None
642	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p2  -  1;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	add	this.denominator  =(int)p2  -  1;	      this.denominator    =(int)q2    -    1;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	515	2
643	[BUG]  [BUGGY]  this.denominator  =(int)p2  -  1;  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p2  -  1;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator  =(int)p2  -  1;	      this.denominator    =(int)q2    -    1;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	515	2
644	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)maxDenominator  -  1;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	add	this.denominator  =(int)maxDenominator  -  1;	      this.denominator    =(int)q2    -    1;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	515	2
645	[BUG]  [BUGGY]  this.denominator  =(int)maxDenominator  -  1;  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)maxDenominator  -  1;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator  =(int)maxDenominator  -  1;	      this.denominator    =(int)q2    -    1;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	515	2
651	[BUG]  [BUGGY]  this.denominator  =(int)p1;  [CE]  incompatible  types  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this.denominator  =(int)p1;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this.denominator  =(int)p1;	      p2    =    Math.floor(r1);    	non-compiled	[CE]  incompatible  types	124	None
652	[BUG]  [BUGGY]  this.denominator  =(int)q2;  [CE]  incompatible  types  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this.denominator  =(int)q2;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this.denominator  =(int)q2;	      p2    =    Math.floor(r1);    	non-compiled	[CE]  incompatible  types	124	None
653	[BUG]  [BUGGY]  this.denominator  =(int)p2;  [CE]  incompatible  types  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this.denominator  =(int)p2;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this.denominator  =(int)p2;	      p2    =    Math.floor(r1);    	non-compiled	[CE]  incompatible  types	124	None
654	[BUG]  [BUGGY]  this.denominator  =(int)q1;  [CE]  incompatible  types  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this.denominator  =(int)q1;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this.denominator  =(int)q1;	      p2    =    Math.floor(r1);    	non-compiled	[CE]  incompatible  types	124	None
661	[BUG]  [BUGGY]  if(q1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p1;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(q1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p1;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(q1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p1;  }	      p2    =(p2)FastMath.floor(q2);    	non-compiled	[CE]  while  expected	184	None
662	[BUG]  [BUGGY]  if(p1  >  epsilon)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p1;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  epsilon)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p1;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  epsilon)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p1;  }	      p2    =(p2)FastMath.floor(q2);    	non-compiled	[CE]  while  expected	184	None
663	[BUG]  [BUGGY]  if(p1  >  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p1;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p1;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p1;  }	      p2    =(p2)FastMath.floor(q2);    	non-compiled	[CE]  while  expected	184	None
664	[BUG]  [BUGGY]  if(p1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p1;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p1;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p1;  }	      p2    =(p2)FastMath.floor(q2);    	non-compiled	[CE]  while  expected	184	None
671	[BUG]  [BUGGY]  if(q2  ==  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q2  ==  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q2  ==  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    (int)q2;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None
672	[BUG]  [BUGGY]  if(q2  <  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q2  <  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q2  <  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    (int)q2;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None
674	[BUG]  [BUGGY]  if(q2  <=  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q2  <=  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q2  <=  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    (int)q2;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None
684	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p1,  q1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(value,  p1,  q1);	  throw    new    FractionConversionException(value,    p2,    q1);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	3	2
685	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p1,  q1);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p1,  q1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(value,  p1,  q1);	  throw    new    FractionConversionException(value,    p2,    q1);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	3	2
694	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.log(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.log(q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(a1);  q2  =  Math.log(q2);	      	non-compiled	[CE]  possible  loss  of  precision	6	None
701	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p1  -  q2);  [CE]  incompatible  types  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  numerator  =  BigInteger.valueOf(p1  -  q2);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	numerator  =  BigInteger.valueOf(p1  -  q2);	  this.denominator    =(int)p1;    	non-compiled	[CE]  incompatible  types	165	None
702	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p2  -  p1);  [CE]  incompatible  types  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  numerator  =  BigInteger.valueOf(p2  -  p1);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	numerator  =  BigInteger.valueOf(p2  -  p1);	  this.denominator    =(int)p1;    	non-compiled	[CE]  incompatible  types	165	None
703	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p1  -  p2);  [CE]  incompatible  types  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  numerator  =  BigInteger.valueOf(p1  -  p2);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	numerator  =  BigInteger.valueOf(p1  -  p2);	  this.denominator    =(int)p1;    	non-compiled	[CE]  incompatible  types	165	None
704	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p1  /  p2);  [CE]  incompatible  types  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  numerator  =  BigInteger.valueOf(p1  /  p2);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	numerator  =  BigInteger.valueOf(p1  /  p2);	  this.denominator    =(int)p1;    	non-compiled	[CE]  incompatible  types	165	None
712	[BUG]  [BUGGY]  p2  =  Math.floor(r2);  [CE]  cannot  find  symbol  r2  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(r2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(r2);	      p2    =    Math.floor(r1);    	non-compiled	[CE]  cannot  find  symbol  r2	124	None
724	[BUG]  [BUGGY]  p2  =(possible)FastMath.floor(p2);  [CE]  cannot  find  symbol  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(possible)FastMath.floor(p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(possible)FastMath.floor(p2);	      p2    =(p2)FastMath.floor(p2);    	non-compiled	[CE]  cannot  find  symbol	181	None
733	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(value,  0,  denominator);  [CE]  no  suitable  method  found  for  max(double,int,int)  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.max(value,  0,  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	super();  this.numerator  =  Math.max(value,  0,  denominator);	      super();    this.numerator    =    Math.max(value,    denominator);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,int,int)	145	None
734	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(minDenominator,  value);  [CE]  cannot  find  symbol  minDenominator  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.max(minDenominator,  value);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	super();  this.numerator  =  Math.max(minDenominator,  value);	      super();    this.numerator    =    Math.max(value,    denominator);    	non-compiled	[CE]  cannot  find  symbol  minDenominator	145	None
742	[BUG]  [BUGGY]  this(value,  0,  denominator,  1000);  [CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  denominator,  1000);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  denominator,  1000);	  this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called	193	None
743	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  10000);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	add	this(value,  0,  maxDenominator,  10000);	  this(value,    0,    maxDenominator,    1000);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	193	2
744	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  10000);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  10000);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  maxDenominator,  10000);	  this(value,    0,    maxDenominator,    1000);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	193	2
762	[BUG]  [BUGGY]  p2  =  Math.floor(p1);  q2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(p1);  q2  =  Math.floor(q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(p1);  q2  =  Math.floor(q2);	  throw    new    FractionConversionException(value,    p2,    a1);    	non-compiled	[CE]  possible  loss  of  precision	154	None
763	[BUG]  [BUGGY]  p2  =  Math.floor(p0);  q2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(p0);  q2  =  Math.floor(q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(p0);  q2  =  Math.floor(q2);	  throw    new    FractionConversionException(value,    p2,    a1);    	non-compiled	[CE]  possible  loss  of  precision	154	None
764	[BUG]  [BUGGY]  p2  =  Math.floor(p2);  q2  =  Math.floor(q3);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(p2);  q2  =  Math.floor(q3);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(p2);  q2  =  Math.floor(q3);	  throw    new    FractionConversionException(value,    p2,    a1);    	non-compiled	[CE]  possible  loss  of  precision	154	None
771	[BUG]  [BUGGY]  throw  new  FractionConversionException( " ");  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException( " ");  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException( " ");	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	3	None
774	[BUG]  [BUGGY]  p1  =  Math.floor(a1);  q2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p1  =  Math.floor(a1);  q2  =  Math.floor(q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p1  =  Math.floor(a1);  q2  =  Math.floor(q2);	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  possible  loss  of  precision	3	None
782	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  value,  100);  [CE]  no  suitable  constructor  found  for  Fraction(double,int,int,double,int)  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  value,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  maxDenominator,  value,  100);	  this(value,    0,    value,    maxDenominator,    100);    	non-compiled	[CE]  no  suitable  constructor  found  for  Fraction(double,int,int,double,int)	223	None
783	[BUG]  [BUGGY]  this(value,  0,  denominator,  maxDenominator,  100);  [CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  denominator,  maxDenominator,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  denominator,  maxDenominator,  100);	  this(value,    0,    value,    maxDenominator,    100);    	non-compiled	[CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called	223	None
791	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  DEFAULT_EPSILON);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this(value,  0,  maxDenominator,  DEFAULT_EPSILON);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this(value,  0,  maxDenominator,  DEFAULT_EPSILON);	      this.numerator    =    Math.abs(q2);    this.denominator    =    Math.abs(q1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	144	None
792	[BUG]  [BUGGY]  this(value,  maxDenominator,  0,  DEFAULT_EPSILON);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this(value,  maxDenominator,  0,  DEFAULT_EPSILON);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this(value,  maxDenominator,  0,  DEFAULT_EPSILON);	      this.numerator    =    Math.abs(q2);    this.denominator    =    Math.abs(q1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	144	None
793	[BUG]  [BUGGY]  this(value,  0,  DEFAULT_EPSILON,  maxDenominator);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this(value,  0,  DEFAULT_EPSILON,  maxDenominator);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this(value,  0,  DEFAULT_EPSILON,  maxDenominator);	      this.numerator    =    Math.abs(q2);    this.denominator    =    Math.abs(q1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	144	None
794	[BUG]  [BUGGY]  this(value,  0,  denominator,  maxDenominator);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this(value,  0,  denominator,  maxDenominator);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this(value,  0,  denominator,  maxDenominator);	      this.numerator    =    Math.abs(q2);    this.denominator    =    Math.abs(q1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	144	None
801	[BUG]  [BUGGY]  if(numerator  >=  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(numerator  >=  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(numerator  >=  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }	  throw    new    FractionConversionException(value,    p0,    q2);    	non-compiled	[CE]  while  expected	362	None
803	[BUG]  [BUGGY]  if(numerator  ==  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(numerator  ==  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(numerator  ==  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }	  throw    new    FractionConversionException(value,    p0,    q2);    	non-compiled	[CE]  while  expected	362	None
804	[BUG]  [BUGGY]  if(numerator  >  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(numerator  >  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(numerator  >  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }	  throw    new    FractionConversionException(value,    p0,    q2);    	non-compiled	[CE]  while  expected	362	None
811	[BUG]  [BUGGY]  super();  this.numerator  =  Math.pow(10,  denominator,  value);  [CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.pow(10,  denominator,  value);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.pow(10,  denominator,  value);	      super();    this.numerator    =    Math.pow(10,    denominator);    	non-compiled	[CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;	344	None
812	[BUG]  [BUGGY]  super();  this.numerator  =  Math.pow(10,  denominator,  maxDenominator);  [CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.pow(10,  denominator,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.pow(10,  denominator,  maxDenominator);	      super();    this.numerator    =    Math.pow(10,    denominator);    	non-compiled	[CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;	344	None
813	[BUG]  [BUGGY]  super();  this.numerator  =  Math.pow(10,  denominator,  gcd);  [CE]  cannot  find  symbol  gcd  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.pow(10,  denominator,  gcd);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.pow(10,  denominator,  gcd);	      super();    this.numerator    =    Math.pow(10,    denominator);    	non-compiled	[CE]  cannot  find  symbol  gcd	344	None
814	[BUG]  [BUGGY]  super();  this.numerator  =  Math.pow(10,  0,  denominator);  [CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.pow(10,  0,  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.pow(10,  0,  denominator);	      super();    this.numerator    =    Math.pow(10,    denominator);    	non-compiled	[CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;	344	None
823	[BUG]  [BUGGY]  p2  =  Math.floor(r1);  q2  =  Math.abs(q1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(r1);  q2  =  Math.abs(q1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(r1);  q2  =  Math.abs(q1);	      p2    =    Math.floor(a1);    q2    =    Math.abs(q1);    	non-compiled	[CE]  possible  loss  of  precision	241	None
824	[BUG]  [BUGGY]  p2  =  Math.ceil(a1);  q2  =  Math.abs(q1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.ceil(a1);  q2  =  Math.abs(q1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.ceil(a1);  q2  =  Math.abs(q1);	      p2    =    Math.floor(a1);    q2    =    Math.abs(q1);    	non-compiled	[CE]  possible  loss  of  precision	241	None
833	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(q1);  [CE]  variable  denominator  might  be  assigned  in  loop  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  denominator  =  BigInteger.valueOf(q1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	denominator  =  BigInteger.valueOf(q1);	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  variable  denominator  might  be  assigned  in  loop	3	None
834	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(minDenominator);  [CE]  cannot  find  symbol  minDenominator  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  denominator  =  BigInteger.valueOf(minDenominator);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	denominator  =  BigInteger.valueOf(minDenominator);	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  cannot  find  symbol  minDenominator	3	None
842	[BUG]  [BUGGY]  checkAndUpdate(value,  epsilon,  maxDenominator);  [CE]  cannot  find  symbol  epsilon  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  checkAndUpdate(value,  epsilon,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	checkAndUpdate(value,  epsilon,  maxDenominator);	      super();    	non-compiled	[CE]  cannot  find  symbol  epsilon	91	None
843	[BUG]  [BUGGY]  checkAndUpdate(value,  0,  maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  checkAndUpdate(value,  0,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	checkAndUpdate(value,  0,  maxDenominator);	      super();    	non-compiled	[CE]  cannot  find  symbol	91	None
844	[BUG]  [BUGGY]  checkInvariant();  [CE]  cannot  find  symbol  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  checkInvariant();  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	checkInvariant();	      super();    	non-compiled	[CE]  cannot  find  symbol	91	None
851	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  maxDenominator,  1000);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  maxDenominator,  1000);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,    0,    maxDenominator,    1000);    this(value,  0,  maxDenominator,  1000);	  	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	192	None
852	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  maxDenominator,  10);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  maxDenominator,  10);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,    0,    maxDenominator,    1000);    this(value,  0,  maxDenominator,  10);	  	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	192	None
853	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  maxDenominator,  100);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  maxDenominator,  100);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,    0,    maxDenominator,    1000);    this(value,  0,  maxDenominator,  100);	  	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	192	None
854	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  maxDenominator,  0);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  maxDenominator,  0);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,    0,    maxDenominator,    1000);    this(value,  0,  maxDenominator,  0);	  	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	192	None
855	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  maxDenominator,  999);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  maxDenominator,  999);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,    0,    maxDenominator,    1000);    this(value,  0,  maxDenominator,  999);	  	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	192	None
862	[BUG]  [BUGGY]  this(value,  0,  DEFAULT_EPSILON,  intValue(),  denominator);  [CE]  cannot  reference  this  before  supertype  constructor  has  been  called  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  DEFAULT_EPSILON,  intValue(),  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  DEFAULT_EPSILON,  intValue(),  denominator);	      this(value,    0,    value.intValue(),    DEFAULT_EPSILON,    denominator);    	non-compiled	[CE]  cannot  reference  this  before  supertype  constructor  has  been  called	305	None
863	[BUG]  [BUGGY]  this(value,  0,  value.intValue(),  denominator,  DEFAULT_EPSILON);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value.intValue(),  denominator,  DEFAULT_EPSILON);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value.intValue(),  denominator,  DEFAULT_EPSILON);	      this(value,    0,    value.intValue(),    DEFAULT_EPSILON,    denominator);    	non-compiled	[CE]  double  cannot  be  dereferenced	305	None
872	[BUG]  [BUGGY]  this(value,  0,  value.doubleValue(),  denominator);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value.doubleValue(),  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value.doubleValue(),  denominator);	      this(value,    0,    value.doubleValue(),    maxDenominator);    	non-compiled	[CE]  double  cannot  be  dereferenced	302	None
873	[BUG]  [BUGGY]  this(value,  0,  value.doubleValue(),  denominator,  maxDenominator);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value.doubleValue(),  denominator,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value.doubleValue(),  denominator,  maxDenominator);	      this(value,    0,    value.doubleValue(),    maxDenominator);    	non-compiled	[CE]  double  cannot  be  dereferenced	302	None
874	[BUG]  [BUGGY]  this(value,  0,  maxDenominator.doubleValue(),  value);  [CE]  int  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator.doubleValue(),  value);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  maxDenominator.doubleValue(),  value);	      this(value,    0,    value.doubleValue(),    maxDenominator);    	non-compiled	[CE]  int  cannot  be  dereferenced	302	None
881	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  double  numerator  =  Math.floor(p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	double  numerator  =  Math.floor(p2);	      int    numerator    =    Math.floor(p2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	245	2
882	[BUG]  [BUGGY]  double  numerator  =  Math.floor(p2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  double  numerator  =  Math.floor(p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	double  numerator  =  Math.floor(p2);	      int    numerator    =    Math.floor(p2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	245	2
882	[BUG]  [BUGGY]  long  numerator  =  Math.floor(p2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  long  numerator  =  Math.floor(p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	long  numerator  =  Math.floor(p2);	      int    numerator    =    Math.floor(p2);    	non-compiled	[CE]  possible  loss  of  precision	245	None
883	[BUG]  [BUGGY]  float  numerator  =  Math.floor(p2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  float  numerator  =  Math.floor(p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	float  numerator  =  Math.floor(p2);	      int    numerator    =    Math.floor(p2);    	non-compiled	[CE]  possible  loss  of  precision	245	None
894	[BUG]  [BUGGY]  this.denominator  =(float)p1;  [CE]  possible  loss  of  precision  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(float)p1;  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator  =(float)p1;	  this.denominator    =(int)p1;    	non-compiled	[CE]  possible  loss  of  precision	165	None
901	[BUG]  [BUGGY]  if(q2  <  maxDenominator)  {  if(maxDenominator  >  denominator)  {  this.numerator  =(int)p2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q2  <  maxDenominator)  {  if(maxDenominator  >  denominator)  {  this.numerator  =(int)p2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q2  <  maxDenominator)  {  if(maxDenominator  >  denominator)  {  this.numerator  =(int)p2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    denominator)    {    this.numerator    =    (int)p2;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None
902	[BUG]  [BUGGY]  if(q2  ==  maxDenominator)  {  if(maxDenominator  >  denominator)  {  this.numerator  =(int)p2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q2  ==  maxDenominator)  {  if(maxDenominator  >  denominator)  {  this.numerator  =(int)p2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q2  ==  maxDenominator)  {  if(maxDenominator  >  denominator)  {  this.numerator  =(int)p2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    denominator)    {    this.numerator    =    (int)p2;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None
903	[BUG]  [BUGGY]  if(q2  ==  maxDenominator)  {  if(maxDenominator  <  denominator)  {  this.numerator  =(int)p2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q2  ==  maxDenominator)  {  if(maxDenominator  <  denominator)  {  this.numerator  =(int)p2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q2  ==  maxDenominator)  {  if(maxDenominator  <  denominator)  {  this.numerator  =(int)p2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    denominator)    {    this.numerator    =    (int)p2;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None
904	[BUG]  [BUGGY]  if(q2  >  maxDenominator)  {  if(maxDenominator  >  denominator)  {  this.numerator  =(int)p2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q2  >  maxDenominator)  {  if(maxDenominator  >  denominator)  {  this.numerator  =(int)p2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q2  >  maxDenominator)  {  if(maxDenominator  >  denominator)  {  this.numerator  =(int)p2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    denominator)    {    this.numerator    =    (int)p2;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None
912	[BUG]  [BUGGY]  throw  new  FractionConversionException(p2,  q1);  [CE]  no  suitable  constructor  found  for  FractionConversionException(long,long)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p2,  q1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(p2,  q1);	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(long,long)	4	None
914	[BUG]  [BUGGY]  throw  new  FractionConversionException(q2,  p2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(long,long)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(q2,  p2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(q2,  p2);	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(long,long)	4	None
921	[BUG]  [BUGGY]  BigInteger  q2  =  BigInteger.valueOf(q2);  [CE]  variable  q2  is  already  defined  in  constructor  BigFraction(double,double,int,int)  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  BigInteger  q2  =  BigInteger.valueOf(q2);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	BigInteger  q2  =  BigInteger.valueOf(q2);	      BigInteger    p1    =    BigInteger.valueOf(p2);    	non-compiled	[CE]  variable  q2  is  already  defined  in  constructor  BigFraction(double,double,int,int)	484	None
922	[BUG]  [BUGGY]  BigInteger  q1  =  BigInteger.valueOf(q2);  [CE]  variable  q1  is  already  defined  in  constructor  BigFraction(double,double,int,int)  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  BigInteger  q1  =  BigInteger.valueOf(q2);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	BigInteger  q1  =  BigInteger.valueOf(q2);	      BigInteger    p1    =    BigInteger.valueOf(p2);    	non-compiled	[CE]  variable  q1  is  already  defined  in  constructor  BigFraction(double,double,int,int)	484	None
923	[BUG]  [BUGGY]  BigInteger  p1  =  BigInteger.valueOf(q2);  [CE]  variable  p1  is  already  defined  in  constructor  BigFraction(double,double,int,int)  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  BigInteger  p1  =  BigInteger.valueOf(q2);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	BigInteger  p1  =  BigInteger.valueOf(q2);	      BigInteger    p1    =    BigInteger.valueOf(p2);    	non-compiled	[CE]  variable  p1  is  already  defined  in  constructor  BigFraction(double,double,int,int)	484	None
924	[BUG]  [BUGGY]  BigInteger  p2  =  BigInteger.valueOf(q2);  [CE]  variable  p2  is  already  defined  in  constructor  BigFraction(double,double,int,int)  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  BigInteger  p2  =  BigInteger.valueOf(q2);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	BigInteger  p2  =  BigInteger.valueOf(q2);	      BigInteger    p1    =    BigInteger.valueOf(p2);    	non-compiled	[CE]  variable  p2  is  already  defined  in  constructor  BigFraction(double,double,int,int)	484	None
934	[BUG]  [BUGGY]  [FE]  AssertionError  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(q1);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	add	numerator  =  BigInteger.valueOf(q1);	  numerator    =    BigInteger.valueOf(p2);    	compilable	  [FE]  AssertionError  testDigitLimitConstructor	52	2
935	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(q1);  [FE]  AssertionError  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(q1);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator  =  BigInteger.valueOf(q1);	  numerator    =    BigInteger.valueOf(p2);    	compilable	  [FE]  AssertionError  testDigitLimitConstructor	52	2
941	[BUG]  [BUGGY]  peg(value.getInstance());  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  peg(value.getInstance());  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	peg(value.getInstance());	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  double  cannot  be  dereferenced	92	None
942	[BUG]  [BUGGY]  peg(Calendar.getInstance());  [CE]  cannot  find  symbol  Calendar  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  peg(Calendar.getInstance());  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	peg(Calendar.getInstance());	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol  Calendar	92	None
943	[BUG]  [BUGGY]  peg(calendar.getInstance());  [CE]  cannot  find  symbol  calendar  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  peg(calendar.getInstance());  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	peg(calendar.getInstance());	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol  calendar	92	None
944	[BUG]  [BUGGY]  peg(calculator.getInstance());  [CE]  cannot  find  symbol  calculator  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  peg(calculator.getInstance());  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	peg(calculator.getInstance());	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol  calculator	92	None
951	[BUG]  [BUGGY]  if(numerator  >=  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(numerator  >=  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionException( " ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(numerator  >=  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	105	None
952	[BUG]  [BUGGY]  if(numerator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(numerator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionException( " ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(numerator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	105	None
961	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  maxDenominator);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,int)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  maxDenominator);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  epsilon,  maxDenominator);	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,int)	364	None
962	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  q1,  overflow);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,long)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  q1,  overflow);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  epsilon,  q1,  overflow);	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,long)	364	None
963	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  q1,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,long)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  q1,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  epsilon,  q1,  q2);	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,long)	364	None
964	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  a1,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,long)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  a1,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  epsilon,  a1,  q2);	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,long)	364	None
971	[BUG]  [BUGGY]  if(p1  <  epsilon  &&  p2  <=  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  <  epsilon  &&  p2  <=  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  <  epsilon  &&  p2  <=  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	      int    maxIterations    =    Math.max(n,    epsilon);    	non-compiled	[CE]  while  expected	185	None
972	[BUG]  [BUGGY]  if(p1  >  epsilon  &&  p2  <=  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  epsilon  &&  p2  <=  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  epsilon  &&  p2  <=  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	      int    maxIterations    =    Math.max(n,    epsilon);    	non-compiled	[CE]  while  expected	185	None
973	[BUG]  [BUGGY]  if(p1  <  p2  ||  p2  <=  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  <  p2  ||  p2  <=  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  <  p2  ||  p2  <=  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	      int    maxIterations    =    Math.max(n,    epsilon);    	non-compiled	[CE]  while  expected	185	None
974	[BUG]  [BUGGY]  if(p1  >  epsilon  &&  p2  <  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  epsilon  &&  p2  <  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  epsilon  &&  p2  <  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	      int    maxIterations    =    Math.max(n,    epsilon);    	non-compiled	[CE]  while  expected	185	None
982	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(q3);  [CE]  cannot  find  symbol  q3  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  denominator  =  BigInteger.valueOf(q3);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	denominator  =  BigInteger.valueOf(q3);	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  cannot  find  symbol  q3	4	None
992	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(numerator,  denominator,  maxDenominator);  [CE]  no  suitable  method  found  for  max(BigInteger,BigInteger,int)  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.max(numerator,  denominator,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.max(numerator,  denominator,  maxDenominator);	      super();    this.numerator    =    Math.max(numerator,    denominator);    	non-compiled	[CE]  no  suitable  method  found  for  max(BigInteger,BigInteger,int)	345	None
994	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(numerator,  denominator,  value);  [CE]  no  suitable  method  found  for  max(BigInteger,BigInteger,double)  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.max(numerator,  denominator,  value);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.max(numerator,  denominator,  value);	      super();    this.numerator    =    Math.max(numerator,    denominator);    	non-compiled	[CE]  no  suitable  method  found  for  max(BigInteger,BigInteger,double)	345	None
1001	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.ceil(q0,  q2);  [CE]  cannot  find  symbol  a1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.ceil(q0,  q2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(a1);  p2  =  Math.ceil(q0,  q2);	      this.denominator    =(int)q2;    	non-compiled	[CE]  cannot  find  symbol  a1	81	None
1002	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.ceil(q0,  p2);  [CE]  cannot  find  symbol  a1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.ceil(q0,  p2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(a1);  p2  =  Math.ceil(q0,  p2);	      this.denominator    =(int)q2;    	non-compiled	[CE]  cannot  find  symbol  a1	81	None
1003	[BUG]  [BUGGY]  p2  =  Math.floor(r1);  p2  =  Math.ceil(q0,  p2);  [CE]  cannot  find  symbol  r1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(r1);  p2  =  Math.ceil(q0,  p2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(r1);  p2  =  Math.ceil(q0,  p2);	      this.denominator    =(int)q2;    	non-compiled	[CE]  cannot  find  symbol  r1	81	None
1004	[BUG]  [BUGGY]  p2  =  Math.ceil(a1);  p2  =  Math.ceil(q0,  p2);  [CE]  cannot  find  symbol  a1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.ceil(a1);  p2  =  Math.ceil(q0,  p2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.ceil(a1);  p2  =  Math.ceil(q0,  p2);	      this.denominator    =(int)q2;    	non-compiled	[CE]  cannot  find  symbol  a1	81	None
1012	[BUG]  [BUGGY]  p2  =  Math.floor(p1);  p2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(p1);  p2  =  Math.floor(q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(p1);  p2  =  Math.floor(q2);	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  possible  loss  of  precision	153	None
1013	[BUG]  [BUGGY]  p2  =  Math.floor(p0);  p2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(p0);  p2  =  Math.floor(q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(p0);  p2  =  Math.floor(q2);	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  possible  loss  of  precision	153	None
1014	[BUG]  [BUGGY]  p2  =  Math.floor(epsilon);  p2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(epsilon);  p2  =  Math.floor(q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(epsilon);  p2  =  Math.floor(q2);	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  possible  loss  of  precision	153	None
1024	[BUG]  [BUGGY]  [FE]  AssertionError  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  denominator  =  BigInteger.valueOf(p1);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	add	denominator  =  BigInteger.valueOf(p1);	  denominator    =    BigInteger.valueOf(q3);    	compilable	  [FE]  AssertionError  testDigitLimitConstructor	74	2
1025	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p1);  [FE]  AssertionError  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  denominator  =  BigInteger.valueOf(p1);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator  =  BigInteger.valueOf(p1);	  denominator    =    BigInteger.valueOf(q3);    	compilable	  [FE]  AssertionError  testDigitLimitConstructor	74	2
1033	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.min(maxDenominator))?  ONE  :  ONE;  [CE]  not  a  statement  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.min(maxDenominator))?  ONE  :  ONE;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator((  int)Math.abs(value)>  Math.min(maxDenominator))?  ONE  :  ONE;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator))?    ONE    :    ONE;    	non-compiled	[CE]  not  a  statement	422	None
1034	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator))?  ONE  :  OTHER;  [CE]  not  a  statement  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator))?  ONE  :  OTHER;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator))?  ONE  :  OTHER;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator))?    ONE    :    ONE;    	non-compiled	[CE]  not  a  statement	422	None
1062	[BUG]  [BUGGY]  p2  =  Math.floor(r1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(r1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(r1);	      p2    =    Math.floor(a1);    	non-compiled	[CE]  possible  loss  of  precision	243	None
1063	[BUG]  [BUGGY]  p2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(q2);	      p2    =    Math.floor(a1);    	non-compiled	[CE]  possible  loss  of  precision	243	None
1064	[BUG]  [BUGGY]  p2  =  Math.floor(a2);  [CE]  cannot  find  symbol  a2  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(a2);	      p2    =    Math.floor(a1);    	non-compiled	[CE]  cannot  find  symbol  a2	243	None
1071	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(numerator);  [CE]  no  suitable  method  found  for  valueOf(BigInteger)  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  denominator  =  BigInteger.valueOf(numerator);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator  =  BigInteger.valueOf(numerator);	  denominator    =    BigInteger.valueOf(p2);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(BigInteger)	73	None
1074	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(null);  [CE]  valueOf(int[])  has  private  access  in  BigInteger  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  denominator  =  BigInteger.valueOf(null);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator  =  BigInteger.valueOf(null);	  denominator    =    BigInteger.valueOf(p2);    	non-compiled	[CE]  valueOf(int[])  has  private  access  in  BigInteger	73	None
1081	[BUG]  [BUGGY]  p2  =  Math.floor(r1);  p2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(r1);  p2  =  Math.floor(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(r1);  p2  =  Math.floor(q2);	      p2    =    Math.floor(r1);    p2    =    Math.floor(r2);    	non-compiled	[CE]  possible  loss  of  precision	213	None
1082	[BUG]  [BUGGY]  p2  =  Math.floor(r0);  p2  =  Math.floor(r2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(r0);  p2  =  Math.floor(r2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(r0);  p2  =  Math.floor(r2);	      p2    =    Math.floor(r1);    p2    =    Math.floor(r2);    	non-compiled	[CE]  possible  loss  of  precision	213	None
1083	[BUG]  [BUGGY]  p2  =  Math.floor(l0);  p2  =  Math.floor(r2);  [CE]  cannot  find  symbol  l0  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(l0);  p2  =  Math.floor(r2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(l0);  p2  =  Math.floor(r2);	      p2    =    Math.floor(r1);    p2    =    Math.floor(r2);    	non-compiled	[CE]  cannot  find  symbol  l0	213	None
1084	[BUG]  [BUGGY]  p2  =  Math.floor(r2);  p2  =  Math.floor(q2);  [CE]  cannot  find  symbol  r2  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(r2);  p2  =  Math.floor(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(r2);  p2  =  Math.floor(q2);	      p2    =    Math.floor(r1);    p2    =    Math.floor(r2);    	non-compiled	[CE]  cannot  find  symbol  r2	213	None
1092	[BUG]  [BUGGY]  if(value  >  maxDenominator)  {  super();  this(value,  0,  maxDenominator,  100);  }  [CE]  call  to  super  must  be  first  statement  in  constructor  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  >  maxDenominator)  {  super();  this(value,  0,  maxDenominator,  100);  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	if(value  >  maxDenominator)  {  super();  this(value,  0,  maxDenominator,  100);  }	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	92	None
1093	[BUG]  [BUGGY]  if(value  <  0)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  call  to  super  must  be  first  statement  in  constructor  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  0)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	if(value  <  0)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	92	None
1094	[BUG]  [BUGGY]  if(value  <  0)  {  super();  this(value,  0,  maxDenominator,  100);  }  [CE]  call  to  super  must  be  first  statement  in  constructor  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  0)  {  super();  this(value,  0,  maxDenominator,  100);  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	if(value  <  0)  {  super();  this(value,  0,  maxDenominator,  100);  }	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	92	None
1101	[BUG]  [BUGGY]  setDenominator(numerator,  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setDenominator(numerator,  maxDenominator);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setDenominator(numerator,  maxDenominator);	  setDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  expression	101	None
1103	[BUG]  [BUGGY]  setDenominator(denominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setDenominator(denominator);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setDenominator(denominator);	  setDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  expression	101	None
1113	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p2  -  maxDenominator;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	add	this.numerator  =(int)p2  -  maxDenominator;	  this.numerator    =(int)p2;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	112	2
1114	[BUG]  [BUGGY]  this.numerator  =(int)p2  -  maxDenominator;  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p2  -  maxDenominator;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =(int)p2  -  maxDenominator;	  this.numerator    =(int)p2;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	112	2
1123	[BUG]  [BUGGY]  this.numerator  =  Math.min(MaxDenominator,  value);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this.numerator  =  Math.min(MaxDenominator,  value);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this.numerator  =  Math.min(MaxDenominator,  value);	  this.numerator    =    Math.min(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	303	None
1124	[BUG]  [BUGGY]  this.numerator  =  Math.min(value,  denominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this.numerator  =  Math.min(value,  denominator);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this.numerator  =  Math.min(value,  denominator);	  this.numerator    =    Math.min(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	303	None
1131	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(value,  maxDenominator);  [CE]  call  to  super  must  be  first  statement  in  constructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  super();  this.numerator  =  Math.max(value,  maxDenominator);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	super();  this.numerator  =  Math.max(value,  maxDenominator);	      this.numerator    =(int)(p2);    this.denominator    =(int)(q2);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	143	None
1132	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(value,  denominator);  [CE]  call  to  super  must  be  first  statement  in  constructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  super();  this.numerator  =  Math.max(value,  denominator);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	super();  this.numerator  =  Math.max(value,  denominator);	      this.numerator    =(int)(p2);    this.denominator    =(int)(q2);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	143	None
1133	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(value,  minDenominator);  [CE]  call  to  super  must  be  first  statement  in  constructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  super();  this.numerator  =  Math.max(value,  minDenominator);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	super();  this.numerator  =  Math.max(value,  minDenominator);	      this.numerator    =(int)(p2);    this.denominator    =(int)(q2);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	143	None
1134	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(0,  maxDenominator);  [CE]  call  to  super  must  be  first  statement  in  constructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  super();  this.numerator  =  Math.max(0,  maxDenominator);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	super();  this.numerator  =  Math.max(0,  maxDenominator);	      this.numerator    =(int)(p2);    this.denominator    =(int)(q2);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	143	None
1141	[BUG]  [BUGGY]  if(numerator  >  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p0);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(numerator  >  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p0);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(numerator  >  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p0);  }	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  while  expected	364	None
1143	[BUG]  [BUGGY]  if(numerator  >  maxDenominator)  {  if(maxDenominator  <=  0)  {  numerator  =  BigInteger.valueOf(p0);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(numerator  >  maxDenominator)  {  if(maxDenominator  <=  0)  {  numerator  =  BigInteger.valueOf(p0);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(numerator  >  maxDenominator)  {  if(maxDenominator  <=  0)  {  numerator  =  BigInteger.valueOf(p0);  }	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  while  expected	364	None
1144	[BUG]  [BUGGY]  if(numerator  >=  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p0);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(numerator  >=  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p0);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(numerator  >=  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p0);  }	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  while  expected	364	None
1154	[BUG]  [BUGGY]  value  =  BigInteger.valueOf(q2);  [CE]  incompatible  types  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  value  =  BigInteger.valueOf(q2);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	value  =  BigInteger.valueOf(q2);	      num    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  incompatible  types	321	None
1161	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  if(p1  >  p2)  {  if(p2  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  if(p1  >  p2)  {  if(p2  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    if(p1  >  p2)  {  if(p2  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	  	non-compiled	[CE]  while  expected	182	None
1162	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  if(q1  >  q2)  {  if(p2  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  if(q1  >  q2)  {  if(p2  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    if(q1  >  q2)  {  if(p2  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	  	non-compiled	[CE]  while  expected	182	None
1163	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  if(p1  >  epsilon)  {  if(p2  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  if(p1  >  epsilon)  {  if(p2  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    if(p1  >  epsilon)  {  if(p2  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	  	non-compiled	[CE]  while  expected	182	None
1164	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  if(p1  >  maxDenominator)  {  if(p2  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  if(p1  >  maxDenominator)  {  if(p2  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    if(p1  >  maxDenominator)  {  if(p2  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	  	non-compiled	[CE]  while  expected	182	None
1165	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  if(p1  >  q2)  {  if(p2  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  if(p1  >  q2)  {  if(p2  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    if(p1  >  q2)  {  if(p2  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	  	non-compiled	[CE]  while  expected	182	None
1171	[BUG]  [BUGGY]  setDenominator(value,  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setDenominator(value,  maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setDenominator(value,  maxDenominator);	      setDenominator(value);    	non-compiled	[CE]  illegal  start  of  expression	65	None
1174	[BUG]  [BUGGY]  setDefinator(value,  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setDefinator(value,  maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setDefinator(value,  maxDenominator);	      setDenominator(value);    	non-compiled	[CE]  illegal  start  of  expression	65	None
1181	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  throw  new  FractionConversionException( " ");  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  throw  new  FractionConversionException( " ");  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    throw  new  FractionConversionException( " ");	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	2	None
1182	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(a1);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(a1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p2  =  Math.floor(a1);	  	non-compiled	[CE]  possible  loss  of  precision	2	None
1183	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p2  =  Math.floor(a1);  q2  =  Math.floor(q2);	  	non-compiled	[CE]  possible  loss  of  precision	2	None
1184	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(a1);  q2  =  Math.round(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(a1);  q2  =  Math.round(q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p2  =  Math.floor(a1);  q2  =  Math.round(q2);	  	non-compiled	[CE]  possible  loss  of  precision	2	None
1185	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(r1);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(r1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p2  =  Math.floor(r1);	  	non-compiled	[CE]  possible  loss  of  precision	2	None
1201	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  [Delete]  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	[Delete]	  peg(Calendar.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	103	None
1202	[BUG]  [BUGGY]  if(numerator  >=  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(numerator  >=  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( " ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(numerator  >=  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( " ");  }	  peg(Calendar.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	103	None
1203	[BUG]  [BUGGY]  if(numerator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(numerator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( " ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(numerator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( " ");  }	  peg(Calendar.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	103	None
1204	[BUG]  [BUGGY]  if(numerator  >=  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  numerator  ==  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(numerator  >=  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  numerator  ==  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( " ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(numerator  >=  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  numerator  ==  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( " ");  }	  peg(Calendar.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	103	None
1211	[BUG]  [BUGGY]  super();  this.numerator  =  Math.min(maxDenominator,  denominator);  [CE]  variable  denominator  might  not  have  been  initialized  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.min(maxDenominator,  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	super();  this.numerator  =  Math.min(maxDenominator,  denominator);	      super();    this.numerator    =    Math.min(numerator,    maxDenominator);    	non-compiled	[CE]  variable  denominator  might  not  have  been  initialized	142	None
1212	[BUG]  [BUGGY]  super();  this.numerator  =  Math.min(maxDenominator,  numerator);  [CE]  variable  numerator  might  not  have  been  initialized  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.min(maxDenominator,  numerator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	super();  this.numerator  =  Math.min(maxDenominator,  numerator);	      super();    this.numerator    =    Math.min(numerator,    maxDenominator);    	non-compiled	[CE]  variable  numerator  might  not  have  been  initialized	142	None
1213	[BUG]  [BUGGY]  super();  this.numerator  =  Math.min(maxDenominator,  value);  [CE]  possible  loss  of  precision  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.min(maxDenominator,  value);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	super();  this.numerator  =  Math.min(maxDenominator,  value);	      super();    this.numerator    =    Math.min(numerator,    maxDenominator);    	non-compiled	[CE]  possible  loss  of  precision	142	None
1214	[BUG]  [BUGGY]  super();  this.numerator  =  Math.min(10,  maxDenominator);  [CE]  variable  denominator  might  not  have  been  initialized  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.min(10,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	super();  this.numerator  =  Math.min(10,  maxDenominator);	      super();    this.numerator    =    Math.min(numerator,    maxDenominator);    	non-compiled	[CE]  variable  denominator  might  not  have  been  initialized	142	None
1221	[BUG]  [BUGGY]  if(q1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(q1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(q1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	      p2    =(int)FastMath.floor(p2);    	non-compiled	[CE]  while  expected	183	None
1222	[BUG]  [BUGGY]  if(p1  >  epsilon)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  epsilon)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  epsilon)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	      p2    =(int)FastMath.floor(p2);    	non-compiled	[CE]  while  expected	183	None
1223	[BUG]  [BUGGY]  if(p1  >  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	      p2    =(int)FastMath.floor(p2);    	non-compiled	[CE]  while  expected	183	None
1224	[BUG]  [BUGGY]  if(p1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	      p2    =(int)FastMath.floor(p2);    	non-compiled	[CE]  while  expected	183	None
1231	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  this.numerator  =(double)p1;  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  this.numerator  =(double)p1;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    this.numerator  =(double)p1;	  	non-compiled	[CE]  possible  loss  of  precision	182	None
1232	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  this.numerator  =(int)p1;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	        p2    =(int)FastMath.floor(p2);    this.numerator  =(int)p1;	  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	182	2
1233	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  this.numerator  =(int)p1;  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  this.numerator  =(int)p1;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    this.numerator  =(int)p1;	  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	182	2
1233	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  this.numerator  =(double)p2;  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  this.numerator  =(double)p2;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    this.numerator  =(double)p2;	  	non-compiled	[CE]  possible  loss  of  precision	182	None
1234	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  this.numerator  =(float)p1;  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  this.numerator  =(float)p1;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    this.numerator  =(float)p1;	  	non-compiled	[CE]  possible  loss  of  precision	182	None
1235	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  this.numerator  =(byte)p1;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	        p2    =(int)FastMath.floor(p2);    this.numerator  =(byte)p1;	  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	182	2
1236	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  this.numerator  =(byte)p1;  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  this.numerator  =(byte)p1;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    this.numerator  =(byte)p1;	  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	182	2
1242	[BUG]  [BUGGY]  setValue(value,  0,  denominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setValue(value,  0,  denominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setValue(value,  0,  denominator);	      setValue(value,    0);    	non-compiled	[CE]  illegal  start  of  expression	94	None
1244	[BUG]  [BUGGY]  setValue(value,  denominator,  0);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setValue(value,  denominator,  0);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setValue(value,  denominator,  0);	      setValue(value,    0);    	non-compiled	[CE]  illegal  start  of  expression	94	None
1251	[BUG]  [BUGGY]  if(q1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(q1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(q1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }	      p2    =(int)FastMath.floor(p2);    	non-compiled	[CE]  while  expected	183	None
1252	[BUG]  [BUGGY]  if(p1  >  epsilon)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  epsilon)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  epsilon)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }	      p2    =(int)FastMath.floor(p2);    	non-compiled	[CE]  while  expected	183	None
1253	[BUG]  [BUGGY]  if(p1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }	      p2    =(int)FastMath.floor(p2);    	non-compiled	[CE]  while  expected	183	None
1254	[BUG]  [BUGGY]  if(p1  >  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }	      p2    =(int)FastMath.floor(p2);    	non-compiled	[CE]  while  expected	183	None
1263	[BUG]  [BUGGY]  this.numerator  =(int)(p2;  this.denominator  =(int)(q2);  [CE]  ')'  expected  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)(p2;  this.denominator  =(int)(q2);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =(int)(p2;  this.denominator  =(int)(q2);	      this.numerator    =(int)(p2);    this.denominator    =(int)(q2);    	non-compiled	[CE]  ')'  expected	143	None
1264	[BUG]  [BUGGY]  this.numerator  =(float)(p2);  this.denominator  =(float)(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(float)(p2);  this.denominator  =(float)(q2);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =(float)(p2);  this.denominator  =(float)(q2);	      this.numerator    =(int)(p2);    this.denominator    =(int)(q2);    	non-compiled	[CE]  possible  loss  of  precision	143	None
1272	[BUG]  [BUGGY]  this.numerator  =  Math.abs(p2);  this.denominator  =  Math.abs(q1);  [CE]  possible  loss  of  precision  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =  Math.abs(p2);  this.denominator  =  Math.abs(q1);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =  Math.abs(p2);  this.denominator  =  Math.abs(q1);	      this.numerator    =    Math.abs(q2);    this.denominator    =    Math.abs(q1);    	non-compiled	[CE]  possible  loss  of  precision	144	None
1273	[BUG]  [BUGGY]  this.numerator  =  Math.abs(p1);  this.denominator  =  Math.abs(q1);  [CE]  possible  loss  of  precision  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =  Math.abs(p1);  this.denominator  =  Math.abs(q1);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =  Math.abs(p1);  this.denominator  =  Math.abs(q1);	      this.numerator    =    Math.abs(q2);    this.denominator    =    Math.abs(q1);    	non-compiled	[CE]  possible  loss  of  precision	144	None
1283	[BUG]  [BUGGY]  setValue(value,  0,  minDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setValue(value,  0,  minDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setValue(value,  0,  minDenominator);	      setValue(value,    0,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	93	None
1284	[BUG]  [BUGGY]  setValue(value,  0,  numerator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setValue(value,  0,  numerator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setValue(value,  0,  numerator);	      setValue(value,    0,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	93	None
1302	[BUG]  [BUGGY]  if(value  >  0.0)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [CE]  call  to  super  must  be  first  statement  in  constructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  >  0.0)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(value  >  0.0)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	42	None
1303	[BUG]  [BUGGY]  if(value  <  0)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [CE]  call  to  super  must  be  first  statement  in  constructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  0)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(value  <  0)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	42	None
1304	[BUG]  [BUGGY]  if(value  >  0.0)  {  super();  this(value,  0,  maxDenominator,  100);  }  [CE]  call  to  super  must  be  first  statement  in  constructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  >  0.0)  {  super();  this(value,  0,  maxDenominator,  100);  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(value  >  0.0)  {  super();  this(value,  0,  maxDenominator,  100);  }	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	42	None
1311	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  throw  new  FractionConversionException( " ");  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  throw  new  FractionConversionException( " ");  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    throw  new  FractionConversionException( " ");	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	361	None
1312	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p2  =(p2)FastMath.floor(p1);  [CE]  cannot  find  symbol  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p2  =(p2)FastMath.floor(p1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    p2  =(p2)FastMath.floor(p1);	  	non-compiled	[CE]  cannot  find  symbol	361	None
1313	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p2  =(p2)FastMath.floor(r1);  [CE]  cannot  find  symbol  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p2  =(p2)FastMath.floor(r1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    p2  =(p2)FastMath.floor(r1);	  	non-compiled	[CE]  cannot  find  symbol	361	None
1314	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p2  =(p2)FastMath.floor(q1);  [CE]  cannot  find  symbol  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p2  =(p2)FastMath.floor(q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    p2  =(p2)FastMath.floor(q1);	  	non-compiled	[CE]  cannot  find  symbol	361	None
1315	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p2  =(p2)FastMath.floor(p2);  [CE]  cannot  find  symbol  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p2  =(p2)FastMath.floor(p2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    p2  =(p2)FastMath.floor(p2);	  	non-compiled	[CE]  cannot  find  symbol	361	None
1322	[BUG]  [BUGGY]  p2  =  Math.floor(r1);  q2  =  Math.round(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(r1);  q2  =  Math.round(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(r1);  q2  =  Math.round(q2);	      p2    =    Math.floor(a1);    q2    =    Math.round(q2);    	non-compiled	[CE]  possible  loss  of  precision	125	None
1323	[BUG]  [BUGGY]  p2  =  Math.floor(q1);  q2  =  Math.round(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(q1);  q2  =  Math.round(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(q1);  q2  =  Math.round(q2);	      p2    =    Math.floor(a1);    q2    =    Math.round(q2);    	non-compiled	[CE]  possible  loss  of  precision	125	None
1324	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.round(a1);  q2  =  Math.round(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	p2  =  Math.round(a1);  q2  =  Math.round(q2);	      p2    =    Math.floor(a1);    q2    =    Math.round(q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	125	1
1325	[BUG]  [BUGGY]  p2  =  Math.round(a1);  q2  =  Math.round(q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.round(a1);  q2  =  Math.round(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.round(a1);  q2  =  Math.round(q2);	      p2    =    Math.floor(a1);    q2    =    Math.round(q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	125	1
1342	[BUG]  [BUGGY]  if(p2  >  maxDenominator)  {  this.numerator  =(int)p2;  this.denominator  =(int)q2;  }  else  {  this.numerator  =(int)p2;  this.denominator  =(int)q2;  }  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  if(p2  >  maxDenominator)  {  this.numerator  =(int)p2;  this.denominator  =(int)q2;  }  else  {  this.numerator  =(int)p2;  this.denominator  =(int)q2;  }  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	if(p2  >  maxDenominator)  {  this.numerator  =(int)p2;  this.denominator  =(int)q2;  }  else  {  this.numerator  =(int)p2;  this.denominator  =(int)q2;  }	      this.numerator    =(int)p2;    this.denominator    =(int)q2;    	non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	141	None
1343	[BUG]  [BUGGY]  this.numerator  =(float)p2;  this.denominator  =(float)q2;  [CE]  possible  loss  of  precision  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(float)p2;  this.denominator  =(float)q2;  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =(float)p2;  this.denominator  =(float)q2;	      this.numerator    =(int)p2;    this.denominator    =(int)q2;    	non-compiled	[CE]  possible  loss  of  precision	141	None
1354	[BUG]  [BUGGY]  this.denominator  =(int)p2,  maxDenominator;  [CE]  ';'  expected  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p2,  maxDenominator;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator  =(int)p2,  maxDenominator;	      this.denominator    =(int)p2;    	non-compiled	[CE]  ';'  expected	82	None
1362	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.min(maxDenominator))?  ONE  :  ZERO;  [CE]  not  a  statement  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.min(maxDenominator))?  ONE  :  ZERO;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator((  int)Math.abs(value)>  Math.min(maxDenominator))?  ONE  :  ZERO;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator))?    ONE    :    ZERO;    	non-compiled	[CE]  not  a  statement	425	None
1363	[BUG]  [BUGGY]  setDefinator((  int)Math.abs(value)>  Math.abs(maxDenominator))?  ONE  :  ZERO;  [CE]  not  a  statement  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDefinator((  int)Math.abs(value)>  Math.abs(maxDenominator))?  ONE  :  ZERO;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDefinator((  int)Math.abs(value)>  Math.abs(maxDenominator))?  ONE  :  ZERO;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator))?    ONE    :    ZERO;    	non-compiled	[CE]  not  a  statement	425	None
1364	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator))?  1  :  0;  [CE]  not  a  statement  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator))?  1  :  0;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator))?  1  :  0;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator))?    ONE    :    ZERO;    	non-compiled	[CE]  not  a  statement	425	None
1371	[BUG]  [BUGGY]  setValue(value,  0,  maxDenominator,  100);  [CE]  cannot  find  symbol  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setValue(value,  0,  maxDenominator,  100);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	setValue(value,  0,  maxDenominator,  100);	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  cannot  find  symbol	95	None
1372	[BUG]  [BUGGY]  setValue(value,  0,  denominator,  100);  [CE]  cannot  find  symbol  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setValue(value,  0,  denominator,  100);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	setValue(value,  0,  denominator,  100);	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  cannot  find  symbol	95	None
1373	[BUG]  [BUGGY]  setValue(value,  0,  minDenominator,  100);  [CE]  cannot  find  symbol  minDenominator  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setValue(value,  0,  minDenominator,  100);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	setValue(value,  0,  minDenominator,  100);	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  cannot  find  symbol  minDenominator	95	None
1374	[BUG]  [BUGGY]  setValue(value,  0,  numerator,  100);  [CE]  cannot  find  symbol  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setValue(value,  0,  numerator,  100);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	setValue(value,  0,  numerator,  100);	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  cannot  find  symbol	95	None
1392	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  [CE]  cannot  find  symbol  q3  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  denominator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	denominator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);	      num    =    BigInteger.valueOf(q2);    denominator    =    BigInteger.valueOf(q3);    	non-compiled	[CE]  cannot  find  symbol  q3	383	None
1411	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  p2  =(int)FastMath.floor(p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	        p2    =(int)FastMath.floor(p2);    p2  =(int)FastMath.floor(p2);	  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	182	2
1412	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  p2  =(int)FastMath.floor(p2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  p2  =(int)FastMath.floor(p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    p2  =(int)FastMath.floor(p2);	  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	182	2
1412	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  p2  =(long)FastMath.floor(p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	        p2    =(int)FastMath.floor(p2);    p2  =(long)FastMath.floor(p2);	  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	182	2
1413	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  p2  =(long)FastMath.floor(p2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  p2  =(long)FastMath.floor(p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    p2  =(long)FastMath.floor(p2);	  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	182	2
1413	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  p2  =(int)FastMath.floor(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	        p2    =(int)FastMath.floor(p2);    p2  =(int)FastMath.floor(q2);	  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	182	2
1414	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  p2  =(int)FastMath.floor(q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  p2  =(int)FastMath.floor(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    p2  =(int)FastMath.floor(q2);	  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	182	2
1414	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  p2  =(double)FastMath.floor(p2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  p2  =(double)FastMath.floor(p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    p2  =(double)FastMath.floor(p2);	  	non-compiled	[CE]  possible  loss  of  precision	182	None
1415	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  p2  =(float)FastMath.floor(p2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  p2  =(float)FastMath.floor(p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    p2  =(float)FastMath.floor(p2);	  	non-compiled	[CE]  possible  loss  of  precision	182	None
1424	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.floor(r1);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.floor(r1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(a1);  p2  =  Math.floor(r1);	      p2    =    Math.floor(r1);    p2    =    Math.floor(a1);    	non-compiled	[CE]  possible  loss  of  precision	215	None
1431	[BUG]  [BUGGY]  if(denominator  >  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  throw  new  FractionException( "   ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(denominator  >  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  throw  new  FractionException( "   ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(denominator  >  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  throw  new  FractionException( "   ");  }	  this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	102	None
1432	[BUG]  [BUGGY]  if(numerator  >=  0)  {  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionException( "   ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(numerator  >=  0)  {  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionException( "   ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(numerator  >=  0)  {  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionException( "   ");  }	  this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	102	None
1442	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.min(maxDenominator):  0;  [CE]  ')'  expected  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.min(maxDenominator):  0;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator((  int)Math.abs(value)>  Math.min(maxDenominator):  0;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator):    0;    	non-compiled	[CE]  ')'  expected	423	None
1443	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)  <  Math.abs(maxDenominator):  0;  [CE]  ')'  expected  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator((  int)Math.abs(value)  <  Math.abs(maxDenominator):  0;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator((  int)Math.abs(value)  <  Math.abs(maxDenominator):  0;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator):    0;    	non-compiled	[CE]  ')'  expected	423	None
1444	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator):  1;  [CE]  ')'  expected  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator):  1;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator):  1;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator):    0;    	non-compiled	[CE]  ')'  expected	423	None
1452	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  maxDenominator,  1);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this(value,  0,  maxDenominator,  1);	      this(value,    0,    maxDenominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	175	None
1454	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  maxDenominator,  1000);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this(value,  0,  maxDenominator,  1000);	      this(value,    0,    maxDenominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	175	None
1462	[BUG]  [BUGGY]  p2  =(possible)FastMath.floor(r1);  [CE]  cannot  find  symbol  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(possible)FastMath.floor(r1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(possible)FastMath.floor(r1);	      p2    =(int)FastMath.floor(p2);    	non-compiled	[CE]  cannot  find  symbol	183	None
1463	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(int)FastMath.floor(r1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	p2  =(int)FastMath.floor(r1);	      p2    =(int)FastMath.floor(p2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	183	2
1464	[BUG]  [BUGGY]  p2  =(int)FastMath.floor(r1);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(int)FastMath.floor(r1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(int)FastMath.floor(r1);	      p2    =(int)FastMath.floor(p2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	183	2
1473	[BUG]  [BUGGY]  this(value,  0,  denominator,  0);  [CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  denominator,  0);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  denominator,  0);	      this(value,    0,    maxDenominator,    0);    	non-compiled	[CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called	45	None
1482	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  value.length,  maxDenominator,  100);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  value.length,  maxDenominator,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  maxDenominator,  value.length,  maxDenominator,  100);	  this(value,    0,    value.length,    maxDenominator,    100);    	non-compiled	[CE]  double  cannot  be  dereferenced	221	None
1483	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  value.length,  100);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  value.length,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  maxDenominator,  value.length,  100);	  this(value,    0,    value.length,    maxDenominator,    100);    	non-compiled	[CE]  double  cannot  be  dereferenced	221	None
1484	[BUG]  [BUGGY]  this(value,  0,  values.length,  maxDenominator,  100);  [CE]  cannot  find  symbol  values  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  values.length,  maxDenominator,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  values.length,  maxDenominator,  100);	  this(value,    0,    value.length,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol  values	221	None
1491	[BUG]  [BUGGY]  this.numerator  =(int)p2;  this.numerator  =(int)p2;  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p2;  this.numerator  =(int)p2;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator    =(int)p2;    this.numerator  =(int)p2;	  	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	111	None
1492	[BUG]  [BUGGY]  this.numerator  =(int)p2;  this.numerator  =(int)q2;  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p2;  this.numerator  =(int)q2;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator    =(int)p2;    this.numerator  =(int)q2;	  	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	111	None
1493	[BUG]  [BUGGY]  this.numerator  =(int)p2;  this.numerator  =(int)p1;  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p2;  this.numerator  =(int)p1;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator    =(int)p2;    this.numerator  =(int)p1;	  	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	111	None
1494	[BUG]  [BUGGY]  this.numerator  =(int)p2;  this.numerator  =(int)maxDenominator;  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p2;  this.numerator  =(int)maxDenominator;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator    =(int)p2;    this.numerator  =(int)maxDenominator;	  	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	111	None
1501	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	153	None
1502	[BUG]  [BUGGY]  throw  new  FractionConversionException( " ");  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException( " ");  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException( " ");	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	153	None
1503	[BUG]  [BUGGY]  n  =  Math.floor(r1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  n  =  Math.floor(r1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	n  =  Math.floor(r1);	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  possible  loss  of  precision	153	None
1504	[BUG]  [BUGGY]  n  =  Math.floor(a1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  n  =  Math.floor(a1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	n  =  Math.floor(a1);	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  possible  loss  of  precision	153	None
1511	[BUG]  [BUGGY]  setMaximum(maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximum(maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximum(maxDenominator);	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol	43	None
1512	[BUG]  [BUGGY]  setDenominator(maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator(maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator(maxDenominator);	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol	43	None
1513	[BUG]  [BUGGY]  setMaximum(maxDenominator,  value);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximum(maxDenominator,  value);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximum(maxDenominator,  value);	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol	43	None
1514	[BUG]  [BUGGY]  setMinimum(maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMinimum(maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMinimum(maxDenominator);	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol	43	None
1524	[BUG]  [BUGGY]  setOptimumFractionDigits(value,  maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setOptimumFractionDigits(value,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setOptimumFractionDigits(value,  maxDenominator);	      this(value,    0,    maxDenominator,    0);    	non-compiled	[CE]  cannot  find  symbol	45	None
1532	[BUG]  [BUGGY]  if(p1  >  maxDenominator)  {  if(p2  <  0)  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(p1  >  maxDenominator)  {  if(p2  <  0)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(p1  >  maxDenominator)  {  if(p2  <  0)  {  throw  new  IllegalArgumentException( "   ");  }	      if(p2    >    maxDenominator)    {    if(p2    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	485	None
1533	[BUG]  [BUGGY]  if(q1  >  maxDenominator)  {  if(p2  <  0)  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(q1  >  maxDenominator)  {  if(p2  <  0)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(q1  >  maxDenominator)  {  if(p2  <  0)  {  throw  new  IllegalArgumentException( "   ");  }	      if(p2    >    maxDenominator)    {    if(p2    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	485	None
1534	[BUG]  [BUGGY]  if(p2  >  maxDenominator)  {  if(p2  <=  0)  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(p2  >  maxDenominator)  {  if(p2  <=  0)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(p2  >  maxDenominator)  {  if(p2  <=  0)  {  throw  new  IllegalArgumentException( "   ");  }	      if(p2    >    maxDenominator)    {    if(p2    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	485	None
1542	[BUG]  [BUGGY]  this(value,  0,  value,  100,  maxDenominator);  [CE]  no  suitable  constructor  found  for  Fraction(double,int,double,int,int)  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value,  100,  maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value,  100,  maxDenominator);	  this(value,    0,    value,    100);    	non-compiled	[CE]  no  suitable  constructor  found  for  Fraction(double,int,double,int,int)	222	None
1543	[BUG]  [BUGGY]  this(value,  0,  value,  maxDenominator);  [CE]  no  suitable  constructor  found  for  Fraction(double,int,double,int)  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value,  maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value,  maxDenominator);	  this(value,    0,    value,    100);    	non-compiled	[CE]  no  suitable  constructor  found  for  Fraction(double,int,double,int)	222	None
1551	[BUG]  [BUGGY]  this(value,  0,  value,  maxDenominator,  100);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this(value,  0,  value,  maxDenominator,  100);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this(value,  0,  value,  maxDenominator,  100);	      p2    =    Math.floor(a1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	122	None
1552	[BUG]  [BUGGY]  this(value,  0,  numerator,  maxDenominator,  100);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this(value,  0,  numerator,  maxDenominator,  100);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this(value,  0,  numerator,  maxDenominator,  100);	      p2    =    Math.floor(a1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	122	None
1553	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  100);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this(value,  0,  maxDenominator,  100);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this(value,  0,  maxDenominator,  100);	      p2    =    Math.floor(a1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	122	None
1554	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  value,  100);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this(value,  0,  maxDenominator,  value,  100);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this(value,  0,  maxDenominator,  value,  100);	      p2    =    Math.floor(a1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	122	None
1561	[BUG]  [BUGGY]  if(q1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(q1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(q1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }	      p2    =(p2)FastMath.floor(q2);    	non-compiled	[CE]  while  expected	184	None
1562	[BUG]  [BUGGY]  if(p1  >  epsilon)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  epsilon)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  epsilon)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }	      p2    =(p2)FastMath.floor(q2);    	non-compiled	[CE]  while  expected	184	None
1563	[BUG]  [BUGGY]  if(p1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  q2)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }	      p2    =(p2)FastMath.floor(q2);    	non-compiled	[CE]  while  expected	184	None
1564	[BUG]  [BUGGY]  if(p1  >  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }	      p2    =(p2)FastMath.floor(q2);    	non-compiled	[CE]  while  expected	184	None
1573	[BUG]  [BUGGY]  setDenominator(minDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setDenominator(minDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setDenominator(minDenominator);	      setDenominator(maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	61	None
1582	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  a1,  p2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	throw  new  FractionConversionException(value,  a1,  p2);	  throw    new    FractionConversionException(value,    p2,    a1);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	154	2
1583	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  a1,  p2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  a1,  p2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  a1,  p2);	  throw    new    FractionConversionException(value,    p2,    a1);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	154	2
1591	[BUG]  [BUGGY]  this(value,  0,  value.intValue(),  DEFAULT_EPSILON,  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  value.intValue(),  DEFAULT_EPSILON,  maxDenominator);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this(value,  0,  value.intValue(),  DEFAULT_EPSILON,  maxDenominator);	  this.numerator    =    Math.max(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	304	None
1592	[BUG]  [BUGGY]  this(value,  0,  DEFAULT_EPSILON,  value.intValue(),  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  DEFAULT_EPSILON,  value.intValue(),  maxDenominator);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this(value,  0,  DEFAULT_EPSILON,  value.intValue(),  maxDenominator);	  this.numerator    =    Math.max(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	304	None
1593	[BUG]  [BUGGY]  this(value,  0,  DEFAULT_EPSILON,  intValue(),  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  DEFAULT_EPSILON,  intValue(),  maxDenominator);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this(value,  0,  DEFAULT_EPSILON,  intValue(),  maxDenominator);	  this.numerator    =    Math.max(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	304	None
1594	[BUG]  [BUGGY]  this(value,  0,  DEFAULT_EPSILON,  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  DEFAULT_EPSILON,  maxDenominator);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this(value,  0,  DEFAULT_EPSILON,  maxDenominator);	  this.numerator    =    Math.max(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	304	None
1604	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  p1,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(n,  p1,  q2);	  throw    new    FractionConversionException(value,    p1,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	4	2
1605	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p1,  q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  p1,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(n,  p1,  q2);	  throw    new    FractionConversionException(value,    p1,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	4	2
1611	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p2);  numerator  =  BigInteger.valueOf(q2);  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(p2);  numerator  =  BigInteger.valueOf(q2);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator    =    BigInteger.valueOf(p2);    numerator  =  BigInteger.valueOf(q2);	  	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	51	None
1613	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p2);  numerator  =  BigInteger.valueOf(p2);  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(p2);  numerator  =  BigInteger.valueOf(p2);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator    =    BigInteger.valueOf(p2);    numerator  =  BigInteger.valueOf(p2);	  	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	51	None
1614	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p2);  Numerator  =  BigInteger.valueOf(q2);  [CE]  cannot  find  symbol  Numerator  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(p2);  Numerator  =  BigInteger.valueOf(q2);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator    =    BigInteger.valueOf(p2);    Numerator  =  BigInteger.valueOf(q2);	  	non-compiled	[CE]  cannot  find  symbol  Numerator	51	None
1623	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1  -  2;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	add	this.denominator  =(int)p1  -  2;	      this.denominator    =(int)p1    -    1;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	513	2
1624	[BUG]  [BUGGY]  this.denominator  =(int)p1  -  2;  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1  -  2;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator  =(int)p1  -  2;	      this.denominator    =(int)p1    -    1;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	513	2
1642	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.min(maxDenominator));  [CE]  no  suitable  method  found  for  min(int)  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.min(maxDenominator));  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator((  int)Math.abs(value)>  Math.min(maxDenominator));	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator));    	non-compiled	[CE]  no  suitable  method  found  for  min(int)	424	None
1643	[BUG]  [BUGGY]  setNumerator((  int)Math.abs(value)>  Math.abs(maxDenominator));  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setNumerator((  int)Math.abs(value)>  Math.abs(maxDenominator));  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setNumerator((  int)Math.abs(value)>  Math.abs(maxDenominator));	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator));    	non-compiled	[CE]  cannot  find  symbol	424	None
1644	[BUG]  [BUGGY]  setDefinator((  int)Math.abs(value)>  Math.abs(maxDenominator));  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDefinator((  int)Math.abs(value)>  Math.abs(maxDenominator));  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDefinator((  int)Math.abs(value)>  Math.abs(maxDenominator));	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator));    	non-compiled	[CE]  cannot  find  symbol	424	None
1653	[BUG]  [BUGGY]  this(value,  0,  numerator,  100);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  numerator,  100);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this(value,  0,  numerator,  100);	  this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	102	None
1654	[BUG]  [BUGGY]  this(value,  0,  minDenominator,  100);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  minDenominator,  100);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this(value,  0,  minDenominator,  100);	  this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	102	None
1662	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  maxDenominator,  100);  [CE]  no  suitable  constructor  found  for  BigFraction(double,int,int,int,int)  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  maxDenominator,  100);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  maxDenominator,  maxDenominator,  100);	  this(value,    0,    numerator,    maxDenominator,    100);    	non-compiled	[CE]  no  suitable  constructor  found  for  BigFraction(double,int,int,int,int)	194	None
1663	[BUG]  [BUGGY]  this(value,  0,  denominator,  maxDenominator,  100);  [CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  denominator,  maxDenominator,  100);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  denominator,  maxDenominator,  100);	  this(value,    0,    numerator,    maxDenominator,    100);    	non-compiled	[CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called	194	None
1671	[BUG]  [BUGGY]  if(numerator  >=  p2)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(numerator  >=  p2)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(numerator  >=  p2)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }	      numerator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	14	None
1672	[BUG]  [BUGGY]  if(numerator  >=  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(numerator  >=  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(numerator  >=  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }	      numerator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	14	None
1673	[BUG]  [BUGGY]  if(numerator  >  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(numerator  >  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(numerator  >  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }	      numerator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	14	None
1674	[BUG]  [BUGGY]  if(numerator  >=  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(q3);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(numerator  >=  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(numerator  >=  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(q3);  }	      numerator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	14	None
1681	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p0);  numerator  =  BigInteger.valueOf(q2);  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(p0);  numerator  =  BigInteger.valueOf(q2);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator    =    BigInteger.valueOf(p0);    numerator  =  BigInteger.valueOf(q2);	  	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	163	None
1683	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p0);  numerator  =  BigInteger.valueOf(p2);  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(p0);  numerator  =  BigInteger.valueOf(p2);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator    =    BigInteger.valueOf(p0);    numerator  =  BigInteger.valueOf(p2);	  	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	163	None
1685	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p0);  Numerator  =  BigInteger.valueOf(q2);  [CE]  cannot  find  symbol  Numerator  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(p0);  Numerator  =  BigInteger.valueOf(q2);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator    =    BigInteger.valueOf(p0);    Numerator  =  BigInteger.valueOf(q2);	  	non-compiled	[CE]  cannot  find  symbol  Numerator	163	None
1692	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  [CE]  cannot  find  symbol  q3  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  denominator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	denominator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);	      num    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(q3);    	non-compiled	[CE]  cannot  find  symbol  q3	382	None
1702	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(0.0,  p2,  q1);	  throw    new    FractionConversionException(0.0,    p2,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	392	2
1703	[BUG]  [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q1);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(0.0,  p2,  q1);	  throw    new    FractionConversionException(0.0,    p2,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	392	2
1703	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(1.0,  p2,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(1.0,  p2,  q2);	  throw    new    FractionConversionException(0.0,    p2,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	392	2
1704	[BUG]  [BUGGY]  throw  new  FractionConversionException(1.0,  p2,  q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(1.0,  p2,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(1.0,  p2,  q2);	  throw    new    FractionConversionException(0.0,    p2,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	392	2
1704	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  a1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(0.0,  p2,  a1);	  throw    new    FractionConversionException(0.0,    p2,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	392	2
1705	[BUG]  [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  a1);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  a1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(0.0,  p2,  a1);	  throw    new    FractionConversionException(0.0,    p2,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	392	2
1712	[BUG]  [BUGGY]  this(numerator,  0,  denominator,  100);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(numerator,  0,  denominator,  100);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this(numerator,  0,  denominator,  100);	  this(value,    0,    denominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	104	None
1714	[BUG]  [BUGGY]  this(denominator,  0,  value,  100);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(denominator,  0,  value,  100);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this(denominator,  0,  value,  100);	  this(value,    0,    denominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	104	None
1721	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  throw  new  FractionConversionException( " ");  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  throw  new  FractionConversionException( " ");  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    throw  new  FractionConversionException( " ");	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	363	None
1722	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	363	None
1723	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  n  =  Math.floor(p2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  n  =  Math.floor(p2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    n  =  Math.floor(p2);	  	non-compiled	[CE]  possible  loss  of  precision	363	None
1724	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  p2  =  p2;  q2  =  a1;  p2  =  p2;  q1  =  q2;  p2  =  p2.getSecondSize();  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  p2  =  p2;  q2  =  a1;  p2  =  p2;  q1  =  q2;  p2  =  p2.getSecondSize();  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  p2  =  p2;  q2  =  a1;  p2  =  p2;  q1  =  q2;  p2  =  p2.getSecondSize();  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	363	None
1725	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  p2  =  p2;  q2  =  a1;  p2  =  p2;  q1  =  q2;  p2  =  p2;  q2  =  q  [CE]  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  p2  =  p2;  q2  =  a1;  p2  =  p2;  q1  =  q2;  p2  =  p2;  q2  =  q  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  p2  =  p2;  q2  =  a1;  p2  =  p2;  q1  =  q2;  p2  =  p2;  q2  =  q	  	non-compiled	[CE]  	363	None
1734	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(q3);  [CE]  cannot  find  symbol  q3  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(q3);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator  =  BigInteger.valueOf(q3);	  numerator    =    BigInteger.valueOf(p);    	non-compiled	[CE]  cannot  find  symbol  q3	274	None
1743	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  epsilon  =  Math.floor(r1);  p2  =(long)FastMath.floor(q2);  p2  =(long)fastMath.  [CE]  <identifier>  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  epsilon  =  Math.floor(r1);  p2  =(long)FastMath.floor(q2);  p2  =(long)fastMath.  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  epsilon  =  Math.floor(r1);  p2  =(long)FastMath.floor(q2);  p2  =(long)fastMath.	  throw    new    FractionConversionException(value,    p2,    a1);    	non-compiled	[CE]  <identifier>  expected	154	None
1744	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  p2  =  Math.floor(a1);  p2  =  Math.floor(q2);  p2  =  Math.floor(a1);  p2  =  Math.floor(q2);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  p2  =  Math.floor(a1);  p2  =  Math.floor(q2);  p2  =  Math.floor(a1);  p2  =  Math.floor(q2);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  p2  =  Math.floor(a1);  p2  =  Math.floor(q2);  p2  =  Math.floor(a1);  p2  =  Math.floor(q2);  }	  throw    new    FractionConversionException(value,    p2,    a1);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	154	None
1752	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  p2,  q1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(n,  p2,  q1);	  throw    new    FractionConversionException(n,    p2,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	393	2
1753	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p2,  q1);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  p2,  q1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(n,  p2,  q1);	  throw    new    FractionConversionException(n,    p2,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	393	2
1754	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  denominator,  p2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(int,BigInteger,long)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  denominator,  p2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(n,  denominator,  p2);	  throw    new    FractionConversionException(n,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(int,BigInteger,long)	393	None
1761	[BUG]  [BUGGY]  setMaxDenominator(maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setMaxDenominator(maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setMaxDenominator(maxDenominator);	      setDenominator(maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	61	None
1762	[BUG]  [BUGGY]  setMaxDenominator(value,  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setMaxDenominator(value,  maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setMaxDenominator(value,  maxDenominator);	      setDenominator(maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	61	None
1763	[BUG]  [BUGGY]  setMaxDenominator(minDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setMaxDenominator(minDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setMaxDenominator(minDenominator);	      setDenominator(maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	61	None
1764	[BUG]  [BUGGY]  setMaxDenominator(maxDenominator,  value);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setMaxDenominator(maxDenominator,  value);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setMaxDenominator(maxDenominator,  value);	      setDenominator(maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	61	None
1772	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(int)FastMath.floor(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	p2  =(int)FastMath.floor(q2);	      p2    =(p2)FastMath.floor(q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	184	2
1773	[BUG]  [BUGGY]  p2  =(int)FastMath.floor(q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(int)FastMath.floor(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(int)FastMath.floor(q2);	      p2    =(p2)FastMath.floor(q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	184	2
1773	[BUG]  [BUGGY]  p2  =(possible)FastMath.floor(q2);  [CE]  cannot  find  symbol  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(possible)FastMath.floor(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(possible)FastMath.floor(q2);	      p2    =(p2)FastMath.floor(q2);    	non-compiled	[CE]  cannot  find  symbol	184	None
1774	[BUG]  [BUGGY]  p2  =(P2)FastMath.floor(q2);  [CE]  cannot  find  symbol  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(P2)FastMath.floor(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(P2)FastMath.floor(q2);	      p2    =(p2)FastMath.floor(q2);    	non-compiled	[CE]  cannot  find  symbol	184	None
1781	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(numerator,  maxDenominator,  denominator);  [CE]  no  suitable  method  found  for  max(BigInteger,int,BigInteger)  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.max(numerator,  maxDenominator,  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.max(numerator,  maxDenominator,  denominator);	      super();    this.numerator    =    Math.max(numerator,    maxDenominator);    	non-compiled	[CE]  no  suitable  method  found  for  max(BigInteger,int,BigInteger)	342	None
1782	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(numerator,  maxDenominator,  value);  [CE]  no  suitable  method  found  for  max(BigInteger,int,double)  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.max(numerator,  maxDenominator,  value);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.max(numerator,  maxDenominator,  value);	      super();    this.numerator    =    Math.max(numerator,    maxDenominator);    	non-compiled	[CE]  no  suitable  method  found  for  max(BigInteger,int,double)	342	None
1791	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  >  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  >  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    if(numerator  >  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }	  	non-compiled	[CE]  while  expected	363	None
1793	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  >  maxDenominator)  {  if(maxDenominator  <=  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  >  maxDenominator)  {  if(maxDenominator  <=  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    if(numerator  >  maxDenominator)  {  if(maxDenominator  <=  0)  {  numerator  =  BigInteger.valueOf(q2);  }	  	non-compiled	[CE]  while  expected	363	None
1794	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  >=  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  >=  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    if(numerator  >=  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }	  	non-compiled	[CE]  while  expected	363	None
1795	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  >  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  >  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    if(numerator  >  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }	  	non-compiled	[CE]  while  expected	363	None
1802	[BUG]  [BUGGY]  n,  p2,  q2);  [CE]  not  a  statement  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  n,  p2,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	n,  p2,  q2);	  throw    new    FractionConversionException(0.0,    p2,    q2);    	non-compiled	[CE]  not  a  statement	392	None
1813	[BUG]  [BUGGY]  if(numerator  >  maxDenominator)  {  if(maxDenominator  <=  0)  {  numerator  =  BigInteger.valueOf(q3);  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  if(numerator  >  maxDenominator)  {  if(maxDenominator  <=  0)  {  numerator  =  BigInteger.valueOf(q3);  }  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	if(numerator  >  maxDenominator)  {  if(maxDenominator  <=  0)  {  numerator  =  BigInteger.valueOf(q3);  }	      if(numerator    >    maxDenominator)    {    if(maxDenominator    <    0)    {    numerator    =    BigInteger.valueOf(q3);    }    	non-compiled	[CE]  illegal  start  of  expression	365	None
1814	[BUG]  [BUGGY]  if(numerator  >=  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q3);  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  if(numerator  >=  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q3);  }  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	if(numerator  >=  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q3);  }	      if(numerator    >    maxDenominator)    {    if(maxDenominator    <    0)    {    numerator    =    BigInteger.valueOf(q3);    }    	non-compiled	[CE]  illegal  start  of  expression	365	None
1822	[BUG]  [BUGGY]  this(value,  0,  minDenominator,  100);  [CE]  cannot  find  symbol  minDenominator  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  minDenominator,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  minDenominator,  100);	  this(value,    0,    denominator,    100);    	non-compiled	[CE]  cannot  find  symbol  minDenominator	32	None
1823	[BUG]  [BUGGY]  this(value,  0,  maximumDenominator,  100);  [CE]  cannot  find  symbol  maximumDenominator  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maximumDenominator,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  maximumDenominator,  100);	  this(value,    0,    denominator,    100);    	non-compiled	[CE]  cannot  find  symbol  maximumDenominator	32	None
1824	[BUG]  [BUGGY]  this(value,  0,  value.length,  100);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value.length,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value.length,  100);	  this(value,    0,    denominator,    100);    	non-compiled	[CE]  double  cannot  be  dereferenced	32	None
1831	[BUG]  [BUGGY]  int  maxIterations  =  Math.max(maxDenominator,  epsilon);  [CE]  variable  maxIterations  is  already  defined  in  constructor  Fraction(double,double,int,int)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  int  maxIterations  =  Math.max(maxDenominator,  epsilon);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	int  maxIterations  =  Math.max(maxDenominator,  epsilon);	      int    maxIterations    =    Math.max(n,    epsilon);    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  Fraction(double,double,int,int)	185	None
1833	[BUG]  [BUGGY]  int  maxIterations  =  Math.max(value,  epsilon);  [CE]  variable  maxIterations  is  already  defined  in  constructor  Fraction(double,double,int,int)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  int  maxIterations  =  Math.max(value,  epsilon);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	int  maxIterations  =  Math.max(value,  epsilon);	      int    maxIterations    =    Math.max(n,    epsilon);    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  Fraction(double,double,int,int)	185	None
1834	[BUG]  [BUGGY]  int  maxIterations  =  Math.max(epsilon,  maxIterations);  [CE]  variable  maxIterations  is  already  defined  in  constructor  Fraction(double,double,int,int)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  int  maxIterations  =  Math.max(epsilon,  maxIterations);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	int  maxIterations  =  Math.max(epsilon,  maxIterations);	      int    maxIterations    =    Math.max(n,    epsilon);    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  Fraction(double,double,int,int)	185	None
1844	[BUG]  [BUGGY]  setDenominator(null);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setDenominator(null);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setDenominator(null);	      	non-compiled	[CE]  illegal  start  of  expression	105	None
1851	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	152	None
1852	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  throw  new  FractionConversionException( " ");  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  throw  new  FractionConversionException( " ");  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    throw  new  FractionConversionException( " ");	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	152	None
1853	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  n  =  Math.floor(p2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  n  =  Math.floor(p2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    n  =  Math.floor(p2);	  	non-compiled	[CE]  possible  loss  of  precision	152	None
1854	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( "FastMath.abs(q2)>  epsilon ");  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( "FastMath.abs(q2)>  epsilon ");  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    if(n  <  maxIterations)  {  throw  new  FractionConversionException( "FastMath.abs(q2)>  epsilon ");  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	152	None
1855	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  n  =  Math.log(value,  p2);  [CE]  method  log  in  class  Math  cannot  be  applied  to  given  types;  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  n  =  Math.log(value,  p2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    n  =  Math.log(value,  p2);	  	non-compiled	[CE]  method  log  in  class  Math  cannot  be  applied  to  given  types;	152	None
1862	[BUG]  [BUGGY]  if(q2  ==  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  q2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q2  ==  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  q2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q2  ==  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  q2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    q2;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None
1863	[BUG]  [BUGGY]  if(q2  <  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  q2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q2  <  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  q2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q2  <  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  q2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    q2;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None
1892	[BUG]  [BUGGY]  p2  =(p2  ==  0.0)?  p2  :  p1.next();  [CE]  long  cannot  be  dereferenced  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(p2  ==  0.0)?  p2  :  p1.next();  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(p2  ==  0.0)?  p2  :  p1.next();	  throw    new    FractionConversionException(value,    p2,    overflow);    	non-compiled	[CE]  long  cannot  be  dereferenced	155	None
1893	[BUG]  [BUGGY]  p2  =(p2  ==  0.0)?  p2.next()  :  p2.next();  [CE]  long  cannot  be  dereferenced  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(p2  ==  0.0)?  p2.next()  :  p2.next();  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(p2  ==  0.0)?  p2.next()  :  p2.next();	  throw    new    FractionConversionException(value,    p2,    overflow);    	non-compiled	[CE]  long  cannot  be  dereferenced	155	None
1894	[BUG]  [BUGGY]  p2  =(p2  ==  0.0)?  p2  :  q2.next();  [CE]  long  cannot  be  dereferenced  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(p2  ==  0.0)?  p2  :  q2.next();  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(p2  ==  0.0)?  p2  :  q2.next();	  throw    new    FractionConversionException(value,    p2,    overflow);    	non-compiled	[CE]  long  cannot  be  dereferenced	155	None
1911	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(long)FastMath.floor(p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	p2  =(long)FastMath.floor(p2);	      p2    =(int)FastMath.floor(p2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	183	2
1912	[BUG]  [BUGGY]  p2  =(long)FastMath.floor(p2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(long)FastMath.floor(p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(long)FastMath.floor(p2);	      p2    =(int)FastMath.floor(p2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	183	2
1913	[BUG]  [BUGGY]  p2  =(double)FastMath.floor(p2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(double)FastMath.floor(p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(double)FastMath.floor(p2);	      p2    =(int)FastMath.floor(p2);    	non-compiled	[CE]  possible  loss  of  precision	183	None
1914	[BUG]  [BUGGY]  p2  =(float)FastMath.floor(p2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(float)FastMath.floor(p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(float)FastMath.floor(p2);	      p2    =(int)FastMath.floor(p2);    	non-compiled	[CE]  possible  loss  of  precision	183	None
1921	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  throw  new  FractionConversionException( " ");  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  throw  new  FractionConversionException( " ");  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    throw  new  FractionConversionException( " ");	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	281	None
1922	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  throw  new  FractionConversionException(value,  p0,  q2);  [CE]  unreachable  statement  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  throw  new  FractionConversionException(value,  p0,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    throw  new  FractionConversionException(value,  p0,  q2);	  	non-compiled	[CE]  unreachable  statement	281	None
1923	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p2  =  Math.floor(a1);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p2  =  Math.floor(a1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    p2  =  Math.floor(a1);	  	non-compiled	[CE]  possible  loss  of  precision	281	None
1924	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p0  =  Math.floor(a1);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p0  =  Math.floor(a1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    p0  =  Math.floor(a1);	  	non-compiled	[CE]  possible  loss  of  precision	281	None
1925	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  throw  new  FractionConversionException(value,  p0,  q1);  [CE]  unreachable  statement  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  throw  new  FractionConversionException(value,  p0,  q1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    throw  new  FractionConversionException(value,  p0,  q1);	  	non-compiled	[CE]  unreachable  statement	281	None
1931	[BUG]  [BUGGY]  this(value,  maxDenominator,  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  Fraction(double,int,double)  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  maxDenominator,  DEFAULT_EPSILON);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  maxDenominator,  DEFAULT_EPSILON);	  this(value,    0,    maxDenominator,    10);    	non-compiled	[CE]  no  suitable  constructor  found  for  Fraction(double,int,double)	35	None
1932	[BUG]  [BUGGY]  int  numerator  =  value.doubleValue();  maxDenominator  =  value.doubleValue();  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  int  numerator  =  value.doubleValue();  maxDenominator  =  value.doubleValue();  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	int  numerator  =  value.doubleValue();  maxDenominator  =  value.doubleValue();	  this(value,    0,    maxDenominator,    10);    	non-compiled	[CE]  double  cannot  be  dereferenced	35	None
1933	[BUG]  [BUGGY]  int  numerator  =  value.intValue();  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  int  numerator  =  value.intValue();  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	int  numerator  =  value.intValue();	  this(value,    0,    maxDenominator,    10);    	non-compiled	[CE]  double  cannot  be  dereferenced	35	None
1934	[BUG]  [BUGGY]  int  numerator  =  value.doubleValue();  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  int  numerator  =  value.doubleValue();  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	int  numerator  =  value.doubleValue();	  this(value,    0,    maxDenominator,    10);    	non-compiled	[CE]  double  cannot  be  dereferenced	35	None
1941	[BUG]  [BUGGY]  this.denominator  =(int)p1;  this.denominator  =(int)q2;  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  this.denominator  =(int)q2;  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    this.denominator  =(int)q2;	  	non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	164	None
1942	[BUG]  [BUGGY]  this.denominator  =(int)p1;  this.denominator  =(int)p2;  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  this.denominator  =(int)p2;  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    this.denominator  =(int)p2;	  	non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	164	None
1943	[BUG]  [BUGGY]  this.denominator  =(int)p1;  if(q2  >  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  if(q2  >  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    if(q2  >  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }	  	non-compiled	[CE]  illegal  start  of  expression	164	None
1944	[BUG]  [BUGGY]  this.denominator  =(int)p1;  if(q2  >  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)p1;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  if(q2  >  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)p1;  }  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    if(q2  >  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)p1;  }	  	non-compiled	[CE]  illegal  start  of  expression	164	None
1945	[BUG]  [BUGGY]  this.denominator  =(int)p1;  this.denominator  =(int)(q2);  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  this.denominator  =(int)(q2);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    this.denominator  =(int)(q2);	  	non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	164	None
1953	[BUG]  [BUGGY]  p2  =  Math.floor(a1)-  p2;  p2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1)-  p2;  p2  =  Math.floor(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(a1)-  p2;  p2  =  Math.floor(q2);	      p2    =    Math.floor(a1);    p2    =    Math.floor(q2);    	non-compiled	[CE]  possible  loss  of  precision	211	None
1954	[BUG]  [BUGGY]  p2  =  Math.ceil(a1);  p2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.ceil(a1);  p2  =  Math.floor(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.ceil(a1);  p2  =  Math.floor(q2);	      p2    =    Math.floor(a1);    p2    =    Math.floor(q2);    	non-compiled	[CE]  possible  loss  of  precision	211	None
1962	[BUG]  [BUGGY]  setDefinition(value,  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setDefinition(value,  maxDenominator);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setDefinition(value,  maxDenominator);	      setDefinition(maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	174	None
1963	[BUG]  [BUGGY]  setDefinition(maxDenominator,  value);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setDefinition(maxDenominator,  value);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setDefinition(maxDenominator,  value);	      setDefinition(maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	174	None
1964	[BUG]  [BUGGY]  setDefinition(numerator,  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setDefinition(numerator,  maxDenominator);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setDefinition(numerator,  maxDenominator);	      setDefinition(maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	174	None
1981	[BUG]  [BUGGY]  p0  =  p1,  q1  -  p2;  [CE]  ';'  expected  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p0  =  p1,  q1  -  p2;  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p0  =  p1,  q1  -  p2;	  throw    new    FractionConversionException(p0,    p2,    q2);    	non-compiled	[CE]  ';'  expected	283	None
1992	[BUG]  [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p1);  [CE]  incompatible  types  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p1);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    numerator  =  BigInteger.valueOf(p1);	  	non-compiled	[CE]  incompatible  types	164	None
1993	[BUG]  [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(q1);  [CE]  incompatible  types  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(q1);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    numerator  =  BigInteger.valueOf(q1);	  	non-compiled	[CE]  incompatible  types	164	None
1995	[BUG]  [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p0  -  1);  [CE]  incompatible  types  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p0  -  1);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    numerator  =  BigInteger.valueOf(p0  -  1);	  	non-compiled	[CE]  incompatible  types	164	None
2004	[BUG]  [BUGGY]  Numerator  =  BigInteger.valueOf(q2);  [CE]  cannot  find  symbol  Numerator  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  Numerator  =  BigInteger.valueOf(q2);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	Numerator  =  BigInteger.valueOf(q2);	  numerator    =    BigInteger.valueOf(p2);    	non-compiled	[CE]  cannot  find  symbol  Numerator	52	None
2014	[BUG]  [BUGGY]  this(value,  0,  value.length,  100);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value.length,  100);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  value.length,  100);	  this(value,    0,    maximumDenominator,    100);    	non-compiled	[CE]  double  cannot  be  dereferenced	334	None
2032	[BUG]  [BUGGY]  this(value,  0,  value,  maxDenominator);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this(value,  0,  value,  maxDenominator);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this(value,  0,  value,  maxDenominator);	      p2    =    Math.floor(a1);    q2    =    Math.floor(q2);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	121	None
2033	[BUG]  [BUGGY]  this(value,  0,  value,  100,  maxDenominator);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this(value,  0,  value,  100,  maxDenominator);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this(value,  0,  value,  100,  maxDenominator);	      p2    =    Math.floor(a1);    q2    =    Math.floor(q2);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	121	None
1	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	throw  new  FractionConversionException(value,  p0,  q1);	  throw    new    FractionConversionException(value,    p0,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	362	2
2	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q1);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  p0,  q1);	  throw    new    FractionConversionException(value,    p0,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	362	2
4	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  a0,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	throw  new  FractionConversionException(value,  a0,  q2);	  throw    new    FractionConversionException(value,    p0,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	362	2
5	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  a0,  q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  a0,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  a0,  q2);	  throw    new    FractionConversionException(value,    p0,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	362	2
24	[BUG]  [BUGGY]  p2  =  Math.ceil(p2);  p2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.ceil(p2);  p2  =  Math.floor(q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.ceil(p2);  p2  =  Math.floor(q2);	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  possible  loss  of  precision	153	None
62	[BUG]  [BUGGY]  setMaximumFractionDenominator(value);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumFractionDenominator(value);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumFractionDenominator(value);	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  cannot  find  symbol	44	None
64	[BUG]  [BUGGY]  setMaximumFractionDenominator(numerator,  maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumFractionDenominator(numerator,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumFractionDenominator(numerator,  maxDenominator);	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  cannot  find  symbol	44	None
102	[BUG]  [BUGGY]  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }	      denominator    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	23	None
104	[BUG]  [BUGGY]  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }	      denominator    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	23	None
121	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p2  =  Math.floor(a1);  q2  =  Math.abs(q1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p2  =  Math.floor(a1);  q2  =  Math.abs(q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    p2  =  Math.floor(a1);  q2  =  Math.abs(q1);	  	non-compiled	[CE]  possible  loss  of  precision	361	None
122	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p0  =  Math.floor(a1);  q2  =  Math.abs(q1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p0  =  Math.floor(a1);  q2  =  Math.abs(q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    p0  =  Math.floor(a1);  q2  =  Math.abs(q1);	  	non-compiled	[CE]  possible  loss  of  precision	361	None
123	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p0  =  Math.floor(a1);  q1  =  Math.abs(q1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p0  =  Math.floor(a1);  q1  =  Math.abs(q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    p0  =  Math.floor(a1);  q1  =  Math.abs(q1);	  	non-compiled	[CE]  possible  loss  of  precision	361	None
124	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p0  =  Math.floor(a1);  q2  =  Math.ceil(q0,  p2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p0  =  Math.floor(a1);  q2  =  Math.ceil(q0,  p2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    p0  =  Math.floor(a1);  q2  =  Math.ceil(q0,  p2);	  	non-compiled	[CE]  possible  loss  of  precision	361	None
125	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p2  =  Math.floor(a1);  q2  =  Math.ceil(q1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p2  =  Math.floor(a1);  q2  =  Math.ceil(q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    p2  =  Math.floor(a1);  q2  =  Math.ceil(q1);	  	non-compiled	[CE]  possible  loss  of  precision	361	None
161	[BUG]  [BUGGY]  if(p1  >  p2)  {  if(p1  <  p2)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  p2)  {  if(p1  <  p2)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  p2)  {  if(p1  <  p2)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }	      p2    =(int)FastMath.floor(p2);    	non-compiled	[CE]  while  expected	183	None
163	[BUG]  [BUGGY]  if(p1  <  p2)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  <  p2)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  <  p2)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }	      p2    =(int)FastMath.floor(p2);    	non-compiled	[CE]  while  expected	183	None
181	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  a1,  a0,  p2,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(int,long,long,long,long)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  a1,  a0,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(n,  a1,  a0,  p2,  q2);	  throw    new    FractionConversionException(n,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(int,long,long,long,long)	452	None
182	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p2,  q1,  value);  [CE]  no  suitable  constructor  found  for  FractionConversionException(int,long,long,double)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  p2,  q1,  value);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(n,  p2,  q1,  value);	  throw    new    FractionConversionException(n,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(int,long,long,double)	452	None
184	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  value,  p0,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(int,double,long,long)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  value,  p0,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(n,  value,  p0,  q2);	  throw    new    FractionConversionException(n,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(int,double,long,long)	452	None
201	[BUG]  [BUGGY]  p2  =  Math.floor(p0);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(p0);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(p0);	      p2    =    Math.floor(p2);    	non-compiled	[CE]  possible  loss  of  precision	151	None
203	[BUG]  [BUGGY]  p2  =  Math.floor(p1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(p1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(p1);	      p2    =    Math.floor(p2);    	non-compiled	[CE]  possible  loss  of  precision	151	None
221	[BUG]  [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  p2  =  Math.floor(a1);  q2  =  Math.abs(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  p2  =  Math.floor(a1);  q2  =  Math.abs(q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(0.0,    p2,    q2);    p2  =  Math.floor(a1);  q2  =  Math.abs(q2);	  	non-compiled	[CE]  possible  loss  of  precision	391	None
222	[BUG]  [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  p2  =  Math.floor(a1);  q2  =  Math.abs(q1);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  p2  =  Math.floor(a1);  q2  =  Math.abs(q1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(0.0,    p2,    q2);    p2  =  Math.floor(a1);  q2  =  Math.abs(q1);	  	non-compiled	[CE]  possible  loss  of  precision	391	None
224	[BUG]  [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  p2  =  Math.floor(a1);  q1  =  Math.abs(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  p2  =  Math.floor(a1);  q1  =  Math.abs(q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(0.0,    p2,    q2);    p2  =  Math.floor(a1);  q1  =  Math.abs(q2);	  	non-compiled	[CE]  possible  loss  of  precision	391	None
243	[BUG]  [BUGGY]  if(value  <  0.0)  {  super();  this(value,  0,  maxDenominator,  1000);  }  else  {  throw  new  FractionException( "Function  values  at  endpoints  do  not  have  different  signs. ");  }  [CE]  call  to  super  must  be  first  statement  in  constructor  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  0.0)  {  super();  this(value,  0,  maxDenominator,  1000);  }  else  {  throw  new  FractionException( "Function  values  at  endpoints  do  not  have  different  signs. ");  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	if(value  <  0.0)  {  super();  this(value,  0,  maxDenominator,  1000);  }  else  {  throw  new  FractionException( "Function  values  at  endpoints  do  not  have  different  signs. ");  }	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	95	None
244	[BUG]  [BUGGY]  if(value  <  0.0)  {  super();  this(value,  0,  maxDenominator,  1000);  }  else  {  setMaximumFractionDigits(maxDenominator);  }  [CE]  call  to  super  must  be  first  statement  in  constructor  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  0.0)  {  super();  this(value,  0,  maxDenominator,  1000);  }  else  {  setMaximumFractionDigits(maxDenominator);  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	if(value  <  0.0)  {  super();  this(value,  0,  maxDenominator,  1000);  }  else  {  setMaximumFractionDigits(maxDenominator);  }	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	95	None
261	[BUG]  [BUGGY]  this(value,  0,  value.length,  0);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value.length,  0);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  value.length,  0);	      this(value,    0,    maxDenominator,    0);    	non-compiled	[CE]  double  cannot  be  dereferenced	45	None
263	[BUG]  [BUGGY]  this(value,  0,  value,  0);  [CE]  no  suitable  constructor  found  for  BigFraction(double,int,double,int)  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value,  0);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  value,  0);	      this(value,    0,    maxDenominator,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BigFraction(double,int,double,int)	45	None
264	[BUG]  [BUGGY]  this(value,  0,  numerator,  0);  [CE]  cannot  reference  numerator  before  supertype  constructor  has  been  called  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  numerator,  0);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  numerator,  0);	      this(value,    0,    maxDenominator,    0);    	non-compiled	[CE]  cannot  reference  numerator  before  supertype  constructor  has  been  called	45	None
284	[BUG]  [BUGGY]  int  numerator  =  BigInteger.valueOf(minDenominator);  [CE]  cannot  find  symbol  minDenominator  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  int  numerator  =  BigInteger.valueOf(minDenominator);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	int  numerator  =  BigInteger.valueOf(minDenominator);	      num    =    BigInteger.valueOf(minDenominator);    	non-compiled	[CE]  cannot  find  symbol  minDenominator	385	None
301	[BUG]  [BUGGY]  this(value,  0,  value.length,  maxDenominator,  1000);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value.length,  maxDenominator,  1000);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value.length,  maxDenominator,  1000);	  this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  double  cannot  be  dereferenced	34	None
302	[BUG]  [BUGGY]  this(value,  0,  value,  maxDenominator,  DEFAULT_EPSILON);  [CE]  no  suitable  constructor  found  for  Fraction(double,int,double,int,double)  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value,  maxDenominator,  DEFAULT_EPSILON);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value,  maxDenominator,  DEFAULT_EPSILON);	  this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  no  suitable  constructor  found  for  Fraction(double,int,double,int,double)	34	None
303	[BUG]  [BUGGY]  this(value,  0,  value,  maxDenominator,  0);  [CE]  no  suitable  constructor  found  for  Fraction(double,int,double,int,int)  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value,  maxDenominator,  0);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value,  maxDenominator,  0);	  this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  no  suitable  constructor  found  for  Fraction(double,int,double,int,int)	34	None
304	[BUG]  [BUGGY]  this(value,  0,  value.length,  maxDenominator);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value.length,  maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value.length,  maxDenominator);	  this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  double  cannot  be  dereferenced	34	None
322	[BUG]  [BUGGY]  this.numerator  =  Math.max(numerator,  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this.numerator  =  Math.max(numerator,  maxDenominator);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this.numerator  =  Math.max(numerator,  maxDenominator);	  this.numerator    =    Math.max(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	304	None
323	[BUG]  [BUGGY]  this.numerator  =  Math.max(Math.min(value,  maxDenominator),  DEFAULT_EPSILON);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this.numerator  =  Math.max(Math.min(value,  maxDenominator),  DEFAULT_EPSILON);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this.numerator  =  Math.max(Math.min(value,  maxDenominator),  DEFAULT_EPSILON);	  this.numerator    =    Math.max(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	304	None
324	[BUG]  [BUGGY]  this.numerator  =  Math.min(numerator,  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this.numerator  =  Math.min(numerator,  maxDenominator);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this.numerator  =  Math.min(numerator,  maxDenominator);	  this.numerator    =    Math.max(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	304	None
342	[BUG]  [BUGGY]  this(value,  0,  value.length,  100);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  value.length,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this(value,  0,  value.length,  100);	      this(value,    0,    denominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	64	None
343	[BUG]  [BUGGY]  this(value,  0,  value.intValue()  +  denominator,  100);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  value.intValue()  +  denominator,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this(value,  0,  value.intValue()  +  denominator,  100);	      this(value,    0,    denominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	64	None
344	[BUG]  [BUGGY]  this(value,  0,  value.toString(),  denominator,  100);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  value.toString(),  denominator,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this(value,  0,  value.toString(),  denominator,  100);	      this(value,    0,    denominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	64	None
363	[BUG]  [BUGGY]  setMaxDenominator(value);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setMaxDenominator(value);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setMaxDenominator(value);	      setDenominator(maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	61	None
364	[BUG]  [BUGGY]  setMaxDenominator(numerator,  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setMaxDenominator(numerator,  maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setMaxDenominator(numerator,  maxDenominator);	      setDenominator(maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	61	None
383	[BUG]  [BUGGY]  if(numerator  <  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(numerator  <  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(numerator  <  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }	  throw    new    FractionConversionException(value,    p0,    q2);    	non-compiled	[CE]  while  expected	362	None
384	[BUG]  [BUGGY]  if(numerator  <=  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(numerator  <=  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(numerator  <=  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }	  throw    new    FractionConversionException(value,    p0,    q2);    	non-compiled	[CE]  while  expected	362	None
404	[BUG]  [BUGGY]  this.numerator  =(double)p2;  [CE]  possible  loss  of  precision  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(double)p2;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =(double)p2;	  this.numerator    =(int)p2;    	non-compiled	[CE]  possible  loss  of  precision	112	None
423	[BUG]  [BUGGY]  p2  =  Math.floor(a1)-  p0;  p2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1)-  p0;  p2  =  Math.floor(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(a1)-  p0;  p2  =  Math.floor(q2);	      p2    =    Math.floor(a1);    p2    =    Math.floor(q2);    	non-compiled	[CE]  possible  loss  of  precision	211	None
443	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p1  /  2;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	add	this.numerator  =(int)p1  /  2;	  this.numerator    =(int)p1    -    1;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	264	2
444	[BUG]  [BUGGY]  this.numerator  =(int)p1  /  2;  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p1  /  2;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =(int)p1  /  2;	  this.numerator    =(int)p1    -    1;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	264	2
444	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(char)p1  -  1;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	add	this.numerator  =(char)p1  -  1;	  this.numerator    =(int)p1    -    1;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	264	2
445	[BUG]  [BUGGY]  this.numerator  =(char)p1  -  1;  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(char)p1  -  1;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =(char)p1  -  1;	  this.numerator    =(int)p1    -    1;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	264	2
462	[BUG]  [BUGGY]  setNumerator(numerator  -  1);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setNumerator(numerator  -  1);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setNumerator(numerator  -  1);	  setDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  expression	101	None
484	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  epsilon  =  (int)q2;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	add	this.denominator  =(int)p1;  epsilon  =  (int)q2;	      this.denominator    =(int)p1;    epsilon    =    q2;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	25	2
485	[BUG]  [BUGGY]  this.denominator  =(int)p1;  epsilon  =  (int)q2;  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  epsilon  =  (int)q2;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator  =(int)p1;  epsilon  =  (int)q2;	      this.denominator    =(int)p1;    epsilon    =    q2;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	25	2
523	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException( "Found  argument  not  followed  by  a  digit ");  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException( "Found  argument  not  followed  by  a  digit ");  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException( "Found  argument  not  followed  by  a  digit ");  }	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	153	None
524	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException( "Found  method  ' "  +  Math.floor(r1);  }  [CE]  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException( "Found  method  ' "  +  Math.floor(r1);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException( "Found  method  ' "  +  Math.floor(r1);  }	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  	153	None
542	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.abs(minorator))?  ONE  :  ZERO;  [CE]  not  a  statement  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.abs(minorator))?  ONE  :  ZERO;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator((  int)Math.abs(value)>  Math.abs(minorator))?  ONE  :  ZERO;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator))?    ONE    :    ZERO;    	non-compiled	[CE]  not  a  statement	425	None
543	[BUG]  [BUGGY]  setNumerator((  int)Math.abs(value)>  Math.abs(maxDenominator))?  ONE  :  ZERO;  [CE]  not  a  statement  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setNumerator((  int)Math.abs(value)>  Math.abs(maxDenominator))?  ONE  :  ZERO;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setNumerator((  int)Math.abs(value)>  Math.abs(maxDenominator))?  ONE  :  ZERO;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator))?    ONE    :    ZERO;    	non-compiled	[CE]  not  a  statement	425	None
561	[BUG]  [BUGGY]  p0  =  p1;  p2  =  p1.doubleValue();  [CE]  long  cannot  be  dereferenced  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p0  =  p1;  p2  =  p1.doubleValue();  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p0  =  p1;  p2  =  p1.doubleValue();	  throw    new    FractionConversionException(value,    p0,    q2);    	non-compiled	[CE]  long  cannot  be  dereferenced	282	None
562	[BUG]  [BUGGY]  p0  =  p1;  p2  =  p1.longValue();  [CE]  long  cannot  be  dereferenced  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p0  =  p1;  p2  =  p1.longValue();  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p0  =  p1;  p2  =  p1.longValue();	  throw    new    FractionConversionException(value,    p0,    q2);    	non-compiled	[CE]  long  cannot  be  dereferenced	282	None
563	[BUG]  [BUGGY]  p0  =  p1;  p2  =  Math.floor(a1);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p0  =  p1;  p2  =  Math.floor(a1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p0  =  p1;  p2  =  Math.floor(a1);	  throw    new    FractionConversionException(value,    p0,    q2);    	non-compiled	[CE]  possible  loss  of  precision	282	None
564	[BUG]  [BUGGY]  p0  =  p1;  p2  =  Math.floor(r1);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p0  =  p1;  p2  =  Math.floor(r1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p0  =  p1;  p2  =  Math.floor(r1);	  throw    new    FractionConversionException(value,    p0,    q2);    	non-compiled	[CE]  possible  loss  of  precision	282	None
581	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q0);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(0.0,  p2,  q0);	  throw    new    FractionConversionException(0.0,    p2,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	392	2
582	[BUG]  [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q0);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q0);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(0.0,  p2,  q0);	  throw    new    FractionConversionException(0.0,    p2,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	392	2
602	[BUG]  [BUGGY]  this(value,  0,  value.length,  denominator,  100);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value.length,  denominator,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value.length,  denominator,  100);	  this(value,    0,    value.length,    maxDenominator,    100);    	non-compiled	[CE]  double  cannot  be  dereferenced	221	None
604	[BUG]  [BUGGY]  this(value,  0,  value.length,  minDenominator,  100);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value.length,  minDenominator,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value.length,  minDenominator,  100);	  this(value,    0,    value.length,    maxDenominator,    100);    	non-compiled	[CE]  double  cannot  be  dereferenced	221	None
621	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  ==  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  ==  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    if(numerator  ==  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }	  	non-compiled	[CE]  while  expected	363	None
622	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  <  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  <  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    if(numerator  <  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }	  	non-compiled	[CE]  while  expected	363	None
623	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  >=  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  >=  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    if(numerator  >=  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }	  	non-compiled	[CE]  while  expected	363	None
625	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  <=  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  <=  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    if(numerator  <=  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }	  	non-compiled	[CE]  while  expected	363	None
644	[BUG]  [BUGGY]  if(value  >=  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  throw  new  FractionConversionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(value  >=  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	if(value  >=  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  throw  new  FractionConversionException( " ");  }	      setDenominator(value);    	non-compiled	[CE]  illegal  start  of  expression	65	None
661	[BUG]  [BUGGY]  if(q1  >  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q1  >  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q1  >  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    (int)q2;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None
662	[BUG]  [BUGGY]  if(q1  >  maxDenominator)  {  if(maxDenominator  >>  epsilon)  {  this.numerator  =(int)q2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q1  >  maxDenominator)  {  if(maxDenominator  >>  epsilon)  {  this.numerator  =(int)q2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q1  >  maxDenominator)  {  if(maxDenominator  >>  epsilon)  {  this.numerator  =(int)q2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    (int)q2;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None
663	[BUG]  [BUGGY]  this.numerator  =(int)q2;  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.numerator  =(int)q2;  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.numerator  =(int)q2;  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    (int)q2;    }    	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	84	None
664	[BUG]  [BUGGY]  if(q2  <  -1)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q2  <  -1)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q2  <  -1)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    (int)q2;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None
684	[BUG]  [BUGGY]  this.numerator  =  Math.abs(q2);  this.denominator  =  Math.abs(q3);  [CE]  possible  loss  of  precision  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =  Math.abs(q2);  this.denominator  =  Math.abs(q3);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =  Math.abs(q2);  this.denominator  =  Math.abs(q3);	      this.numerator    =    Math.abs(q2);    this.denominator    =    Math.abs(q1);    	non-compiled	[CE]  possible  loss  of  precision	144	None
723	[BUG]  [BUGGY]  this.denominator  =(int)q2,  maxDenominator;  [CE]  ';'  expected  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)q2,  maxDenominator;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator  =(int)q2,  maxDenominator;	      this.denominator    =(int)q2;    	non-compiled	[CE]  ';'  expected	81	None
724	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)maxDenominator;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	add	this.denominator  =(int)maxDenominator;	      this.denominator    =(int)q2;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	81	2
725	[BUG]  [BUGGY]  this.denominator  =(int)maxDenominator;  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)maxDenominator;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator  =(int)maxDenominator;	      this.denominator    =(int)q2;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	81	2
762	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.ceil(q0,  q1);  [CE]  cannot  find  symbol  a1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.ceil(q0,  q1);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(a1);  p2  =  Math.ceil(q0,  q1);	      this.denominator    =(int)q2;    	non-compiled	[CE]  cannot  find  symbol  a1	81	None
782	[BUG]  [BUGGY]  setValue(value,  0,  maxDenominator,  DEFAULT_EPSILON);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setValue(value,  0,  maxDenominator,  DEFAULT_EPSILON);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setValue(value,  0,  maxDenominator,  DEFAULT_EPSILON);	      setValue(value,    0,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	93	None
783	[BUG]  [BUGGY]  setValue(value,  0,  maxDenominator,  denominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setValue(value,  0,  maxDenominator,  denominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setValue(value,  0,  maxDenominator,  denominator);	      setValue(value,    0,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	93	None
784	[BUG]  [BUGGY]  setValue(value,  0,  value.length);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setValue(value,  0,  value.length);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setValue(value,  0,  value.length);	      setValue(value,    0,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	93	None
803	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.round(hash,  p2);  [CE]  cannot  find  symbol  a1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.round(hash,  p2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(a1);  p2  =  Math.round(hash,  p2);	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    (int)q2;    }    	non-compiled	[CE]  cannot  find  symbol  a1	84	None
804	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.round(r1);  [CE]  cannot  find  symbol  a1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.round(r1);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(a1);  p2  =  Math.round(r1);	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    (int)q2;    }    	non-compiled	[CE]  cannot  find  symbol  a1	84	None
824	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.abs(q1);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.abs(q1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(a1);  q2  =  Math.abs(q1);	  throw    new    FractionConversionException(0.0,    p2,    q2);    	non-compiled	[CE]  possible  loss  of  precision	392	None
843	[BUG]  [BUGGY]  if(numerator  >=  0.0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(numerator  >=  0.0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(numerator  >=  0.0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }	      numerator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(q3);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	481	None
844	[BUG]  [BUGGY]  if(numerator  >=  p2)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(numerator  >=  p2)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(numerator  >=  p2)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }	      numerator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(q3);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	481	None
862	[BUG]  [BUGGY]  super();  this.numerator  =  Math.min(numerator,  denominator,  maxDenominator);  [CE]  no  suitable  method  found  for  min(BigInteger,BigInteger,int)  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.min(numerator,  denominator,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.min(numerator,  denominator,  maxDenominator);	      super();    this.numerator    =    Math.min(numerator,    maxDenominator);    	non-compiled	[CE]  no  suitable  method  found  for  min(BigInteger,BigInteger,int)	343	None
864	[BUG]  [BUGGY]  super();  this.numerator  =  Math.min(numerator,  value,  maxDenominator);  [CE]  no  suitable  method  found  for  min(BigInteger,double,int)  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.min(numerator,  value,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.min(numerator,  value,  maxDenominator);	      super();    this.numerator    =    Math.min(numerator,    maxDenominator);    	non-compiled	[CE]  no  suitable  method  found  for  min(BigInteger,double,int)	343	None
883	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.sqrt(q1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.sqrt(q1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(a1);  q2  =  Math.sqrt(q1);	      p2    =    Math.floor(a1);    q2    =    Math.abs(q1);    	non-compiled	[CE]  possible  loss  of  precision	241	None
884	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.sq(q1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.sq(q1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(a1);  q2  =  Math.sq(q1);	      p2    =    Math.floor(a1);    q2    =    Math.abs(q1);    	non-compiled	[CE]  possible  loss  of  precision	241	None
922	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(numerator,  denominator,  100);  [CE]  no  suitable  method  found  for  max(BigInteger,BigInteger,int)  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.max(numerator,  denominator,  100);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.max(numerator,  denominator,  100);	      super();    this.numerator    =    Math.max(numerator,    denominator);    	non-compiled	[CE]  no  suitable  method  found  for  max(BigInteger,BigInteger,int)	345	None
924	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(numerator,  denominator,  400);  [CE]  no  suitable  method  found  for  max(BigInteger,BigInteger,int)  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.max(numerator,  denominator,  400);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.max(numerator,  denominator,  400);	      super();    this.numerator    =    Math.max(numerator,    denominator);    	non-compiled	[CE]  no  suitable  method  found  for  max(BigInteger,BigInteger,int)	345	None
963	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(p1);  q2  =  Math.floor(q1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(p1);  q2  =  Math.floor(q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p2  =  Math.floor(p1);  q2  =  Math.floor(q1);	  	non-compiled	[CE]  possible  loss  of  precision	152	None
964	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.ceil(p0);  q2  =  Math.floor(q1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.ceil(p0);  q2  =  Math.floor(q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p2  =  Math.ceil(p0);  q2  =  Math.floor(q1);	  	non-compiled	[CE]  possible  loss  of  precision	152	None
983	[BUG]  [BUGGY]  p2  =  Math.floor(r1);  q2  =  Math.abs(a1  -  a0);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(r1);  q2  =  Math.abs(a1  -  a0);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(r1);  q2  =  Math.abs(a1  -  a0);	      	non-compiled	[CE]  possible  loss  of  precision	6	None
984	[BUG]  [BUGGY]  p2  =  Math.floor(r1);  q1  =  Math.abs(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(r1);  q1  =  Math.abs(q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(r1);  q1  =  Math.abs(q2);	      	non-compiled	[CE]  possible  loss  of  precision	6	None
1002	[BUG]  [BUGGY]  p2  =(full)FastMath.floor(p2);  [CE]  cannot  find  symbol  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(full)FastMath.floor(p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(full)FastMath.floor(p2);	      p2    =(p2)FastMath.floor(p2);    	non-compiled	[CE]  cannot  find  symbol	181	None
1003	[BUG]  [BUGGY]  p2  =(p0)FastMath.floor(p2);  [CE]  cannot  find  symbol  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(p0)FastMath.floor(p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(p0)FastMath.floor(p2);	      p2    =(p2)FastMath.floor(p2);    	non-compiled	[CE]  cannot  find  symbol	181	None
1004	[BUG]  [BUGGY]  p2  =(p2)FastMath.floor(p1);  [CE]  cannot  find  symbol  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(p2)FastMath.floor(p1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(p2)FastMath.floor(p1);	      p2    =(p2)FastMath.floor(p2);    	non-compiled	[CE]  cannot  find  symbol	181	None
1021	[BUG]  [BUGGY]  this(value,  0,  value,  maxDenominator,  DEFAULT_EPSILON,  100);  [CE]  no  suitable  constructor  found  for  Fraction(double,int,double,int,double,int)  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value,  maxDenominator,  DEFAULT_EPSILON,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value,  maxDenominator,  DEFAULT_EPSILON,  100);	  this(value,    0,    value,    maxDenominator,    100);    	non-compiled	[CE]  no  suitable  constructor  found  for  Fraction(double,int,double,int,double,int)	223	None
1024	[BUG]  [BUGGY]  this(value,  0,  value,  denominator,  100);  [CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value,  denominator,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value,  denominator,  100);	  this(value,    0,    value,    maxDenominator,    100);    	non-compiled	[CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called	223	None
1045	[BUG]  [BUGGY]      p1  =  Math.floor(r1);  q2  =  Math.abs(a1  -  a0);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]      p1  =  Math.floor(r1);  q2  =  Math.abs(a1  -  a0);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	        p1  =  Math.floor(r1);  q2  =  Math.abs(a1  -  a0);	  	non-compiled	[CE]  possible  loss  of  precision	5	None
1061	[BUG]  [BUGGY]  this(value,  0,  denominator,  0);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  denominator,  0);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this(value,  0,  denominator,  0);	      this(value,    0,    maxDenominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	175	None
1062	[BUG]  [BUGGY]  this(value,  0,  value.length,  0);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  value.length,  0);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this(value,  0,  value.length,  0);	      this(value,    0,    maxDenominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	175	None
1063	[BUG]  [BUGGY]  this(value,  0,  numerator,  0);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  numerator,  0);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this(value,  0,  numerator,  0);	      this(value,    0,    maxDenominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	175	None
1083	[BUG]  [BUGGY]  this(value,  0,  value,  denominator,  100);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this(value,  0,  value,  denominator,  100);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this(value,  0,  value,  denominator,  100);	      p2    =    Math.floor(a1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	122	None
1084	[BUG]  [BUGGY]  this(value,  0,  value,  numerator,  maxDenominator,  100);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this(value,  0,  value,  numerator,  maxDenominator,  100);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this(value,  0,  value,  numerator,  maxDenominator,  100);	      p2    =    Math.floor(a1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	122	None
1104	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(numerator,  maxDenominator);  [CE]  variable  numerator  might  not  have  been  initialized  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.max(numerator,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	super();  this.numerator  =  Math.max(numerator,  maxDenominator);	      super();    this.numerator    =    Math.min(numerator,    maxDenominator);    	non-compiled	[CE]  variable  numerator  might  not  have  been  initialized	142	None
1122	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(numerator  <  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(numerator  <  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    if(numerator  <  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }	  	non-compiled	[CE]  while  expected	361	None
1123	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(numerator  >=  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(numerator  >=  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    if(numerator  >=  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }	  	non-compiled	[CE]  while  expected	361	None
1124	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(numerator  ==  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(numerator  ==  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    if(numerator  ==  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }	  	non-compiled	[CE]  while  expected	361	None
1125	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(numerator  <=  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(numerator  <=  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    if(numerator  <=  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }	  	non-compiled	[CE]  while  expected	361	None
1143	[BUG]  [BUGGY]  p2  =  Math.floor(a1  -  p2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1  -  p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(a1  -  p2);	      p2    =    Math.floor(a1);    	non-compiled	[CE]  possible  loss  of  precision	122	None
1144	[BUG]  [BUGGY]  p2  =  Math.floor(a1),  p0;  [CE]  ';'  expected  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1),  p0;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(a1),  p0;	      p2    =    Math.floor(a1);    	non-compiled	[CE]  ';'  expected	122	None
1162	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.abs(minorator));  [CE]  cannot  find  symbol  minorator  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.abs(minorator));  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator((  int)Math.abs(value)>  Math.abs(minorator));	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator));    	non-compiled	[CE]  cannot  find  symbol  minorator	424	None
1164	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.floor(maxDenominator));  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.floor(maxDenominator));  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator((  int)Math.abs(value)>  Math.floor(maxDenominator));	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator));    	non-compiled	[CE]  cannot  find  symbol	424	None
1201	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  peg(Calendar.getInstance());  [CE]  cannot  find  symbol  Calendar  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  peg(Calendar.getInstance());  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,    0,    maxDenominator,    1000);    peg(Calendar.getInstance());	  	non-compiled	[CE]  cannot  find  symbol  Calendar	192	None
1202	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  setResult(value,  0,  maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  setResult(value,  0,  maxDenominator);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,    0,    maxDenominator,    1000);    setResult(value,  0,  maxDenominator);	  	non-compiled	[CE]  cannot  find  symbol	192	None
1203	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  if(numerator  >=  0)  {  throw  new  FractionException( "Function  values  at  endpoints  do  not  have  different  signs. ");  }  [CE]  bad  operand  types  for  binary  operator  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  if(numerator  >=  0)  {  throw  new  FractionException( "Function  values  at  endpoints  do  not  have  different  signs. ");  }  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,    0,    maxDenominator,    1000);    if(numerator  >=  0)  {  throw  new  FractionException( "Function  values  at  endpoints  do  not  have  different  signs. ");  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	192	None
1204	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  if(numerator  >=  0)  {  if(maxDenominator  <  value)  {  throw  new  FractionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  if(numerator  >=  0)  {  if(maxDenominator  <  value)  {  throw  new  FractionException( " ");  }  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,    0,    maxDenominator,    1000);    if(numerator  >=  0)  {  if(maxDenominator  <  value)  {  throw  new  FractionException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	192	None
1205	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  if(numerator  >=  0)  {  throw  new  FractionException( " ");  }  [CE]  bad  operand  types  for  binary  operator  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  if(numerator  >=  0)  {  throw  new  FractionException( " ");  }  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,    0,    maxDenominator,    1000);    if(numerator  >=  0)  {  throw  new  FractionException( " ");  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	192	None
1221	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  p0  =  Math.pow(Math.floor(p2));  [CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  p0  =  Math.pow(Math.floor(p2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    p0  =  Math.pow(Math.floor(p2));	  	non-compiled	[CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;	363	None
1222	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  p2  =  Math.floor(a1);  q1  =  Math.abs(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  p2  =  Math.floor(a1);  q1  =  Math.abs(q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    p2  =  Math.floor(a1);  q1  =  Math.abs(q2);	  	non-compiled	[CE]  possible  loss  of  precision	363	None
1223	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  p2  =  Math.floor(a1);  q1  =  Math.abs(q1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  p2  =  Math.floor(a1);  q1  =  Math.abs(q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    p2  =  Math.floor(a1);  q1  =  Math.abs(q1);	  	non-compiled	[CE]  possible  loss  of  precision	363	None
1224	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  p0  =  Math.pow(Math.floor(p2),  p0);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  p0  =  Math.pow(Math.floor(p2),  p0);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    p0  =  Math.pow(Math.floor(p2),  p0);	  	non-compiled	[CE]  possible  loss  of  precision	363	None
1225	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  p0  =  Math.pow(Math.floor(p2),  epsilon,  q1);  [CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  p0  =  Math.pow(Math.floor(p2),  epsilon,  q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    p0  =  Math.pow(Math.floor(p2),  epsilon,  q1);	  	non-compiled	[CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;	363	None
1241	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =(double)FastMath.floor(p2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =(double)FastMath.floor(p2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p2  =(double)FastMath.floor(p2);	  	non-compiled	[CE]  possible  loss  of  precision	152	None
1242	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(a1);  q2  =  Math.abs(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(a1);  q2  =  Math.abs(q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p2  =  Math.floor(a1);  q2  =  Math.abs(q2);	  	non-compiled	[CE]  possible  loss  of  precision	152	None
1243	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(a1);  q2  =  Math.ceil(q0,  p2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(a1);  q2  =  Math.ceil(q0,  p2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p2  =  Math.floor(a1);  q2  =  Math.ceil(q0,  p2);	  	non-compiled	[CE]  possible  loss  of  precision	152	None
1244	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =(double)FastMath.floor(p2);  q2  =(double)P0;  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =(double)FastMath.floor(p2);  q2  =(double)P0;  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p2  =(double)FastMath.floor(p2);  q2  =(double)P0;	  	non-compiled	[CE]  possible  loss  of  precision	152	None
1245	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =(double)FastMath.floor(p2);  q1  =(double)P0;  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =(double)FastMath.floor(p2);  q1  =(double)P0;  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p2  =(double)FastMath.floor(p2);  q1  =(double)P0;	  	non-compiled	[CE]  possible  loss  of  precision	152	None
1261	[BUG]  [BUGGY]  this.numerator  =  Math.max(numerator,  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this.numerator  =  Math.max(numerator,  maxDenominator);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this.numerator  =  Math.max(numerator,  maxDenominator);	      	non-compiled	[CE]  illegal  start  of  expression	105	None
1262	[BUG]  [BUGGY]  if(numerator  >=  0)  {  throw  new  FractionConversionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(numerator  >=  0)  {  throw  new  FractionConversionException( " ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(numerator  >=  0)  {  throw  new  FractionConversionException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	105	None
1263	[BUG]  [BUGGY]  this.numerator  =  Math.pow(10,  denominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this.numerator  =  Math.pow(10,  denominator);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this.numerator  =  Math.pow(10,  denominator);	      	non-compiled	[CE]  illegal  start  of  expression	105	None
1264	[BUG]  [BUGGY]  if(numerator  >=  0)  {  throw  new  FractionConversionException( " "));  }  [CE]  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(numerator  >=  0)  {  throw  new  FractionConversionException( " "));  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(numerator  >=  0)  {  throw  new  FractionConversionException( " "));  }	      	non-compiled	[CE]  	105	None
1283	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p0,  q2);  [CE]  no  suitable  method  found  for  valueOf(long,long)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  denominator  =  BigInteger.valueOf(p0,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	denominator  =  BigInteger.valueOf(p0,  q2);	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(long,long)	3	None
1284	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p3);  [CE]  cannot  find  symbol  p3  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  denominator  =  BigInteger.valueOf(p3);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	denominator  =  BigInteger.valueOf(p3);	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  cannot  find  symbol  p3	3	None
1302	[BUG]  [BUGGY]  this(value,  0,  value,  maxDenominator,  0.0001);  [CE]  no  suitable  constructor  found  for  BigFraction(double,int,double,int,double)  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value,  maxDenominator,  0.0001);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  value,  maxDenominator,  0.0001);	  this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  no  suitable  constructor  found  for  BigFraction(double,int,double,int,double)	193	None
1303	[BUG]  [BUGGY]  this(value,  0,  value,  maxDenominator,  1000);  [CE]  no  suitable  constructor  found  for  BigFraction(double,int,double,int,int)  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value,  maxDenominator,  1000);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  value,  maxDenominator,  1000);	  this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  no  suitable  constructor  found  for  BigFraction(double,int,double,int,int)	193	None
1324	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p1);  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  denominator  =  BigInteger.valueOf(p1);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	denominator  =  BigInteger.valueOf(p1);	      denominator    =    BigInteger.valueOf(p2);    	non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	15	None
1343	[BUG]  [BUGGY]  p2  =  Math.floor(r0);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(r0);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(r0);	      p2    =    Math.floor(r1);    	non-compiled	[CE]  possible  loss  of  precision	124	None
1344	[BUG]  [BUGGY]  p2  =  Math.floor(r1  -  a0);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(r1  -  a0);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(r1  -  a0);	      p2    =    Math.floor(r1);    	non-compiled	[CE]  possible  loss  of  precision	124	None
1381	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(a1);  q2  =  Math.abs(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(a1);  q2  =  Math.abs(q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p2  =  Math.floor(a1);  q2  =  Math.abs(q2);	  	non-compiled	[CE]  possible  loss  of  precision	2	None
1382	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(a1);  q1  =  Math.abs(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(a1);  q1  =  Math.abs(q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p2  =  Math.floor(a1);  q1  =  Math.abs(q2);	  	non-compiled	[CE]  possible  loss  of  precision	2	None
1383	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p0  =  Math.floor(a1);  q1  =  Math.abs(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p0  =  Math.floor(a1);  q1  =  Math.abs(q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p0  =  Math.floor(a1);  q1  =  Math.abs(q2);	  	non-compiled	[CE]  possible  loss  of  precision	2	None
1384	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p0  =  Math.floor(a1);  p2  =  Math.round(q0);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p0  =  Math.floor(a1);  p2  =  Math.round(q0);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p0  =  Math.floor(a1);  p2  =  Math.round(q0);	  	non-compiled	[CE]  possible  loss  of  precision	2	None
1402	[BUG]  [BUGGY]  this.numerator  =(int)p1,  maxDenominator;  [CE]  ';'  expected  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p1,  maxDenominator;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =(int)p1,  maxDenominator;	      	non-compiled	[CE]  ';'  expected	115	None
1422	[BUG]  [BUGGY]  this(value,  0,  value.intValue(),  DEFAULT_EPSILON,  denominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  value.intValue(),  DEFAULT_EPSILON,  denominator);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this(value,  0,  value.intValue(),  DEFAULT_EPSILON,  denominator);	  this.numerator    =    Math.max(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	304	None
1424	[BUG]  [BUGGY]  this(value,  0,  value.doubleValue(),  DEFAULT_EPSILON,  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  value.doubleValue(),  DEFAULT_EPSILON,  maxDenominator);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this(value,  0,  value.doubleValue(),  DEFAULT_EPSILON,  maxDenominator);	  this.numerator    =    Math.max(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	304	None
1444	[BUG]  [BUGGY]  num  =  BigInteger.valueOf(p2);  [CE]  cannot  find  symbol  num  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  num  =  BigInteger.valueOf(p2);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	num  =  BigInteger.valueOf(p2);	  numerator    =    BigInteger.valueOf(p2);    	non-compiled	[CE]  cannot  find  symbol  num	52	None
1463	[BUG]  [BUGGY]  this(numerator,  0,  value,  100);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(numerator,  0,  value,  100);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this(numerator,  0,  value,  100);	  this(value,    0,    denominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	104	None
1464	[BUG]  [BUGGY]  this(null,  0,  denominator,  100);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(null,  0,  denominator,  100);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this(null,  0,  denominator,  100);	  this(value,    0,    denominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	104	None
1484	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(numerator,  value,  maxDenominator);  [CE]  no  suitable  method  found  for  max(BigInteger,double,int)  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.max(numerator,  value,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.max(numerator,  value,  maxDenominator);	      super();    this.numerator    =    Math.max(numerator,    maxDenominator);    	non-compiled	[CE]  no  suitable  method  found  for  max(BigInteger,double,int)	342	None
1501	[BUG]  [BUGGY]  if(numerator  ==  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q3);  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  if(numerator  ==  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q3);  }  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	if(numerator  ==  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q3);  }	      if(numerator    >    maxDenominator)    {    if(maxDenominator    <    0)    {    numerator    =    BigInteger.valueOf(q3);    }    	non-compiled	[CE]  illegal  start  of  expression	365	None
1502	[BUG]  [BUGGY]  if(numerator  <  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q3);  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  if(numerator  <  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q3);  }  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	if(numerator  <  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q3);  }	      if(numerator    >    maxDenominator)    {    if(maxDenominator    <    0)    {    numerator    =    BigInteger.valueOf(q3);    }    	non-compiled	[CE]  illegal  start  of  expression	365	None
1503	[BUG]  [BUGGY]  if(numerator  >=  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q3);  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  if(numerator  >=  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q3);  }  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	if(numerator  >=  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q3);  }	      if(numerator    >    maxDenominator)    {    if(maxDenominator    <    0)    {    numerator    =    BigInteger.valueOf(q3);    }    	non-compiled	[CE]  illegal  start  of  expression	365	None
1522	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p1,  q0);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(value,  p1,  q0);	  throw    new    FractionConversionException(value,    p1,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	4	2
1523	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p1,  q0);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p1,  q0);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(value,  p1,  q0);	  throw    new    FractionConversionException(value,    p1,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	4	2
1544	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1  /  1;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	add	this.denominator  =(int)p1  /  1;	      this.denominator    =(int)p1    -    1;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	513	2
1545	[BUG]  [BUGGY]  this.denominator  =(int)p1  /  1;  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1  /  1;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator  =(int)p1  /  1;	      this.denominator    =(int)p1    -    1;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	513	2
1561	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(numerator  ==  0)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [CE]  incomparable  types:  BigInteger  and  int  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(numerator  ==  0)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    if(numerator  ==  0)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }	  	non-compiled	[CE]  incomparable  types:  BigInteger  and  int	2	None
1563	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(numerator  >=  0)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(numerator  >=  0)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    if(numerator  >=  0)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	2	None
1564	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(numerator  ==  -1)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [CE]  incomparable  types:  BigInteger  and  int  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(numerator  ==  -1)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    if(numerator  ==  -1)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }	  	non-compiled	[CE]  incomparable  types:  BigInteger  and  int	2	None
1565	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(numerator  >=  -1)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(numerator  >=  -1)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    if(numerator  >=  -1)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	2	None
1583	[BUG]  [BUGGY]  this.numerator  =(int)p0;  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.numerator  =(int)p0;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.numerator  =(int)p0;	      this.numerator    =(int)p1;    	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	512	None
1584	[BUG]  [BUGGY]  this.numerator  =(int)p1,  maxDenominator;  [CE]  ';'  expected  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.numerator  =(int)p1,  maxDenominator;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.numerator  =(int)p1,  maxDenominator;	      this.numerator    =(int)p1;    	non-compiled	[CE]  ';'  expected	512	None
1602	[BUG]  [BUGGY]  super(value,  maxDenominator);  [CE]  constructor  Number  in  class  Number  cannot  be  applied  to  given  types;  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super(value,  maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	super(value,  maxDenominator);	  this(value,    0,    maxDenominator,    10);    	non-compiled	[CE]  constructor  Number  in  class  Number  cannot  be  applied  to  given  types;	35	None
1603	[BUG]  [BUGGY]  int  numerator  =  Math.min(value,  maxDenominator);  [CE]  possible  loss  of  precision  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  int  numerator  =  Math.min(value,  maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	int  numerator  =  Math.min(value,  maxDenominator);	  this(value,    0,    maxDenominator,    10);    	non-compiled	[CE]  possible  loss  of  precision	35	None
1604	[BUG]  [BUGGY]  int  numerator  =  Math.min(value,  maxDenominator);  this.numerator  =  value;  [CE]  possible  loss  of  precision  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  int  numerator  =  Math.min(value,  maxDenominator);  this.numerator  =  value;  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	int  numerator  =  Math.min(value,  maxDenominator);  this.numerator  =  value;	  this(value,    0,    maxDenominator,    10);    	non-compiled	[CE]  possible  loss  of  precision	35	None
1622	[BUG]  [BUGGY]  if(value  <  0.0)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( "Function  values  at  endpoints  do  not  have  different  signs. ");  }  [CE]  call  to  super  must  be  first  statement  in  constructor  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  0.0)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( "Function  values  at  endpoints  do  not  have  different  signs. ");  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	if(value  <  0.0)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( "Function  values  at  endpoints  do  not  have  different  signs. ");  }	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	92	None
1623	[BUG]  [BUGGY]  if(value  <  0.0)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( "Function  values  at  endpoints  do  not  have  different  degrees. ");  }  [CE]  call  to  super  must  be  first  statement  in  constructor  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  0.0)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( "Function  values  at  endpoints  do  not  have  different  degrees. ");  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	if(value  <  0.0)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( "Function  values  at  endpoints  do  not  have  different  degrees. ");  }	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	92	None
1624	[BUG]  [BUGGY]  if(value  <  0.0)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  Preconditions.checkNotNull(value);  }  [CE]  call  to  super  must  be  first  statement  in  constructor  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  0.0)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  Preconditions.checkNotNull(value);  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	if(value  <  0.0)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  Preconditions.checkNotNull(value);  }	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	92	None
1661	[BUG]  [BUGGY]  if(p1  >  p2)  {  if(p1  <  p2)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  p2)  {  if(p1  <  p2)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  p2)  {  if(p1  <  p2)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }	      p2    =(p2)FastMath.floor(q2);    	non-compiled	[CE]  while  expected	184	None
1663	[BUG]  [BUGGY]  if(p1  >  p2)  {  if(p1  <  maxDenominator)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  p2)  {  if(p1  <  maxDenominator)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  p2)  {  if(p1  <  maxDenominator)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }	      p2    =(p2)FastMath.floor(q2);    	non-compiled	[CE]  while  expected	184	None
1681	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p0  =  p1;  p2  =  p1.doubleValue();  [CE]  long  cannot  be  dereferenced  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p0  =  p1;  p2  =  p1.doubleValue();  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    p0  =  p1;  p2  =  p1.doubleValue();	  	non-compiled	[CE]  long  cannot  be  dereferenced	281	None
1682	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p0  =  p1;  p2  =  Math.floor(a1);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p0  =  p1;  p2  =  Math.floor(a1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    p0  =  p1;  p2  =  Math.floor(a1);	  	non-compiled	[CE]  possible  loss  of  precision	281	None
1683	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p0  =  p1;  q1  =  q2;  [CE]  unreachable  statement  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p0  =  p1;  q1  =  q2;  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    p0  =  p1;  q1  =  q2;	  	non-compiled	[CE]  unreachable  statement	281	None
1684	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p0  =  p1;  p2  =  p2.negate();  [CE]  long  cannot  be  dereferenced  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p0  =  p1;  p2  =  p2.negate();  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    p0  =  p1;  p2  =  p2.negate();	  	non-compiled	[CE]  long  cannot  be  dereferenced	281	None
1685	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p0  =  p1;  p2  =  Math.floor(r1);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p0  =  p1;  p2  =  Math.floor(r1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    p0  =  p1;  p2  =  Math.floor(r1);	  	non-compiled	[CE]  possible  loss  of  precision	281	None
1703	[BUG]  [BUGGY]  this.numerator  =(int)p1  -  1;  this.numerator  =(double)p1  -  1;  [CE]  possible  loss  of  precision  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p1  -  1;  this.numerator  =(double)p1  -  1;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator    =(int)p1    -    1;    this.numerator  =(double)p1  -  1;	  	non-compiled	[CE]  possible  loss  of  precision	263	None
1704	[BUG]  [BUGGY]  this.numerator  =(int)p1  -  1;  this.numerator  =(int)p1  /  2;  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p1  -  1;  this.numerator  =(int)p1  /  2;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator    =(int)p1    -    1;    this.numerator  =(int)p1  /  2;	  	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	263	None
1723	[BUG]  [BUGGY]  this(value,  0,  value,  1,  maxDenominator);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this(value,  0,  value,  1,  maxDenominator);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this(value,  0,  value,  1,  maxDenominator);	      p2    =    Math.floor(a1);    q2    =    Math.floor(q2);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	121	None
1743	[BUG]  [BUGGY]  setMaximumFractionDigits(maxDenominator,  value,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  DEFAULT_EPSILON  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumFractionDigits(maxDenominator,  value,  DEFAULT_EPSILON);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumFractionDigits(maxDenominator,  value,  DEFAULT_EPSILON);	      this(value,    0,    maxDenominator,    0);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EPSILON	45	None
1744	[BUG]  [BUGGY]  setMaximumFractionDigits(maxDenominator,  value,  denominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumFractionDigits(maxDenominator,  value,  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumFractionDigits(maxDenominator,  value,  denominator);	      this(value,    0,    maxDenominator,    0);    	non-compiled	[CE]  cannot  find  symbol	45	None
1764	[BUG]  [BUGGY]  if(numerator  >=  p0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(numerator  >=  p0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(numerator  >=  p0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }	      numerator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	14	None
1782	[BUG]  [BUGGY]  setMaximumDenominator(value);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumDenominator(value);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumDenominator(value);	      super();    	non-compiled	[CE]  cannot  find  symbol	41	None
1784	[BUG]  [BUGGY]  setMaximumDenominator(numerator,  maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumDenominator(numerator,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumDenominator(numerator,  maxDenominator);	      super();    	non-compiled	[CE]  cannot  find  symbol	41	None
1803	[BUG]  [BUGGY]  this.numerator  =  Math.max(Math.min(value,  maxDenominator));  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this.numerator  =  Math.max(Math.min(value,  maxDenominator));  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this.numerator  =  Math.max(Math.min(value,  maxDenominator));	  this.numerator    =    Math.min(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	303	None
1804	[BUG]  [BUGGY]  this.numerator  =  Math.min(value,  maxDenominator,  DEFAULT_EPSILON);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this.numerator  =  Math.min(value,  maxDenominator,  DEFAULT_EPSILON);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this.numerator  =  Math.min(value,  maxDenominator,  DEFAULT_EPSILON);	  this.numerator    =    Math.min(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	303	None
1822	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.round(q0);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.round(q0);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(a1);  q2  =  Math.round(q0);	      p2    =    Math.floor(a1);    q2    =    Math.round(q2);    	non-compiled	[CE]  possible  loss  of  precision	125	None
1824	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.round(q3);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.round(q3);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(a1);  q2  =  Math.round(q3);	      p2    =    Math.floor(a1);    q2    =    Math.round(q2);    	non-compiled	[CE]  possible  loss  of  precision	125	None
1842	[BUG]  [BUGGY]  peg(Calendar.getInstance(),  value);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  peg(Calendar.getInstance(),  value);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	peg(Calendar.getInstance(),  value);	  peg(Calendar.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	103	None
1863	[BUG]  [BUGGY]  p2  =  Math.floor(a1)-  p0;  q2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1)-  p0;  q2  =  Math.floor(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(a1)-  p0;  q2  =  Math.floor(q2);	      p2    =    Math.floor(a1);    q2    =    Math.floor(q2);    	non-compiled	[CE]  possible  loss  of  precision	121	None
1902	[BUG]  [BUGGY]  setDenominator(maxDenominator,  value);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setDenominator(maxDenominator,  value);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setDenominator(maxDenominator,  value);	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	63	None
1921	[BUG]  [BUGGY]  throw  new  FractionConversionException(p0,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(long,long)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p0,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(p0,  q2);	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(long,long)	4	None
1922	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p2,  q0,  p2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(p2,  q0,  p2);	  throw    new    FractionConversionException(value,    p1,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	4	2
1923	[BUG]  [BUGGY]  throw  new  FractionConversionException(p2,  q0,  p2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p2,  q0,  p2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(p2,  q0,  p2);	  throw    new    FractionConversionException(value,    p1,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	4	2
1924	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p0,  q2,  p2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(p0,  q2,  p2);	  throw    new    FractionConversionException(value,    p1,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	4	2
1925	[BUG]  [BUGGY]  throw  new  FractionConversionException(p0,  q2,  p2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p0,  q2,  p2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(p0,  q2,  p2);	  throw    new    FractionConversionException(value,    p1,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	4	2
1942	[BUG]  [BUGGY]  super(DEFAULT_EPSILON,  DEFAULT_EPSILON);  [CE]  constructor  Number  in  class  Number  cannot  be  applied  to  given  types;  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super(DEFAULT_EPSILON,  DEFAULT_EPSILON);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	super(DEFAULT_EPSILON,  DEFAULT_EPSILON);	      super();    	non-compiled	[CE]  constructor  Number  in  class  Number  cannot  be  applied  to  given  types;	91	None
1943	[BUG]  [BUGGY]  super(DEFAULT_EPSILON,  DEFAULT_EPSILON  +  denominator);  [CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super(DEFAULT_EPSILON,  DEFAULT_EPSILON  +  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	super(DEFAULT_EPSILON,  DEFAULT_EPSILON  +  denominator);	      super();    	non-compiled	[CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called	91	None
1944	[BUG]  [BUGGY]  super(DEFAULT_EPSILON,  DEFAULT_QUOTE);  [CE]  cannot  find  symbol  DEFAULT_QUOTE  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super(DEFAULT_EPSILON,  DEFAULT_QUOTE);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	super(DEFAULT_EPSILON,  DEFAULT_QUOTE);	      super();    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_QUOTE	91	None
1963	[BUG]  [BUGGY]  this(value,  0,  value,  denominator,  100);  [CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value,  denominator,  100);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  value,  denominator,  100);	  this(value,    0,    numerator,    maxDenominator,    100);    	non-compiled	[CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called	194	None
1964	[BUG]  [BUGGY]  this(value,  0,  value,  denominator,  maxDenominator,  100);  [CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value,  denominator,  maxDenominator,  100);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  value,  denominator,  maxDenominator,  100);	  this(value,    0,    numerator,    maxDenominator,    100);    	non-compiled	[CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called	194	None
1982	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.sqrt(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.sqrt(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(a1);  q2  =  Math.sqrt(q2);	      p2    =    Math.floor(a1);    q2    =    Math.abs(q2);    	non-compiled	[CE]  possible  loss  of  precision	242	None
1984	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.abs(q3);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.abs(q3);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(a1);  q2  =  Math.abs(q3);	      p2    =    Math.floor(a1);    q2    =    Math.abs(q2);    	non-compiled	[CE]  possible  loss  of  precision	242	None
2004	[BUG]  [BUGGY]  this(value,  0,  value.toString(),  maxDenominator,  100);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value.toString(),  maxDenominator,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value.toString(),  maxDenominator,  100);	  this(value,    0,    denominator,    100);    	non-compiled	[CE]  double  cannot  be  dereferenced	32	None
2022	[BUG]  [BUGGY]  setNumerator((  int)Math.abs(value)>  Math.abs(maxDenominator):  0;  [CE]  ')'  expected  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setNumerator((  int)Math.abs(value)>  Math.abs(maxDenominator):  0;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setNumerator((  int)Math.abs(value)>  Math.abs(maxDenominator):  0;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator):    0;    	non-compiled	[CE]  ')'  expected	423	None
2023	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.abs(minorator):  0;  [CE]  ')'  expected  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.abs(minorator):  0;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator((  int)Math.abs(value)>  Math.abs(minorator):  0;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator):    0;    	non-compiled	[CE]  ')'  expected	423	None
2024	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator)-  1;  [CE]  ')'  expected  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator)-  1;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator)-  1;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator):    0;    	non-compiled	[CE]  ')'  expected	423	None
2044	[BUG]  [BUGGY]  int  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  [CE]  incompatible  types  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  int  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	int  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);	      num    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(q3);    	non-compiled	[CE]  incompatible  types	382	None
2064	[BUG]  [BUGGY]  p2  =(p2)FastMath.floor(p0);  [CE]  cannot  find  symbol  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(p2)FastMath.floor(p0);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(p2)FastMath.floor(p0);	      p2    =(p2)FastMath.floor(q2);    	non-compiled	[CE]  cannot  find  symbol	184	None
2083	[BUG]  [BUGGY]  this.denominator  =(int)p1;  this.denominator  =(int)p1;  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  this.denominator  =(int)p1;  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    this.denominator  =(int)p1;	  	non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	164	None
2084	[BUG]  [BUGGY]  this.denominator  =(int)p1;  this.denominator  =(int)p2  -  1;  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  this.denominator  =(int)p2  -  1;  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    this.denominator  =(int)p2  -  1;	  	non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	164	None
2085	[BUG]  [BUGGY]  this.denominator  =(int)p1;  this.denominator  =(int)q2  -  1;  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  this.denominator  =(int)q2  -  1;  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    this.denominator  =(int)q2  -  1;	  	non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	164	None
2102	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.abs(minorator))?  ONE  :  ONE;  [CE]  not  a  statement  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.abs(minorator))?  ONE  :  ONE;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator((  int)Math.abs(value)>  Math.abs(minorator))?  ONE  :  ONE;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator))?    ONE    :    ONE;    	non-compiled	[CE]  not  a  statement	422	None
2103	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.abs(denominator))?  ONE  :  ONE;  [CE]  not  a  statement  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.abs(denominator))?  ONE  :  ONE;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator((  int)Math.abs(value)>  Math.abs(denominator))?  ONE  :  ONE;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator))?    ONE    :    ONE;    	non-compiled	[CE]  not  a  statement	422	None
2104	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.abs(numerator))?  ONE  :  ONE;  [CE]  not  a  statement  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.abs(numerator))?  ONE  :  ONE;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator((  int)Math.abs(value)>  Math.abs(numerator))?  ONE  :  ONE;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator))?    ONE    :    ONE;    	non-compiled	[CE]  not  a  statement	422	None
2122	[BUG]  [BUGGY]  this(value,  0,  value.doubleValue(),  maxDenominator,  DEFAULT_EPSILON);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value.doubleValue(),  maxDenominator,  DEFAULT_EPSILON);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value.doubleValue(),  maxDenominator,  DEFAULT_EPSILON);	      this(value,    0,    value.doubleValue(),    maxDenominator);    	non-compiled	[CE]  double  cannot  be  dereferenced	302	None
2124	[BUG]  [BUGGY]  this(value,  0,  value.doubleValue(),  maxDenominator,  denominator);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value.doubleValue(),  maxDenominator,  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value.doubleValue(),  maxDenominator,  denominator);	      this(value,    0,    value.doubleValue(),    maxDenominator);    	non-compiled	[CE]  double  cannot  be  dereferenced	302	None
2142	[BUG]  [BUGGY]  this(value,  0,  value.length,  10);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value.length,  10);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value.length,  10);	  this(value,    0,    maxDenominator,    10);    	non-compiled	[CE]  double  cannot  be  dereferenced	35	None
2164	[BUG]  [BUGGY]  int  maxDenominator  =  BigInteger.valueOf(q2);  [CE]  variable  maxDenominator  is  already  defined  in  constructor  BigFraction(double,double,int,int)  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  int  maxDenominator  =  BigInteger.valueOf(q2);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	int  maxDenominator  =  BigInteger.valueOf(q2);	      num    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  variable  maxDenominator  is  already  defined  in  constructor  BigFraction(double,double,int,int)	384	None
2181	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p0);  numerator  =  BigInteger.valueOf(p0);  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(p0);  numerator  =  BigInteger.valueOf(p0);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator    =    BigInteger.valueOf(p0);    numerator  =  BigInteger.valueOf(p0);	  	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	163	None
2182	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p0);  num  =  BigInteger.valueOf(p0);  [CE]  cannot  find  symbol  num  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(p0);  num  =  BigInteger.valueOf(p0);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator    =    BigInteger.valueOf(p0);    num  =  BigInteger.valueOf(p0);	  	non-compiled	[CE]  cannot  find  symbol  num	163	None
2184	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p0);  numerator  =  BigInteger.valueOf(p0,  q2);  [CE]  no  suitable  method  found  for  valueOf(long,long)  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(p0);  numerator  =  BigInteger.valueOf(p0,  q2);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator    =    BigInteger.valueOf(p0);    numerator  =  BigInteger.valueOf(p0,  q2);	  	non-compiled	[CE]  no  suitable  method  found  for  valueOf(long,long)	163	None
2185	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p0);  numerator  =  BigInteger.valueOf(p0,  maxDenominator);  [CE]  no  suitable  method  found  for  valueOf(long,int)  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(p0);  numerator  =  BigInteger.valueOf(p0,  maxDenominator);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator    =    BigInteger.valueOf(p0);    numerator  =  BigInteger.valueOf(p0,  maxDenominator);	  	non-compiled	[CE]  no  suitable  method  found  for  valueOf(long,int)	163	None
2203	[BUG]  [BUGGY]  this(value,  0,  value,  denominator,  maxDenominator);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this(value,  0,  value,  denominator,  maxDenominator);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this(value,  0,  value,  denominator,  maxDenominator);	      p2    =    Math.floor(r1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	124	None
2204	[BUG]  [BUGGY]  this(value,  0,  value,  denominator,  0);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this(value,  0,  value,  denominator,  0);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this(value,  0,  value,  denominator,  0);	      p2    =    Math.floor(r1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	124	None
2221	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(value,  p0,  q1);	  throw    new    FractionConversionException(value,    p2,    q1);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	3	2
2222	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q1);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(value,  p0,  q1);	  throw    new    FractionConversionException(value,    p2,    q1);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	3	2
2242	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  maxDenominator,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,int,long)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  maxDenominator,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  epsilon,  maxDenominator,  q2);	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,int,long)	364	None
2243	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  maxIterations,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,int,long)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  maxIterations,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  epsilon,  maxIterations,  q2);	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,int,long)	364	None
2261	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(maxDenominator,  value);  [CE]  call  to  super  must  be  first  statement  in  constructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  super();  this.numerator  =  Math.max(maxDenominator,  value);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	super();  this.numerator  =  Math.max(maxDenominator,  value);	      this.numerator    =(int)(p2);    this.denominator    =(int)(q2);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	143	None
2264	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(Math.min(value,  maxDenominator),  denominator);  [CE]  call  to  super  must  be  first  statement  in  constructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  super();  this.numerator  =  Math.max(Math.min(value,  maxDenominator),  denominator);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	super();  this.numerator  =  Math.max(Math.min(value,  maxDenominator),  denominator);	      this.numerator    =(int)(p2);    this.denominator    =(int)(q2);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	143	None
2281	[BUG]  [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p0,  q1);  [CE]  no  suitable  method  found  for  valueOf(long,long)  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p0,  q1);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    numerator  =  BigInteger.valueOf(p0,  q1);	  	non-compiled	[CE]  no  suitable  method  found  for  valueOf(long,long)	164	None
2282	[BUG]  [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p0,  p2);  [CE]  no  suitable  method  found  for  valueOf(long,long)  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p0,  p2);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    numerator  =  BigInteger.valueOf(p0,  p2);	  	non-compiled	[CE]  no  suitable  method  found  for  valueOf(long,long)	164	None
2283	[BUG]  [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p0);  [CE]  incompatible  types  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p0);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    numerator  =  BigInteger.valueOf(p0);	  	non-compiled	[CE]  incompatible  types	164	None
2284	[BUG]  [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p0,  q2);  [CE]  no  suitable  method  found  for  valueOf(long,long)  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p0,  q2);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    numerator  =  BigInteger.valueOf(p0,  q2);	  	non-compiled	[CE]  no  suitable  method  found  for  valueOf(long,long)	164	None
2301	[BUG]  [BUGGY]  if(numerator  ==  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p0);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(numerator  ==  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p0);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(numerator  ==  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p0);  }	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  while  expected	364	None
2302	[BUG]  [BUGGY]  if(numerator  <  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p0);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(numerator  <  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p0);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(numerator  <  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p0);  }	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  while  expected	364	None
2303	[BUG]  [BUGGY]  if(numerator  >=  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p0);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(numerator  >=  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p0);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(numerator  >=  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p0);  }	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  while  expected	364	None
2321	[BUG]  [BUGGY]  if(value  <  null)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [CE]  bad  operand  types  for  binary  operator  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  null)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(value  <  null)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	43	None
2322	[BUG]  [BUGGY]  if(value  <  null)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( "Function  values  at  endpoints  do  not  have  different  signs. ");  }  [CE]  bad  operand  types  for  binary  operator  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  null)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( "Function  values  at  endpoints  do  not  have  different  signs. ");  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(value  <  null)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( "Function  values  at  endpoints  do  not  have  different  signs. ");  }	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	43	None
2323	[BUG]  [BUGGY]  if(numerator  >=  0)  {  this(value,  0,  denominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [CE]  bad  operand  types  for  binary  operator  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(numerator  >=  0)  {  this(value,  0,  denominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(numerator  >=  0)  {  this(value,  0,  denominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	43	None
2324	[BUG]  [BUGGY]  if(value  <  null)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " "));  }  [CE]  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  null)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " "));  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(value  <  null)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " "));  }	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  	43	None
2342	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  a1,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	throw  new  FractionConversionException(value,  a1,  q2);	  throw    new    FractionConversionException(value,    p2,    a1);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	154	2
2343	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  a1,  q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  a1,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  a1,  q2);	  throw    new    FractionConversionException(value,    p2,    a1);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	154	2
2344	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  a1);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  a1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  epsilon,  a1);	  throw    new    FractionConversionException(value,    p2,    a1);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long)	154	None
2361	[BUG]  [BUGGY]  if(q1  >  maxDenominator)  {  if(maxDenominator  <  denominator)  {  this.numerator  =(int)p2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q1  >  maxDenominator)  {  if(maxDenominator  <  denominator)  {  this.numerator  =(int)p2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q1  >  maxDenominator)  {  if(maxDenominator  <  denominator)  {  this.numerator  =(int)p2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    denominator)    {    this.numerator    =    (int)p2;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None
2362	[BUG]  [BUGGY]  this.numerator  =(int)p2;  if(maxDenominator  <  denominator)  {  this.numerator  =(int)p2;  }  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.numerator  =(int)p2;  if(maxDenominator  <  denominator)  {  this.numerator  =(int)p2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.numerator  =(int)p2;  if(maxDenominator  <  denominator)  {  this.numerator  =(int)p2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    denominator)    {    this.numerator    =    (int)p2;    }    	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	83	None
2364	[BUG]  [BUGGY]  if(p1  >  maxDenominator)  {  if(maxDenominator  <  denominator)  {  this.numerator  =(int)p2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(p1  >  maxDenominator)  {  if(maxDenominator  <  denominator)  {  this.numerator  =(int)p2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(p1  >  maxDenominator)  {  if(maxDenominator  <  denominator)  {  this.numerator  =(int)p2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    denominator)    {    this.numerator    =    (int)p2;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None
2383	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p1  /  q2);  [CE]  incompatible  types  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  numerator  =  BigInteger.valueOf(p1  /  q2);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	numerator  =  BigInteger.valueOf(p1  /  q2);	  this.denominator    =(int)p1;    	non-compiled	[CE]  incompatible  types	165	None
2404	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  p2  =(int)FastMath.ceil(p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	        p2    =(int)FastMath.floor(p2);    p2  =(int)FastMath.ceil(p2);	  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	182	2
2405	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  p2  =(int)FastMath.ceil(p2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  p2  =(int)FastMath.ceil(p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    p2  =(int)FastMath.ceil(p2);	  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	182	2
2405	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  p2  =(short)FastMath.floor(p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	        p2    =(int)FastMath.floor(p2);    p2  =(short)FastMath.floor(p2);	  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	182	2
2406	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  p2  =(short)FastMath.floor(p2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  p2  =(short)FastMath.floor(p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    p2  =(short)FastMath.floor(p2);	  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	182	2
2421	[BUG]  [BUGGY]  if(p1  >  p2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  p2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  p2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	      p2    =(int)FastMath.floor(p2);    	non-compiled	[CE]  while  expected	183	None
2422	[BUG]  [BUGGY]  if(p1  >  p2)  {  if(p1  <  p2)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  p2)  {  if(p1  <  p2)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  p2)  {  if(p1  <  p2)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	      p2    =(int)FastMath.floor(p2);    	non-compiled	[CE]  while  expected	183	None
2442	[BUG]  [BUGGY]  this.numerator  =(double)p2;  this.denominator  =(double)q2;  [CE]  possible  loss  of  precision  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(double)p2;  this.denominator  =(double)q2;  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =(double)p2;  this.denominator  =(double)q2;	      this.numerator    =(int)p2;    this.denominator    =(int)q2;    	non-compiled	[CE]  possible  loss  of  precision	141	None
2444	[BUG]  [BUGGY]  this.numerator  =(char)p2;  this.denominator  =(char)q2;  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(char)p2;  this.denominator  =(char)q2;  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =(char)p2;  this.denominator  =(char)q2;	      this.numerator    =(int)p2;    this.denominator    =(int)q2;    	non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	141	None
2484	[BUG]  [BUGGY]  numerinator  =  BigInteger.valueOf(p2);  [CE]  cannot  find  symbol  numerinator  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  numerinator  =  BigInteger.valueOf(p2);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	numerinator  =  BigInteger.valueOf(p2);	      numerator    =    BigInteger.valueOf(p2);    	non-compiled	[CE]  cannot  find  symbol  numerinator	24	None
2501	[BUG]  [BUGGY]  setNumerator((  int)Math.abs(value)/  Math.min(maxDenominator));  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setNumerator((  int)Math.abs(value)/  Math.min(maxDenominator));  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setNumerator((  int)Math.abs(value)/  Math.min(maxDenominator));	  setDenominator((    int)Math.abs(value)/    Math.abs(maxDenominator));    	non-compiled	[CE]  illegal  start  of  expression	574	None
2503	[BUG]  [BUGGY]  setNumerator((  int)Math.abs(value)/  Math.sqrt(maxDenominator));  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setNumerator((  int)Math.abs(value)/  Math.sqrt(maxDenominator));  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setNumerator((  int)Math.abs(value)/  Math.sqrt(maxDenominator));	  setDenominator((    int)Math.abs(value)/    Math.abs(maxDenominator));    	non-compiled	[CE]  illegal  start  of  expression	574	None
2523	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(minorator);  [CE]  cannot  find  symbol  minorator  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  denominator  =  BigInteger.valueOf(minorator);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	denominator  =  BigInteger.valueOf(minorator);	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  cannot  find  symbol  minorator	4	None
2542	[BUG]  [BUGGY]  setValue(value,  0,  value.doubleValue(),  maxDenominator,  100);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setValue(value,  0,  value.doubleValue(),  maxDenominator,  100);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	setValue(value,  0,  value.doubleValue(),  maxDenominator,  100);	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  double  cannot  be  dereferenced	95	None
2543	[BUG]  [BUGGY]  setValue(value,  0,  value.length,  maxDenominator,  100);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setValue(value,  0,  value.length,  maxDenominator,  100);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	setValue(value,  0,  value.length,  maxDenominator,  100);	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  double  cannot  be  dereferenced	95	None
2544	[BUG]  [BUGGY]  setValue(value,  0,  value.toString(),  maxDenominator,  100);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setValue(value,  0,  value.toString(),  maxDenominator,  100);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	setValue(value,  0,  value.toString(),  maxDenominator,  100);	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  double  cannot  be  dereferenced	95	None
2603	[BUG]  [BUGGY]  p2  =  Math.floor(a1)-  p0;  q1  =  Math.abs(q2);  [CE]  cannot  find  symbol  a1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(a1)-  p0;  q1  =  Math.abs(q2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(a1)-  p0;  q1  =  Math.abs(q2);	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    denominator)    {    this.numerator    =    (int)p2;    }    	non-compiled	[CE]  cannot  find  symbol  a1	83	None
2604	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q1  =  Math.sqrt(q2);  [CE]  cannot  find  symbol  a1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(a1);  q1  =  Math.sqrt(q2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(a1);  q1  =  Math.sqrt(q2);	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    denominator)    {    this.numerator    =    (int)p2;    }    	non-compiled	[CE]  cannot  find  symbol  a1	83	None
2622	[BUG]  [BUGGY]  this.numerator  =(int)p2;  this.numerator  =(int)p2  -  1;  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p2;  this.numerator  =(int)p2  -  1;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator    =(int)p2;    this.numerator  =(int)p2  -  1;	  	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	111	None
2623	[BUG]  [BUGGY]  this.numerator  =(int)p2;  this.numerator  =(double)p2;  [CE]  possible  loss  of  precision  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p2;  this.numerator  =(double)p2;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator    =(int)p2;    this.numerator  =(double)p2;	  	non-compiled	[CE]  possible  loss  of  precision	111	None
2625	[BUG]  [BUGGY]  this.numerator  =(int)p2;  this.numerator  =(int)p2  +  1;  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p2;  this.numerator  =(int)p2  +  1;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator    =(int)p2;    this.numerator  =(int)p2  +  1;	  	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	111	None
2642	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.sqrt(a1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.sqrt(a1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(a1);  q2  =  Math.sqrt(a1);	      	non-compiled	[CE]  possible  loss  of  precision	156	None
2644	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.ceil(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.ceil(q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(a1);  q2  =  Math.ceil(q2);	      	non-compiled	[CE]  possible  loss  of  precision	156	None
2662	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.max(q2,  p0);  [CE]  cannot  find  symbol  a1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.max(q2,  p0);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(a1);  p2  =  Math.max(q2,  p0);	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    q2;    }    	non-compiled	[CE]  cannot  find  symbol  a1	85	None
2663	[BUG]  [BUGGY]  p2  =  Math.floor(r1);  p2  =  Math.max(p2,  q0);  [CE]  cannot  find  symbol  r1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(r1);  p2  =  Math.max(p2,  q0);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(r1);  p2  =  Math.max(p2,  q0);	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    q2;    }    	non-compiled	[CE]  cannot  find  symbol  r1	85	None
2682	[BUG]  [BUGGY]  this(value,  0,  value.intValue(),  maxDenominator,  DEFAULT_EPSILON);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  value.intValue(),  maxDenominator,  DEFAULT_EPSILON);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this(value,  0,  value.intValue(),  maxDenominator,  DEFAULT_EPSILON);	  this.numerator    =    Math.min(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	303	None
2684	[BUG]  [BUGGY]  this(value,  0,  value.intValue(),  maxDenominator,  denominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  value.intValue(),  maxDenominator,  denominator);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this(value,  0,  value.intValue(),  maxDenominator,  denominator);	  this.numerator    =    Math.min(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	303	None
2701	[BUG]  [BUGGY]  if(q1  >  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  q2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q1  >  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  q2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q1  >  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  q2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    q2;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None
2702	[BUG]  [BUGGY]  if(q1  >  maxDenominator)  {  if(maxDenominator  >>  epsilon)  {  this.numerator  =  q2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q1  >  maxDenominator)  {  if(maxDenominator  >>  epsilon)  {  this.numerator  =  q2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q1  >  maxDenominator)  {  if(maxDenominator  >>  epsilon)  {  this.numerator  =  q2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    q2;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None
2703	[BUG]  [BUGGY]  if(q2  <  epsilon)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  q2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q2  <  epsilon)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  q2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q2  <  epsilon)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  q2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    q2;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None
2704	[BUG]  [BUGGY]  if(q2  <  0)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  q2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q2  <  0)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  q2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q2  <  0)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  q2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    q2;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None
2724	[BUG]  [BUGGY]  if(numerator  ==  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(numerator  ==  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionException( " ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(numerator  ==  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionException( " ");  }	  this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	102	None
2744	[BUG]  [BUGGY]  int  numerator  =  BigInteger.valueOf(minDenominator);  denominator  =  BigInteger.valueOf(maxDenominator);  [CE]  cannot  find  symbol  minDenominator  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  int  numerator  =  BigInteger.valueOf(minDenominator);  denominator  =  BigInteger.valueOf(maxDenominator);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	int  numerator  =  BigInteger.valueOf(minDenominator);  denominator  =  BigInteger.valueOf(maxDenominator);	      num    =    BigInteger.valueOf(minDenominator);    denominator    =    BigInteger.valueOf(maxDenominator);    	non-compiled	[CE]  cannot  find  symbol  minDenominator	381	None
2782	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p2);  numerator  =  BigInteger.valueOf(p0);  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(p2);  numerator  =  BigInteger.valueOf(p0);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator    =    BigInteger.valueOf(p2);    numerator  =  BigInteger.valueOf(p0);	  	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	51	None
2783	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p2);  num  =  BigInteger.valueOf(p2);  [CE]  cannot  find  symbol  num  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(p2);  num  =  BigInteger.valueOf(p2);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator    =    BigInteger.valueOf(p2);    num  =  BigInteger.valueOf(p2);	  	non-compiled	[CE]  cannot  find  symbol  num	51	None
2784	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p2);  numerator  =  BigInteger.valueOf(p1);  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(p2);  numerator  =  BigInteger.valueOf(p1);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator    =    BigInteger.valueOf(p2);    numerator  =  BigInteger.valueOf(p1);	  	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	51	None
2862	[BUG]  [BUGGY]  p2  =(full)FastMath.floor(r1);  [CE]  cannot  find  symbol  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(full)FastMath.floor(r1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(full)FastMath.floor(r1);	      p2    =(int)FastMath.floor(p2);    	non-compiled	[CE]  cannot  find  symbol	183	None
2863	[BUG]  [BUGGY]  p2  =(a1)FastMath.floor(r1);  [CE]  cannot  find  symbol  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(a1)FastMath.floor(r1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(a1)FastMath.floor(r1);	      p2    =(int)FastMath.floor(p2);    	non-compiled	[CE]  cannot  find  symbol	183	None
2864	[BUG]  [BUGGY]  p2  =(p1)FastMath.floor(r1);  [CE]  cannot  find  symbol  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(p1)FastMath.floor(r1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(p1)FastMath.floor(r1);	      p2    =(int)FastMath.floor(p2);    	non-compiled	[CE]  cannot  find  symbol	183	None
2883	[BUG]  [BUGGY]  this(value,  0,  value,  1,  maxDenominator);  [CE]  no  suitable  constructor  found  for  Fraction(double,int,double,int,int)  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value,  1,  maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value,  1,  maxDenominator);	  this(value,    0,    value,    100);    	non-compiled	[CE]  no  suitable  constructor  found  for  Fraction(double,int,double,int,int)	222	None
2903	[BUG]  [BUGGY]  this(value,  0,  DEFAULT_EPSILON.intValue(),  DEFAULT_EPSILON,  denominator);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  DEFAULT_EPSILON.intValue(),  DEFAULT_EPSILON,  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  DEFAULT_EPSILON.intValue(),  DEFAULT_EPSILON,  denominator);	      this(value,    0,    value.intValue(),    DEFAULT_EPSILON,    denominator);    	non-compiled	[CE]  double  cannot  be  dereferenced	305	None
2904	[BUG]  [BUGGY]  this(value,  0,  value.intValue(),  DEFAULT_ESILON,  denominator);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value.intValue(),  DEFAULT_ESILON,  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value.intValue(),  DEFAULT_ESILON,  denominator);	      this(value,    0,    value.intValue(),    DEFAULT_EPSILON,    denominator);    	non-compiled	[CE]  double  cannot  be  dereferenced	305	None
2921	[BUG]  [BUGGY]  if(p1  <  epsilon  &&  p2  <  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  <  epsilon  &&  p2  <  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  <  epsilon  &&  p2  <  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	      int    maxIterations    =    Math.max(n,    epsilon);    	non-compiled	[CE]  while  expected	185	None
2923	[BUG]  [BUGGY]  if(p1  <  p2  ||  p2  <  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  <  p2  ||  p2  <  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  <  p2  ||  p2  <  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	      int    maxIterations    =    Math.max(n,    epsilon);    	non-compiled	[CE]  while  expected	185	None
2924	[BUG]  [BUGGY]  if(p1  >  p2  &&  p2  <  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  p2  &&  p2  <  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  p2  &&  p2  <  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	      int    maxIterations    =    Math.max(n,    epsilon);    	non-compiled	[CE]  while  expected	185	None
2962	[BUG]  [BUGGY]  Arrays.fill(numerator,  new  BigFraction(value,  maxDenominator));  [CE]  cannot  find  symbol  Arrays  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  Arrays.fill(numerator,  new  BigFraction(value,  maxDenominator));  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	Arrays.fill(numerator,  new  BigFraction(value,  maxDenominator));	      super();    	non-compiled	[CE]  cannot  find  symbol  Arrays	41	None
2963	[BUG]  [BUGGY]  Arrays.fill(numerator,  new  BigFraction(value,  maxDenominator),  denominator);  [CE]  cannot  find  symbol  Arrays  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  Arrays.fill(numerator,  new  BigFraction(value,  maxDenominator),  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	Arrays.fill(numerator,  new  BigFraction(value,  maxDenominator),  denominator);	      super();    	non-compiled	[CE]  cannot  find  symbol  Arrays	41	None
2964	[BUG]  [BUGGY]  Arrays.fill(numerator,  denominator);  [CE]  cannot  find  symbol  Arrays  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  Arrays.fill(numerator,  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	Arrays.fill(numerator,  denominator);	      super();    	non-compiled	[CE]  cannot  find  symbol  Arrays	41	None
2982	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  if(p1  >  p2)  {  if(p2  <  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  if(p1  >  p2)  {  if(p2  <  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    if(p1  >  p2)  {  if(p2  <  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	  	non-compiled	[CE]  while  expected	182	None
2984	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  if(p1  >  p2)  {  if(p2  <  p2)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  if(p1  >  p2)  {  if(p2  <  p2)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    if(p1  >  p2)  {  if(p2  <  p2)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	  	non-compiled	[CE]  while  expected	182	None
2985	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  if(p1  >  p2)  {  if(p2  >  maxDenominator)  {  [CE]  illegal  start  of  expression  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  if(p1  >  p2)  {  if(p2  >  maxDenominator)  {  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    if(p1  >  p2)  {  if(p2  >  maxDenominator)  {	  	non-compiled	[CE]  illegal  start  of  expression	182	None
3003	[BUG]  [BUGGY]  <<  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  <<  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	<<	  peg(Calendar.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	103	None
3004	[BUG]  [BUGGY]  {  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  {  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	{	  peg(Calendar.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	103	None
3022	[BUG]  [BUGGY]  if(p1  >  p2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p1;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  p2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p1;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  p2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p1;  }	      p2    =(p2)FastMath.floor(q2);    	non-compiled	[CE]  while  expected	184	None
3043	[BUG]  [BUGGY]  p2  =(p2  ==  0.0)?  p2  :  p2.getNext();  [CE]  long  cannot  be  dereferenced  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(p2  ==  0.0)?  p2  :  p2.getNext();  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(p2  ==  0.0)?  p2  :  p2.getNext();	  throw    new    FractionConversionException(value,    p2,    overflow);    	non-compiled	[CE]  long  cannot  be  dereferenced	155	None
3044	[BUG]  [BUGGY]  p2  =(p2  ==  0.0)?  P2  :  p2.next();  [CE]  cannot  find  symbol  P2  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(p2  ==  0.0)?  P2  :  p2.next();  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(p2  ==  0.0)?  P2  :  p2.next();	  throw    new    FractionConversionException(value,    p2,    overflow);    	non-compiled	[CE]  cannot  find  symbol  P2	155	None
3062	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(numerator,  value);  [CE]  possible  loss  of  precision  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.max(numerator,  value);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	super();  this.numerator  =  Math.max(numerator,  value);	      super();    this.numerator    =    Math.max(value,    denominator);    	non-compiled	[CE]  possible  loss  of  precision	145	None
3063	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(Math.max(value,  denominator),  maxDenominator);  [CE]  possible  loss  of  precision  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.max(Math.max(value,  denominator),  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	super();  this.numerator  =  Math.max(Math.max(value,  denominator),  maxDenominator);	      super();    this.numerator    =    Math.max(value,    denominator);    	non-compiled	[CE]  possible  loss  of  precision	145	None
3064	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(maxDenominator,  value);  [CE]  possible  loss  of  precision  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.max(maxDenominator,  value);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	super();  this.numerator  =  Math.max(maxDenominator,  value);	      super();    this.numerator    =    Math.max(value,    denominator);    	non-compiled	[CE]  possible  loss  of  precision	145	None
3083	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  q1);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  epsilon,  q1);	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long)	153	None
3084	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p1,  q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	throw  new  FractionConversionException(value,  p1,  q1);	  throw    new    FractionConversionException(value,    p2,    q1);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	153	2
3085	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p1,  q1);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p1,  q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  p1,  q1);	  throw    new    FractionConversionException(value,    p2,    q1);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	153	2
3102	[BUG]  [BUGGY]  super();  this(value,  0,  denominator,  1000);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this(value,  0,  denominator,  1000);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this(value,  0,  denominator,  1000);	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	44	None
3103	[BUG]  [BUGGY]  super();  this(value,  0,  numerator,  1000);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this(value,  0,  numerator,  1000);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this(value,  0,  numerator,  1000);	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	44	None
3104	[BUG]  [BUGGY]  super();  this(value,  0,  value,  1000);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this(value,  0,  value,  1000);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this(value,  0,  value,  1000);	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	44	None
3143	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p0,  p2,  q0);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	throw  new  FractionConversionException(p0,  p2,  q0);	  throw    new    FractionConversionException(value,    p2,    q0);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	364	2
3144	[BUG]  [BUGGY]  throw  new  FractionConversionException(p0,  p2,  q0);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p0,  p2,  q0);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(p0,  p2,  q0);	  throw    new    FractionConversionException(value,    p2,    q0);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	364	2
3144	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  q0);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  q0);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  epsilon,  q0);	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long)	364	None
3162	[BUG]  [BUGGY]  this.numerator  =(int)(p1);  this.denominator  =(int)(q2);  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)(p1);  this.denominator  =(int)(q2);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =(int)(p1);  this.denominator  =(int)(q2);	      this.numerator    =(int)(p2);    this.denominator    =(int)(q2);    	non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	143	None
3164	[BUG]  [BUGGY]  this.numerator  =(int)(p2);  this.denominator  =(int)(q2;  [CE]  ')'  expected  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)(p2);  this.denominator  =(int)(q2;  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =(int)(p2);  this.denominator  =(int)(q2;	      this.numerator    =(int)(p2);    this.denominator    =(int)(q2);    	non-compiled	[CE]  ')'  expected	143	None
3183	[BUG]  [BUGGY]  this(value,  0,  value.doubleValue(),  maxDenominator,  1000);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value.doubleValue(),  maxDenominator,  1000);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value.doubleValue(),  maxDenominator,  1000);	  this(value,    0,    value.doubleValue(),    maxDenominator,    100);    	non-compiled	[CE]  double  cannot  be  dereferenced	224	None
3184	[BUG]  [BUGGY]  this(value,  0,  value.doubleValue(),  maxDenominator,  10);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value.doubleValue(),  maxDenominator,  10);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value.doubleValue(),  maxDenominator,  10);	  this(value,    0,    value.doubleValue(),    maxDenominator,    100);    	non-compiled	[CE]  double  cannot  be  dereferenced	224	None
3204	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(maxDenominator);  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(maxDenominator);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(maxDenominator);	      numerator    =    BigInteger.valueOf(q2);    denominator    =    BigInteger.valueOf(q3);    	non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	11	None
3222	[BUG]  [BUGGY]  throw  new  FractionConversionException(p0,  q1,  epsilon);  [CE]  no  suitable  constructor  found  for  FractionConversionException(long,long,double)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p0,  q1,  epsilon);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(p0,  q1,  epsilon);	  throw    new    FractionConversionException(p0,    q1,    p2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(long,long,double)	284	None
3223	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p0,  a1,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(p0,  a1,  q2);	  throw    new    FractionConversionException(p0,    q1,    p2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	284	2
3224	[BUG]  [BUGGY]  throw  new  FractionConversionException(p0,  a1,  q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p0,  a1,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(p0,  a1,  q2);	  throw    new    FractionConversionException(p0,    q1,    p2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	284	2
3224	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p0,  a1,  q1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(p0,  a1,  q1);	  throw    new    FractionConversionException(p0,    q1,    p2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	284	2
3225	[BUG]  [BUGGY]  throw  new  FractionConversionException(p0,  a1,  q1);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p0,  a1,  q1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(p0,  a1,  q1);	  throw    new    FractionConversionException(p0,    q1,    p2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	284	2
3241	[BUG]  [BUGGY]  setMaximumFraction(value,  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setMaximumFraction(value,  maxDenominator);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setMaximumFraction(value,  maxDenominator);	  setMaximumFraction(maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	203	None
3243	[BUG]  [BUGGY]  setMinimumFraction(maxDenominator,  value);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setMinimumFraction(maxDenominator,  value);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setMinimumFraction(maxDenominator,  value);	  setMaximumFraction(maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	203	None
3244	[BUG]  [BUGGY]  setMinimumFraction(maxDenominator,  false);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setMinimumFraction(maxDenominator,  false);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setMinimumFraction(maxDenominator,  false);	  setMaximumFraction(maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	203	None
3283	[BUG]  [BUGGY]  [FE]  AssertionError  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  denominator  =  BigInteger.valueOf(p2  -  q2);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	add	denominator  =  BigInteger.valueOf(p2  -  q2);	  denominator    =    BigInteger.valueOf(p2);    	compilable	  [FE]  AssertionError  testDigitLimitConstructor	73	2
3284	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p2  -  q2);  [FE]  AssertionError  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  denominator  =  BigInteger.valueOf(p2  -  q2);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator  =  BigInteger.valueOf(p2  -  q2);	  denominator    =    BigInteger.valueOf(p2);    	compilable	  [FE]  AssertionError  testDigitLimitConstructor	73	2
3284	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p2  -  p3);  [CE]  cannot  find  symbol  p3  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  denominator  =  BigInteger.valueOf(p2  -  p3);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator  =  BigInteger.valueOf(p2  -  p3);	  denominator    =    BigInteger.valueOf(p2);    	non-compiled	[CE]  cannot  find  symbol  p3	73	None
3301	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p2);  if(numerator  ==  0)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [CE]  incomparable  types:  BigInteger  and  int  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  denominator  =  BigInteger.valueOf(p2);  if(numerator  ==  0)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator    =    BigInteger.valueOf(p2);    if(numerator  ==  0)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }	  	non-compiled	[CE]  incomparable  types:  BigInteger  and  int	72	None
3302	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p2);  if(numerator  >=  0)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  denominator  =  BigInteger.valueOf(p2);  if(numerator  >=  0)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator    =    BigInteger.valueOf(p2);    if(numerator  >=  0)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	72	None
3303	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p2);  if(numerator  ==  -1)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [CE]  incomparable  types:  BigInteger  and  int  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  denominator  =  BigInteger.valueOf(p2);  if(numerator  ==  -1)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator    =    BigInteger.valueOf(p2);    if(numerator  ==  -1)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }	  	non-compiled	[CE]  incomparable  types:  BigInteger  and  int	72	None
3304	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p2);  if(numerator  >=  -1)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  denominator  =  BigInteger.valueOf(p2);  if(numerator  >=  -1)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator    =    BigInteger.valueOf(p2);    if(numerator  >=  -1)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	72	None
3323	[BUG]  [BUGGY]  setMaximumFractionDigits(minorator,  maxDenominator);  [CE]  cannot  find  symbol  minorator  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumFractionDigits(minorator,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumFractionDigits(minorator,  maxDenominator);	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol  minorator	42	None
3344	[BUG]  [BUGGY]  setNumerator(numerator,  -denominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setNumerator(numerator,  -denominator);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setNumerator(numerator,  -denominator);	  this(value,    0,    denominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	104	None
3362	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.round(q0);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.round(q0);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(a1);  q2  =  Math.round(q0);	      p2    =    Math.floor(a1);    q2    =    Math.round(q2);    	non-compiled	[CE]  possible  loss  of  precision	244	None
3363	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.round(q3);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.round(q3);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(a1);  q2  =  Math.round(q3);	      p2    =    Math.floor(a1);    q2    =    Math.round(q2);    	non-compiled	[CE]  possible  loss  of  precision	244	None
3364	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.round(q1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.round(q1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(a1);  q2  =  Math.round(q1);	      p2    =    Math.floor(a1);    q2    =    Math.round(q2);    	non-compiled	[CE]  possible  loss  of  precision	244	None
3383	[BUG]  [BUGGY]  if(numerator  <  0)  {  if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  BigFraction  gcd  =  new  BigFraction(value,  gcd,  denominator);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(numerator  <  0)  {  if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  BigFraction  gcd  =  new  BigFraction(value,  gcd,  denominator);  }  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	if(numerator  <  0)  {  if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  BigFraction  gcd  =  new  BigFraction(value,  gcd,  denominator);  }	      setDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  expression	62	None
3384	[BUG]  [BUGGY]  if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }	      setDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  expression	62	None
3403	[BUG]  [BUGGY]  int  maxIterations  =  Math.max(math.abs(p1,  epsilon));  [CE]  variable  maxIterations  is  already  defined  in  constructor  Fraction(double,double,int,int)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  int  maxIterations  =  Math.max(math.abs(p1,  epsilon));  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	int  maxIterations  =  Math.max(math.abs(p1,  epsilon));	      int    maxIterations    =    Math.max(n,    epsilon);    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  Fraction(double,double,int,int)	185	None
3404	[BUG]  [BUGGY]  int  maxIterations  =  Math.max(n,  epsilon,  maxDenominator);  [CE]  variable  maxIterations  is  already  defined  in  constructor  Fraction(double,double,int,int)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  int  maxIterations  =  Math.max(n,  epsilon,  maxDenominator);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	int  maxIterations  =  Math.max(n,  epsilon,  maxDenominator);	      int    maxIterations    =    Math.max(n,    epsilon);    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  Fraction(double,double,int,int)	185	None
3422	[BUG]  [BUGGY]  if(numerator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(numerator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionException( " ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(numerator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	105	None
3424	[BUG]  [BUGGY]  if(numerator  ==  0)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(numerator  ==  0)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionException( " ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(numerator  ==  0)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	105	None
3442	[BUG]  [BUGGY]  this(value,  0,  value.doubleValue(),  maxDenominator,  100);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  value.doubleValue(),  maxDenominator,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this(value,  0,  value.doubleValue(),  maxDenominator,  100);	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	63	None
3444	[BUG]  [BUGGY]  this(value,  0,  value.doubleValue()  +  maxDenominator,  100);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  value.doubleValue()  +  maxDenominator,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this(value,  0,  value.doubleValue()  +  maxDenominator,  100);	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	63	None
3461	[BUG]  [BUGGY]  super();  this.numerator  =  Math.pow(10,  denominator,  100);  [CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.pow(10,  denominator,  100);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.pow(10,  denominator,  100);	      super();    this.numerator    =    Math.pow(10,    denominator);    	non-compiled	[CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;	344	None
3462	[BUG]  [BUGGY]  super();  this.numerator  =  Math.pow(10,  denominator,  10);  [CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.pow(10,  denominator,  10);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.pow(10,  denominator,  10);	      super();    this.numerator    =    Math.pow(10,    denominator);    	non-compiled	[CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;	344	None
3463	[BUG]  [BUGGY]  super();  this.numerator  =  Math.pow(10,  denominator,  1);  [CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.pow(10,  denominator,  1);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.pow(10,  denominator,  1);	      super();    this.numerator    =    Math.pow(10,    denominator);    	non-compiled	[CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;	344	None
3464	[BUG]  [BUGGY]  super();  this.numerator  =  Math.pow(10,  denominator,  1000);  [CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.pow(10,  denominator,  1000);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.pow(10,  denominator,  1000);	      super();    this.numerator    =    Math.pow(10,    denominator);    	non-compiled	[CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;	344	None
3482	[BUG]  [BUGGY]  peg(Calendar.getInstance(),  value);  [CE]  cannot  find  symbol  Calendar  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  peg(Calendar.getInstance(),  value);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	peg(Calendar.getInstance(),  value);	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol  Calendar	92	None
3483	[BUG]  [BUGGY]  peg(calculateFractionCalendar(value,  Calendar.getInstance());  [CE]  ')'  expected  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  peg(calculateFractionCalendar(value,  Calendar.getInstance());  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	peg(calculateFractionCalendar(value,  Calendar.getInstance());	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  ')'  expected	92	None
3484	[BUG]  [BUGGY]  peg(calculateFractionCalendar(value.getInstance());  [CE]  ')'  expected  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  peg(calculateFractionCalendar(value.getInstance());  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	peg(calculateFractionCalendar(value.getInstance());	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  ')'  expected	92	None
3504	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p0,  q0,  p2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(p0,  q0,  p2);	  throw    new    FractionConversionException(p0,    p2,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	283	2
3505	[BUG]  [BUGGY]  throw  new  FractionConversionException(p0,  q0,  p2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p0,  q0,  p2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(p0,  q0,  p2);	  throw    new    FractionConversionException(p0,    p2,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	283	2
3562	[BUG]  [BUGGY]  p2  =  Math.floor(a1)-  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1)-  Math.floor(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(a1)-  Math.floor(q2);	      p2    =    Math.floor(a1);    	non-compiled	[CE]  possible  loss  of  precision	243	None
3563	[BUG]  [BUGGY]  p2  =  Math.floor(a1  -  p2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1  -  p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(a1  -  p2);	      p2    =    Math.floor(a1);    	non-compiled	[CE]  possible  loss  of  precision	243	None
3564	[BUG]  [BUGGY]  p2  =  Math.floor(a1),  p0;  [CE]  ';'  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1),  p0;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(a1),  p0;	      p2    =    Math.floor(a1);    	non-compiled	[CE]  ';'  expected	243	None
3581	[BUG]  [BUGGY]  this(value,  DEFAULT_EPSILON,  100);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this(value,  DEFAULT_EPSILON,  100);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this(value,  DEFAULT_EPSILON,  100);	      this.numerator    =    Math.abs(q2);    this.denominator    =    Math.abs(q1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	144	None
3582	[BUG]  [BUGGY]  this(value,  DEFAULT_EPSILON,  0,  denominator);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this(value,  DEFAULT_EPSILON,  0,  denominator);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this(value,  DEFAULT_EPSILON,  0,  denominator);	      this.numerator    =    Math.abs(q2);    this.denominator    =    Math.abs(q1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	144	None
3583	[BUG]  [BUGGY]  this(value,  DEFAULT_EPSILON,  0,  value.length);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this(value,  DEFAULT_EPSILON,  0,  value.length);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this(value,  DEFAULT_EPSILON,  0,  value.length);	      this.numerator    =    Math.abs(q2);    this.denominator    =    Math.abs(q1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	144	None
3584	[BUG]  [BUGGY]  this(value,  DEFAULT_EPSILON,  1,  maxDenominator);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this(value,  DEFAULT_EPSILON,  1,  maxDenominator);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this(value,  DEFAULT_EPSILON,  1,  maxDenominator);	      this.numerator    =    Math.abs(q2);    this.denominator    =    Math.abs(q1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	144	None
3602	[BUG]  [BUGGY]  if(value  <  null)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [CE]  bad  operand  types  for  binary  operator  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  null)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(value  <  null)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	42	None
3603	[BUG]  [BUGGY]  if(value  <  null)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( "Function  values  at  endpoints  do  not  have  different  signs. ");  }  [CE]  bad  operand  types  for  binary  operator  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  null)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( "Function  values  at  endpoints  do  not  have  different  signs. ");  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(value  <  null)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( "Function  values  at  endpoints  do  not  have  different  signs. ");  }	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	42	None
3604	[BUG]  [BUGGY]  if(numerator  >=  0)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [CE]  bad  operand  types  for  binary  operator  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(numerator  >=  0)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(numerator  >=  0)  {  super();  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	42	None
3624	[BUG]  [BUGGY]  p2  =  Math.floor(r2);  p2  =  Math.floor(r1);  [CE]  cannot  find  symbol  r2  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(r2);  p2  =  Math.floor(r1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(r2);  p2  =  Math.floor(r1);	      p2    =    Math.floor(r1);    p2    =    Math.floor(r2);    	non-compiled	[CE]  cannot  find  symbol  r2	213	None
3641	[BUG]  [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p1  -  p2);  [CE]  incompatible  types  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p1  -  p2);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    numerator  =  BigInteger.valueOf(p1  -  p2);	  	non-compiled	[CE]  incompatible  types	164	None
3643	[BUG]  [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p2  -  p1);  [CE]  incompatible  types  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p2  -  p1);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    numerator  =  BigInteger.valueOf(p2  -  p1);	  	non-compiled	[CE]  incompatible  types	164	None
3644	[BUG]  [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p1  /  q2);  [CE]  incompatible  types  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p1  /  q2);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    numerator  =  BigInteger.valueOf(p1  /  q2);	  	non-compiled	[CE]  incompatible  types	164	None
3645	[BUG]  [BUGGY]  this.denominator  =(int)p1;  num  =  BigInteger.valueOf(p1  -  p2);  [CE]  cannot  find  symbol  num  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  num  =  BigInteger.valueOf(p1  -  p2);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    num  =  BigInteger.valueOf(p1  -  p2);	  	non-compiled	[CE]  cannot  find  symbol  num	164	None
3663	[BUG]  [BUGGY]  setDenominator(value,  -maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setDenominator(value,  -maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setDenominator(value,  -maxDenominator);	      setDenominator(value);    	non-compiled	[CE]  illegal  start  of  expression	65	None
3664	[BUG]  [BUGGY]  setNumerator(value,  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setNumerator(value,  maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setNumerator(value,  maxDenominator);	      setDenominator(value);    	non-compiled	[CE]  illegal  start  of  expression	65	None
3681	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  setMaximum(maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  setMaximum(maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,    0,    maxDenominator,    1000);    setMaximum(maxDenominator);	  	non-compiled	[CE]  cannot  find  symbol	33	None
3682	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  setMaximumDigits(maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  setMaximumDigits(maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,    0,    maxDenominator,    1000);    setMaximumDigits(maxDenominator);	  	non-compiled	[CE]  cannot  find  symbol	33	None
3683	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  value.doubleValue(),  1,  maxDenominator);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  value.doubleValue(),  1,  maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,    0,    maxDenominator,    1000);    this(value,  0,  value.doubleValue(),  1,  maxDenominator);	  	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	33	None
3684	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  value.doubleValue(),  0,  maxDenominator);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  value.doubleValue(),  0,  maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,    0,    maxDenominator,    1000);    this(value,  0,  value.doubleValue(),  0,  maxDenominator);	  	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	33	None
3685	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  value.doubleValue(),  maxDenominator);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  value.doubleValue(),  maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,    0,    maxDenominator,    1000);    this(value,  0,  value.doubleValue(),  maxDenominator);	  	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	33	None
3703	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.abs(q0);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.abs(q0);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(a1);  q2  =  Math.abs(q0);	      p2    =    Math.floor(a1);    q2    =    Math.abs(q2);    	non-compiled	[CE]  possible  loss  of  precision	123	None
3704	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.sqrt(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.sqrt(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(a1);  q2  =  Math.sqrt(q2);	      p2    =    Math.floor(a1);    q2    =    Math.abs(q2);    	non-compiled	[CE]  possible  loss  of  precision	123	None
3723	[BUG]  [BUGGY]  this(numerator,  0,  maxDenominator,  100);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(numerator,  0,  maxDenominator,  100);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this(numerator,  0,  maxDenominator,  100);	  this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	102	None
3724	[BUG]  [BUGGY]  this(value,  0,  value.length,  100);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  value.length,  100);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this(value,  0,  value.length,  100);	  this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	102	None
3744	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  p0,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(n,  p0,  q2);	  throw    new    FractionConversionException(value,    p0,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	282	2
3745	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p0,  q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  p0,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(n,  p0,  q2);	  throw    new    FractionConversionException(value,    p0,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	282	2
3764	[BUG]  [BUGGY]  this.denominator  =  Math.abs(q2  -  maxDenominator);  [CE]  possible  loss  of  precision  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =  Math.abs(q2  -  maxDenominator);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator  =  Math.abs(q2  -  maxDenominator);	      this.denominator    =    Math.abs(q2    -    q1);    	non-compiled	[CE]  possible  loss  of  precision	514	None
3784	[BUG]  [BUGGY]  if(p1  >  maxDenominator)  {  if(p2  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(p1  >  maxDenominator)  {  if(p2  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(p1  >  maxDenominator)  {  if(p2  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(p2    >    maxDenominator)    {    if(p2    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	485	None
3804	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.ceil(q0,  p2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.ceil(q0,  p2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(a1);  q2  =  Math.ceil(q0,  p2);	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  possible  loss  of  precision	3	None
3821	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  p2,  q0);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(n,  p2,  q0);	  throw    new    FractionConversionException(n,    p2,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	393	2
3822	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p2,  q0);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  p2,  q0);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(n,  p2,  q0);	  throw    new    FractionConversionException(n,    p2,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	393	2
3823	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  p2,  a1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(n,  p2,  a1);	  throw    new    FractionConversionException(n,    p2,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	393	2
3824	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p2,  a1);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  p2,  a1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(n,  p2,  a1);	  throw    new    FractionConversionException(n,    p2,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	393	2
3864	[BUG]  [BUGGY]  p0  =  p1,  q1;  p2  =  p2;  [CE]  ';'  expected  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p0  =  p1,  q1;  p2  =  p2;  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p0  =  p1,  q1;  p2  =  p2;	  throw    new    FractionConversionException(p0,    p2,    q2);    	non-compiled	[CE]  ';'  expected	283	None
3922	[BUG]  [BUGGY]  setMaximum(value,  maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximum(value,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximum(value,  maxDenominator);	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol	43	None
3923	[BUG]  [BUGGY]  setMaximum(maxDenominator  -  value);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximum(maxDenominator  -  value);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximum(maxDenominator  -  value);	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol	43	None
3924	[BUG]  [BUGGY]  setMaximum(numerator,  maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximum(numerator,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximum(numerator,  maxDenominator);	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol	43	None
3963	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  this.numerator  =(double)p1,  maxDenominator;  [CE]  ';'  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  this.numerator  =(double)p1,  maxDenominator;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    this.numerator  =(double)p1,  maxDenominator;	  	non-compiled	[CE]  ';'  expected	182	None
3981	[BUG]  [BUGGY]  setMaximumDenominator(maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumDenominator(maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	setMaximumDenominator(maxDenominator);	  this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  cannot  find  symbol	34	None
3982	[BUG]  [BUGGY]  setMaximumDigits(maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumDigits(maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	setMaximumDigits(maxDenominator);	  this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  cannot  find  symbol	34	None
3983	[BUG]  [BUGGY]  this(value,  0,  value.doubleValue(),  0,  maxDenominator);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value.doubleValue(),  0,  maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value.doubleValue(),  0,  maxDenominator);	  this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  double  cannot  be  dereferenced	34	None
3984	[BUG]  [BUGGY]  setMaximum(maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximum(maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	setMaximum(maxDenominator);	  this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  cannot  find  symbol	34	None
4003	[BUG]  [BUGGY]  setValue(value,  maxDenominator,  0);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setValue(value,  maxDenominator,  0);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setValue(value,  maxDenominator,  0);	      setValue(value,    0);    	non-compiled	[CE]  illegal  start  of  expression	94	None
4022	[BUG]  [BUGGY]  BigInteger  p1  =  BigInteger.valueOf(p1);  [CE]  variable  p1  is  already  defined  in  constructor  BigFraction(double,double,int,int)  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  BigInteger  p1  =  BigInteger.valueOf(p1);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	BigInteger  p1  =  BigInteger.valueOf(p1);	      BigInteger    p1    =    BigInteger.valueOf(p2);    	non-compiled	[CE]  variable  p1  is  already  defined  in  constructor  BigFraction(double,double,int,int)	484	None
4023	[BUG]  [BUGGY]  BigInteger  p2  =  BigInteger.valueOf(p2);  [CE]  variable  p2  is  already  defined  in  constructor  BigFraction(double,double,int,int)  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  BigInteger  p2  =  BigInteger.valueOf(p2);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	BigInteger  p2  =  BigInteger.valueOf(p2);	      BigInteger    p1    =    BigInteger.valueOf(p2);    	non-compiled	[CE]  variable  p2  is  already  defined  in  constructor  BigFraction(double,double,int,int)	484	None
4061	[BUG]  [BUGGY]  System.arraycopy(value,  0,  p2,  epsilon,  maxIterations);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  System.arraycopy(value,  0,  p2,  epsilon,  maxIterations);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	System.arraycopy(value,  0,  p2,  epsilon,  maxIterations);	  throw    new    FractionConversionException(value,    p2,    a1);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	154	None
4063	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.floor(q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(a1);  p2  =  Math.floor(q2);	  throw    new    FractionConversionException(value,    p2,    a1);    	non-compiled	[CE]  possible  loss  of  precision	154	None
4064	[BUG]  [BUGGY]  System.arraycopy(value,  0,  p2,  overflow);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  System.arraycopy(value,  0,  p2,  overflow);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	System.arraycopy(value,  0,  p2,  overflow);	  throw    new    FractionConversionException(value,    p2,    a1);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	154	None
2	[BUG]  [BUGGY]  if(value  <  0.0)  {  super();  }  else  {  throw  new  FractionConversionException( "Fraction  values  at  endpoints  do  not  have  different  signs. "  + "  Endpoints:  [ "  +  value  + ", "  +  maxDenominator  + "> "  + "  Endpoints:  [ "  +  value  + ", "  +  maxDe  [CE]  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  0.0)  {  super();  }  else  {  throw  new  FractionConversionException( "Fraction  values  at  endpoints  do  not  have  different  signs. "  + "  Endpoints:  [ "  +  value  + ", "  +  maxDenominator  + "> "  + "  Endpoints:  [ "  +  value  + ", "  +  maxDe  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(value  <  0.0)  {  super();  }  else  {  throw  new  FractionConversionException( "Fraction  values  at  endpoints  do  not  have  different  signs. "  + "  Endpoints:  [ "  +  value  + ", "  +  maxDenominator  + "> "  + "  Endpoints:  [ "  +  value  + ", "  +  maxDe	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  	42	None
3	[BUG]  [BUGGY]  if(value  <  0.0)  {  super();  }  else  {  throw  new  FractionConversionException( "Fraction  values  at  endpoints  do  not  have  different  signs. "  + "  Endpoints:  [ "  +  value  + ", "  +  maxDenominator  + "> "  + "  Endpoints:  [ "  +  value  + "] "  + "  Endpoints:  [ "  +  maxDe  [CE]  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  0.0)  {  super();  }  else  {  throw  new  FractionConversionException( "Fraction  values  at  endpoints  do  not  have  different  signs. "  + "  Endpoints:  [ "  +  value  + ", "  +  maxDenominator  + "> "  + "  Endpoints:  [ "  +  value  + "] "  + "  Endpoints:  [ "  +  maxDe  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(value  <  0.0)  {  super();  }  else  {  throw  new  FractionConversionException( "Fraction  values  at  endpoints  do  not  have  different  signs. "  + "  Endpoints:  [ "  +  value  + ", "  +  maxDenominator  + "> "  + "  Endpoints:  [ "  +  value  + "] "  + "  Endpoints:  [ "  +  maxDe	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  	42	None
4	[BUG]  [BUGGY]  if(value  <  0.0)  {  super();  }  else  {  throw  new  FractionConversionException( "Fraction  values  at  endpoints  do  not  have  different  signs. "  + "  Endpoints:  [ "  +  value  + ", "  +  maxDenominator  + "] "  + "  Endpoints:  [ "  +  value  + ", "  +  maxDe  [CE]  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  0.0)  {  super();  }  else  {  throw  new  FractionConversionException( "Fraction  values  at  endpoints  do  not  have  different  signs. "  + "  Endpoints:  [ "  +  value  + ", "  +  maxDenominator  + "] "  + "  Endpoints:  [ "  +  value  + ", "  +  maxDe  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(value  <  0.0)  {  super();  }  else  {  throw  new  FractionConversionException( "Fraction  values  at  endpoints  do  not  have  different  signs. "  + "  Endpoints:  [ "  +  value  + ", "  +  maxDenominator  + "] "  + "  Endpoints:  [ "  +  value  + ", "  +  maxDe	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  	42	None
34	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.ceil(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.ceil(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(a1);  q2  =  Math.ceil(q2);	      p2    =    Math.floor(a1);    q2    =    Math.floor(q2);    	non-compiled	[CE]  possible  loss  of  precision	121	None
62	[BUG]  [BUGGY]  [FE]  AssertionError  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(maxDenominator);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	add	numerator  =  BigInteger.valueOf(maxDenominator);	  numerator    =    BigInteger.valueOf(p);    	compilable	  [FE]  AssertionError  testDigitLimitConstructor	274	2
63	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(maxDenominator);  [FE]  AssertionError  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(maxDenominator);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator  =  BigInteger.valueOf(maxDenominator);	  numerator    =    BigInteger.valueOf(p);    	compilable	  [FE]  AssertionError  testDigitLimitConstructor	274	2
93	[BUG]  [BUGGY]  this(value,  0,  value,  maxDenominator,  1000);  [CE]  no  suitable  constructor  found  for  Fraction(double,int,double,int,int)  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value,  maxDenominator,  1000);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value,  maxDenominator,  1000);	  this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  no  suitable  constructor  found  for  Fraction(double,int,double,int,int)	34	None
123	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(value,  0);  [CE]  possible  loss  of  precision  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.max(value,  0);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	super();  this.numerator  =  Math.max(value,  0);	      super();    this.numerator    =    Math.max(value,    denominator);    	non-compiled	[CE]  possible  loss  of  precision	145	None
124	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(10,  denominator);  [CE]  variable  denominator  might  not  have  been  initialized  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.max(10,  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	super();  this.numerator  =  Math.max(10,  denominator);	      super();    this.numerator    =    Math.max(value,    denominator);    	non-compiled	[CE]  variable  denominator  might  not  have  been  initialized	145	None
153	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(numerator,  maxDenominator,  0);  [CE]  no  suitable  method  found  for  max(BigInteger,int,int)  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.max(numerator,  maxDenominator,  0);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.max(numerator,  maxDenominator,  0);	      super();    this.numerator    =    Math.max(numerator,    maxDenominator);    	non-compiled	[CE]  no  suitable  method  found  for  max(BigInteger,int,int)	342	None
182	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p2);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  bad  operand  types  for  binary  operator  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  denominator  =  BigInteger.valueOf(p2);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator    =    BigInteger.valueOf(p2);    if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	72	None
183	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p2);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  bad  operand  types  for  binary  operator  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  denominator  =  BigInteger.valueOf(p2);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator    =    BigInteger.valueOf(p2);    if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	72	None
184	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p2);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  BigFraction  =  Math.max(numerator,  denominator);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  denominator  =  BigInteger.valueOf(p2);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  BigFraction  =  Math.max(numerator,  denominator);  }  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator    =    BigInteger.valueOf(p2);    if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  BigFraction  =  Math.max(numerator,  denominator);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	72	None
185	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p2);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  throw  new  IllegalArgumentException( "maxDenominator  is  less  than  1: "  +  maxDenominator);  }  [CE]  bad  operand  types  for  binary  operator  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  denominator  =  BigInteger.valueOf(p2);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  throw  new  IllegalArgumentException( "maxDenominator  is  less  than  1: "  +  maxDenominator);  }  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator    =    BigInteger.valueOf(p2);    if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p2);  }  else  {  throw  new  IllegalArgumentException( "maxDenominator  is  less  than  1: "  +  maxDenominator);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	72	None
212	[BUG]  [BUGGY]  this.denominator  =(int)maxDenominator;  [CE]  incompatible  types  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this.denominator  =(int)maxDenominator;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this.denominator  =(int)maxDenominator;	      p2    =    Math.floor(r1);    	non-compiled	[CE]  incompatible  types	124	None
214	[BUG]  [BUGGY]  this.denominator  =(int)p1.denominator;  [CE]  long  cannot  be  dereferenced  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this.denominator  =(int)p1.denominator;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this.denominator  =(int)p1.denominator;	      p2    =    Math.floor(r1);    	non-compiled	[CE]  long  cannot  be  dereferenced	124	None
244	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(p2);  q2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(p2);  q2  =  Math.floor(q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p2  =  Math.floor(p2);  q2  =  Math.floor(q2);	  	non-compiled	[CE]  possible  loss  of  precision	152	None
274	[BUG]  [BUGGY]  if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value,  numerator);  }  else  {  throw  new  FractionConversionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value,  numerator);  }  else  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value,  numerator);  }  else  {  throw  new  FractionConversionException( " ");  }	      setDenominator(value);    	non-compiled	[CE]  illegal  start  of  expression	65	None
302	[BUG]  [BUGGY]  setMaximumFractionDigits(maxDenominator,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  DEFAULT_EPSILON  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumFractionDigits(maxDenominator,  DEFAULT_EPSILON);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumFractionDigits(maxDenominator,  DEFAULT_EPSILON);	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EPSILON	42	None
303	[BUG]  [BUGGY]  setMaximumFractionDigits(maxDenominator,  denominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumFractionDigits(maxDenominator,  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumFractionDigits(maxDenominator,  denominator);	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol	42	None
304	[BUG]  [BUGGY]  setMaximumFractionDigits(maxDenominator,  values.length);  [CE]  cannot  find  symbol  values  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumFractionDigits(maxDenominator,  values.length);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumFractionDigits(maxDenominator,  values.length);	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol  values	42	None
362	[BUG]  [BUGGY]  this(value,  0,  DEFAULT_EPSILON,  value.doubleValue(),  maxDenominator,  100);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  DEFAULT_EPSILON,  value.doubleValue(),  maxDenominator,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  DEFAULT_EPSILON,  value.doubleValue(),  maxDenominator,  100);	  this(value,    0,    value.doubleValue(),    maxDenominator,    100);    	non-compiled	[CE]  double  cannot  be  dereferenced	224	None
363	[BUG]  [BUGGY]  this(value,  0,  values.doubleValue(),  maxDenominator,  100);  [CE]  cannot  find  symbol  values  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  values.doubleValue(),  maxDenominator,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  values.doubleValue(),  maxDenominator,  100);	  this(value,    0,    value.doubleValue(),    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol  values	224	None
392	[BUG]  [BUGGY]  p2  =  Math.floor(p2);  q2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(p2);  q2  =  Math.floor(q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(p2);  q2  =  Math.floor(q2);	      	non-compiled	[CE]  possible  loss  of  precision	6	None
393	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.sqrt((  Math.floor(p2)/  q1));  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.sqrt((  Math.floor(p2)/  q1));  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(a1);  q2  =  Math.sqrt((  Math.floor(p2)/  q1));	      	non-compiled	[CE]  possible  loss  of  precision	6	None
394	[BUG]  [BUGGY]  stop  =  Math.stop(p2  -  a1);  [CE]  cannot  find  symbol  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  stop  =  Math.stop(p2  -  a1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	stop  =  Math.stop(p2  -  a1);	      	non-compiled	[CE]  cannot  find  symbol	6	None
424	[BUG]  [BUGGY]  this.denominator  =  Math.abs(q2  -  Q1);  [CE]  cannot  find  symbol  Q1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =  Math.abs(q2  -  Q1);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator  =  Math.abs(q2  -  Q1);	      this.denominator    =    Math.abs(q2    -    q1);    	non-compiled	[CE]  cannot  find  symbol  Q1	514	None
454	[BUG]  [BUGGY]  this(value,  0,  DEFAULT_EPSILON,  intValue(),  maxDenominator);  [CE]  cannot  reference  this  before  supertype  constructor  has  been  called  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  DEFAULT_EPSILON,  intValue(),  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  DEFAULT_EPSILON,  intValue(),  maxDenominator);	      this(value,    0,    value.intValue(),    DEFAULT_EPSILON,    denominator);    	non-compiled	[CE]  cannot  reference  this  before  supertype  constructor  has  been  called	305	None
513	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  r1,  a1);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  r1,  a1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  r1,  a1);	  throw    new    FractionConversionException(value,    p2,    a1);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long)	154	None
514	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  p2,  a1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	throw  new  FractionConversionException(n,  p2,  a1);	  throw    new    FractionConversionException(value,    p2,    a1);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	154	2
515	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p2,  a1);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  p2,  a1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(n,  p2,  a1);	  throw    new    FractionConversionException(value,    p2,    a1);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	154	2
543	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.round(f2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.round(f2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(a1);  q2  =  Math.round(f2);	      p2    =    Math.floor(a1);    q2    =    Math.round(q2);    	non-compiled	[CE]  possible  loss  of  precision	244	None
544	[BUG]  [BUGGY]  p2  =  Math.floor(a0);  q2  =  Math.round(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a0);  q2  =  Math.round(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(a0);  q2  =  Math.round(q2);	      p2    =    Math.floor(a1);    q2    =    Math.round(q2);    	non-compiled	[CE]  possible  loss  of  precision	244	None
573	[BUG]  [BUGGY]  setDenominator(minor);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setDenominator(minor);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setDenominator(minor);	  setDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  expression	101	None
601	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p0);  [CE]  variable  denominator  might  be  assigned  in  loop  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  denominator  =  BigInteger.valueOf(p0);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	denominator  =  BigInteger.valueOf(p0);	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  variable  denominator  might  be  assigned  in  loop	4	None
632	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  ==  0)  {  if(maxDenominator  >  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  ==  0)  {  if(maxDenominator  >  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    if(numerator  ==  0)  {  if(maxDenominator  >  0)  {  numerator  =  BigInteger.valueOf(q2);  }	  	non-compiled	[CE]  while  expected	363	None
633	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  ==  0)  {  if(maxDenominator  >=  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  ==  0)  {  if(maxDenominator  >=  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    if(numerator  ==  0)  {  if(maxDenominator  >=  0)  {  numerator  =  BigInteger.valueOf(q2);  }	  	non-compiled	[CE]  while  expected	363	None
634	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  ==  0)  {  if(maxDenominator  <=  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  ==  0)  {  if(maxDenominator  <=  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    if(numerator  ==  0)  {  if(maxDenominator  <=  0)  {  numerator  =  BigInteger.valueOf(q2);  }	  	non-compiled	[CE]  while  expected	363	None
635	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  <  0)  {  if(maxDenominator  >  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(numerator  <  0)  {  if(maxDenominator  >  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    if(numerator  <  0)  {  if(maxDenominator  >  0)  {  numerator  =  BigInteger.valueOf(q2);  }	  	non-compiled	[CE]  while  expected	363	None
692	[BUG]  [BUGGY]  if(numerator  <  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionConversionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(numerator  <  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionConversionException( " ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(numerator  <  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionConversionException( " ");  }	  peg(Calendar.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	103	None
693	[BUG]  [BUGGY]  if(numerator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionConversionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(numerator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionConversionException( " ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(numerator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionConversionException( " ");  }	  peg(Calendar.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	103	None
694	[BUG]  [BUGGY]  if(numerator  >=  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionConversionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(numerator  >=  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionConversionException( " ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(numerator  >=  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionConversionException( " ");  }	  peg(Calendar.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	103	None
724	[BUG]  [BUGGY]  Arrays.sort(value,  0,  maxDenominator,  1000);  [CE]  cannot  find  symbol  Arrays  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  Arrays.sort(value,  0,  maxDenominator,  1000);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	Arrays.sort(value,  0,  maxDenominator,  1000);	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  cannot  find  symbol  Arrays	95	None
752	[BUG]  [BUGGY]  setValue(value,  0,  maxDenominator,  0);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setValue(value,  0,  maxDenominator,  0);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setValue(value,  0,  maxDenominator,  0);	      setValue(value,    0,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	93	None
753	[BUG]  [BUGGY]  setValue(value,  0,  maxDenominator,  1000);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setValue(value,  0,  maxDenominator,  1000);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setValue(value,  0,  maxDenominator,  1000);	      setValue(value,    0,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	93	None
781	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p1,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(0.0,  p1,  q2);	  throw    new    FractionConversionException(value,    p1,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	4	2
782	[BUG]  [BUGGY]  throw  new  FractionConversionException(0.0,  p1,  q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p1,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(0.0,  p1,  q2);	  throw    new    FractionConversionException(value,    p1,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	4	2
813	[BUG]  [BUGGY]  setValue(value,  0,  maxDenominator,  10);  [CE]  cannot  find  symbol  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setValue(value,  0,  maxDenominator,  10);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	setValue(value,  0,  maxDenominator,  10);	  this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  cannot  find  symbol	34	None
843	[BUG]  [BUGGY]  this(value,  0,  value,  maxDenominator,  1000);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this(value,  0,  value,  maxDenominator,  1000);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this(value,  0,  value,  maxDenominator,  1000);	      p2    =    Math.floor(a1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	122	None
872	[BUG]  [BUGGY]  if(numerator  <  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(numerator  <  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionException( " ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(numerator  <  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	105	None
874	[BUG]  [BUGGY]  if(numerator  >=  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(numerator  >=  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionException( " ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(numerator  >=  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	105	None
961	[BUG]  [BUGGY]  this.numerator  =  Math.max(maxDenominator,  value);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this.numerator  =  Math.max(maxDenominator,  value);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this.numerator  =  Math.max(maxDenominator,  value);	  this.numerator    =    Math.max(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	304	None
963	[BUG]  [BUGGY]  this.numerator  =  Math.max(value,  maxDenominator,  100);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this.numerator  =  Math.max(value,  maxDenominator,  100);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this.numerator  =  Math.max(value,  maxDenominator,  100);	  this.numerator    =    Math.max(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	304	None
964	[BUG]  [BUGGY]  this.numerator  =  Math.max(MaxDenominator,  value);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this.numerator  =  Math.max(MaxDenominator,  value);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this.numerator  =  Math.max(MaxDenominator,  value);	  this.numerator    =    Math.max(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	304	None
992	[BUG]  [BUGGY]  this.numerator  =(int)p1;  this.denominator  =(int)q2;  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p1;  this.denominator  =(int)q2;  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =(int)p1;  this.denominator  =(int)q2;	      this.numerator    =(int)p2;    this.denominator    =(int)q2;    	non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	141	None
993	[BUG]  [BUGGY]  if(p2  <  0)  {  this.numerator  =(int)p2;  this.denominator  =(int)q2;  }  else  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  possible  loss  of  precision  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  if(p2  <  0)  {  this.numerator  =(int)p2;  this.denominator  =(int)q2;  }  else  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	if(p2  <  0)  {  this.numerator  =(int)p2;  this.denominator  =(int)q2;  }  else  {  this.numerator  =  p2;  this.denominator  =  p2;  }	      this.numerator    =(int)p2;    this.denominator    =(int)q2;    	non-compiled	[CE]  possible  loss  of  precision	141	None
994	[BUG]  [BUGGY]  if(p2  <  0.0)  {  this.numerator  =(int)p2;  this.denominator  =(int)q2;  }  else  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  possible  loss  of  precision  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  if(p2  <  0.0)  {  this.numerator  =(int)p2;  this.denominator  =(int)q2;  }  else  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	if(p2  <  0.0)  {  this.numerator  =(int)p2;  this.denominator  =(int)q2;  }  else  {  this.numerator  =  p2;  this.denominator  =  p2;  }	      this.numerator    =(int)p2;    this.denominator    =(int)q2;    	non-compiled	[CE]  possible  loss  of  precision	141	None
1024	[BUG]  [BUGGY]  setValue(value,  1);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setValue(value,  1);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setValue(value,  1);	      setValue(value,    0);    	non-compiled	[CE]  illegal  start  of  expression	94	None
1054	[BUG]  [BUGGY]  p2  =  Math.floor(a1)-  p0;  p2  =  Math.round(q2);  [CE]  cannot  find  symbol  a1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(a1)-  p0;  p2  =  Math.round(q2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(a1)-  p0;  p2  =  Math.round(q2);	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    (int)q2;    }    	non-compiled	[CE]  cannot  find  symbol  a1	84	None
1081	[BUG]  [BUGGY]  if(p2  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  p2  =  p2.getNext();  p2  =  p2.getNext();  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p2  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  p2  =  p2.getNext();  p2  =  p2.getNext();  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p2  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  p2  =  p2.getNext();  p2  =  p2.getNext();  }	  throw    new    FractionConversionException(value,    p2,    a1);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	154	None
1082	[BUG]  [BUGGY]  if(p2  <  0.0)  {  throw  new  FractionConversionException( " ");  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p2  <  0.0)  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p2  <  0.0)  {  throw  new  FractionConversionException( " ");  }	  throw    new    FractionConversionException(value,    p2,    a1);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	154	None
1084	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  ++denominator;  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  ++denominator;  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  ++denominator;  }	  throw    new    FractionConversionException(value,    p2,    a1);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	154	None
1114	[BUG]  [BUGGY]  this(value,  0,  value,  int  maxDenominator,  100);  [CE]  '.class'  expected  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  value,  int  maxDenominator,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value,  int  maxDenominator,  100);	  this(value,    0,    value,    maxDenominator,    100);    	non-compiled	[CE]  '.class'  expected	223	None
1174	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.max(q2,  q0);  [CE]  cannot  find  symbol  a1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.max(q2,  q0);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(a1);  p2  =  Math.max(q2,  q0);	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    q2;    }    	non-compiled	[CE]  cannot  find  symbol  a1	85	None
1232	[BUG]  [BUGGY]  if(numerator  ==  0)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [CE]  incomparable  types:  BigInteger  and  int  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  if(numerator  ==  0)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	if(numerator  ==  0)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  denominator  =  BigInteger.valueOf(p3);  }	      denominator    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  incomparable  types:  BigInteger  and  int	23	None
1234	[BUG]  [BUGGY]  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  bad  operand  types  for  binary  operator  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(q2);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      denominator    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	23	None
1262	[BUG]  [BUGGY]  this(value,  0,  DEFAULT_EPSILON,  100);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this(value,  0,  DEFAULT_EPSILON,  100);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this(value,  0,  DEFAULT_EPSILON,  100);	      this.numerator    =    Math.abs(q2);    this.denominator    =    Math.abs(q1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	144	None
1263	[BUG]  [BUGGY]  if(value  <  0)  {  this(value,  DEFAULT_EPSILON,  0,  maxDenominator);  }  else  {  throw  new  FractionConversionException( " ");  }  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  if(value  <  0)  {  this(value,  DEFAULT_EPSILON,  0,  maxDenominator);  }  else  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	if(value  <  0)  {  this(value,  DEFAULT_EPSILON,  0,  maxDenominator);  }  else  {  throw  new  FractionConversionException( " ");  }	      this.numerator    =    Math.abs(q2);    this.denominator    =    Math.abs(q1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	144	None
1264	[BUG]  [BUGGY]  if(value  <  0)  {  this(value,  DEFAULT_EPSILON,  0,  maxDenominator);  }  else  {  setDenominator(maxDenominator);  }  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  if(value  <  0)  {  this(value,  DEFAULT_EPSILON,  0,  maxDenominator);  }  else  {  setDenominator(maxDenominator);  }  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	if(value  <  0)  {  this(value,  DEFAULT_EPSILON,  0,  maxDenominator);  }  else  {  setDenominator(maxDenominator);  }	      this.numerator    =    Math.abs(q2);    this.denominator    =    Math.abs(q1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	144	None
1292	[BUG]  [BUGGY]  if(q1  >  epsilon)  {  if(maxDenominator  <  denominator)  {  this.numerator  =(int)p2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q1  >  epsilon)  {  if(maxDenominator  <  denominator)  {  this.numerator  =(int)p2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q1  >  epsilon)  {  if(maxDenominator  <  denominator)  {  this.numerator  =(int)p2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    denominator)    {    this.numerator    =    (int)p2;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None
1293	[BUG]  [BUGGY]  if(q1  >  0)  {  if(maxDenominator  <  denominator)  {  this.numerator  =(int)p2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q1  >  0)  {  if(maxDenominator  <  denominator)  {  this.numerator  =(int)p2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q1  >  0)  {  if(maxDenominator  <  denominator)  {  this.numerator  =(int)p2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    denominator)    {    this.numerator    =    (int)p2;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None
1352	[BUG]  [BUGGY]  add(Calendar.getInstance());  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  add(Calendar.getInstance());  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	add(Calendar.getInstance());	  peg(Calendar.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	103	None
1353	[BUG]  [BUGGY]  setValue(Calendar.getInstance());  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setValue(Calendar.getInstance());  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setValue(Calendar.getInstance());	  peg(Calendar.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	103	None
1354	[BUG]  [BUGGY]  setDenominator(Calendar.getInstance());  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setDenominator(Calendar.getInstance());  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setDenominator(Calendar.getInstance());	  peg(Calendar.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	103	None
1384	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  p2,  overflow);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	throw  new  FractionConversionException(n,  p2,  overflow);	  throw    new    FractionConversionException(value,    p2,    overflow);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	155	2
1385	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p2,  overflow);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  p2,  overflow);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(n,  p2,  overflow);	  throw    new    FractionConversionException(value,    p2,    overflow);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	155	2
1414	[BUG]  [BUGGY]  setValue(value,  0,  value,  maxDenominator,  100);  [CE]  cannot  find  symbol  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setValue(value,  0,  value,  maxDenominator,  100);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	setValue(value,  0,  value,  maxDenominator,  100);	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  cannot  find  symbol	95	None
1444	[BUG]  [BUGGY]  this.numerator  =(int)(p2);  this.denominator  =(int)(maxDenominator);  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)(p2);  this.denominator  =(int)(maxDenominator);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =(int)(p2);  this.denominator  =(int)(maxDenominator);	      this.numerator    =(int)(p2);    this.denominator    =(int)(q2);    	non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	143	None
1474	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  9);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	add	this(value,  0,  maxDenominator,  9);	  this(value,    0,    maxDenominator,    10);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	35	2
1475	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  9);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  9);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  maxDenominator,  9);	  this(value,    0,    maxDenominator,    10);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	35	2
1503	[BUG]  [BUGGY]  this(value,  0,  minDenominator,  0);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  minDenominator,  0);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this(value,  0,  minDenominator,  0);	      this(value,    0,    maxDenominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	175	None
1504	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  10);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  maxDenominator,  10);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this(value,  0,  maxDenominator,  10);	      this(value,    0,    maxDenominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	175	None
1561	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.floor(maxDenominator))?  ONE  :  ZERO;  [CE]  not  a  statement  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.floor(maxDenominator))?  ONE  :  ZERO;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator((  int)Math.abs(value)>  Math.floor(maxDenominator))?  ONE  :  ZERO;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator))?    ONE    :    ZERO;    	non-compiled	[CE]  not  a  statement	425	None
1564	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.floor(minor))?  ONE  :  ZERO;  [CE]  not  a  statement  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.floor(minor))?  ONE  :  ZERO;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator((  int)Math.abs(value)>  Math.floor(minor))?  ONE  :  ZERO;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator))?    ONE    :    ZERO;    	non-compiled	[CE]  not  a  statement	425	None
1651	[BUG]  [BUGGY]  if(q2  >  0)  {  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  }  [CE]  cannot  find  symbol  q3  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(q2  >  0)  {  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(q2  >  0)  {  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  }	      numerator    =    BigInteger.valueOf(q2);    denominator    =    BigInteger.valueOf(q3);    	non-compiled	[CE]  cannot  find  symbol  q3	11	None
1652	[BUG]  [BUGGY]  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  }  [CE]  cannot  find  symbol  q3  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  }	      numerator    =    BigInteger.valueOf(q2);    denominator    =    BigInteger.valueOf(q3);    	non-compiled	[CE]  cannot  find  symbol  q3	11	None
1653	[BUG]  [BUGGY]  if(p  >  0)  {  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  }  [CE]  cannot  find  symbol  p  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(p  >  0)  {  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(p  >  0)  {  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  }	      numerator    =    BigInteger.valueOf(q2);    denominator    =    BigInteger.valueOf(q3);    	non-compiled	[CE]  cannot  find  symbol  p	11	None
1654	[BUG]  [BUGGY]  if(numerator  ==  0)  {  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  }  [CE]  incomparable  types:  BigInteger  and  int  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(numerator  ==  0)  {  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(numerator  ==  0)  {  numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  }	      numerator    =    BigInteger.valueOf(q2);    denominator    =    BigInteger.valueOf(q3);    	non-compiled	[CE]  incomparable  types:  BigInteger  and  int	11	None
1682	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)q1  -  1;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	add	this.denominator  =(int)q1  -  1;	      this.denominator    =(int)p1    -    1;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	513	2
1683	[BUG]  [BUGGY]  this.denominator  =(int)q1  -  1;  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)q1  -  1;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator  =(int)q1  -  1;	      this.denominator    =(int)p1    -    1;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	513	2
1712	[BUG]  [BUGGY]  Arrays.fill(value,  0,  denominator,  100);  [CE]  cannot  find  symbol  Arrays  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  Arrays.fill(value,  0,  denominator,  100);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	Arrays.fill(value,  0,  denominator,  100);	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol  Arrays	92	None
1713	[BUG]  [BUGGY]  Arrays.sort(value,  0,  maxDenominator,  100);  [CE]  cannot  find  symbol  Arrays  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  Arrays.sort(value,  0,  maxDenominator,  100);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	Arrays.sort(value,  0,  maxDenominator,  100);	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol  Arrays	92	None
1714	[BUG]  [BUGGY]  super();  this(value,  0,  denominator,  100);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this(value,  0,  denominator,  100);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	super();  this(value,  0,  denominator,  100);	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	92	None
1743	[BUG]  [BUGGY]  maxDenominator  =  BigInteger.valueOf(p2);  [CE]  incompatible  types  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  maxDenominator  =  BigInteger.valueOf(p2);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	maxDenominator  =  BigInteger.valueOf(p2);	      numerator    =    BigInteger.valueOf(p2);    	non-compiled	[CE]  incompatible  types	24	None
1771	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p2);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p2);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p2);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	2	None
1772	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(p2  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p2);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(p2  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p2);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    if(p2  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p2);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	2	None
1773	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(a1);  p2  =  Math.floor(q2);  q2  =  Math.floor(a1);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(a1);  p2  =  Math.floor(q2);  q2  =  Math.floor(a1);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(a1);  p2  =  Math.floor(q2);  q2  =  Math.floor(a1);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	2	None
1774	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p2);  p2  =  Math.floor(a1);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p2);  p2  =  Math.floor(a1);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p2);  p2  =  Math.floor(a1);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	2	None
1775	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigInteger  p2  =  Math.floor(p2);  p2  =  Math.floor(p2);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigInteger  p2  =  Math.floor(p2);  p2  =  Math.floor(p2);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigInteger  p2  =  Math.floor(p2);  p2  =  Math.floor(p2);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	2	None
1801	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  [Delete]  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	[Delete]	      p2    =(p2)FastMath.floor(q2);    	non-compiled	[CE]  illegal  start  of  expression	184	None
1803	[BUG]  [BUGGY]  if(p1  >  epsilon)  {  if(p1  >  epsilon)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  epsilon)  {  if(p1  >  epsilon)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  epsilon)  {  if(p1  >  epsilon)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }	      p2    =(p2)FastMath.floor(q2);    	non-compiled	[CE]  while  expected	184	None
1832	[BUG]  [BUGGY]  if(denominator  ==  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(denominator  ==  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(denominator  ==  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }	  throw    new    FractionConversionException(value,    p0,    q2);    	non-compiled	[CE]  while  expected	362	None
1834	[BUG]  [BUGGY]  if(nominator  ==  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(nominator  ==  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(nominator  ==  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }	  throw    new    FractionConversionException(value,    p0,    q2);    	non-compiled	[CE]  while  expected	362	None
1894	[BUG]  [BUGGY]  setMinimumFraction(maxDenominator,  0);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setMinimumFraction(maxDenominator,  0);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setMinimumFraction(maxDenominator,  0);	  setMaximumFraction(maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	203	None
1924	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p);  [CE]  cannot  find  symbol  p  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  denominator  =  BigInteger.valueOf(p);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	denominator  =  BigInteger.valueOf(p);	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  cannot  find  symbol  p	4	None
1955	[BUG]  [BUGGY]  this.denominator  =(int)p1;  this.denominator  =(int)q2  +  1;  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  this.denominator  =(int)q2  +  1;  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    this.denominator  =(int)q2  +  1;	  	non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	164	None
1982	[BUG]  [BUGGY]  if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  denominator);  gcd.add(value);  }  else  {  BigFraction  gcd  =  new  BigFraction(value,  gcd,  denominator);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  denominator);  gcd.add(value);  }  else  {  BigFraction  gcd  =  new  BigFraction(value,  gcd,  denominator);  }  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  denominator);  gcd.add(value);  }  else  {  BigFraction  gcd  =  new  BigFraction(value,  gcd,  denominator);  }	      setDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  expression	62	None
1984	[BUG]  [BUGGY]  if(maxDenominator  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  gcd.add(value);  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(maxDenominator  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  gcd.add(value);  }  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	if(maxDenominator  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  gcd.add(value);  }	      setDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  expression	62	None
2044	[BUG]  [BUGGY]  maxDenominator  =  BigInteger.valueOf(q2);  [CE]  incompatible  types  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  maxDenominator  =  BigInteger.valueOf(q2);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	maxDenominator  =  BigInteger.valueOf(q2);	      numerator    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  incompatible  types	21	None
2102	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  value,  q0);  [CE]  no  suitable  constructor  found  for  FractionConversionException(int,double,long)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  value,  q0);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(n,  value,  q0);	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(int,double,long)	364	None
2103	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  p2,  q0);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	throw  new  FractionConversionException(n,  p2,  q0);	  throw    new    FractionConversionException(value,    p2,    q0);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	364	2
2104	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p2,  q0);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  p2,  q0);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(n,  p2,  q0);	  throw    new    FractionConversionException(value,    p2,    q0);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	364	2
2134	[BUG]  [BUGGY]  this.numerator  =  Math.min(value,  maxDenominator,  100);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this.numerator  =  Math.min(value,  maxDenominator,  100);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this.numerator  =  Math.min(value,  maxDenominator,  100);	  this.numerator    =    Math.min(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	303	None
2163	[BUG]  [BUGGY]  p2  =  Math.floor(a1)-  p0;  q2  =  Math.abs(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1)-  p0;  q2  =  Math.abs(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(a1)-  p0;  q2  =  Math.abs(q2);	      p2    =    Math.floor(a1);    q2    =    Math.abs(q2);    	non-compiled	[CE]  possible  loss  of  precision	242	None
2191	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  denominator,  value,  p2,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(int,int,double,long,long)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  denominator,  value,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(n,  denominator,  value,  p2,  q2);	  throw    new    FractionConversionException(n,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(int,int,double,long,long)	452	None
2192	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  denominator,  p2,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(int,int,long,long)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  denominator,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(n,  denominator,  p2,  q2);	  throw    new    FractionConversionException(n,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(int,int,long,long)	452	None
2194	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p2,  q2,  value);  [CE]  no  suitable  constructor  found  for  FractionConversionException(int,long,long,double)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  p2,  q2,  value);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(n,  p2,  q2,  value);	  throw    new    FractionConversionException(n,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(int,long,long,double)	452	None
2221	[BUG]  [BUGGY]  int  n  =  Math.max(maxIterations,  epsilon);  [CE]  variable  n  is  already  defined  in  constructor  Fraction(double,double,int,int)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  int  n  =  Math.max(maxIterations,  epsilon);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	int  n  =  Math.max(maxIterations,  epsilon);	      int    maxIterations    =    Math.max(n,    epsilon);    	non-compiled	[CE]  variable  n  is  already  defined  in  constructor  Fraction(double,double,int,int)	185	None
2222	[BUG]  [BUGGY]  int  maxIterations  =  Math.max(maxIterations,  epsilon);  [CE]  variable  maxIterations  is  already  defined  in  constructor  Fraction(double,double,int,int)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  int  maxIterations  =  Math.max(maxIterations,  epsilon);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	int  maxIterations  =  Math.max(maxIterations,  epsilon);	      int    maxIterations    =    Math.max(n,    epsilon);    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  Fraction(double,double,int,int)	185	None
2224	[BUG]  [BUGGY]  int  maxIterations  =  Math.max(maxIterations,  p2);  [CE]  variable  maxIterations  is  already  defined  in  constructor  Fraction(double,double,int,int)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  int  maxIterations  =  Math.max(maxIterations,  p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	int  maxIterations  =  Math.max(maxIterations,  p2);	      int    maxIterations    =    Math.max(n,    epsilon);    	non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  Fraction(double,double,int,int)	185	None
2253	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(maxDenominator);  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  denominator  =  BigInteger.valueOf(maxDenominator);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	denominator  =  BigInteger.valueOf(maxDenominator);	      denominator    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	13	None
2283	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  value,  q1);  [CE]  no  suitable  constructor  found  for  FractionConversionException(int,double,long)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  value,  q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(n,  value,  q1);	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(int,double,long)	153	None
2313	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  q2  =  BigInteger.valueOf(q2);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	add	q2  =  BigInteger.valueOf(q2);	      num    =    BigInteger.valueOf(q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	384	2
2314	[BUG]  [BUGGY]  q2  =  BigInteger.valueOf(q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  q2  =  BigInteger.valueOf(q2);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	q2  =  BigInteger.valueOf(q2);	      num    =    BigInteger.valueOf(q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	384	2
2343	[BUG]  [BUGGY]  if(p2  >  maxDenominator)  }  if(p2  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(p2  >  maxDenominator)  }  if(p2  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(p2  >  maxDenominator)  }  if(p2  <  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(p2    >    maxDenominator)    {    if(p2    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	485	None
2344	[BUG]  [BUGGY]  if(p2  >  maxDenominator)  [Delete]  if(p2  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(p2  >  maxDenominator)  [Delete]  if(p2  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(p2  >  maxDenominator)  [Delete]  if(p2  <  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(p2    >    maxDenominator)    {    if(p2    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	485	None
2373	[BUG]  [BUGGY]  throw  new  FractionConversionException(m,  p2,  q2);  [CE]  cannot  find  symbol  m  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(m,  p2,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(m,  p2,  q2);	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  cannot  find  symbol  m	4	None
2374	[BUG]  [BUGGY]  throw  new  FractionConversionException(in,  p2,  q2);  [CE]  cannot  find  symbol  in  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(in,  p2,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(in,  p2,  q2);	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  cannot  find  symbol  in	4	None
2405	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p2);  numerator  =  BigInteger.valueOf(p3);  [CE]  cannot  find  symbol  p3  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(p2);  numerator  =  BigInteger.valueOf(p3);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator    =    BigInteger.valueOf(p2);    numerator  =  BigInteger.valueOf(p3);	  	non-compiled	[CE]  cannot  find  symbol  p3	51	None
2432	[BUG]  [BUGGY]  this(value,  0,  DEFAULT_EPSILON,  value.doubleValue(),  maxDenominator);  [CE]  double  cannot  be  dereferenced  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  DEFAULT_EPSILON,  value.doubleValue(),  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  DEFAULT_EPSILON,  value.doubleValue(),  maxDenominator);	      this(value,    0,    value.doubleValue(),    maxDenominator);    	non-compiled	[CE]  double  cannot  be  dereferenced	302	None
2433	[BUG]  [BUGGY]  this(value,  0,  values.doubleValue(),  maxDenominator);  [CE]  cannot  find  symbol  values  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  values.doubleValue(),  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  values.doubleValue(),  maxDenominator);	      this(value,    0,    value.doubleValue(),    maxDenominator);    	non-compiled	[CE]  cannot  find  symbol  values	302	None
2463	[BUG]  [BUGGY]  this(value,  0,  values.intValue(),  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  values.intValue(),  maxDenominator);  [BUGGY]      [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this(value,  0,  values.intValue(),  maxDenominator);	  this.numerator    =    Math.min(value,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	303	None
2494	[BUG]  [BUGGY]  if(p1  >  0)  {  if(p1  >  0)  {  this.numerator  =  p2;  this.denominator  =  p1;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  0)  {  if(p1  >  0)  {  this.numerator  =  p2;  this.denominator  =  p1;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  0)  {  if(p1  >  0)  {  this.numerator  =  p2;  this.denominator  =  p1;  }	      p2    =(p2)FastMath.floor(q2);    	non-compiled	[CE]  while  expected	184	None
2554	[BUG]  [BUGGY]  this(value,  0,  value,  100);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  value,  100);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this(value,  0,  value,  100);	  this(value,    0,    denominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	104	None
2612	[BUG]  [BUGGY]  this.numerator  =  p1;  [CE]  possible  loss  of  precision  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =  p1;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =  p1;	      	non-compiled	[CE]  possible  loss  of  precision	115	None
2613	[BUG]  [BUGGY]  this.numerator  =  computeMaxDenominator(p2);  [CE]  cannot  find  symbol  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =  computeMaxDenominator(p2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =  computeMaxDenominator(p2);	      	non-compiled	[CE]  cannot  find  symbol	115	None
2644	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p2).value;  [CE]  cannot  find  symbol  value  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  denominator  =  BigInteger.valueOf(p2).value;  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator  =  BigInteger.valueOf(p2).value;	  denominator    =    BigInteger.valueOf(p2);    	non-compiled	[CE]  cannot  find  symbol  value	73	None
2701	[BUG]  [BUGGY]  if(q1  >  epsilon)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q1  >  epsilon)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q1  >  epsilon)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =(int)q2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    (int)q2;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None
2703	[BUG]  [BUGGY]  if(q1  >  epsilon)  {  if(maxDenominator  >>  epsilon)  {  this.numerator  =(int)q2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q1  >  epsilon)  {  if(maxDenominator  >>  epsilon)  {  this.numerator  =(int)q2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q1  >  epsilon)  {  if(maxDenominator  >>  epsilon)  {  this.numerator  =(int)q2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    (int)q2;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None
2733	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  10);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	add	this(value,  0,  maxDenominator,  10);	  this(value,    0,    maxDenominator,    1000);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	193	2
2734	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  10);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  10);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  maxDenominator,  10);	  this(value,    0,    maxDenominator,    1000);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	193	2
2734	[BUG]  [BUGGY]  this(value,  0,  maximumDenominator,  1000);  [CE]  cannot  find  symbol  maximumDenominator  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maximumDenominator,  1000);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  maximumDenominator,  1000);	  this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  cannot  find  symbol  maximumDenominator	193	None
2761	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  if(value  ==  0.0)  {  throw  new  FractionConversionException( " ");  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(n  <  maxIterations)  {  if(value  ==  0.0)  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(n  <  maxIterations)  {  if(value  ==  0.0)  {  throw  new  FractionConversionException( " ");  }	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  while  expected	153	None
2762	[BUG]  [BUGGY]  setResult(value,  p2);  [CE]  cannot  find  symbol  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  setResult(value,  p2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	setResult(value,  p2);	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  cannot  find  symbol	153	None
2764	[BUG]  [BUGGY]  if(a1  <=  0.0)  {  throw  new  FractionConversionException( " ");  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(a1  <=  0.0)  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(a1  <=  0.0)  {  throw  new  FractionConversionException( " ");  }	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	153	None
2821	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p0,  q1,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(p0,  q1,  q2);	  throw    new    FractionConversionException(p0,    q1,    p2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	284	2
2822	[BUG]  [BUGGY]  throw  new  FractionConversionException(p0,  q1,  q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p0,  q1,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(p0,  q1,  q2);	  throw    new    FractionConversionException(p0,    q1,    p2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	284	2
2822	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p0,  p2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(0.0,  p0,  p2);	  throw    new    FractionConversionException(p0,    q1,    p2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	284	2
2823	[BUG]  [BUGGY]  throw  new  FractionConversionException(0.0,  p0,  p2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p0,  p2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(0.0,  p0,  p2);	  throw    new    FractionConversionException(p0,    q1,    p2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	284	2
2851	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)/  Math.floor(maxDenominator));  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setDenominator((  int)Math.abs(value)/  Math.floor(maxDenominator));  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setDenominator((  int)Math.abs(value)/  Math.floor(maxDenominator));	  setDenominator((    int)Math.abs(value)/    Math.abs(maxDenominator));    	non-compiled	[CE]  illegal  start  of  expression	574	None
2852	[BUG]  [BUGGY]  setNumerator((  int)Math.abs(value)/  Math.floor(maxDenominator));  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setNumerator((  int)Math.abs(value)/  Math.floor(maxDenominator));  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setNumerator((  int)Math.abs(value)/  Math.floor(maxDenominator));	  setDenominator((    int)Math.abs(value)/    Math.abs(maxDenominator));    	non-compiled	[CE]  illegal  start  of  expression	574	None
2882	[BUG]  [BUGGY]  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( " ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( " ");  }	  setDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  expression	101	None
2883	[BUG]  [BUGGY]  if(denominator  <  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(denominator  <  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( " ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(denominator  <  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( " ");  }	  setDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  expression	101	None
2884	[BUG]  [BUGGY]  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( " ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( " ");  }	  setDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  expression	101	None
2915	[BUG]  [BUGGY]      stop  =  BigInteger.stop(value);  p2  =  Math.floor(p2);  [CE]  cannot  find  symbol  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]      stop  =  BigInteger.stop(value);  p2  =  Math.floor(p2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	        stop  =  BigInteger.stop(value);  p2  =  Math.floor(p2);	  	non-compiled	[CE]  cannot  find  symbol	5	None
2944	[BUG]  [BUGGY]  this.numerator  =(int)p3;  [CE]  cannot  find  symbol  p3  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p3;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =(int)p3;	  this.numerator    =(int)p2;    	non-compiled	[CE]  cannot  find  symbol  p3	112	None
2974	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  numerator  =  BigInteger.valueOf(maxDenominator);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	add	numerator  =  BigInteger.valueOf(maxDenominator);	      numerinator    =    BigInteger.valueOf(q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	324	2
2975	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(maxDenominator);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  numerator  =  BigInteger.valueOf(maxDenominator);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	numerator  =  BigInteger.valueOf(maxDenominator);	      numerinator    =    BigInteger.valueOf(q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	324	2
3003	[BUG]  [BUGGY]  p2  =  Math.floor(a1)-  p0;  q2  =  Math.abs(q1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1)-  p0;  q2  =  Math.abs(q1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(a1)-  p0;  q2  =  Math.abs(q1);	      p2    =    Math.floor(a1);    q2    =    Math.abs(q1);    	non-compiled	[CE]  possible  loss  of  precision	241	None
3062	[BUG]  [BUGGY]  p2  =  Math.floor(r1);  p2  =  Math.ceil(q0,  q2);  [CE]  cannot  find  symbol  r1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(r1);  p2  =  Math.ceil(q0,  q2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(r1);  p2  =  Math.ceil(q0,  q2);	      this.denominator    =(int)q2;    	non-compiled	[CE]  cannot  find  symbol  r1	81	None
3063	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.ceil(a0,  q2);  [CE]  cannot  find  symbol  a1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.ceil(a0,  q2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(a1);  p2  =  Math.ceil(a0,  q2);	      this.denominator    =(int)q2;    	non-compiled	[CE]  cannot  find  symbol  a1	81	None
3064	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.ceil(r0,  p2);  [CE]  cannot  find  symbol  a1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.ceil(r0,  p2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(a1);  p2  =  Math.ceil(r0,  p2);	      this.denominator    =(int)q2;    	non-compiled	[CE]  cannot  find  symbol  a1	81	None
3093	[BUG]  [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p1  -  q2);  [CE]  incompatible  types  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p1  -  q2);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    numerator  =  BigInteger.valueOf(p1  -  q2);	  	non-compiled	[CE]  incompatible  types	164	None
3124	[BUG]  [BUGGY]  int  count  =  BigInteger.valueOf(minDenominator);  [CE]  cannot  find  symbol  minDenominator  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  int  count  =  BigInteger.valueOf(minDenominator);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	int  count  =  BigInteger.valueOf(minDenominator);	      num    =    BigInteger.valueOf(minDenominator);    	non-compiled	[CE]  cannot  find  symbol  minDenominator	385	None
3153	[BUG]  [BUGGY]  if(p1  >  0)  {  if(p1  >  0)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  0)  {  if(p1  >  0)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  0)  {  if(p1  >  0)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	      p2    =(int)FastMath.floor(p2);    	non-compiled	[CE]  while  expected	183	None
3182	[BUG]  [BUGGY]  Arrays.fill(value,  0,  maxDenominator);  [CE]  cannot  find  symbol  Arrays  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  Arrays.fill(value,  0,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	Arrays.fill(value,  0,  maxDenominator);	      super();    	non-compiled	[CE]  cannot  find  symbol  Arrays	41	None
3183	[BUG]  [BUGGY]  Arrays.fill(value,  0,  numerator);  [CE]  cannot  find  symbol  Arrays  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  Arrays.fill(value,  0,  numerator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	Arrays.fill(value,  0,  numerator);	      super();    	non-compiled	[CE]  cannot  find  symbol  Arrays	41	None
3184	[BUG]  [BUGGY]  Arrays.fill(value,  0,  denominator);  [CE]  cannot  find  symbol  Arrays  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  Arrays.fill(value,  0,  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	Arrays.fill(value,  0,  denominator);	      super();    	non-compiled	[CE]  cannot  find  symbol  Arrays	41	None
3273	[BUG]  [BUGGY]  p2  =  Math.floor(p2);  q2  =  Math.floor(r1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(p2);  q2  =  Math.floor(r1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(p2);  q2  =  Math.floor(r1);	      	non-compiled	[CE]  possible  loss  of  precision	156	None
3274	[BUG]  [BUGGY]  value  =  Math.floor(p2);  q2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  value  =  Math.floor(p2);  q2  =  Math.floor(q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	value  =  Math.floor(p2);  q2  =  Math.floor(q2);	      	non-compiled	[CE]  possible  loss  of  precision	156	None
3304	[BUG]  [BUGGY]  this.denominator  =(int)p3;  [CE]  cannot  find  symbol  p3  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p3;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator  =(int)p3;	      this.denominator    =(int)p2;    	non-compiled	[CE]  cannot  find  symbol  p3	82	None
3333	[BUG]  [BUGGY]  setMaximumFractionDenominator(maxDenominator,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  DEFAULT_EPSILON  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumFractionDenominator(maxDenominator,  DEFAULT_EPSILON);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumFractionDenominator(maxDenominator,  DEFAULT_EPSILON);	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EPSILON	44	None
3361	[BUG]  [BUGGY]  super();  this.numerator  =  Math.min(value,  maxDenominator);  [CE]  possible  loss  of  precision  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.min(value,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	super();  this.numerator  =  Math.min(value,  maxDenominator);	      super();    this.numerator    =    Math.min(numerator,    maxDenominator);    	non-compiled	[CE]  possible  loss  of  precision	142	None
3363	[BUG]  [BUGGY]  super();  this.numerator  =  Math.min(maxDenominator,  0);  [CE]  variable  denominator  might  not  have  been  initialized  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.min(maxDenominator,  0);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	super();  this.numerator  =  Math.min(maxDenominator,  0);	      super();    this.numerator    =    Math.min(numerator,    maxDenominator);    	non-compiled	[CE]  variable  denominator  might  not  have  been  initialized	142	None
3422	[BUG]  [BUGGY]  if(numerator  ==  0)  {  if(maxDenominator  >  0)  {  numerator  =  BigInteger.valueOf(p0);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(numerator  ==  0)  {  if(maxDenominator  >  0)  {  numerator  =  BigInteger.valueOf(p0);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(numerator  ==  0)  {  if(maxDenominator  >  0)  {  numerator  =  BigInteger.valueOf(p0);  }	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  while  expected	364	None
3424	[BUG]  [BUGGY]  if(numerator  ==  p0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p0);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(numerator  ==  p0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p0);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(numerator  ==  p0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p0);  }	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  while  expected	364	None
3484	[BUG]  [BUGGY]  p2  =  Math.floor(a1)-  q0;  q1  =  Math.abs(q2);  [CE]  cannot  find  symbol  a1  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  p2  =  Math.floor(a1)-  q0;  q1  =  Math.abs(q2);  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	p2  =  Math.floor(a1)-  q0;  q1  =  Math.abs(q2);	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    denominator)    {    this.numerator    =    (int)p2;    }    	non-compiled	[CE]  cannot  find  symbol  a1	83	None
3573	[BUG]  [BUGGY]  p2  =(p2.floor(q2)FastMath);  [CE]  ')'  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(p2.floor(q2)FastMath);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(p2.floor(q2)FastMath);	      p2    =(p2)FastMath.floor(q2);    	non-compiled	[CE]  ')'  expected	184	None
3604	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  denominator,  100);  [CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  denominator,  100);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  maxDenominator,  denominator,  100);	  this(value,    0,    numerator,    maxDenominator,    100);    	non-compiled	[CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called	194	None
3634	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.floor(r2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  p2  =  Math.floor(r2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(a1);  p2  =  Math.floor(r2);	      p2    =    Math.floor(r1);    p2    =    Math.floor(a1);    	non-compiled	[CE]  possible  loss  of  precision	215	None
3663	[BUG]  [BUGGY]  setNumerator(value);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setNumerator(value);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setNumerator(value);	      setDenominator(value);    	non-compiled	[CE]  illegal  start  of  expression	65	None
3693	[BUG]  [BUGGY]  this(value,  0,  value,  maxDenominator,  0,  0);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this(value,  0,  value,  maxDenominator,  0,  0);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this(value,  0,  value,  maxDenominator,  0,  0);	      p2    =    Math.floor(r1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	124	None
3694	[BUG]  [BUGGY]  this(value,  0,  value,  maxDenominator,  false);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  this(value,  0,  value,  maxDenominator,  false);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	this(value,  0,  value,  maxDenominator,  false);	      p2    =    Math.floor(r1);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	124	None
3721	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p2  =  Math.floor(p1);  p2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p2  =  Math.floor(p1);  p2  =  Math.floor(q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    p2  =  Math.floor(p1);  p2  =  Math.floor(q2);	  	non-compiled	[CE]  possible  loss  of  precision	361	None
3722	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  setResult(value,  p0,  q2);  [CE]  cannot  find  symbol  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  setResult(value,  p0,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    setResult(value,  p0,  q2);	  	non-compiled	[CE]  cannot  find  symbol	361	None
3723	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  setResult(value,  p0,  q1);  [CE]  cannot  find  symbol  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  setResult(value,  p0,  q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    setResult(value,  p0,  q1);	  	non-compiled	[CE]  cannot  find  symbol	361	None
3724	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  checkAndCheck(value,  p1,  q2);  [CE]  cannot  find  symbol  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  checkAndCheck(value,  p1,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    checkAndCheck(value,  p1,  q2);	  	non-compiled	[CE]  cannot  find  symbol	361	None
3725	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p2  =  Math.floor(p2);  p2  =  Math.floor(q1);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p2  =  Math.floor(p2);  p2  =  Math.floor(q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    p2  =  Math.floor(p2);  p2  =  Math.floor(q1);	  	non-compiled	[CE]  possible  loss  of  precision	361	None
3753	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p0,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(0.0,  p0,  q2);	  throw    new    FractionConversionException(p0,    p2,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	283	2
3754	[BUG]  [BUGGY]  throw  new  FractionConversionException(0.0,  p0,  q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p0,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(0.0,  p0,  q2);	  throw    new    FractionConversionException(p0,    p2,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	283	2
3814	[BUG]  [BUGGY]  if(MaxDenominator  <  q1)  {  this.numerator  =  Math.abs(q2);  this.denominator  =  Math.abs(q1);  }  else  {  this.numerator  =  Math.abs(q2);  }  [CE]  cannot  find  symbol  MaxDenominator  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  if(MaxDenominator  <  q1)  {  this.numerator  =  Math.abs(q2);  this.denominator  =  Math.abs(q1);  }  else  {  this.numerator  =  Math.abs(q2);  }  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	if(MaxDenominator  <  q1)  {  this.numerator  =  Math.abs(q2);  this.denominator  =  Math.abs(q1);  }  else  {  this.numerator  =  Math.abs(q2);  }	      this.numerator    =    Math.abs(q2);    this.denominator    =    Math.abs(q1);    	non-compiled	[CE]  cannot  find  symbol  MaxDenominator	144	None
3841	[BUG]  [BUGGY]  if(value  <  0)  {  this(value,  0,  maxDenominator,  0);  }  else  {  throw  new  FractionConversionException( " ");  }  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  0)  {  this(value,  0,  maxDenominator,  0);  }  else  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(value  <  0)  {  this(value,  0,  maxDenominator,  0);  }  else  {  throw  new  FractionConversionException( " ");  }	      this(value,    0,    maxDenominator,    0);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	45	None
3843	[BUG]  [BUGGY]  if(value  <  0.0)  {  this(value,  0,  maxDenominator,  0);  }  else  {  throw  new  FractionConversionException( " ");  }  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  0.0)  {  this(value,  0,  maxDenominator,  0);  }  else  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(value  <  0.0)  {  this(value,  0,  maxDenominator,  0);  }  else  {  throw  new  FractionConversionException( " ");  }	      this(value,    0,    maxDenominator,    0);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	45	None
3844	[BUG]  [BUGGY]  if(value  <  0)  {  this(value,  0,  maxDenominator,  0);  }  else  {  BigFraction.cast(value,  0,  maxDenominator,  100);  }  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  0)  {  this(value,  0,  maxDenominator,  0);  }  else  {  BigFraction.cast(value,  0,  maxDenominator,  100);  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(value  <  0)  {  this(value,  0,  maxDenominator,  0);  }  else  {  BigFraction.cast(value,  0,  maxDenominator,  100);  }	      this(value,    0,    maxDenominator,    0);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	45	None
3871	[BUG]  [BUGGY]  if(p1  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p1,  q2);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  if(p1  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p1,  q2);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	if(p1  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p1,  q2);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	3	None
3872	[BUG]  [BUGGY]  if(p1  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p1,  q1);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  if(p1  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p1,  q1);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	if(p1  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p1,  q1);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	3	None
3873	[BUG]  [BUGGY]  p2  =  Math.floor(p1,  q2);  [CE]  method  floor  in  class  Math  cannot  be  applied  to  given  types;  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(p1,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(p1,  q2);	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  method  floor  in  class  Math  cannot  be  applied  to  given  types;	3	None
3874	[BUG]  [BUGGY]  if(p1  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(a1);  p2  =  Math.floor(q2);  q2  =  Math.floor(a1);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  if(p1  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(a1);  p2  =  Math.floor(q2);  q2  =  Math.floor(a1);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	if(p1  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(a1);  p2  =  Math.floor(q2);  q2  =  Math.floor(a1);  }	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	3	None
3904	[BUG]  [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(minDenominator);  [CE]  cannot  find  symbol  minDenominator  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(minDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    numerator  =  BigInteger.valueOf(minDenominator);	  	non-compiled	[CE]  cannot  find  symbol  minDenominator	164	None
3905	[BUG]  [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p);  [CE]  cannot  find  symbol  p  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.denominator  =(int)p1;  numerator  =  BigInteger.valueOf(p);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator    =(int)p1;    numerator  =  BigInteger.valueOf(p);	  	non-compiled	[CE]  cannot  find  symbol  p	164	None
3964	[BUG]  [BUGGY]  p2  =  Math.floor(p);  p2  =  Math.floor(q2);  [CE]  cannot  find  symbol  p  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =  Math.floor(p);  p2  =  Math.floor(q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =  Math.floor(p);  p2  =  Math.floor(q2);	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  cannot  find  symbol  p	153	None
4022	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  a1,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(n,  a1,  q2);	  throw    new    FractionConversionException(n,    p2,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	393	2
4023	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  a1,  q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  a1,  q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(n,  a1,  q2);	  throw    new    FractionConversionException(n,    p2,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	393	2
4024	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  0.0,  p2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(int,double,long)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  0.0,  p2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(n,  0.0,  p2);	  throw    new    FractionConversionException(n,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(int,double,long)	393	None
4051	[BUG]  [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  p2  =  Math.floor(a1);  p2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  p2  =  Math.floor(a1);  p2  =  Math.floor(q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(0.0,    p2,    q2);    p2  =  Math.floor(a1);  p2  =  Math.floor(q2);	  	non-compiled	[CE]  possible  loss  of  precision	391	None
4052	[BUG]  [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p2);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p2);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(0.0,    p2,    q2);    if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p2);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	391	None
4053	[BUG]  [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  if(p2  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(a1);  p2  =  Math.floor(q2);  q2  =  Math.floor(a1);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  if(p2  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(a1);  p2  =  Math.floor(q2);  q2  =  Math.floor(a1);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(0.0,    p2,    q2);    if(p2  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(a1);  p2  =  Math.floor(q2);  q2  =  Math.floor(a1);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	391	None
4054	[BUG]  [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(a1);  p2  =  Math.floor(q2);  q2  =  Math.floor(a1);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(a1);  p2  =  Math.floor(q2);  q2  =  Math.floor(a1);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(0.0,    p2,    q2);    if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(a1);  p2  =  Math.floor(q2);  q2  =  Math.floor(a1);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	391	None
4083	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(value,  0,  maxDenominator);  [CE]  call  to  super  must  be  first  statement  in  constructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  super();  this.numerator  =  Math.max(value,  0,  maxDenominator);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	super();  this.numerator  =  Math.max(value,  0,  maxDenominator);	      this.numerator    =(int)(p2);    this.denominator    =(int)(q2);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	143	None
4084	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(value,  100);  [CE]  call  to  super  must  be  first  statement  in  constructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  super();  this.numerator  =  Math.max(value,  100);  [BUGGY]    this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	super();  this.numerator  =  Math.max(value,  100);	      this.numerator    =(int)(p2);    this.denominator    =(int)(q2);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	143	None
4111	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  setMaxDenominator(maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  setMaxDenominator(maxDenominator);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,    0,    maxDenominator,    1000);    setMaxDenominator(maxDenominator);	  	non-compiled	[CE]  cannot  find  symbol	192	None
4112	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  if(value  <  0)  {  throw  new  FractionConversionException( " ");  }  else  {  this(value,  0,  value,  maxDenominator,  1000);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  if(value  <  0)  {  throw  new  FractionConversionException( " ");  }  else  {  this(value,  0,  value,  maxDenominator,  1000);  }  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,    0,    maxDenominator,    1000);    if(value  <  0)  {  throw  new  FractionConversionException( " ");  }  else  {  this(value,  0,  value,  maxDenominator,  1000);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	192	None
4113	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  if(value  <  0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  value  =  new  BigFraction(value,  0,  maxDenominator,  1000);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  if(value  <  0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  value  =  new  BigFraction(value,  0,  maxDenominator,  1000);  }  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,    0,    maxDenominator,    1000);    if(value  <  0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  value  =  new  BigFraction(value,  0,  maxDenominator,  1000);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	192	None
4114	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  if(value  <  0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  1.0  =  Math.exp(value,  0,  maxDenominator,  1000);  }  [CE]  not  a  statement  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  if(value  <  0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  1.0  =  Math.exp(value,  0,  maxDenominator,  1000);  }  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,    0,    maxDenominator,    1000);    if(value  <  0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  1.0  =  Math.exp(value,  0,  maxDenominator,  1000);  }	  	non-compiled	[CE]  not  a  statement	192	None
4115	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  value.toString(),  maxDenominator);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  value.toString(),  maxDenominator);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,    0,    maxDenominator,    1000);    this(value,  0,  value.toString(),  maxDenominator);	  	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	192	None
4143	[BUG]  [BUGGY]  BigInteger  p  =  BigInteger.valueOf(p2);  [CE]  variable  numerator  might  not  have  been  initialized  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  BigInteger  p  =  BigInteger.valueOf(p2);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	BigInteger  p  =  BigInteger.valueOf(p2);	      BigInteger    p1    =    BigInteger.valueOf(p2);    	non-compiled	[CE]  variable  numerator  might  not  have  been  initialized	484	None
4173	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  p0,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	throw  new  FractionConversionException(n,  p0,  q2);	  throw    new    FractionConversionException(value,    p0,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	362	2
4174	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p0,  q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  p0,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(n,  p0,  q2);	  throw    new    FractionConversionException(value,    p0,    q2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	362	2
4203	[BUG]  [BUGGY]  setMaximumFractionDigits(maxDenominator,  value  /  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  DEFAULT_EPSILON  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumFractionDigits(maxDenominator,  value  /  DEFAULT_EPSILON);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumFractionDigits(maxDenominator,  value  /  DEFAULT_EPSILON);	      this(value,    0,    maxDenominator,    0);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EPSILON	45	None
4204	[BUG]  [BUGGY]  setMaximumFractionDigits(maxDenominator,  value  /  denominator);  [CE]  bad  operand  types  for  binary  operator  '/'  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumFractionDigits(maxDenominator,  value  /  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumFractionDigits(maxDenominator,  value  /  denominator);	      this(value,    0,    maxDenominator,    0);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	45	None
4232	[BUG]  [BUGGY]  this(value,  maxDenominator,  false);  [CE]  no  suitable  constructor  found  for  Fraction(double,int,boolean)  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  maxDenominator,  false);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  maxDenominator,  false);	  this(value,    0,    maxDenominator,    10);    	non-compiled	[CE]  no  suitable  constructor  found  for  Fraction(double,int,boolean)	35	None
4233	[BUG]  [BUGGY]  this.numerator  =  calculateMaximumIterations(value,  maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this.numerator  =  calculateMaximumIterations(value,  maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this.numerator  =  calculateMaximumIterations(value,  maxDenominator);	  this(value,    0,    maxDenominator,    10);    	non-compiled	[CE]  cannot  find  symbol	35	None
4234	[BUG]  [BUGGY]  this.numerator  =  calculateMaximumDenominator(value,  maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this.numerator  =  calculateMaximumDenominator(value,  maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this.numerator  =  calculateMaximumDenominator(value,  maxDenominator);	  this(value,    0,    maxDenominator,    10);    	non-compiled	[CE]  cannot  find  symbol	35	None
4261	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(p2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(p2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p2  =  Math.floor(p2);	  	non-compiled	[CE]  possible  loss  of  precision	152	None
4262	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(p2);  p2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  p2  =  Math.floor(p2);  p2  =  Math.floor(q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    p2  =  Math.floor(p2);  p2  =  Math.floor(q2);	  	non-compiled	[CE]  possible  loss  of  precision	152	None
4264	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(p2  <  0.0)  {  throw  new  FractionConversionException( " ");  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(p2  <  0.0)  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    if(p2  <  0.0)  {  throw  new  FractionConversionException( " ");  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	152	None
4265	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(p2  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  p2  =  p2.getNext();  p2  =  p2.getNext();  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(p2  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  p2  =  p2.getNext();  p2  =  p2.getNext();  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    if(p2  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  p2  =  p2.getNext();  p2  =  p2.getNext();  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	152	None
4324	[BUG]  [BUGGY]  if(p1  >  epsilon)  {  if(p1  >  epsilon)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  if(p1  >  epsilon)  {  if(p1  >  epsilon)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	if(p1  >  epsilon)  {  if(p1  >  epsilon)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }	      p2    =(int)FastMath.floor(p2);    	non-compiled	[CE]  while  expected	183	None
4353	[BUG]  [BUGGY]  this.numerator  =(int)p1  -  1;  this.numerator  =(int)p1  -  2;  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p1  -  1;  this.numerator  =(int)p1  -  2;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator    =(int)p1    -    1;    this.numerator  =(int)p1  -  2;	  	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	263	None
4414	[BUG]  [BUGGY]  setDefinition(maxDenominator,  false);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setDefinition(maxDenominator,  false);  [BUGGY]    }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setDefinition(maxDenominator,  false);	      setDefinition(maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	174	None
4441	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.floor(maxDenominator):  0;  [CE]  ')'  expected  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.floor(maxDenominator):  0;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator((  int)Math.abs(value)>  Math.floor(maxDenominator):  0;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator):    0;    	non-compiled	[CE]  ')'  expected	423	None
4444	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.sin(maxDenominator):  0;  [CE]  ')'  expected  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.sin(maxDenominator):  0;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator((  int)Math.abs(value)>  Math.sin(maxDenominator):  0;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator):    0;    	non-compiled	[CE]  ')'  expected	423	None
4472	[BUG]  [BUGGY]  if(denominator  <  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  throw  new  FractionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(denominator  <  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  throw  new  FractionException( " ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(denominator  <  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  throw  new  FractionException( " ");  }	  this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	102	None
4473	[BUG]  [BUGGY]  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionException( " ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(denominator  <  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionException( " ");  }	  this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	102	None
4474	[BUG]  [BUGGY]  if(denominator  <  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(denominator  <  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionException( " ");  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(denominator  <  Integer.MIN_VALUE)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  throw  new  FractionException( " ");  }	  this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	102	None
4504	[BUG]  [BUGGY]  p2  =(p2).FastMath.floor(r1);  [CE]  long  cannot  be  dereferenced  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(p2).FastMath.floor(r1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(p2).FastMath.floor(r1);	      p2    =(int)FastMath.floor(p2);    	non-compiled	[CE]  long  cannot  be  dereferenced	183	None
4534	[BUG]  [BUGGY]  setMaxDenominator(maxDenominator,  0);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setMaxDenominator(maxDenominator,  0);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setMaxDenominator(maxDenominator,  0);	      setDenominator(maxDenominator);    	non-compiled	[CE]  illegal  start  of  expression	61	None
4564	[BUG]  [BUGGY]  setMaximumDenominator(maxDenominator,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  DEFAULT_EPSILON  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximumDenominator(maxDenominator,  DEFAULT_EPSILON);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximumDenominator(maxDenominator,  DEFAULT_EPSILON);	      super();    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EPSILON	41	None
4593	[BUG]  [BUGGY]  setMaximum(maxDenominator,  denominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximum(maxDenominator,  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximum(maxDenominator,  denominator);	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol	43	None
4594	[BUG]  [BUGGY]  setMaximum(maxDenominator,  0);  [CE]  cannot  find  symbol  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setMaximum(maxDenominator,  0);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setMaximum(maxDenominator,  0);	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  cannot  find  symbol	43	None
4622	[BUG]  [BUGGY]  Arrays.fill(value,  0,  maxDenominator);  [CE]  cannot  find  symbol  Arrays  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  Arrays.fill(value,  0,  maxDenominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	Arrays.fill(value,  0,  maxDenominator);	      super();    	non-compiled	[CE]  cannot  find  symbol  Arrays	91	None
4623	[BUG]  [BUGGY]  Arrays.fill(value,  0,  denominator);  [CE]  cannot  find  symbol  Arrays  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  Arrays.fill(value,  0,  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	Arrays.fill(value,  0,  denominator);	      super();    	non-compiled	[CE]  cannot  find  symbol  Arrays	91	None
4624	[BUG]  [BUGGY]  Arrays.sort(value);  [CE]  cannot  find  symbol  Arrays  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  Arrays.sort(value);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	Arrays.sort(value);	      super();    	non-compiled	[CE]  cannot  find  symbol  Arrays	91	None
4651	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(value);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(value);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(value);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }	  throw    new    FractionConversionException(0.0,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	392	None
4652	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  BigFraction  convergent  =  Math.floor(value);  if(convergent  ==  0.0)  {  throw  new  FractionConversionException( " ");  }  [CE]  while  expected  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  if(n  <  maxIterations)  {  BigFraction  convergent  =  Math.floor(value);  if(convergent  ==  0.0)  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	if(n  <  maxIterations)  {  BigFraction  convergent  =  Math.floor(value);  if(convergent  ==  0.0)  {  throw  new  FractionConversionException( " ");  }	  throw    new    FractionConversionException(0.0,    p2,    q2);    	non-compiled	[CE]  while  expected	392	None
4653	[BUG]  [BUGGY]  System.arraycopy(value,  0,  p2,  q1,  epsilon,  maxIterations);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  System.arraycopy(value,  0,  p2,  q1,  epsilon,  maxIterations);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	System.arraycopy(value,  0,  p2,  q1,  epsilon,  maxIterations);	  throw    new    FractionConversionException(0.0,    p2,    q2);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	392	None
4654	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p2);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p2);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p2);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }	  throw    new    FractionConversionException(0.0,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	392	None
4683	[BUG]  [BUGGY]  p2  =(p2  ==  0.0)?  p2  :  p3.next();  [CE]  cannot  find  symbol  p3  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(p2  ==  0.0)?  p2  :  p3.next();  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(p2  ==  0.0)?  p2  :  p3.next();	  throw    new    FractionConversionException(value,    p2,    overflow);    	non-compiled	[CE]  cannot  find  symbol  p3	155	None
4711	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  setMaximumDenominator(maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  setMaximumDenominator(maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,    0,    maxDenominator,    1000);    setMaximumDenominator(maxDenominator);	  	non-compiled	[CE]  cannot  find  symbol	33	None
4713	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  setValue(value,  0,  maxDenominator,  1000);  [CE]  cannot  find  symbol  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  setValue(value,  0,  maxDenominator,  1000);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,    0,    maxDenominator,    1000);    setValue(value,  0,  maxDenominator,  1000);	  	non-compiled	[CE]  cannot  find  symbol	33	None
4714	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  peg(Calendar.getInstance());  [CE]  cannot  find  symbol  Calendar  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  peg(Calendar.getInstance());  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,    0,    maxDenominator,    1000);    peg(Calendar.getInstance());	  	non-compiled	[CE]  cannot  find  symbol  Calendar	33	None
4715	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  value.doubleValue(),  maxDenominator,  1000);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maxDenominator,  1000);  this(value,  0,  value.doubleValue(),  maxDenominator,  1000);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,    0,    maxDenominator,    1000);    this(value,  0,  value.doubleValue(),  maxDenominator,  1000);	  	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	33	None
4743	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.round(r1);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.round(r1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(a1);  q2  =  Math.round(r1);	      p2    =    Math.floor(a1);    q2    =    Math.round(q2);    	non-compiled	[CE]  possible  loss  of  precision	125	None
4744	[BUG]  [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.round(f2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1);  q2  =  Math.round(f2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(a1);  q2  =  Math.round(f2);	      p2    =    Math.floor(a1);    q2    =    Math.round(q2);    	non-compiled	[CE]  possible  loss  of  precision	125	None
4802	[BUG]  [BUGGY]  if(value  <  0.0)  {  this(value,  0,  maxDenominator,  100);  }  else  {  BigFraction.cast(value,  0,  maxDenominator,  100);  }  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  0.0)  {  this(value,  0,  maxDenominator,  100);  }  else  {  BigFraction.cast(value,  0,  maxDenominator,  100);  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(value  <  0.0)  {  this(value,  0,  maxDenominator,  100);  }  else  {  BigFraction.cast(value,  0,  maxDenominator,  100);  }	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	43	None
4803	[BUG]  [BUGGY]  if(value  <  0.0)  {  this(value,  0,  maxDenominator,  100);  }  else  {  BigFraction  action  =  Math.max(value,  0,  maxDenominator);  }  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  0.0)  {  this(value,  0,  maxDenominator,  100);  }  else  {  BigFraction  action  =  Math.max(value,  0,  maxDenominator);  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(value  <  0.0)  {  this(value,  0,  maxDenominator,  100);  }  else  {  BigFraction  action  =  Math.max(value,  0,  maxDenominator);  }	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	43	None
4804	[BUG]  [BUGGY]  if(value  <  0.0)  {  this(value,  0,  maxDenominator,  100);  }  else  {  BigFraction  action  =  Math.max(value,  denominator);  }  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  0.0)  {  this(value,  0,  maxDenominator,  100);  }  else  {  BigFraction  action  =  Math.max(value,  denominator);  }  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(value  <  0.0)  {  this(value,  0,  maxDenominator,  100);  }  else  {  BigFraction  action  =  Math.max(value,  denominator);  }	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	43	None
4831	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.floor(maxDenominator))?  ONE  :  ONE;  [CE]  not  a  statement  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.floor(maxDenominator))?  ONE  :  ONE;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator((  int)Math.abs(value)>  Math.floor(maxDenominator))?  ONE  :  ONE;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator))?    ONE    :    ONE;    	non-compiled	[CE]  not  a  statement	422	None
4833	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.floor(minor))?  ONE  :  ONE;  [CE]  not  a  statement  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setDenominator((  int)Math.abs(value)>  Math.floor(minor))?  ONE  :  ONE;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setDenominator((  int)Math.abs(value)>  Math.floor(minor))?  ONE  :  ONE;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator))?    ONE    :    ONE;    	non-compiled	[CE]  not  a  statement	422	None
4834	[BUG]  [BUGGY]  setNumerator((  int)Math.abs(value)>  Math.floor(maxDenominator))?  ONE  :  ONE;  [CE]  not  a  statement  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  setNumerator((  int)Math.abs(value)>  Math.floor(maxDenominator))?  ONE  :  ONE;  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	setNumerator((  int)Math.abs(value)>  Math.floor(maxDenominator))?  ONE  :  ONE;	      setDenominator((    int)Math.abs(value)>    Math.abs(maxDenominator))?    ONE    :    ONE;    	non-compiled	[CE]  not  a  statement	422	None
4862	[BUG]  [BUGGY]  this.numerator  =  Math.abs(maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this.numerator  =  Math.abs(maxDenominator);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this.numerator  =  Math.abs(maxDenominator);	      	non-compiled	[CE]  illegal  start  of  expression	105	None
4863	[BUG]  [BUGGY]  this.numerator  =  Math.abs(value);  this.denominator  =  Math.abs(denominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this.numerator  =  Math.abs(value);  this.denominator  =  Math.abs(denominator);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this.numerator  =  Math.abs(value);  this.denominator  =  Math.abs(denominator);	      	non-compiled	[CE]  illegal  start  of  expression	105	None
4864	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  1.0  =  Math.exp(value,  maxDenominator);  }  [CE]  not  a  statement  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(value  <  0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  1.0  =  Math.exp(value,  maxDenominator);  }  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	if(value  <  0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  1.0  =  Math.exp(value,  maxDenominator);  }	      	non-compiled	[CE]  not  a  statement	105	None
4891	[BUG]  [BUGGY]  p0  =  Math.floor(p1);  p2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p0  =  Math.floor(p1);  p2  =  Math.floor(q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p0  =  Math.floor(p1);  p2  =  Math.floor(q2);	  throw    new    FractionConversionException(value,    p0,    q2);    	non-compiled	[CE]  possible  loss  of  precision	282	None
4892	[BUG]  [BUGGY]  p0  =  Math.floor(a1);  p2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p0  =  Math.floor(a1);  p2  =  Math.floor(q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p0  =  Math.floor(a1);  p2  =  Math.floor(q2);	  throw    new    FractionConversionException(value,    p0,    q2);    	non-compiled	[CE]  possible  loss  of  precision	282	None
4893	[BUG]  [BUGGY]  if(p1  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigInteger  p2  =  Math.floor(p1);  p2  =  Math.floor(p2);  q2  =  Math.floor(p1);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  if(p1  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigInteger  p2  =  Math.floor(p1);  p2  =  Math.floor(p2);  q2  =  Math.floor(p1);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	if(p1  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigInteger  p2  =  Math.floor(p1);  p2  =  Math.floor(p2);  q2  =  Math.floor(p1);  }	  throw    new    FractionConversionException(value,    p0,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	282	None
4894	[BUG]  [BUGGY]  if(p1  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigInteger  p2  =  Math.floor(p2);  p2  =  Math.floor(p1);  q2  =  Math.floor(p2);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  if(p1  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigInteger  p2  =  Math.floor(p2);  p2  =  Math.floor(p1);  q2  =  Math.floor(p2);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	if(p1  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigInteger  p2  =  Math.floor(p2);  p2  =  Math.floor(p1);  q2  =  Math.floor(p2);  }	  throw    new    FractionConversionException(value,    p0,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	282	None
4923	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p0);  numerator  =  BigInteger.valueOf(minDenominator);  [CE]  cannot  find  symbol  minDenominator  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(p0);  numerator  =  BigInteger.valueOf(minDenominator);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator    =    BigInteger.valueOf(p0);    numerator  =  BigInteger.valueOf(minDenominator);	  	non-compiled	[CE]  cannot  find  symbol  minDenominator	163	None
4925	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p0);  numerator  =  BigInteger.valueOf(q3);  [CE]  cannot  find  symbol  q3  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  numerator  =  BigInteger.valueOf(p0);  numerator  =  BigInteger.valueOf(q3);  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator    =    BigInteger.valueOf(p0);    numerator  =  BigInteger.valueOf(q3);	  	non-compiled	[CE]  cannot  find  symbol  q3	163	None
4981	[BUG]  [BUGGY]  if(q1  >  epsilon)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  q2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q1  >  epsilon)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  q2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q1  >  epsilon)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  q2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    q2;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None
4983	[BUG]  [BUGGY]  if(q1  >  epsilon)  {  if(maxDenominator  >>  epsilon)  {  this.numerator  =  q2;  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(q1  >  epsilon)  {  if(maxDenominator  >>  epsilon)  {  this.numerator  =  q2;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(q1  >  epsilon)  {  if(maxDenominator  >>  epsilon)  {  this.numerator  =  q2;  }	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    q2;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None
4984	[BUG]  [BUGGY]  this.numerator  =  q2;  [CE]  possible  loss  of  precision  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  this.numerator  =  q2;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.numerator  =  q2;	      if(q2    >    maxDenominator)    {    if(maxDenominator    <    epsilon)    {    this.numerator    =    q2;    }    	non-compiled	[CE]  possible  loss  of  precision	85	None
5014	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  sum,  maxDenominator,  100);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	add	this(value,  0,  sum,  maxDenominator,  100);	  this(value,    0,    maxDenominator,    100);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	102	2
5015	[BUG]  [BUGGY]  this(value,  0,  sum,  maxDenominator,  100);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  sum,  maxDenominator,  100);  [BUGGY]      [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this(value,  0,  sum,  maxDenominator,  100);	  this(value,    0,    maxDenominator,    100);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	102	2
5072	[BUG]  [BUGGY]  if(value  >  maxDenominator)  {  this.denominator  =(int)p1;  epsilon  =  q2;  }  else  {  this.numerator  =(int)p1;  }  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(value  >  maxDenominator)  {  this.denominator  =(int)p1;  epsilon  =  q2;  }  else  {  this.numerator  =(int)p1;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(value  >  maxDenominator)  {  this.denominator  =(int)p1;  epsilon  =  q2;  }  else  {  this.numerator  =(int)p1;  }	      this.denominator    =(int)p1;    epsilon    =    q2;    	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	25	None
5073	[BUG]  [BUGGY]  if(value  ==  0.0)  {  this.denominator  =(int)p1;  epsilon  =  q2;  }  else  {  this.numerator  =(int)p1;  }  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  if(value  ==  0.0)  {  this.denominator  =(int)p1;  epsilon  =  q2;  }  else  {  this.numerator  =(int)p1;  }  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	if(value  ==  0.0)  {  this.denominator  =(int)p1;  epsilon  =  q2;  }  else  {  this.numerator  =(int)p1;  }	      this.denominator    =(int)p1;    epsilon    =    q2;    	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	25	None
5134	[BUG]  [BUGGY]  this(value,  0,  maximalDenominator,  100);  [CE]  cannot  find  symbol  maximalDenominator  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  this(value,  0,  maximalDenominator,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  maximalDenominator,  100);	  this(value,    0,    denominator,    100);    	non-compiled	[CE]  cannot  find  symbol  maximalDenominator	32	None
5193	[BUG]  [BUGGY]  setNumerator(numerator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setNumerator(numerator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setNumerator(numerator);	      setDenominator(numerator);    	non-compiled	[CE]  illegal  start  of  expression	62	None
5221	[BUG]  [BUGGY]  if(p2  >  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(p2  >  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(p2  >  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }	      numerator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	14	None
5222	[BUG]  [BUGGY]  if(p2  >  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(p2  >  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(p2  >  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }	      numerator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	14	None
5223	[BUG]  [BUGGY]  if(numerator  ==  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  [CE]  incomparable  types:  BigInteger  and  int  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(numerator  ==  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(numerator  ==  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }	      numerator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  incomparable  types:  BigInteger  and  int	14	None
5224	[BUG]  [BUGGY]  if(numerator  ==  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  BigInteger.valueOf(maxDenominator)  {  [CE]  ';'  expected  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(numerator  ==  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  BigInteger.valueOf(maxDenominator)  {  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(numerator  ==  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  BigInteger.valueOf(maxDenominator)  {	      numerator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  ';'  expected	14	None
5282	[BUG]  [BUGGY]  if(numerator  ==  0)  {  if(maxDenominator  >  0)  {  numerator  =  BigInteger.valueOf(q3);  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  if(numerator  ==  0)  {  if(maxDenominator  >  0)  {  numerator  =  BigInteger.valueOf(q3);  }  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	if(numerator  ==  0)  {  if(maxDenominator  >  0)  {  numerator  =  BigInteger.valueOf(q3);  }	      if(numerator    >    maxDenominator)    {    if(maxDenominator    <    0)    {    numerator    =    BigInteger.valueOf(q3);    }    	non-compiled	[CE]  illegal  start  of  expression	365	None
5284	[BUG]  [BUGGY]  if(numerator  ==  0)  {  if(maxDenominator  >=  0)  {  numerator  =  BigInteger.valueOf(q3);  }  [CE]  illegal  start  of  expression  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);    [BUGGY]  if(numerator  ==  0)  {  if(maxDenominator  >=  0)  {  numerator  =  BigInteger.valueOf(q3);  }  [BUGGY]    denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	if(numerator  ==  0)  {  if(maxDenominator  >=  0)  {  numerator  =  BigInteger.valueOf(q3);  }	      if(numerator    >    maxDenominator)    {    if(maxDenominator    <    0)    {    numerator    =    BigInteger.valueOf(q3);    }    	non-compiled	[CE]  illegal  start  of  expression	365	None
5312	[BUG]  [BUGGY]  p0  =  Math.floor(p1);  p2  =  Math.floor(p2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p0  =  Math.floor(p1);  p2  =  Math.floor(p2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p0  =  Math.floor(p1);  p2  =  Math.floor(p2);	  throw    new    FractionConversionException(p0,    p2,    q2);    	non-compiled	[CE]  possible  loss  of  precision	283	None
5313	[BUG]  [BUGGY]  p0  =  Math.floor(a1);  p2  =  Math.floor(q1);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p0  =  Math.floor(a1);  p2  =  Math.floor(q1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p0  =  Math.floor(a1);  p2  =  Math.floor(q1);	  throw    new    FractionConversionException(p0,    p2,    q2);    	non-compiled	[CE]  possible  loss  of  precision	283	None
5314	[BUG]  [BUGGY]  if(p1  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigInteger  p2  =  Math.floor(p1);  p2  =  Math.floor(p2);  p2  =  Math.floor(p1);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  if(p1  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigInteger  p2  =  Math.floor(p1);  p2  =  Math.floor(p2);  p2  =  Math.floor(p1);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	if(p1  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigInteger  p2  =  Math.floor(p1);  p2  =  Math.floor(p2);  p2  =  Math.floor(p1);  }	  throw    new    FractionConversionException(p0,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	283	None
5342	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  if(p1  >  0)  {  if(p2  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  if(p1  >  0)  {  if(p2  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    if(p1  >  0)  {  if(p2  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	  	non-compiled	[CE]  while  expected	182	None
5343	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  if(p1  >  epsilon)  {  if(p2  <  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  if(p1  >  epsilon)  {  if(p2  <  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    if(p1  >  epsilon)  {  if(p2  <  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	  	non-compiled	[CE]  while  expected	182	None
5344	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  if(p1  >  0)  {  if(p2  >  0)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  if(p1  >  0)  {  if(p2  >  0)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    if(p1  >  0)  {  if(p2  >  0)  {  this.numerator  =  p2;  this.denominator  =  p2;  }	  	non-compiled	[CE]  while  expected	182	None
5345	[BUG]  [BUGGY]      p2  =(int)FastMath.floor(p2);  this.numerator  =  p1;  this.denominator  =  p2;  [CE]  possible  loss  of  precision  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]      p2  =(int)FastMath.floor(p2);  this.numerator  =  p1;  this.denominator  =  p2;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	        p2    =(int)FastMath.floor(p2);    this.numerator  =  p1;  this.denominator  =  p2;	  	non-compiled	[CE]  possible  loss  of  precision	182	None
5373	[BUG]  [BUGGY]  p2  =  Math.floor(a1)-  p0;  q2  =  Math.abs(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1)-  p0;  q2  =  Math.abs(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(a1)-  p0;  q2  =  Math.abs(q2);	      p2    =    Math.floor(a1);    q2    =    Math.abs(q2);    	non-compiled	[CE]  possible  loss  of  precision	123	None
5374	[BUG]  [BUGGY]  p2  =  Math.floor(a1)-  q0;  q2  =  Math.abs(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  p2  =  Math.floor(a1)-  q0;  q2  =  Math.abs(q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	p2  =  Math.floor(a1)-  q0;  q2  =  Math.abs(q2);	      p2    =    Math.floor(a1);    q2    =    Math.abs(q2);    	non-compiled	[CE]  possible  loss  of  precision	123	None
5403	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(numerator,  DEFAULT_NUMBER_INT,  denominator);  [CE]  cannot  find  symbol  DEFAULT_NUMBER_INT  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.max(numerator,  DEFAULT_NUMBER_INT,  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.max(numerator,  DEFAULT_NUMBER_INT,  denominator);	      super();    this.numerator    =    Math.max(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NUMBER_INT	345	None
5404	[BUG]  [BUGGY]  super();  this.numerator  =  Math.max(numerator,  DEFAULT_NUMBER_ERROR,  denominator);  [CE]  cannot  find  symbol  DEFAULT_NUMBER_ERROR  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.max(numerator,  DEFAULT_NUMBER_ERROR,  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.max(numerator,  DEFAULT_NUMBER_ERROR,  denominator);	      super();    this.numerator    =    Math.max(numerator,    denominator);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NUMBER_ERROR	345	None
5434	[BUG]  [BUGGY]  if(value  <  0.0)  {  super();  }  else  {  throw  new  FractionConversionException( "Fraction  values  at  endpoints  do  not  have  different  signs. "  + "  Endpoints:  [ "  +  value  + ", "  +  maxDenominator  + "> "  + "  Endpoints:  [ "  +  value  + ", "  +  max  [CE]  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  if(value  <  0.0)  {  super();  }  else  {  throw  new  FractionConversionException( "Fraction  values  at  endpoints  do  not  have  different  signs. "  + "  Endpoints:  [ "  +  value  + ", "  +  maxDenominator  + "> "  + "  Endpoints:  [ "  +  value  + ", "  +  max  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	if(value  <  0.0)  {  super();  }  else  {  throw  new  FractionConversionException( "Fraction  values  at  endpoints  do  not  have  different  signs. "  + "  Endpoints:  [ "  +  value  + ", "  +  maxDenominator  + "> "  + "  Endpoints:  [ "  +  value  + ", "  +  max	      super();    this(value,    0,    maxDenominator,    1000);    	non-compiled	[CE]  	44	None
5493	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  ++denominator;  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  ++denominator;  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  ++denominator;  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	363	None
5494	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  setResult(value,  p2);  [CE]  cannot  find  symbol  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  setResult(value,  p2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    setResult(value,  p2);	  	non-compiled	[CE]  cannot  find  symbol	363	None
5495	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  p2  =  p1.subtract(p2);  q2  =  q1;  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  p2  =  p1.subtract(p2);  q2  =  q1;  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p2,    q0);    if(n  <  maxIterations)  {  throw  new  FractionConversionException( " ");  }  else  {  p2  =  p1.subtract(p2);  q2  =  q1;  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	363	None
5521	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p2  =  Math.floor(p1);  p2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  p2  =  Math.floor(p1);  p2  =  Math.floor(q2);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    p2  =  Math.floor(p1);  p2  =  Math.floor(q2);	  	non-compiled	[CE]  possible  loss  of  precision	281	None
5522	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(p1  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p1);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(p1  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p1);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    if(p1  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p1);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	281	None
5523	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(value  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p2);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(value  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p2);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    if(value  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigFraction  convergent  =  Math.floor(p2);  p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	281	None
5524	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(value  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigInteger  p2  =  Math.floor(p2);  p2  =  Math.floor(p1);  q2  =  Math.floor(q2);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(value  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigInteger  p2  =  Math.floor(p2);  p2  =  Math.floor(p1);  q2  =  Math.floor(q2);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    if(value  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigInteger  p2  =  Math.floor(p2);  p2  =  Math.floor(p1);  q2  =  Math.floor(q2);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	281	None
5525	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(value  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigInteger  p2  =  Math.floor(p2);  p2  =  Math.floor(p1);  q2  =  Math.floor(p2);  }  [CE]  no  suitable  constructor  found  for  FractionConversionException(String)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(value  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigInteger  p2  =  Math.floor(p2);  p2  =  Math.floor(p1);  q2  =  Math.floor(p2);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    if(value  <  0.0)  {  throw  new  FractionConversionException( " ");  }  else  {  BigInteger  p2  =  Math.floor(p2);  p2  =  Math.floor(p1);  q2  =  Math.floor(p2);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(String)	281	None
5613	[BUG]  [BUGGY]  throw  new  FractionConversionException(p1,  q1);  [CE]  no  suitable  constructor  found  for  FractionConversionException(long,long)  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p1,  q1);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(p1,  q1);	  throw    new    FractionConversionException(value,    p2,    q1);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(long,long)	3	None
5644	[BUG]  [BUGGY]  int  num  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  [CE]  incompatible  types  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  int  num  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	int  num  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);	      num    =    BigInteger.valueOf(q2);    denominator    =    BigInteger.valueOf(q3);    	non-compiled	[CE]  incompatible  types	383	None
5674	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(int)FastMath.floor(p2)-  1;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	p2  =(int)FastMath.floor(p2)-  1;	      p2    =(int)FastMath.floor(p2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	183	2
5675	[BUG]  [BUGGY]  p2  =(int)FastMath.floor(p2)-  1;  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(int)FastMath.floor(p2)-  1;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(int)FastMath.floor(p2)-  1;	      p2    =(int)FastMath.floor(p2);    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	183	2
5703	[BUG]  [BUGGY]  p2  =(p2.floor(f2)FastMath.floor(p2));  [CE]  ')'  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(p2.floor(f2)FastMath.floor(p2));  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(p2.floor(f2)FastMath.floor(p2));	      p2    =(p2)FastMath.floor(p2);    	non-compiled	[CE]  ')'  expected	181	None
5704	[BUG]  [BUGGY]  p2  =(p2.floor(f2)FastMath.floor(p2);  [CE]  ')'  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  p2  =(p2.floor(f2)FastMath.floor(p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	p2  =(p2.floor(f2)FastMath.floor(p2);	      p2    =(p2)FastMath.floor(p2);    	non-compiled	[CE]  ')'  expected	181	None
5764	[BUG]  [BUGGY]  if(value  <  0.0)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  if(value  <  0.0)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	if(value  <  0.0)  {  this(value,  0,  maxDenominator,  100);  }  else  {  throw  new  FractionConversionException( " ");  }	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	63	None
5791	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  q1,  epsilon);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,double)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  q1,  epsilon);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  q1,  epsilon);	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,double)	364	None
5792	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  epsilon,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,double,long)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  epsilon,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  p2,  epsilon,  q2);	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,double,long)	364	None
5793	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  epsilon,  maxDenominator);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,double,int)  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  epsilon,  maxDenominator);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  p2,  epsilon,  maxDenominator);	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,double,int)	364	None
5823	[BUG]  [BUGGY]  setNumerator(maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  setNumerator(maxDenominator);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	setNumerator(maxDenominator);	      this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	63	None
5853	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p1  -  q3);  [CE]  cannot  find  symbol  q3  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  numerator  =  BigInteger.valueOf(p1  -  q3);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	numerator  =  BigInteger.valueOf(p1  -  q3);	  this.denominator    =(int)p1;    	non-compiled	[CE]  cannot  find  symbol  q3	165	None
5854	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p1  -  q1);  [CE]  incompatible  types  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;    [BUGGY]  numerator  =  BigInteger.valueOf(p1  -  q1);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	numerator  =  BigInteger.valueOf(p1  -  q1);	  this.denominator    =(int)p1;    	non-compiled	[CE]  incompatible  types	165	None
5883	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p1  -  2;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	add	this.numerator  =(int)p1  -  2;	  this.numerator    =(int)p1    -    1;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	264	2
5884	[BUG]  [BUGGY]  this.numerator  =(int)p1  -  2;  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]    if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {    [BUGGY]  this.numerator  =(int)p1  -  2;  [BUGGY]    this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =(int)p1  -  2;	  this.numerator    =(int)p1    -    1;    	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	264	2
5911	[BUG]  [BUGGY]  if(p2  >  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }  [CE]  cannot  find  symbol  q3  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(p2  >  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(p2  >  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }	      numerator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(q3);    	non-compiled	[CE]  cannot  find  symbol  q3	481	None
5912	[BUG]  [BUGGY]  if(p2  >  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }  [CE]  cannot  find  symbol  q3  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(p2  >  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(p2  >  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }	      numerator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(q3);    	non-compiled	[CE]  cannot  find  symbol  q3	481	None
5913	[BUG]  [BUGGY]  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }  [CE]  cannot  find  symbol  q3  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }	      numerator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(q3);    	non-compiled	[CE]  cannot  find  symbol  q3	481	None
5914	[BUG]  [BUGGY]  if(maxDenominator  <  denominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }  [CE]  bad  operand  types  for  binary  operator  '<'  [CONTEXT]    if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {    [BUGGY]  if(maxDenominator  <  denominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }  [BUGGY]    numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	if(maxDenominator  <  denominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  }	      numerator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(q3);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	481	None
5942	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(numerator  ==  0)  {  if(maxDenominator  >  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(numerator  ==  0)  {  if(maxDenominator  >  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    if(numerator  ==  0)  {  if(maxDenominator  >  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }	  	non-compiled	[CE]  while  expected	361	None
5945	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(numerator  >  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [CE]  while  expected  [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  if(numerator  >  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw    new    FractionConversionException(value,    p0,    q2);    if(numerator  >  0)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }	  	non-compiled	[CE]  while  expected	361	None
6002	[BUG]  [BUGGY]  peg(Calendar.setInstance(value,  Calendar.DECEMBER,  999);  [CE]  ')'  expected  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  peg(Calendar.setInstance(value,  Calendar.DECEMBER,  999);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	peg(Calendar.setInstance(value,  Calendar.DECEMBER,  999);	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  ')'  expected	92	None
6003	[BUG]  [BUGGY]  peg(Calendar.setInstance(value,  Calendar.DECEMBER,  31);  [CE]  ')'  expected  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  peg(Calendar.setInstance(value,  Calendar.DECEMBER,  31);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	peg(Calendar.setInstance(value,  Calendar.DECEMBER,  31);	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  ')'  expected	92	None
6004	[BUG]  [BUGGY]  peg(Calendar.setInstance(value,  Calendar.DECEMBER,  1);  [CE]  ')'  expected  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  peg(Calendar.setInstance(value,  Calendar.DECEMBER,  1);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	peg(Calendar.setInstance(value,  Calendar.DECEMBER,  1);	      super();    this(value,    0,    maxDenominator,    100);    	non-compiled	[CE]  ')'  expected	92	None
6033	[BUG]  [BUGGY]  this(value,  0,  value.intValue(),  denominator,  100);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  value.intValue(),  denominator,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this(value,  0,  value.intValue(),  denominator,  100);	      this(value,    0,    denominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	64	None
6034	[BUG]  [BUGGY]  this(value,  0,  value,  100);  [CE]  illegal  start  of  expression  [CONTEXT]    public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);    [BUGGY]  this(value,  0,  value,  100);  [BUGGY]    }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this(value,  0,  value,  100);	      this(value,    0,    denominator,    100);    	non-compiled	[CE]  illegal  start  of  expression	64	None
6062	[BUG]  [BUGGY]  super();  this.numerator  =  Math.min(numerator,  denominator);  [CE]  no  suitable  method  found  for  min(BigInteger,BigInteger)  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.min(numerator,  denominator);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.min(numerator,  denominator);	      super();    this.numerator    =    Math.min(numerator,    maxDenominator);    	non-compiled	[CE]  no  suitable  method  found  for  min(BigInteger,BigInteger)	343	None
6063	[BUG]  [BUGGY]  super();  this.numerator  =  Math.min(numerator,  value);  [CE]  no  suitable  method  found  for  min(BigInteger,double)  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.min(numerator,  value);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.min(numerator,  value);	      super();    this.numerator    =    Math.min(numerator,    maxDenominator);    	non-compiled	[CE]  no  suitable  method  found  for  min(BigInteger,double)	343	None
6064	[BUG]  [BUGGY]  super();  this.numerator  =  Math.min(numerator,  maxDenominator,  0);  [CE]  no  suitable  method  found  for  min(BigInteger,int,int)  [CONTEXT]    public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {    [BUGGY]  super();  this.numerator  =  Math.min(numerator,  maxDenominator,  0);  [BUGGY]    this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	super();  this.numerator  =  Math.min(numerator,  maxDenominator,  0);	      super();    this.numerator    =    Math.min(numerator,    maxDenominator);    	non-compiled	[CE]  no  suitable  method  found  for  min(BigInteger,int,int)	343	None
6091	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  denominator  =  BigInteger.valueOf(p0);  [CE]  unreachable  statement  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  denominator  =  BigInteger.valueOf(p0);  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    denominator  =  BigInteger.valueOf(p0);	  	non-compiled	[CE]  unreachable  statement	2	None
6092	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(p0  >  maxDenominator)  {  if(numerator  ==  p0)  {  denominator  =  BigInteger.valueOf(p0);  }  [CE]  while  expected  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(p0  >  maxDenominator)  {  if(numerator  ==  p0)  {  denominator  =  BigInteger.valueOf(p0);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    if(p0  >  maxDenominator)  {  if(numerator  ==  p0)  {  denominator  =  BigInteger.valueOf(p0);  }	  	non-compiled	[CE]  while  expected	2	None
6094	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  bad  operand  types  for  binary  operator  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p0);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	2	None
6095	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p0);  }  else  {  add(numerator,  denominator);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [CONTEXT]    boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p0);  }  else  {  add(numerator,  denominator);  }  [BUGGY]    }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw    new    FractionConversionException(value,    p2,    q1);    if(numerator  >  maxDenominator)  {  denominator  =  BigInteger.valueOf(p0);  }  else  {  add(numerator,  denominator);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	2	None
