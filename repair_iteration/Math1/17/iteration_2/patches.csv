bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  BigInteger  value  =(BigInteger)FastMath.floor(value  /  1);  [CE]  ';'  expected  [FE]            FractionConversionException      [CONTEXT]        [BUGGY]  BigInteger  value  =(BigInteger)FastMath.floor(value  /  1);  [BUGGY]      throws  FractionConversionException  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	BigInteger  value  =(BigInteger)FastMath.floor(value  /  1);	  BigInteger    value    =(BigInteger)FastMath.floor(value    -    1);    	non-compiled	[CE]  ';'  expected	7	None	replace
2	[BUG]  [BUGGY]  throws  FractionConversionException,  IllegalArgumentException( "FastMath.floor(numerator)  {  }  [CE]  [FE]            FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException,  IllegalArgumentException( "FastMath.floor(numerator)  {  }  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException,  IllegalArgumentException( "FastMath.floor(numerator)  {  }	  throws    FractionConversionException,    IllegalArgumentException(   "FastMath.floor(denominator)    {    }    	non-compiled	[CE]  	10	None	replace
3	[BUG]  [BUGGY]  throws  FractionConversionException,  IllegalArgumentException( "FastMath.abs(value)  <   "  +  a0);  [CE]  [FE]            FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException,  IllegalArgumentException( "FastMath.abs(value)  <   "  +  a0);  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException,  IllegalArgumentException( "FastMath.abs(value)  <   "  +  a0);	  throws    FractionConversionException,    IllegalArgumentException(   "FastMath.abs(value)    <       "    +    value);    	non-compiled	[CE]  	4	None	replace
4	[BUG]  [BUGGY]  BigInteger  value  =  Integer.MAX_VALUE;  [CE]  ';'  expected  [FE]                FractionConversionException      [CONTEXT]        [BUGGY]  BigInteger  value  =  Integer.MAX_VALUE;  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	BigInteger  value  =  Integer.MAX_VALUE;	  BigInteger    value    =    BigInteger.MAX_VALUE;    	non-compiled	[CE]  ';'  expected	8	None	replace
5	[BUG]  [BUGGY]  BigInteger  value  =  BigInteger.MAX_VALUE  -  1;  [CE]  ';'  expected  [FE]                  FractionConversionException      [CONTEXT]        [BUGGY]  BigInteger  value  =  BigInteger.MAX_VALUE  -  1;  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	BigInteger  value  =  BigInteger.MAX_VALUE  -  1;	  BigInteger    value    =    BigInteger.MAX_VALUE;    	non-compiled	[CE]  ';'  expected	8	None	replace
6	[BUG]  [BUGGY]  throws  FractionConversionException(value,  a0,  2l);  [CE]  ';'  expected  [FE]              FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException(value,  a0,  2l);  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException(value,  a0,  2l);	  throws    FractionConversionException(value,    a0,    2);    	non-compiled	[CE]  ';'  expected	1	None	replace
7	[BUG]  [BUGGY]  throws  FractionConversionException(value,  0,  a0);  [CE]  ';'  expected  [FE]            FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException(value,  0,  a0);  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException(value,  0,  a0);	  throws    FractionConversionException(value,    1l,    a0);    	non-compiled	[CE]  ';'  expected	3	None	replace
8	[BUG]  [BUGGY]  throws  FractionConversionException,  Integer.MAX_VALUE,  value;  [CE]  illegal  start  of  type  [FE]              FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException,  Integer.MAX_VALUE,  value;  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException,  Integer.MAX_VALUE,  value;	  throws    FractionConversionException,    IOException,    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
9	[BUG]  [BUGGY]  throws  FractionConversionException,  IOException,  Integer.MAX_VALUE,  numerator;  [CE]  illegal  start  of  type  [FE]                FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException,  IOException,  Integer.MAX_VALUE,  numerator;  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException,  IOException,  Integer.MAX_VALUE,  numerator;	  throws    FractionConversionException,    IOException,    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
10	[BUG]  [BUGGY]  throws  FractionConversionException(value,  IllegalArgumentException( " "));  [CE]  [FE]            FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException(value,  IllegalArgumentException( " "));  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException(value,  IllegalArgumentException( " "));	  throws    FractionConversionException(value,    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	14	None	replace
11	[BUG]  [BUGGY]  throws  FractionConversionException(value,  numerator);  [CE]  ';'  expected  [FE]              FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException(value,  numerator);  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException(value,  numerator);	  throws    FractionConversionException(value,    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	14	None	replace
12	[BUG]  [BUGGY]  throws  FractionConversionException,  IOException,  1;  [CE]  <identifier>  expected  [FE]            FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException,  IOException,  1;  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException,  IOException,  1;	  throws    FractionConversionException,    IOException,    1L;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
13	[BUG]  [BUGGY]  throws  FractionConversionException,  IOException,  2;  [CE]  <identifier>  expected  [FE]              FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException,  IOException,  2;  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException,  IOException,  2;	  throws    FractionConversionException,    IOException,    1L;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
14	[BUG]  [BUGGY]  throws  IOException,  FractionConversionException,  BigInteger.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]            FractionConversionException      [CONTEXT]        [BUGGY]  throws  IOException,  FractionConversionException,  BigInteger.MAX_VALUE;  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  IOException,  FractionConversionException,  BigInteger.MAX_VALUE;	  throws    IOException,    FractionConversionException;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
15	[BUG]  [BUGGY]  throws  IOException,  FractionConversionException,  BigInteger.MIN_VALUE;  [CE]  illegal  start  of  type  [FE]              FractionConversionException      [CONTEXT]        [BUGGY]  throws  IOException,  FractionConversionException,  BigInteger.MIN_VALUE;  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  IOException,  FractionConversionException,  BigInteger.MIN_VALUE;	  throws    IOException,    FractionConversionException;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  throws  FractionConversionException(value,  0,  0);  [CE]  ';'  expected  [FE]            FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException(value,  0,  0);  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException(value,  0,  0);	  throws    FractionConversionException(value,    0,    1l);    	non-compiled	[CE]  ';'  expected	18	None	replace
17	[BUG]  [BUGGY]  throws  FractionConversionException,  a0,  1l;  [CE]  <identifier>  expected  [FE]              FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException,  a0,  1l;  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException,  a0,  1l;	  throws    FractionConversionException,    IOException,    1l;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
18	[BUG]  [BUGGY]  throws  FractionConversionException,  IllegalArgumentException( "FastMath.abs(value)  <  0  +  value);  [CE]  [FE]            FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException,  IllegalArgumentException( "FastMath.abs(value)  <  0  +  value);  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException,  IllegalArgumentException( "FastMath.abs(value)  <  0  +  value);	  throws    FractionConversionException,    IllegalArgumentException(   "FastMath.abs(value)    <       "    +    value);    	non-compiled	[CE]  	4	None	replace
19	[BUG]  [BUGGY]  throws  FractionConversionException,  IOException,  Integer.MAX_VALUE,  denominator;  [CE]  illegal  start  of  type  [FE]              FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException,  IOException,  Integer.MAX_VALUE,  denominator;  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException,  IOException,  Integer.MAX_VALUE,  denominator;	  throws    FractionConversionException,    IOException,    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
20	[BUG]  [BUGGY]  throws  FractionConversionException,  IOException,  Integer.MIN_VALUE;  [CE]  illegal  start  of  type  [FE]                FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException,  IOException,  Integer.MIN_VALUE;  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException,  IOException,  Integer.MIN_VALUE;	  throws    FractionConversionException,    IOException,    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
21	[BUG]  [BUGGY]  throws  FractionConversionException(value,  null);  [CE]  ';'  expected  [FE]            FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException(value,  null);  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException(value,  null);	  throws    FractionConversionException(value,    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	14	None	replace
22	[BUG]  [BUGGY]  throws  FractionConversionException(value,  a0,  1);  [CE]  ';'  expected  [FE]                FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException(value,  a0,  1);  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException(value,  a0,  1);	  throws    FractionConversionException(value,    a0,    0);    	non-compiled	[CE]  ';'  expected	2	None	replace
23	[BUG]  [BUGGY]  throws  IOException,  FractionConversionException,  1l;  [CE]  <identifier>  expected  [FE]            FractionConversionException      [CONTEXT]        [BUGGY]  throws  IOException,  FractionConversionException,  1l;  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  IOException,  FractionConversionException,  1l;	  throws    IOException,    FractionConversionException;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
24	[BUG]  [BUGGY]  throws  IOException( " ");  [CE]  [FE]              FractionConversionException      [CONTEXT]        [BUGGY]  throws  IOException( " ");  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  IOException( " ");	  throws    IOException,    FractionConversionException;    	non-compiled	[CE]  	5	None	replace
25	[BUG]  [BUGGY]  throws  FractionConversionException(value,  0);  [CE]  ';'  expected  [FE]            FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException(value,  0);  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException(value,  0);	  throws    FractionConversionException(value,    IOException);    	non-compiled	[CE]  ';'  expected	16	None	replace
26	[BUG]  [BUGGY]  throws  FractionConversionException,  IOException,  ZERO;  [CE]  illegal  start  of  type  [FE]              FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException,  IOException,  ZERO;  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException,  IOException,  ZERO;	  throws    FractionConversionException,    IOException,    1l;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
27	[BUG]  [BUGGY]  throws  FractionConversionException,  ZERO,  1l;  [CE]  <identifier>  expected  [FE]                FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException,  ZERO,  1l;  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException,  ZERO,  1l;	  throws    FractionConversionException,    IOException,    1l;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
28	[BUG]  [BUGGY]  throws  FractionConversionException,  IllegalArgumentException( "FastMath.abs(value)  <   "  +  epsilon);  [CE]  [FE]            FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException,  IllegalArgumentException( "FastMath.abs(value)  <   "  +  epsilon);  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException,  IllegalArgumentException( "FastMath.abs(value)  <   "  +  epsilon);	  throws    FractionConversionException,    IllegalArgumentException(   "FastMath.abs(value)    <       "    +    value);    	non-compiled	[CE]  	4	None	replace
29	[BUG]  [BUGGY]  throws  FractionConversionException,  IOException,  3;  [CE]  <identifier>  expected  [FE]            FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException,  IOException,  3;  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException,  IOException,  3;	  throws    FractionConversionException,    IOException,    1L;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
30	[BUG]  [BUGGY]  throws  FractionConversionException,  IllegalArgumentException( "FastMath.floor(denominator)  ==  }  [CE]  [FE]            FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException,  IllegalArgumentException( "FastMath.floor(denominator)  ==  }  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException,  IllegalArgumentException( "FastMath.floor(denominator)  ==  }	  throws    FractionConversionException,    IllegalArgumentException(   "FastMath.floor(denominator)    {    }    	non-compiled	[CE]  	10	None	replace
31	[BUG]  [BUGGY]  throws  IOException,  FractionConversionException,  2;  [CE]  <identifier>  expected  [FE]            FractionConversionException      [CONTEXT]        [BUGGY]  throws  IOException,  FractionConversionException,  2;  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  IOException,  FractionConversionException,  2;	  throws    IOException,    FractionConversionException;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
32	[BUG]  [BUGGY]  throws  FractionConversionException,  IOException,  Integer.MAX_VALUE,  1l;  [CE]  <identifier>  expected  [FE]              FractionConversionException      [CONTEXT]        [BUGGY]  throws  FractionConversionException,  IOException,  Integer.MAX_VALUE,  1l;  [BUGGY]      long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	271	271	2	replace	throws  FractionConversionException,  IOException,  Integer.MAX_VALUE,  1l;	  throws    FractionConversionException,    IOException,    Integer.MAX_VALUE;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
