increase failing tests,144,replace, [FE] FractionConversionException testDigitLimitConstructor, throw  new  FractionConversionException(0.0,  p2,  q2);  ,throw new FractionConversionException(0.0, maxDenominator);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor,         p2    =(int)FastMath.floor(p2);    p2  =(int)FastMath.floor(p2);  p2  =(int)FastMath.ceil(p2);  ,p1 =(int)FastMath.floor(p2);
increase failing tests,356,replace, [FE] FractionConversionException testDigitLimitConstructor, this(value,  0,  maxDenominator,  9);  ,this(value, 0, maxDenominator, 3);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor,         p2    =(int)FastMath.floor(p2);    p2  =(int)FastMath.floor(p2);  p2  =(int)FastMath.floor(p1);  ,p2 =(int)FastMath.ceil(q2);
increase failing tests,333,replace, [FE] AssertionError testDigitLimitConstructor, denominator  =  BigInteger.valueOf(p2  /  q2);  ,denominator = BigInteger.valueOf(q2 / p2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(r1);  p2  =(long)FastMath.floor(r1);  ,p1 =(int)FastMath.floor(r1); p2 =(int)FastMath.floor(q2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(p2  ==  0.0)?  p2.next()  :  q2.next();  ,p1 = p2; q1 = q2;
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(p2  ==  0.0)?  p2.next()  :  q2.next();  ,p1 = p2; p2 = p1;
increase failing tests,306,replace, [FE] FractionConversionException testDigitLimitConstructor, throw  new  FractionConversionException(0.0,  a1,  p2);  ,throw new FractionConversionException(1.0, a1, q2);
increase failing tests,144,replace, [FE] FractionConversionException testDigitLimitConstructor, throw  new  FractionConversionException(1.0,  p1,  q2);  ,throw new FractionConversionException(1.0, maxDenominator);
increase failing tests,333,replace, [FE] FractionConversionException testDigitLimitConstructor, if(numerator  ==  0)  {  denominator  =  BigInteger.valueOf(p2);  if(numerator  ==  0)  {  denominator  =  BigInteger.valueOf(p3);  }  ,throw new FractionConversionException(p1, q1, p2);
increase failing tests,333,replace, [FE] FractionConversionException testDigitLimitConstructor, if(numerator  ==  0)  {  denominator  =  BigInteger.valueOf(p2);  if(numerator  ==  0)  {  denominator  =  BigInteger.valueOf(p3);  }  ,throw new FractionConversionException(p0, q1, q2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(r1);  p2  =(int)FastMath.floor(r1)-  1;  ,p2 =(int)FastMath.floor(r1); p1 =(int)FastMath.floor(q2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(r1);  p2  =(int)FastMath.floor(r1)-  1;  ,p2 =(long)FastMath.floor(r1); p1 =(long)FastMath.floor(r1);
increase failing tests,333,replace, [FE] FractionConversionException testDigitLimitConstructor, if(numerator  >=  0)  {  denominator  =  BigInteger.valueOf(p2);  if(numerator  ==  0)  {  denominator  =  BigInteger.valueOf(p3);  }  ,throw new FractionConversionException(0.0, p2, q2);
increase failing tests,333,replace, [FE] FractionConversionException testDigitLimitConstructor, if(numerator  >=  0)  {  denominator  =  BigInteger.valueOf(p2);  if(numerator  ==  0)  {  denominator  =  BigInteger.valueOf(p3);  }  ,throw new FractionConversionException(1.0, p2, q2);
increase failing tests,333,replace, [FE] FractionConversionException testDigitLimitConstructor, if(numerator  >=  0)  {  denominator  =  BigInteger.valueOf(p2);  if(numerator  ==  0)  {  denominator  =  BigInteger.valueOf(p3);  }  ,throw new FractionConversionException(0.0, p1, q2);
increase failing tests,333,replace, [FE] FractionConversionException testDigitLimitConstructor, if(numerator  >=  0)  {  denominator  =  BigInteger.valueOf(p2);  if(numerator  ==  0)  {  denominator  =  BigInteger.valueOf(p3);  }  ,throw new FractionConversionException(0.0, p2, q1);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =  Math.round(a1);  q2  =  Math.round(q2);  a1  =  Math.round(a1);  q2  =  Math.round(q2);  ,p1 = Math.round(a1); q1 = Math.round(q2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor,         p2    =(int)FastMath.floor(p2);    p2  =(int)FastMath.ceil(p2);  p2  =(int)FastMath.floor(p2);  p2  =(int)FastMath.ceil(p2);  ,p1 =(int)FastMath.ceil(p2); p2 =(int)FastMath.ceil(p2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, n  =  Math.floor(p2);  ,n = Math.round(p2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(q2);  p2  =(long)FastMath.floor(q2);  ,p1 =(long)FastMath.floor(p2); p2 =(long)FastMath.floor(q2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, setMaximumFraction(numerator,  0);  ,p1 =(int)FastMath.floor(p2); p2 =(int)FastMath.ceil(q2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(p2)-  1;  p2  =(int)FastMath.floor(p2)-  1;  ,p1 =(int)FastMath.floor(p2)- 1; p2 =(int)FastMath.floor(p2)- 1;
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(q2);  p2  =(long)FastMath.floor(p2);  ,p1 =(long)FastMath.floor(p2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p1  =(int)FastMath.floor(p1);  p2  =(int)FastMath.floor(p2);  ,p1 =(p2); p2 =(int)FastMath.floor(p2);
increase failing tests,356,replace, [FE] FractionConversionException testDigitLimitConstructor, throw  new  FractionConversionException(value,  a0,  r1);  ,throw new FractionConversionException(value, 0, maxDenominator);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(r1);  p1  =(int)FastMath.floor(r1);  ,p1 =(long)FastMath.floor(r1); q2 =(long)FastMath.floor(r1);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor,         p2    =(int)FastMath.floor(p2);    p2  =(int)FastMath.ceil(p2);  p2  =(int)FastMath.floor(p2);  p2  =(int)FastMath.ceil(p2);  ,p1 =(int)FastMath.ceil(p2); p2 =(int)FastMath.floor(p2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor,         p2    =(int)FastMath.floor(p2);    p2  =(int)FastMath.ceil(p2);  p2  =(int)FastMath.floor(p2);  p2  =(int)FastMath.ceil(p2);  ,p1 =(int)FastMath.ceil(p2);
increase failing tests,144,replace, [FE] FractionConversionException testDigitLimitConstructor, this(value,  DEFAULT_EPSILON,  maxDenominator);  ,this(value, DEFAULT_EPSILON, maxDenominator, -1);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(p2)-  1;  p2  =(int)FastMath.floor(p2)-  1;  ,p1 =(int)FastMath.floor(p2); p2 =(int)FastMath.floor(p2)- 1;
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(p2)-  1;  p2  =(long)FastMath.floor(p2)-  1;  ,p1 =(long)FastMath.floor(p2)- 1; p2 =(long)FastMath.floor(p2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(p2)-  1;  p2  =(long)FastMath.floor(p2)-  1;  ,p1 =(long)FastMath.floor(p2)- 1;
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(p2  ==  0.0)?  p2.next()  :  q2.next();  ,p0 = p1; p2 = q0; q1 = q2;
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(p2  ==  0.0)?  p2.next()  :  q2.next();  ,p0 = p1; p1 = p2; q0 = q1;
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =  Math.round(a1);  q2  =  Math.round(q2);  p1  =  Math.round(a1);  q2  =  Math.round(q2);  ,p0 = Math.round(a1); q2 = Math.round(q2); p1 = Math.round(a1); q2 = Math.round(q2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(p2);  p2  =(int)FastMath.abs(q2);  ,p1 =(int)FastMath.floor(p2); p2 =(int)FastMath.abs(q1);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(q2);  p2  =(long)FastMath.floor(p2);  ,p1 =(int)FastMath.floor(p2); p2 =(int)FastMath.floor(q1);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(long)FastMath.floor(p2);  p2  =(int)FastMath.floor(p2);  ,p1 =(int)FastMath.floor(p2); p2 =(int)FastMath.floor(r1);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor,         p2    =(int)FastMath.floor(p2);    p2  =(int)FastMath.floor(p2);  p2  =(int)FastMath.floor(p1);  ,p1 =(long)FastMath.floor(p2); p2 =(long)FastMath.ceil(p2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p0  =(int)FastMath.floor(p2);  p2  =(int)FastMath.floor(p2);  ,p1 =(long)FastMath.ceil(p2); p2 =(long)FastMath.floor(p2);
increase failing tests,333,replace, [FE] FractionConversionException testDigitLimitConstructor, if(numerator  >=  0)  {  denominator  =  BigInteger.valueOf(p2);  if(numerator  ==  0)  {  denominator  =  BigInteger.valueOf(p3);  }  ,throw new FractionConversionException(0.0, p0, q1);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(long)FastMath.floor(p2);  p2  =(long)FastMath.floor(q2);  ,p1 =(int)FastMath.floor(p2); p2 =(int)FastMath.floor(p2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(long)FastMath.floor(p2);  p2  =(long)FastMath.floor(p2);  ,p1 =(int)FastMath.floor(p2); p2 =(int)FastMath.floor(q2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(p2)-  1;  p2  =(long)FastMath.floor(p2);  ,p1 =(long)FastMath.floor(p2)- 1; p2 =(long)FastMath.floor(p2)/ 1;
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(p2)-  1;  p2  =(long)FastMath.floor(p2);  ,p1 =(long)FastMath.floor(p2); p2 =(long)FastMath.floor(p2)/ 1;
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(p2)-  1;  p2  =(long)FastMath.floor(p2);  ,p1 =(int)FastMath.floor(p2)- 1; p2 =(int)FastMath.floor(p2)/ 1;
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(r1);  p2  =(long)FastMath.floor(r1);  ,p1 =(long)FastMath.floor(r1); p2 =(long)FastMath.floor(r1);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, setMaximumFraction(numerator,  0);  ,p1 =(long)FastMath.floor(p2); p2 =(long)FastMath.ceil(q1);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(p2)-  1;  p2  =(int)FastMath.floor(p2);  ,p1 =(long)FastMath.floor(p2)- 1; p2 =(long)FastMath.floor(p2)- 2;
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(p2)-  1;  p2  =(int)FastMath.floor(p2);  ,p1 =(long)FastMath.floor(p2); p2 =(long)FastMath.floor(p2)- 1;
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(p2)-  1;  p2  =(int)FastMath.floor(p2);  ,p1 =(int)FastMath.floor(p2)- 1; p2 =(int)FastMath.floor(p2)- 2;
increase failing tests,306,add, [FE] FractionConversionException testDigitLimitConstructor, ,p2    =    Math.round(a1);    q2    =    Math.round(q2);    p0  =  Math.round(p0);  q1  =  Math.round(q1);  p0 = Math.round(p0); q1 = Math.round(q1);
increase failing tests,306,add, [FE] FractionConversionException testDigitLimitConstructor, ,p2    =    Math.round(a1);    q2    =    Math.round(q2);    p0  =  Math.round(p0);  q1  =  Math.round(q1);  p0 = Math.round(p0); q1 = Math.round(q2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, this(value,  0,  q2,  1,  maxDenominator);  ,p1 =(int)FastMath.floor(p2)- 1; p2 =(int)FastMath.floor(p2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, this(value,  0,  q2,  1,  maxDenominator);  ,p1 =(int)FastMath.floor(p2)- 1;
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(r1);  p2  =(int)FastMath.floor(r1)-  1;  ,p0 =(long)FastMath.floor(r1); p1 =(long)FastMath.floor(r1);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(r1);  p2  =(int)FastMath.floor(r1)-  1;  ,p0 =(int)FastMath.floor(r1); p1 =(int)FastMath.floor(r1);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(p2  ==  0.0)?  p2.next()  :  q2.next();  ,if(n < maxIterations) { p0 = p1; p2 = p1; q1 = q2; }
increase failing tests,333,replace, [FE] AssertionError testDigitLimitConstructor, denominator  =  BigInteger.valueOf(p2  -  q2);  denominator  =  BigInteger.valueOf(p2  -  q2);  ,denominator = BigInteger.valueOf(p2 - p2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(r1);  p1  =(long)FastMath.floor(r1);  ,p2 =(int)FastMath.floor(r0); p1 =(int)FastMath.floor(r1);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(r1);  p1  =(long)FastMath.floor(r1);  ,p2 =(int)FastMath.floor(r1)- 1; p1 =(int)FastMath.floor(r1);
increase failing tests,356,replace, [FE] FractionConversionException testDigitLimitConstructor, throw  new  FractionConversionException(value,  r1,  q2);  ,throw new FractionConversionException(value, maxDenominator, 0);
increase failing tests,356,replace, [FE] FractionConversionException testDigitLimitConstructor, throw  new  FractionConversionException(value,  n,  q2);  ,throw new FractionConversionException(value, maxDenominator, 2);
increase failing tests,333,replace, [FE] FractionConversionException testDigitLimitConstructor, if(numerator  ==  0)  {  denominator  =  BigInteger.valueOf(p2);  if(numerator  ==  0)  {  denominator  =  BigInteger.valueOf(p3);  }  ,throw new FractionConversionException(n, p0, q1);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(p2)-  1;  p2  =(long)FastMath.floor(p2)-  1;  ,p1 =(int)FastMath.floor(p1)- 1;
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =  Math.round(a1);  q2  =  Math.round(q2);  p1  =  Math.round(a1);  q2  =  Math.round(q2);  ,p2 = Math.round(a1); p2 = Math.round(q2); p1 = Math.round(a1); q2 = Math.round(q2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =  Math.round(a1);  q2  =  Math.round(q2);  p1  =  Math.round(a1);  q2  =  Math.round(q2);  ,p2 = Math.round(a0); p2 = Math.round(q2); p1 = Math.round(a1); q2 = Math.round(q2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =  Math.round(a1);  q2  =  Math.round(q2);  p1  =  Math.round(a1);  q2  =  Math.round(q2);  ,p2 = Math.round(a0); q2 = Math.round(q2); p1 = Math.round(a1); q2 = Math.round(q2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =  Math.round(p2);  q2  =  Math.round(q2);  ,p2 = Math.round(p1); q1 = Math.round(q2);
