bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n  =  Math.min(denominator,  q2,  numerator);  [CE]  no  suitable  method  found  for  min(BigInteger,long,BigInteger)  [FE]            FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.min(denominator,  q2,  numerator);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.min(denominator,  q2,  numerator);	  n    =    Math.min(denominator,    numerator);    	non-compiled	[CE]  no  suitable  method  found  for  min(BigInteger,long,BigInteger)	24	None	replace
2	[BUG]  [BUGGY]  n  =  Math.max(numerator,  p1.doubleValue()  -  1);  [CE]  long  cannot  be  dereferenced  [FE]            FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.max(numerator,  p1.doubleValue()  -  1);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.max(numerator,  p1.doubleValue()  -  1);	  n    =    Math.max(numerator,    p1.doubleValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	17	None	replace
3	[BUG]  [BUGGY]  n  =  Math.max(numerator,  q1.doubleValue());  [CE]  long  cannot  be  dereferenced  [FE]              FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.max(numerator,  q1.doubleValue());  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.max(numerator,  q1.doubleValue());	  n    =    Math.max(numerator,    p1.doubleValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	17	None	replace
4	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  denominator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(p2);    	non-compiled	[CE]  not  a  statement	12	None	replace
5	[BUG]  [BUGGY]  n  =  Math.min(numerator,  value,  denominator,  maxDenominator);  [CE]  no  suitable  method  found  for  min(BigInteger,double,BigInteger,int)  [FE]              FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.min(numerator,  value,  denominator,  maxDenominator);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.min(numerator,  value,  denominator,  maxDenominator);	  n    =    Math.min(numerator,    value,    maxDenominator);    	non-compiled	[CE]  no  suitable  method  found  for  min(BigInteger,double,BigInteger,int)	6	None	replace
6	[BUG]  [BUGGY]  n  =  BigInteger.valueOf(p2);  [CE]  incompatible  types  [FE]                FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  BigInteger.valueOf(p2);  [BUGGY]      }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  BigInteger.valueOf(p2);	  numerator    =    BigInteger.valueOf(p2);    	non-compiled	[CE]  incompatible  types	15	None	replace
7	[BUG]  [BUGGY]  n  =  Math.min(denominator,  maxDenominator,  numerator);  [CE]  no  suitable  method  found  for  min(BigInteger,int,BigInteger)  [FE]              FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.min(denominator,  maxDenominator,  numerator);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.min(denominator,  maxDenominator,  numerator);	  n    =    Math.min(numerator,    maxDenominator,    denominator);    	non-compiled	[CE]  no  suitable  method  found  for  min(BigInteger,int,BigInteger)	20	None	replace
8	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p1);  [CE]  variable  numerator  might  already  have  been  assigned  [FE]        AssertionError      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  numerator  =  BigInteger.valueOf(p1);  [BUGGY]      }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	numerator  =  BigInteger.valueOf(p1);	  denominator    =    BigInteger.valueOf(p1);    numerator    =    BigInteger.valueOf(p1);    	non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	27	None	replace
9	[BUG]  [BUGGY]  n  =  Math.min(numerator,  denominator,  q2,  maxDenominator);  [CE]  no  suitable  method  found  for  min(BigInteger,BigInteger,long,int)  [FE]            FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.min(numerator,  denominator,  q2,  maxDenominator);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.min(numerator,  denominator,  q2,  maxDenominator);	  n    =    Math.min(numerator,    denominator,    maxDenominator);    	non-compiled	[CE]  no  suitable  method  found  for  min(BigInteger,BigInteger,long,int)	5	None	replace
10	[BUG]  [BUGGY]  n  =  Math.max(numerator,  denominator.doubleValue());  [CE]  no  suitable  method  found  for  max(BigInteger,double)  [FE]              FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.max(numerator,  denominator.doubleValue());  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.max(numerator,  denominator.doubleValue());	  n    =    Math.max(numerator,    q2.doubleValue());    	non-compiled	[CE]  no  suitable  method  found  for  max(BigInteger,double)	18	None	replace
11	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(0);  denominator  =  BigInteger.valueOf(0);  [CE]  variable  denominator  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  denominator  =  BigInteger.valueOf(0);  denominator  =  BigInteger.valueOf(0);  [BUGGY]      }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	denominator    =    BigInteger.valueOf(0);    denominator  =  BigInteger.valueOf(0);	  	non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	3	None	add
12	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(0);  denominator  =  BigInteger.valueOf(1);  [CE]  variable  denominator  might  already  have  been  assigned  [FE]      AssertionError    [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  denominator  =  BigInteger.valueOf(0);  denominator  =  BigInteger.valueOf(1);  [BUGGY]      }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	denominator    =    BigInteger.valueOf(0);    denominator  =  BigInteger.valueOf(1);	  	non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	3	None	add
13	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(0);  desnominator  =  BigInteger.valueOf(0);  [CE]  cannot  find  symbol  desnominator  [FE]        AssertionError    [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  denominator  =  BigInteger.valueOf(0);  desnominator  =  BigInteger.valueOf(0);  [BUGGY]      }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	denominator    =    BigInteger.valueOf(0);    desnominator  =  BigInteger.valueOf(0);	  	non-compiled	[CE]  cannot  find  symbol  desnominator	3	None	add
14	[BUG]  [BUGGY]  n  =  Math.min(numerator,  q1,  q2,  denominator);  [CE]  no  suitable  method  found  for  min(BigInteger,long,long,BigInteger)  [FE]                FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.min(numerator,  q1,  q2,  denominator);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.min(numerator,  q1,  q2,  denominator);	  n    =    Math.min(numerator,    q1,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  min(BigInteger,long,long,BigInteger)	10	None	replace
15	[BUG]  [BUGGY]  n  =  Math.min(numerator,  p1,  q2);  [CE]  no  suitable  method  found  for  min(BigInteger,long,long)  [FE]                  FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.min(numerator,  p1,  q2);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.min(numerator,  p1,  q2);	  n    =    Math.min(numerator,    q1,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  min(BigInteger,long,long)	10	None	replace
16	[BUG]  [BUGGY]  n  =  Math.max(numerator,  denominator,  q2,  maxDenominator);  [CE]  no  suitable  method  found  for  max(BigInteger,BigInteger,long,int)  [FE]            FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.max(numerator,  denominator,  q2,  maxDenominator);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.max(numerator,  denominator,  q2,  maxDenominator);	  n    =    Math.max(numerator,    denominator,    maxDenominator);    	non-compiled	[CE]  no  suitable  method  found  for  max(BigInteger,BigInteger,long,int)	1	None	replace
17	[BUG]  [BUGGY]  n  =  Math.max(numerator,  value,  denominator,  maxDenominator);  [CE]  no  suitable  method  found  for  max(BigInteger,double,BigInteger,int)  [FE]              FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.max(numerator,  value,  denominator,  maxDenominator);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.max(numerator,  value,  denominator,  maxDenominator);	  n    =    Math.max(numerator,    denominator,    maxDenominator);    	non-compiled	[CE]  no  suitable  method  found  for  max(BigInteger,double,BigInteger,int)	1	None	replace
18	[BUG]  [BUGGY]  n  =  Math.min(numerator,  denominator,  q2);  [CE]  no  suitable  method  found  for  min(BigInteger,BigInteger,long)  [FE]                  FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.min(numerator,  denominator,  q2);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.min(numerator,  denominator,  q2);	  n    =    Math.min(numerator,    q2,    denominator);    	non-compiled	[CE]  no  suitable  method  found  for  min(BigInteger,BigInteger,long)	11	None	replace
19	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  [CE]  cannot  find  symbol  q3  [FE]            AssertionError      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  denominator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  [BUGGY]      }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	denominator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);	  denominator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(p3);    	non-compiled	[CE]  cannot  find  symbol  q3	14	None	replace
20	[BUG]  [BUGGY]  n  =  Math.min(numerator,  denominator,  value);  [CE]  no  suitable  method  found  for  min(BigInteger,BigInteger,double)  [FE]            FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.min(numerator,  denominator,  value);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.min(numerator,  denominator,  value);	  n    =    Math.min(numerator,    denominator);    	non-compiled	[CE]  no  suitable  method  found  for  min(BigInteger,BigInteger,double)	19	None	replace
21	[BUG]  [BUGGY]  n  =  Math.max(numerator,  denominator,  value);  [CE]  no  suitable  method  found  for  max(BigInteger,BigInteger,double)  [FE]              FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.max(numerator,  denominator,  value);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.max(numerator,  denominator,  value);	  n    =    Math.max(numerator,    denominator);    	non-compiled	[CE]  no  suitable  method  found  for  max(BigInteger,BigInteger,double)	2	None	replace
22	[BUG]  [BUGGY]  n  =  Math.max(numerator,  p1.denominator);  [CE]  long  cannot  be  dereferenced  [FE]            FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.max(numerator,  p1.denominator);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.max(numerator,  p1.denominator);	  n    =    Math.max(numerator,    p2.denominator);    	non-compiled	[CE]  long  cannot  be  dereferenced	25	None	replace
23	[BUG]  [BUGGY]  n  =  Math.max(numerator,  p2.denominator,  denominator);  [CE]  long  cannot  be  dereferenced  [FE]              FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.max(numerator,  p2.denominator,  denominator);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.max(numerator,  p2.denominator,  denominator);	  n    =    Math.max(numerator,    p2.denominator);    	non-compiled	[CE]  long  cannot  be  dereferenced	25	None	replace
24	[BUG]  [BUGGY]  n  =  Math.min(numerator,  q1,  q2,  p1);  [CE]  no  suitable  method  found  for  min(BigInteger,long,long,long)  [FE]                FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.min(numerator,  q1,  q2,  p1);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.min(numerator,  q1,  q2,  p1);	  n    =    Math.min(numerator,    q1,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  min(BigInteger,long,long,long)	10	None	replace
25	[BUG]  [BUGGY]  n  =  Math.max(numerator,  maxDenominator,  value);  [CE]  no  suitable  method  found  for  max(BigInteger,int,double)  [FE]            FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.max(numerator,  maxDenominator,  value);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.max(numerator,  maxDenominator,  value);	  n    =    Math.max(numerator,    value,    maxDenominator);    	non-compiled	[CE]  no  suitable  method  found  for  max(BigInteger,int,double)	23	None	replace
26	[BUG]  [BUGGY]  n  =  Math.max(numerator,  q1,  q2.doubleValue());  [CE]  long  cannot  be  dereferenced  [FE]              FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.max(numerator,  q1,  q2.doubleValue());  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.max(numerator,  q1,  q2.doubleValue());	  n    =    Math.max(numerator,    q2.doubleValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	18	None	replace
27	[BUG]  [BUGGY]  n  =  Math.min(numerator,  maxDenominator,  value);  [CE]  no  suitable  method  found  for  min(BigInteger,int,double)  [FE]              FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.min(numerator,  maxDenominator,  value);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.min(numerator,  maxDenominator,  value);	  n    =    Math.min(numerator,    value,    maxDenominator);    	non-compiled	[CE]  no  suitable  method  found  for  min(BigInteger,int,double)	6	None	replace
28	[BUG]  [BUGGY]  n  =  numerator.doubleValue();  [CE]  possible  loss  of  precision  [FE]              FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  numerator.doubleValue();  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  numerator.doubleValue();	  n    =    n.doubleValue();    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
29	[BUG]  [BUGGY]  n  =  Math.max(numerator,  denominator,  p2);  [CE]  no  suitable  method  found  for  max(BigInteger,BigInteger,long)  [FE]              FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.max(numerator,  denominator,  p2);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.max(numerator,  denominator,  p2);	  n    =    Math.max(numerator,    denominator);    	non-compiled	[CE]  no  suitable  method  found  for  max(BigInteger,BigInteger,long)	2	None	replace
30	[BUG]  [BUGGY]  numDenominator  =  BigInteger.valueOf(p1);  [CE]  cannot  find  symbol  numDenominator  [FE]        AssertionError      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  numDenominator  =  BigInteger.valueOf(p1);  [BUGGY]      }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	numDenominator  =  BigInteger.valueOf(p1);	  denominator    =    BigInteger.valueOf(p1);    desnominator    =    BigInteger.valueOf(p1);    	non-compiled	[CE]  cannot  find  symbol  numDenominator	21	None	replace
31	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q2);  [CE]  variable  denominator  might  already  have  been  assigned  [FE]            AssertionError      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  denominator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q2);  [BUGGY]      }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	denominator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q2);	  denominator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(p3);    	non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	14	None	replace
32	[BUG]  [BUGGY]  numDenominator  =  BigInteger.valueOf(p2);  [CE]  cannot  find  symbol  numDenominator  [FE]        AssertionError      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  numDenominator  =  BigInteger.valueOf(p2);  [BUGGY]      }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	numDenominator  =  BigInteger.valueOf(p2);	  denominator    =    BigInteger.valueOf(p2);    desnominator    =    BigInteger.valueOf(p2);    	non-compiled	[CE]  cannot  find  symbol  numDenominator	22	None	replace
33	[BUG]  [BUGGY]  n  =  Math.max(numerator,  p1.doubleValue(),  denominator);  [CE]  long  cannot  be  dereferenced  [FE]            FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.max(numerator,  p1.doubleValue(),  denominator);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.max(numerator,  p1.doubleValue(),  denominator);	  n    =    Math.max(numerator,    p1.doubleValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	17	None	replace
34	[BUG]  [BUGGY]  n  =  Math.min(numerator,  denominator,  p2);  [CE]  no  suitable  method  found  for  min(BigInteger,BigInteger,long)  [FE]            FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.min(numerator,  denominator,  p2);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.min(numerator,  denominator,  p2);	  n    =    Math.min(numerator,    denominator);    	non-compiled	[CE]  no  suitable  method  found  for  min(BigInteger,BigInteger,long)	19	None	replace
35	[BUG]  [BUGGY]  n  =  Math.max(numerator,  q2,  q2.doubleValue());  [CE]  long  cannot  be  dereferenced  [FE]              FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.max(numerator,  q2,  q2.doubleValue());  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.max(numerator,  q2,  q2.doubleValue());	  n    =    Math.max(numerator,    q2.doubleValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	18	None	replace
36	[BUG]  [BUGGY]  n  =  Math.max(numerator,  denominator,  p1);  [CE]  no  suitable  method  found  for  max(BigInteger,BigInteger,long)  [FE]              FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.max(numerator,  denominator,  p1);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.max(numerator,  denominator,  p1);	  n    =    Math.max(numerator,    denominator);    	non-compiled	[CE]  no  suitable  method  found  for  max(BigInteger,BigInteger,long)	2	None	replace
37	[BUG]  [BUGGY]  n  =  Math.max(numerator,  denominator,  q1,  maxDenominator);  [CE]  no  suitable  method  found  for  max(BigInteger,BigInteger,long,int)  [FE]            FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.max(numerator,  denominator,  q1,  maxDenominator);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.max(numerator,  denominator,  q1,  maxDenominator);	  n    =    Math.max(numerator,    denominator,    maxDenominator);    	non-compiled	[CE]  no  suitable  method  found  for  max(BigInteger,BigInteger,long,int)	1	None	replace
38	[BUG]  [BUGGY]  n  =  p1.doubleValue();  [CE]  long  cannot  be  dereferenced  [FE]              FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  p1.doubleValue();  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  p1.doubleValue();	  n    =    n.doubleValue();    	non-compiled	[CE]  long  cannot  be  dereferenced	7	None	replace
39	[BUG]  [BUGGY]  n  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  [BUGGY]      }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);	  denominator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(p1);    	non-compiled	[CE]  incompatible  types	13	None	replace
40	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(p3);  [CE]  cannot  find  symbol  p3  [FE]            AssertionError      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  denominator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(p3);  [BUGGY]      }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	denominator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(p3);	  denominator    =    BigInteger.valueOf(p2);    denominator    =    BigInteger.valueOf(p3);    	non-compiled	[CE]  cannot  find  symbol  p3	14	None	replace
41	[BUG]  [BUGGY]  n  =  Math.min(numerator,  q2,  value,  maxDenominator);  [CE]  no  suitable  method  found  for  min(BigInteger,long,double,int)  [FE]              FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.min(numerator,  q2,  value,  maxDenominator);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.min(numerator,  q2,  value,  maxDenominator);	  n    =    Math.min(numerator,    value,    maxDenominator);    	non-compiled	[CE]  no  suitable  method  found  for  min(BigInteger,long,double,int)	6	None	replace
42	[BUG]  [BUGGY]  n  =  Math.min(denominator,  numerator,  denominator);  [CE]  no  suitable  method  found  for  min(BigInteger,BigInteger,BigInteger)  [FE]              FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.min(denominator,  numerator,  denominator);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.min(denominator,  numerator,  denominator);	  n    =    Math.min(numerator,    maxDenominator,    denominator);    	non-compiled	[CE]  no  suitable  method  found  for  min(BigInteger,BigInteger,BigInteger)	20	None	replace
43	[BUG]  [BUGGY]  p2  =  BigInteger.valueOf(p2);  [CE]  incompatible  types  [FE]                FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  p2  =  BigInteger.valueOf(p2);  [BUGGY]      }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	p2  =  BigInteger.valueOf(p2);	  numerator    =    BigInteger.valueOf(p2);    	non-compiled	[CE]  incompatible  types	15	None	replace
44	[BUG]  [BUGGY]  n  =  Math.min(numerator,  denominator,  q1,  maxDenominator);  [CE]  no  suitable  method  found  for  min(BigInteger,BigInteger,long,int)  [FE]            FractionConversionException      [CONTEXT]      stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);      [BUGGY]  n  =  Math.min(numerator,  denominator,  q1,  maxDenominator);  [BUGGY]      denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.35355339059327373	330	330	2	replace	n  =  Math.min(numerator,  denominator,  q1,  maxDenominator);	  n    =    Math.min(numerator,    denominator,    maxDenominator);    	non-compiled	[CE]  no  suitable  method  found  for  min(BigInteger,BigInteger,long,int)	5	None	replace
