bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	original_buggy	action	patch	execution_result	diagnosis	previous_bug_id	new_failing_test_number
2	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  [BUGGY]  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(value,  p2,  q1);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	1	2
3	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  [BUGGY]  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(value,  p2,  q1);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	1	2
3	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(value,  p1,  q2);  [BUGGY]  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(value,  p1,  q2);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	1	2
4	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p1,  q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(value,  p1,  q2);  [BUGGY]  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(value,  p1,  q2);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	1	2
4	[BUG]  [BUGGY]  throw  new  FractionConversionException(p2,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(long,long)  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(p2,  q2);  [BUGGY]  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(p2,  q2);	throw  new  FractionConversionException(value,  p2,  q2);  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(long,long)	1	None
5	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]    [BUGGY]  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	  	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	1	1
6	[BUG]  [BUGGY]    [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]    [BUGGY]  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	  	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	1	1
11	[BUG]  [BUGGY]    numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  [CE]  cannot  find  symbol  q3  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  [BUGGY]    numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  [BUGGY]  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	    numerator  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);		non-compiled	[CE]  cannot  find  symbol  q3	4	None
13	[BUG]  [BUGGY]    denominator  =  BigInteger.valueOf(q2);  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  [BUGGY]    denominator  =  BigInteger.valueOf(q2);  [BUGGY]  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	    denominator  =  BigInteger.valueOf(q2);		non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	4	None
14	[BUG]  [BUGGY]    numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  [BUGGY]    numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  [BUGGY]  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	    numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);		non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	4	None
15	[BUG]  [BUGGY]    denominator  =  BigInteger.valueOf(p2);  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  [BUGGY]    denominator  =  BigInteger.valueOf(p2);  [BUGGY]  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	    denominator  =  BigInteger.valueOf(p2);		non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	4	None
21	[BUG]  [BUGGY]    numerator  =  BigInteger.valueOf(q2);  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  [BUGGY]    numerator  =  BigInteger.valueOf(q2);  [BUGGY]  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	    numerator  =  BigInteger.valueOf(q2);		non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	6	None
23	[BUG]  [BUGGY]    denominator  =  BigInteger.valueOf(q2);  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  [BUGGY]    denominator  =  BigInteger.valueOf(q2);  [BUGGY]  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	    denominator  =  BigInteger.valueOf(q2);		non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	6	None
24	[BUG]  [BUGGY]    numerator  =  BigInteger.valueOf(p2);  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  [BUGGY]    numerator  =  BigInteger.valueOf(p2);  [BUGGY]  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	    numerator  =  BigInteger.valueOf(p2);		non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	6	None
32	[BUG]  [BUGGY]  this(value,  0,  denominator,  100);  [CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]  this(value,  0,  denominator,  100);  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  denominator,  100);	this(value,  0,  maxDenominator,  100);  	non-compiled	[CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called	11	None
33	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]  this(value,  0,  maxDenominator,  1000);  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	add	this(value,  0,  maxDenominator,  1000);	this(value,  0,  maxDenominator,  100);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	11	2
34	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]  this(value,  0,  maxDenominator,  1000);  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  maxDenominator,  1000);	this(value,  0,  maxDenominator,  100);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	11	2
34	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]  this(value,  0,  maxDenominator,  10);  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	add	this(value,  0,  maxDenominator,  10);	this(value,  0,  maxDenominator,  100);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	11	2
35	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  10);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]  this(value,  0,  maxDenominator,  10);  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  maxDenominator,  10);	this(value,  0,  maxDenominator,  100);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	11	2
35	[BUG]  [BUGGY]    [CE]  variable  denominator  might  not  have  been  initialized  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	  	this(value,  0,  maxDenominator,  100);  	non-compiled	[CE]  variable  denominator  might  not  have  been  initialized	11	None
41	[BUG]  [BUGGY]    super();  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    super();  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	    super();		non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	8	None
42	[BUG]  [BUGGY]    super();  this(value,  0,  maxDenominator,  100);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    super();  this(value,  0,  maxDenominator,  100);  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	    super();  this(value,  0,  maxDenominator,  100);		non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	8	None
43	[BUG]  [BUGGY]    this(value,  0,  maxDenominator,  100);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    this(value,  0,  maxDenominator,  100);  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	    this(value,  0,  maxDenominator,  100);		non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	8	None
44	[BUG]  [BUGGY]    super();  this(value,  0,  maxDenominator,  1000);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    super();  this(value,  0,  maxDenominator,  1000);  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	    super();  this(value,  0,  maxDenominator,  1000);		non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	8	None
45	[BUG]  [BUGGY]    this(value,  0,  maxDenominator,  0);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    this(value,  0,  maxDenominator,  0);  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	    this(value,  0,  maxDenominator,  0);		non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	8	None
51	[BUG]  [BUGGY]  [FE]  AssertionError  testDigitLimitConstructor  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  [BUGGY]  numerator  =  BigInteger.valueOf(p2);  [BUGGY]  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	add	numerator  =  BigInteger.valueOf(p2);	numerator  =  BigInteger.valueOf(p1);  	compilable	  [FE]  AssertionError  testDigitLimitConstructor	3	2
52	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p2);  [FE]  AssertionError  testDigitLimitConstructor  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  [BUGGY]  numerator  =  BigInteger.valueOf(p2);  [BUGGY]  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator  =  BigInteger.valueOf(p2);	numerator  =  BigInteger.valueOf(p1);  	compilable	  [FE]  AssertionError  testDigitLimitConstructor	3	2
52	[BUG]  [BUGGY]  [FE]  AssertionError  testDigitLimitConstructor  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  [BUGGY]  numerator  =  BigInteger.valueOf(q2);  [BUGGY]  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	add	numerator  =  BigInteger.valueOf(q2);	numerator  =  BigInteger.valueOf(p1);  	compilable	  [FE]  AssertionError  testDigitLimitConstructor	3	2
53	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(q2);  [FE]  AssertionError  testDigitLimitConstructor  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  [BUGGY]  numerator  =  BigInteger.valueOf(q2);  [BUGGY]  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator  =  BigInteger.valueOf(q2);	numerator  =  BigInteger.valueOf(p1);  	compilable	  [FE]  AssertionError  testDigitLimitConstructor	3	2
54	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(minDenominator);  [CE]  cannot  find  symbol  minDenominator  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  [BUGGY]  numerator  =  BigInteger.valueOf(minDenominator);  [BUGGY]  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator  =  BigInteger.valueOf(minDenominator);	numerator  =  BigInteger.valueOf(p1);  	non-compiled	[CE]  cannot  find  symbol  minDenominator	3	None
61	[BUG]  [BUGGY]    setDenominator(maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    setDenominator(maxDenominator);  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	    setDenominator(maxDenominator);		non-compiled	[CE]  cannot  find  symbol	14	None
62	[BUG]  [BUGGY]    setDenominator(numerator);  [CE]  cannot  find  symbol  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    setDenominator(numerator);  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	    setDenominator(numerator);		non-compiled	[CE]  cannot  find  symbol	14	None
63	[BUG]  [BUGGY]    this(value,  0,  maxDenominator,  100);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    this(value,  0,  maxDenominator,  100);  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	    this(value,  0,  maxDenominator,  100);		non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	14	None
64	[BUG]  [BUGGY]    this(value,  0,  denominator,  100);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    this(value,  0,  denominator,  100);  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	    this(value,  0,  denominator,  100);		non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	14	None
65	[BUG]  [BUGGY]    setDenominator(value);  [CE]  cannot  find  symbol  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    setDenominator(value);  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	    setDenominator(value);		non-compiled	[CE]  cannot  find  symbol	14	None
72	[BUG]  [BUGGY]  [FE]  AssertionError  testDigitLimitConstructor  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  [BUGGY]  denominator  =  BigInteger.valueOf(p2);  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	add	denominator  =  BigInteger.valueOf(p2);	denominator  =  BigInteger.valueOf(q1);  	compilable	  [FE]  AssertionError  testDigitLimitConstructor	5	2
73	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p2);  [FE]  AssertionError  testDigitLimitConstructor  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  [BUGGY]  denominator  =  BigInteger.valueOf(p2);  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator  =  BigInteger.valueOf(p2);	denominator  =  BigInteger.valueOf(q1);  	compilable	  [FE]  AssertionError  testDigitLimitConstructor	5	2
73	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(minDenominator);  [CE]  cannot  find  symbol  minDenominator  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  [BUGGY]  denominator  =  BigInteger.valueOf(minDenominator);  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator  =  BigInteger.valueOf(minDenominator);	denominator  =  BigInteger.valueOf(q1);  	non-compiled	[CE]  cannot  find  symbol  minDenominator	5	None
74	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(q3);  [CE]  cannot  find  symbol  q3  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  [BUGGY]  denominator  =  BigInteger.valueOf(q3);  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator  =  BigInteger.valueOf(q3);	denominator  =  BigInteger.valueOf(q1);  	non-compiled	[CE]  cannot  find  symbol  q3	5	None
81	[BUG]  [BUGGY]    this.denominator  =(int)q2;  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;  [BUGGY]    this.denominator  =(int)q2;  [BUGGY]  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	    this.denominator  =(int)q2;		non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	20	None
82	[BUG]  [BUGGY]    this.denominator  =(int)p2;  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;  [BUGGY]    this.denominator  =(int)p2;  [BUGGY]  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	    this.denominator  =(int)p2;		non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	20	None
83	[BUG]  [BUGGY]    if(q2  >  maxDenominator)  {  if(maxDenominator  <  denominator)  {  this.numerator  =  (int)p2;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;  [BUGGY]    if(q2  >  maxDenominator)  {  if(maxDenominator  <  denominator)  {  this.numerator  =  (int)p2;  }  [BUGGY]  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	    if(q2  >  maxDenominator)  {  if(maxDenominator  <  denominator)  {  this.numerator  =  (int)p2;  }		non-compiled	[CE]  illegal  start  of  expression	20	None
84	[BUG]  [BUGGY]    if(q2  >  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  (int)q2;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;  [BUGGY]    if(q2  >  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  (int)q2;  }  [BUGGY]  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	    if(q2  >  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  (int)q2;  }		non-compiled	[CE]  illegal  start  of  expression	20	None
85	[BUG]  [BUGGY]    if(q2  >  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  q2;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;  [BUGGY]    if(q2  >  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  q2;  }  [BUGGY]  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	    if(q2  >  maxDenominator)  {  if(maxDenominator  <  epsilon)  {  this.numerator  =  q2;  }		non-compiled	[CE]  illegal  start  of  expression	20	None
91	[BUG]  [BUGGY]    super();  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    super();  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	    super();		non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	12	None
92	[BUG]  [BUGGY]    super();  this(value,  0,  maxDenominator,  100);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    super();  this(value,  0,  maxDenominator,  100);  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	    super();  this(value,  0,  maxDenominator,  100);		non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	12	None
95	[BUG]  [BUGGY]    super();  this(value,  0,  maxDenominator,  1000);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    super();  this(value,  0,  maxDenominator,  1000);  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	    super();  this(value,  0,  maxDenominator,  1000);		non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	12	None
101	[BUG]  [BUGGY]  setDenominator(numerator);  [CE]  illegal  start  of  expression  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]  setDenominator(numerator);  [BUGGY]    [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setDenominator(numerator);	}  	non-compiled	[CE]  illegal  start  of  expression	9	None
102	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  100);  [CE]  illegal  start  of  expression  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]  this(value,  0,  maxDenominator,  100);  [BUGGY]    [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this(value,  0,  maxDenominator,  100);	}  	non-compiled	[CE]  illegal  start  of  expression	9	None
103	[BUG]  [BUGGY]  peg(Calendar.getInstance());  [CE]  illegal  start  of  expression  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]  peg(Calendar.getInstance());  [BUGGY]    [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	peg(Calendar.getInstance());	}  	non-compiled	[CE]  illegal  start  of  expression	9	None
104	[BUG]  [BUGGY]  this(value,  0,  denominator,  100);  [CE]  illegal  start  of  expression  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]  this(value,  0,  denominator,  100);  [BUGGY]    [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	this(value,  0,  denominator,  100);	}  	non-compiled	[CE]  illegal  start  of  expression	9	None
105	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    [BUGGY]    [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	  	}  	non-compiled	[CE]  illegal  start  of  expression	9	None
111	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  [BUGGY]  this.numerator  =(int)p2;  [BUGGY]  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	add	this.numerator  =(int)p2;	this.numerator  =  (int)  p1;  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	17	2
112	[BUG]  [BUGGY]  this.numerator  =(int)p2;  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  [BUGGY]  this.numerator  =(int)p2;  [BUGGY]  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =(int)p2;	this.numerator  =  (int)  p1;  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	17	2
115	[BUG]  [BUGGY]    [CE]  variable  numerator  might  not  have  been  initialized  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  [BUGGY]    [BUGGY]  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	  	this.numerator  =  (int)  p1;  	non-compiled	[CE]  variable  numerator  might  not  have  been  initialized	17	None
121	[BUG]  [BUGGY]    p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]    p2  =  Math.floor(a1);  q2  =  Math.floor(q2);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	    p2  =  Math.floor(a1);  q2  =  Math.floor(q2);		non-compiled	[CE]  possible  loss  of  precision	2	None
122	[BUG]  [BUGGY]    p2  =  Math.floor(a1);  [CE]  possible  loss  of  precision  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]    p2  =  Math.floor(a1);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	    p2  =  Math.floor(a1);		non-compiled	[CE]  possible  loss  of  precision	2	None
123	[BUG]  [BUGGY]    p2  =  Math.floor(a1);  q2  =  Math.abs(q2);  [CE]  possible  loss  of  precision  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]    p2  =  Math.floor(a1);  q2  =  Math.abs(q2);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	    p2  =  Math.floor(a1);  q2  =  Math.abs(q2);		non-compiled	[CE]  possible  loss  of  precision	2	None
124	[BUG]  [BUGGY]    p2  =  Math.floor(r1);  [CE]  possible  loss  of  precision  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]    p2  =  Math.floor(r1);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	    p2  =  Math.floor(r1);		non-compiled	[CE]  possible  loss  of  precision	2	None
125	[BUG]  [BUGGY]    p2  =  Math.floor(a1);  q2  =  Math.round(q2);  [CE]  possible  loss  of  precision  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]    p2  =  Math.floor(a1);  q2  =  Math.round(q2);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	    p2  =  Math.floor(a1);  q2  =  Math.round(q2);		non-compiled	[CE]  possible  loss  of  precision	2	None
141	[BUG]  [BUGGY]    this.numerator  =(int)p2;  this.denominator  =(int)q2;  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  [BUGGY]    this.numerator  =(int)p2;  this.denominator  =(int)q2;  [BUGGY]  this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	    this.numerator  =(int)p2;  this.denominator  =(int)q2;		non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	18	None
143	[BUG]  [BUGGY]    this.numerator  =(int)(p2);  this.denominator  =(int)(q2);  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  [BUGGY]    this.numerator  =(int)(p2);  this.denominator  =(int)(q2);  [BUGGY]  this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	    this.numerator  =(int)(p2);  this.denominator  =(int)(q2);		non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	18	None
144	[BUG]  [BUGGY]    this.numerator  =  Math.abs(q2);  this.denominator  =  Math.abs(q1);  [CE]  possible  loss  of  precision  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  [BUGGY]    this.numerator  =  Math.abs(q2);  this.denominator  =  Math.abs(q1);  [BUGGY]  this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	    this.numerator  =  Math.abs(q2);  this.denominator  =  Math.abs(q1);		non-compiled	[CE]  possible  loss  of  precision	18	None
152	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  [BUGGY]  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	throw  new  FractionConversionException(value,  p2,  q1);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	15	2
153	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  [BUGGY]  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  p2,  q1);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	15	2
153	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(value,  p2,  a1);  [BUGGY]  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	throw  new  FractionConversionException(value,  p2,  a1);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	15	2
154	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  a1);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(value,  p2,  a1);  [BUGGY]  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  p2,  a1);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	15	2
154	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(value,  p2,  overflow);  [BUGGY]  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	throw  new  FractionConversionException(value,  p2,  overflow);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	15	2
155	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  overflow);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(value,  p2,  overflow);  [BUGGY]  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  p2,  overflow);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	15	2
155	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]    [BUGGY]  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	  	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	15	2
156	[BUG]  [BUGGY]    [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]    [BUGGY]  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	  	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	15	2
164	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;  [BUGGY]  this.denominator  =(int)p1;  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	add	this.denominator  =(int)p1;	this.denominator  =  (int)  q1;  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	19	2
165	[BUG]  [BUGGY]  this.denominator  =(int)p1;  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;  [BUGGY]  this.denominator  =(int)p1;  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator  =(int)p1;	this.denominator  =  (int)  q1;  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	19	2
174	[BUG]  [BUGGY]    setDefinition(maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    setDefinition(maxDenominator);  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	    setDefinition(maxDenominator);		non-compiled	[CE]  cannot  find  symbol	10	None
175	[BUG]  [BUGGY]    this(value,  0,  maxDenominator,  0);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    this(value,  0,  maxDenominator,  0);  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	    this(value,  0,  maxDenominator,  0);		non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	10	None
181	[BUG]  [BUGGY]    p2  =(p2)FastMath.floor(p2);  [CE]  cannot  find  symbol  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]    p2  =(p2)FastMath.floor(p2);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	    p2  =(p2)FastMath.floor(p2);		non-compiled	[CE]  cannot  find  symbol	16	None
182	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]    p2  =(int)FastMath.floor(p2);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	    p2  =(int)FastMath.floor(p2);		compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	16	2
183	[BUG]  [BUGGY]    p2  =(int)FastMath.floor(p2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]    p2  =(int)FastMath.floor(p2);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	    p2  =(int)FastMath.floor(p2);		compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	16	2
183	[BUG]  [BUGGY]    p2  =(p2)FastMath.floor(r1);  [CE]  cannot  find  symbol  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]    p2  =(p2)FastMath.floor(r1);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	    p2  =(p2)FastMath.floor(r1);		non-compiled	[CE]  cannot  find  symbol	16	None
184	[BUG]  [BUGGY]    p2  =(p2)FastMath.floor(q2);  [CE]  cannot  find  symbol  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]    p2  =(p2)FastMath.floor(q2);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	    p2  =(p2)FastMath.floor(q2);		non-compiled	[CE]  cannot  find  symbol	16	None
185	[BUG]  [BUGGY]    int  maxIterations  =  Math.max(n,  epsilon);  [CE]  variable  maxIterations  is  already  defined  in  constructor  Fraction(double,double,int,int)  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]    int  maxIterations  =  Math.max(n,  epsilon);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	    int  maxIterations  =  Math.max(n,  epsilon);		non-compiled	[CE]  variable  maxIterations  is  already  defined  in  constructor  Fraction(double,double,int,int)	16	None
192	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]  this(value,  0,  maxDenominator,  1000);  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	add	this(value,  0,  maxDenominator,  1000);	this(value,  0,  maxDenominator,  100);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	7	2
193	[BUG]  [BUGGY]  this(value,  0,  maxDenominator,  1000);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]  this(value,  0,  maxDenominator,  1000);  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  maxDenominator,  1000);	this(value,  0,  maxDenominator,  100);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	7	2
193	[BUG]  [BUGGY]  this(value,  0,  denominator,  100);  [CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]  this(value,  0,  denominator,  100);  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  denominator,  100);	this(value,  0,  maxDenominator,  100);  	non-compiled	[CE]  cannot  reference  denominator  before  supertype  constructor  has  been  called	7	None
194	[BUG]  [BUGGY]  this(value,  0,  numerator,  maxDenominator,  100);  [CE]  cannot  reference  numerator  before  supertype  constructor  has  been  called  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]  this(value,  0,  numerator,  maxDenominator,  100);  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  numerator,  maxDenominator,  100);	this(value,  0,  maxDenominator,  100);  	non-compiled	[CE]  cannot  reference  numerator  before  supertype  constructor  has  been  called	7	None
4	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(minorator);  [CE]  cannot  find  symbol  minorator  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  [BUGGY]  denominator  =  BigInteger.valueOf(minorator);  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator  =  BigInteger.valueOf(minorator);	denominator  =  BigInteger.valueOf(q1);  	non-compiled	[CE]  cannot  find  symbol  minorator	5	None
25	[BUG]  [BUGGY]    this.denominator  =(int)p1;  epsilon  =  q2;  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;  [BUGGY]    this.denominator  =(int)p1;  epsilon  =  q2;  [BUGGY]  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	    this.denominator  =(int)p1;  epsilon  =  q2;		non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	20	None
41	[BUG]  [BUGGY]    setMaximumDenominator(maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    setMaximumDenominator(maxDenominator);  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	    setMaximumDenominator(maxDenominator);		non-compiled	[CE]  cannot  find  symbol	14	None
42	[BUG]  [BUGGY]    setMaximumFractionDigits(maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    setMaximumFractionDigits(maxDenominator);  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	    setMaximumFractionDigits(maxDenominator);		non-compiled	[CE]  cannot  find  symbol	14	None
43	[BUG]  [BUGGY]    setMaximum(maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    setMaximum(maxDenominator);  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	    setMaximum(maxDenominator);		non-compiled	[CE]  cannot  find  symbol	14	None
44	[BUG]  [BUGGY]    setMaximumFractionDenominator(maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    setMaximumFractionDenominator(maxDenominator);  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	    setMaximumFractionDenominator(maxDenominator);		non-compiled	[CE]  cannot  find  symbol	14	None
45	[BUG]  [BUGGY]    setMaximumFractionDigits(maxDenominator,  value);  [CE]  cannot  find  symbol  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    setMaximumFractionDigits(maxDenominator,  value);  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	    setMaximumFractionDigits(maxDenominator,  value);		non-compiled	[CE]  cannot  find  symbol	14	None
81	[BUG]  [BUGGY]    p2  =  Math.floor(a1);  p2  =  Math.ceil(q0,  p2);  [CE]  possible  loss  of  precision  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]    p2  =  Math.floor(a1);  p2  =  Math.ceil(q0,  p2);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	    p2  =  Math.floor(a1);  p2  =  Math.ceil(q0,  p2);		non-compiled	[CE]  possible  loss  of  precision	2	None
83	[BUG]  [BUGGY]    p2  =  Math.floor(a1);  q1  =  Math.abs(q2);  [CE]  possible  loss  of  precision  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]    p2  =  Math.floor(a1);  q1  =  Math.abs(q2);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	    p2  =  Math.floor(a1);  q1  =  Math.abs(q2);		non-compiled	[CE]  possible  loss  of  precision	2	None
84	[BUG]  [BUGGY]    p2  =  Math.floor(a1);  p2  =  Math.round(q2);  [CE]  possible  loss  of  precision  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]    p2  =  Math.floor(a1);  p2  =  Math.round(q2);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	    p2  =  Math.floor(a1);  p2  =  Math.round(q2);		non-compiled	[CE]  possible  loss  of  precision	2	None
85	[BUG]  [BUGGY]    p2  =  Math.floor(a1);  p2  =  Math.max(p2,  q0);  [CE]  possible  loss  of  precision  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]    p2  =  Math.floor(a1);  p2  =  Math.max(p2,  q0);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	    p2  =  Math.floor(a1);  p2  =  Math.max(p2,  q0);		non-compiled	[CE]  possible  loss  of  precision	2	None
101	[BUG]  [BUGGY]    if(numerator  >=  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >=  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    if(numerator  >=  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >=  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( " ");  }  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	    if(numerator  >=  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >=  Integer.MAX_VALUE)  {  throw  new  FractionConversionException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	10	None
102	[BUG]  [BUGGY]    if(numerator  >=  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >=  Integer.MAX_VALUE)  {  throw  new  FractionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    if(numerator  >=  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >=  Integer.MAX_VALUE)  {  throw  new  FractionException( " ");  }  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	    if(numerator  >=  0)  {  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >=  Integer.MAX_VALUE)  {  throw  new  FractionException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	10	None
103	[BUG]  [BUGGY]    if(numerator  >=  0)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionConversionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    if(numerator  >=  0)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionConversionException( " ");  }  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	    if(numerator  >=  0)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionConversionException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	10	None
104	[BUG]  [BUGGY]    setNumerator(numerator);  [CE]  cannot  find  symbol  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    setNumerator(numerator);  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	    setNumerator(numerator);		non-compiled	[CE]  cannot  find  symbol	10	None
105	[BUG]  [BUGGY]    if(numerator  >=  0)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    if(numerator  >=  0)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionException( " ");  }  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	    if(numerator  >=  0)  {  if(numerator  ==  Integer.MIN_VALUE)  {  throw  new  FractionException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	10	None
121	[BUG]  [BUGGY]  this(value,  0,  value,  100);  [CE]  no  suitable  constructor  found  for  BigFraction(double,int,double,int)  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]  this(value,  0,  value,  100);  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  value,  100);	this(value,  0,  maxDenominator,  100);  	non-compiled	[CE]  no  suitable  constructor  found  for  BigFraction(double,int,double,int)	7	None
122	[BUG]  [BUGGY]  this(value,  0,  value,  maxDenominator,  100);  [CE]  no  suitable  constructor  found  for  BigFraction(double,int,double,int,int)  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]  this(value,  0,  value,  maxDenominator,  100);  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  value,  maxDenominator,  100);	this(value,  0,  maxDenominator,  100);  	non-compiled	[CE]  no  suitable  constructor  found  for  BigFraction(double,int,double,int,int)	7	None
124	[BUG]  [BUGGY]  this(value,  0,  value,  maxDenominator,  0);  [CE]  no  suitable  constructor  found  for  BigFraction(double,int,double,int,int)  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]  this(value,  0,  value,  maxDenominator,  0);  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  value,  maxDenominator,  0);	this(value,  0,  maxDenominator,  100);  	non-compiled	[CE]  no  suitable  constructor  found  for  BigFraction(double,int,double,int,int)	7	None
142	[BUG]  [BUGGY]    super();  this.numerator  =  Math.min(numerator,  maxDenominator);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    super();  this.numerator  =  Math.min(numerator,  maxDenominator);  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	    super();  this.numerator  =  Math.min(numerator,  maxDenominator);		non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	12	None
143	[BUG]  [BUGGY]    super();  this.numerator  =  Math.max(value,  maxDenominator);  [CE]  possible  loss  of  precision  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    super();  this.numerator  =  Math.max(value,  maxDenominator);  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	    super();  this.numerator  =  Math.max(value,  maxDenominator);		non-compiled	[CE]  possible  loss  of  precision	12	None
144	[BUG]  [BUGGY]    this(value,  DEFAULT_EPSILON,  0,  maxDenominator);  [CE]  call  to  this  must  be  first  statement  in  constructor  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    this(value,  DEFAULT_EPSILON,  0,  maxDenominator);  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	    this(value,  DEFAULT_EPSILON,  0,  maxDenominator);		non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	12	None
145	[BUG]  [BUGGY]    super();  this.numerator  =  Math.max(value,  denominator);  [CE]  possible  loss  of  precision  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    super();  this.numerator  =  Math.max(value,  denominator);  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	    super();  this.numerator  =  Math.max(value,  denominator);		non-compiled	[CE]  possible  loss  of  precision	12	None
163	[BUG]  [BUGGY]  [FE]  AssertionError  testDigitLimitConstructor  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  [BUGGY]  numerator  =  BigInteger.valueOf(p0);  [BUGGY]  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	add	numerator  =  BigInteger.valueOf(p0);	numerator  =  BigInteger.valueOf(p1);  	compilable	  [FE]  AssertionError  testDigitLimitConstructor	3	2
164	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p0);  [FE]  AssertionError  testDigitLimitConstructor  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  [BUGGY]  numerator  =  BigInteger.valueOf(p0);  [BUGGY]  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator  =  BigInteger.valueOf(p0);	numerator  =  BigInteger.valueOf(p1);  	compilable	  [FE]  AssertionError  testDigitLimitConstructor	3	2
164	[BUG]  [BUGGY]  [FE]  AssertionError  testDigitLimitConstructor  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  [BUGGY]  numerator  =  BigInteger.valueOf(p1  -  p2);  [BUGGY]  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	add	numerator  =  BigInteger.valueOf(p1  -  p2);	numerator  =  BigInteger.valueOf(p1);  	compilable	  [FE]  AssertionError  testDigitLimitConstructor	3	2
165	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p1  -  p2);  [FE]  AssertionError  testDigitLimitConstructor  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  [BUGGY]  numerator  =  BigInteger.valueOf(p1  -  p2);  [BUGGY]  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator  =  BigInteger.valueOf(p1  -  p2);	numerator  =  BigInteger.valueOf(p1);  	compilable	  [FE]  AssertionError  testDigitLimitConstructor	3	2
182	[BUG]  [BUGGY]    this.numerator  =(double)p1;  [CE]  possible  loss  of  precision  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  [BUGGY]    this.numerator  =(double)p1;  [BUGGY]  this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	    this.numerator  =(double)p1;		non-compiled	[CE]  possible  loss  of  precision	18	None
183	[BUG]  [BUGGY]    if(p1  <  p2)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  [BUGGY]    if(p1  <  p2)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }  [BUGGY]  this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	    if(p1  <  p2)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p1;  this.denominator  =(int)p2;  }		non-compiled	[CE]  illegal  start  of  expression	18	None
184	[BUG]  [BUGGY]    if(p1  <  p2)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  [BUGGY]    if(p1  <  p2)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }  [BUGGY]  this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	    if(p1  <  p2)  {  if(p1  >  maxDenominator)  {  this.numerator  =(int)p2;  this.denominator  =(int)p2;  }		non-compiled	[CE]  illegal  start  of  expression	18	None
203	[BUG]  [BUGGY]  setMaximumFraction(maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]  setMaximumFraction(maxDenominator);  [BUGGY]    [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setMaximumFraction(maxDenominator);	}  	non-compiled	[CE]  illegal  start  of  expression	9	None
221	[BUG]  [BUGGY]  this(value,  0,  value.length,  maxDenominator,  100);  [CE]  double  cannot  be  dereferenced  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]  this(value,  0,  value.length,  maxDenominator,  100);  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value.length,  maxDenominator,  100);	this(value,  0,  maxDenominator,  100);  	non-compiled	[CE]  double  cannot  be  dereferenced	11	None
222	[BUG]  [BUGGY]  this(value,  0,  value,  100);  [CE]  no  suitable  constructor  found  for  Fraction(double,int,double,int)  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]  this(value,  0,  value,  100);  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value,  100);	this(value,  0,  maxDenominator,  100);  	non-compiled	[CE]  no  suitable  constructor  found  for  Fraction(double,int,double,int)	11	None
223	[BUG]  [BUGGY]  this(value,  0,  value,  maxDenominator,  100);  [CE]  no  suitable  constructor  found  for  Fraction(double,int,double,int,int)  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]  this(value,  0,  value,  maxDenominator,  100);  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value,  maxDenominator,  100);	this(value,  0,  maxDenominator,  100);  	non-compiled	[CE]  no  suitable  constructor  found  for  Fraction(double,int,double,int,int)	11	None
224	[BUG]  [BUGGY]  this(value,  0,  value.doubleValue(),  maxDenominator,  100);  [CE]  double  cannot  be  dereferenced  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]  this(value,  0,  value.doubleValue(),  maxDenominator,  100);  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	this(value,  0,  value.doubleValue(),  maxDenominator,  100);	this(value,  0,  maxDenominator,  100);  	non-compiled	[CE]  double  cannot  be  dereferenced	11	None
241	[BUG]  [BUGGY]    p2  =  Math.floor(a1);  q2  =  Math.abs(q1);  [CE]  possible  loss  of  precision  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]    p2  =  Math.floor(a1);  q2  =  Math.abs(q1);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	    p2  =  Math.floor(a1);  q2  =  Math.abs(q1);		non-compiled	[CE]  possible  loss  of  precision	16	None
242	[BUG]  [BUGGY]    p2  =  Math.floor(a1);  q2  =  Math.abs(q2);  [CE]  possible  loss  of  precision  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]    p2  =  Math.floor(a1);  q2  =  Math.abs(q2);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	    p2  =  Math.floor(a1);  q2  =  Math.abs(q2);		non-compiled	[CE]  possible  loss  of  precision	16	None
243	[BUG]  [BUGGY]    p2  =  Math.floor(a1);  [CE]  possible  loss  of  precision  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]    p2  =  Math.floor(a1);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	    p2  =  Math.floor(a1);		non-compiled	[CE]  possible  loss  of  precision	16	None
244	[BUG]  [BUGGY]    p2  =  Math.floor(a1);  q2  =  Math.round(q2);  [CE]  possible  loss  of  precision  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]    p2  =  Math.floor(a1);  q2  =  Math.round(q2);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	    p2  =  Math.floor(a1);  q2  =  Math.round(q2);		non-compiled	[CE]  possible  loss  of  precision	16	None
245	[BUG]  [BUGGY]    int  numerator  =  Math.floor(p2);  [CE]  possible  loss  of  precision  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]    int  numerator  =  Math.floor(p2);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	    int  numerator  =  Math.floor(p2);		non-compiled	[CE]  possible  loss  of  precision	16	None
263	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  [BUGGY]  this.numerator  =(int)p1  -  1;  [BUGGY]  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	add	this.numerator  =(int)p1  -  1;	this.numerator  =  (int)  p1;  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	17	2
264	[BUG]  [BUGGY]  this.numerator  =(int)p1  -  1;  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  [BUGGY]  this.numerator  =(int)p1  -  1;  [BUGGY]  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	this.numerator  =(int)p1  -  1;	this.numerator  =  (int)  p1;  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	17	2
281	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  [BUGGY]  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(value,  p0,  q2);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	1	2
282	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  [BUGGY]  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(value,  p0,  q2);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	1	2
282	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(p0,  p2,  q2);  [BUGGY]  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(p0,  p2,  q2);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	1	2
283	[BUG]  [BUGGY]  throw  new  FractionConversionException(p0,  p2,  q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(p0,  p2,  q2);  [BUGGY]  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(p0,  p2,  q2);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	1	2
283	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(p0,  q1,  p2);  [BUGGY]  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(p0,  q1,  p2);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	1	2
284	[BUG]  [BUGGY]  throw  new  FractionConversionException(p0,  q1,  p2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(p0,  q1,  p2);  [BUGGY]  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(p0,  q1,  p2);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	1	2
303	[BUG]  [BUGGY]  this.numerator  =  Math.min(value,  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]  this.numerator  =  Math.min(value,  maxDenominator);  [BUGGY]    [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this.numerator  =  Math.min(value,  maxDenominator);	}  	non-compiled	[CE]  illegal  start  of  expression	13	None
304	[BUG]  [BUGGY]  this.numerator  =  Math.max(value,  maxDenominator);  [CE]  illegal  start  of  expression  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]  this.numerator  =  Math.max(value,  maxDenominator);  [BUGGY]    [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	this.numerator  =  Math.max(value,  maxDenominator);	}  	non-compiled	[CE]  illegal  start  of  expression	13	None
321	[BUG]  [BUGGY]    num  =  BigInteger.valueOf(q2);  [CE]  cannot  find  symbol  num  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  [BUGGY]    num  =  BigInteger.valueOf(q2);  [BUGGY]  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	    num  =  BigInteger.valueOf(q2);		non-compiled	[CE]  cannot  find  symbol  num	6	None
324	[BUG]  [BUGGY]    numerinator  =  BigInteger.valueOf(q2);  [CE]  cannot  find  symbol  numerinator  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  [BUGGY]    numerinator  =  BigInteger.valueOf(q2);  [BUGGY]  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	    numerinator  =  BigInteger.valueOf(q2);		non-compiled	[CE]  cannot  find  symbol  numerinator	6	None
325	[BUG]  [BUGGY]    num  =  BigInteger.valueOf(p2);  [CE]  cannot  find  symbol  num  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  [BUGGY]    num  =  BigInteger.valueOf(p2);  [BUGGY]  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	    num  =  BigInteger.valueOf(p2);		non-compiled	[CE]  cannot  find  symbol  num	6	None
342	[BUG]  [BUGGY]    super();  this.numerator  =  Math.max(numerator,  maxDenominator);  [CE]  no  suitable  method  found  for  max(BigInteger,int)  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    super();  this.numerator  =  Math.max(numerator,  maxDenominator);  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	    super();  this.numerator  =  Math.max(numerator,  maxDenominator);		non-compiled	[CE]  no  suitable  method  found  for  max(BigInteger,int)	8	None
343	[BUG]  [BUGGY]    super();  this.numerator  =  Math.min(numerator,  maxDenominator);  [CE]  no  suitable  method  found  for  min(BigInteger,int)  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    super();  this.numerator  =  Math.min(numerator,  maxDenominator);  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	    super();  this.numerator  =  Math.min(numerator,  maxDenominator);		non-compiled	[CE]  no  suitable  method  found  for  min(BigInteger,int)	8	None
344	[BUG]  [BUGGY]    super();  this.numerator  =  Math.pow(10,  denominator);  [CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    super();  this.numerator  =  Math.pow(10,  denominator);  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	    super();  this.numerator  =  Math.pow(10,  denominator);		non-compiled	[CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;	8	None
345	[BUG]  [BUGGY]    super();  this.numerator  =  Math.max(numerator,  denominator);  [CE]  no  suitable  method  found  for  max(BigInteger,BigInteger)  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    super();  this.numerator  =  Math.max(numerator,  denominator);  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	    super();  this.numerator  =  Math.max(numerator,  denominator);		non-compiled	[CE]  no  suitable  method  found  for  max(BigInteger,BigInteger)	8	None
361	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  [BUGGY]  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	throw  new  FractionConversionException(value,  p0,  q2);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	15	2
362	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(value,  p0,  q2);  [BUGGY]  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  p0,  q2);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	15	2
363	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  [BUGGY]  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	add	throw  new  FractionConversionException(value,  p2,  q0);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	15	2
364	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(value,  p2,  q0);  [BUGGY]  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  p2,  q0);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	15	2
364	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long)  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  q2);  [BUGGY]  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(value,  epsilon,  q2);	throw  new  FractionConversionException(value,  p2,  q2);  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long)	15	None
381	[BUG]  [BUGGY]    num  =  BigInteger.valueOf(minDenominator);  denominator  =  BigInteger.valueOf(maxDenominator);  [CE]  cannot  find  symbol  num  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  [BUGGY]    num  =  BigInteger.valueOf(minDenominator);  denominator  =  BigInteger.valueOf(maxDenominator);  [BUGGY]  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	    num  =  BigInteger.valueOf(minDenominator);  denominator  =  BigInteger.valueOf(maxDenominator);		non-compiled	[CE]  cannot  find  symbol  num	4	None
382	[BUG]  [BUGGY]    num  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  [CE]  cannot  find  symbol  num  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  [BUGGY]    num  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  [BUGGY]  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	    num  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);		non-compiled	[CE]  cannot  find  symbol  num	4	None
383	[BUG]  [BUGGY]    num  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  [CE]  cannot  find  symbol  num  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  [BUGGY]    num  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);  [BUGGY]  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	    num  =  BigInteger.valueOf(q2);  denominator  =  BigInteger.valueOf(q3);		non-compiled	[CE]  cannot  find  symbol  num	4	None
384	[BUG]  [BUGGY]    num  =  BigInteger.valueOf(q2);  [CE]  cannot  find  symbol  num  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  [BUGGY]    num  =  BigInteger.valueOf(q2);  [BUGGY]  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	    num  =  BigInteger.valueOf(q2);		non-compiled	[CE]  cannot  find  symbol  num	4	None
385	[BUG]  [BUGGY]    num  =  BigInteger.valueOf(minDenominator);  [CE]  cannot  find  symbol  num  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  [BUGGY]    num  =  BigInteger.valueOf(minDenominator);  [BUGGY]  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	    num  =  BigInteger.valueOf(minDenominator);		non-compiled	[CE]  cannot  find  symbol  num	4	None
2	[BUG]  [BUGGY]  [FE]  AssertionError  testDigitLimitConstructor  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  [BUGGY]  denominator  =  BigInteger.valueOf(p0);  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	add	denominator  =  BigInteger.valueOf(p0);	denominator  =  BigInteger.valueOf(q1);  	compilable	  [FE]  AssertionError  testDigitLimitConstructor	5	2
3	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p0);  [FE]  AssertionError  testDigitLimitConstructor  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  [BUGGY]  denominator  =  BigInteger.valueOf(p0);  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator  =  BigInteger.valueOf(p0);	denominator  =  BigInteger.valueOf(q1);  	compilable	  [FE]  AssertionError  testDigitLimitConstructor	5	2
4	[BUG]  [BUGGY]  denominator  =  BigInteger.valueOf(p3);  [CE]  cannot  find  symbol  p3  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  [BUGGY]  denominator  =  BigInteger.valueOf(p3);  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	denominator  =  BigInteger.valueOf(p3);	denominator  =  BigInteger.valueOf(q1);  	non-compiled	[CE]  cannot  find  symbol  p3	5	None
61	[BUG]  [BUGGY]    setMaxDenominator(maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    setMaxDenominator(maxDenominator);  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	    setMaxDenominator(maxDenominator);		non-compiled	[CE]  cannot  find  symbol	10	None
62	[BUG]  [BUGGY]    if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  BigFraction  gcd  =  new  BigFraction(value,  gcd,  denominator);  }  [CE]  cannot  find  symbol  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  BigFraction  gcd  =  new  BigFraction(value,  gcd,  denominator);  }  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	    if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  BigFraction  gcd  =  new  BigFraction(value,  gcd,  denominator);  }		non-compiled	[CE]  cannot  find  symbol	10	None
63	[BUG]  [BUGGY]    setDenominator(maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    setDenominator(maxDenominator);  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	    setDenominator(maxDenominator);		non-compiled	[CE]  cannot  find  symbol	10	None
65	[BUG]  [BUGGY]    if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  throw  new  FractionConversionException( " ");  }  [CE]  cannot  find  symbol  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  throw  new  FractionConversionException( " ");  }  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	    if(value  <  0)  {  BigFraction  gcd  =  createBigFraction(value,  maxDenominator);  gcd.add(value);  }  else  {  throw  new  FractionConversionException( " ");  }		non-compiled	[CE]  cannot  find  symbol	10	None
92	[BUG]  [BUGGY]    peg(Calendar.getInstance());  [CE]  cannot  find  symbol  Calendar  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    peg(Calendar.getInstance());  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	    peg(Calendar.getInstance());		non-compiled	[CE]  cannot  find  symbol  Calendar	14	None
93	[BUG]  [BUGGY]    setValue(value,  0,  maxDenominator);  [CE]  cannot  find  symbol  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    setValue(value,  0,  maxDenominator);  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	    setValue(value,  0,  maxDenominator);		non-compiled	[CE]  cannot  find  symbol	14	None
94	[BUG]  [BUGGY]    setValue(value,  0);  [CE]  cannot  find  symbol  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    setValue(value,  0);  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	    setValue(value,  0);		non-compiled	[CE]  cannot  find  symbol	14	None
95	[BUG]  [BUGGY]    setValue(value,  0,  maxDenominator,  100);  [CE]  cannot  find  symbol  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]    setValue(value,  0,  maxDenominator,  100);  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	145	145	2	replace	    setValue(value,  0,  maxDenominator,  100);		non-compiled	[CE]  cannot  find  symbol	14	None
124	[BUG]  [BUGGY]  this.denominator  =(int)q3;  [CE]  cannot  find  symbol  q3  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;  [BUGGY]  this.denominator  =(int)q3;  [BUGGY]  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	this.denominator  =(int)q3;	this.denominator  =  (int)  q1;  	non-compiled	[CE]  cannot  find  symbol  q3	19	None
151	[BUG]  [BUGGY]    p2  =  Math.floor(p2);  [CE]  possible  loss  of  precision  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]    p2  =  Math.floor(p2);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	    p2  =  Math.floor(p2);		non-compiled	[CE]  possible  loss  of  precision	16	None
152	[BUG]  [BUGGY]    p2  =  Math.floor(p2);  q2  =  Math.floor(q1);  [CE]  possible  loss  of  precision  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]    p2  =  Math.floor(p2);  q2  =  Math.floor(q1);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	    p2  =  Math.floor(p2);  q2  =  Math.floor(q1);		non-compiled	[CE]  possible  loss  of  precision	16	None
153	[BUG]  [BUGGY]    p2  =  Math.floor(p2);  p2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]    p2  =  Math.floor(p2);  p2  =  Math.floor(q2);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	    p2  =  Math.floor(p2);  p2  =  Math.floor(q2);		non-compiled	[CE]  possible  loss  of  precision	16	None
154	[BUG]  [BUGGY]    p2  =  Math.floor(p2);  q2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]    p2  =  Math.floor(p2);  q2  =  Math.floor(q2);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	    p2  =  Math.floor(p2);  q2  =  Math.floor(q2);		non-compiled	[CE]  possible  loss  of  precision	16	None
155	[BUG]  [BUGGY]    p2  =(p2  ==  0.0)?  p2  :  p2.next();  [CE]  long  cannot  be  dereferenced  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]    p2  =(p2  ==  0.0)?  p2  :  p2.next();  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	    p2  =(p2  ==  0.0)?  p2  :  p2.next();		non-compiled	[CE]  long  cannot  be  dereferenced	16	None
182	[BUG]  [BUGGY]    if(p1  <  p2)  {  if(p2  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  [BUGGY]    if(p1  <  p2)  {  if(p2  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]  this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	    if(p1  <  p2)  {  if(p2  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }		non-compiled	[CE]  illegal  start  of  expression	18	None
183	[BUG]  [BUGGY]    if(p1  <  p2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  [BUGGY]    if(p1  <  p2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]  this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	    if(p1  <  p2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }		non-compiled	[CE]  illegal  start  of  expression	18	None
184	[BUG]  [BUGGY]    if(p1  <  p2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p1;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  [BUGGY]    if(p1  <  p2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p1;  }  [BUGGY]  this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	    if(p1  <  p2)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p1;  }		non-compiled	[CE]  illegal  start  of  expression	18	None
185	[BUG]  [BUGGY]    if(p1  <  p2  &&  p2  <=  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  [BUGGY]    if(p1  <  p2  &&  p2  <=  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }  [BUGGY]  this.numerator  =  (int)  p1;  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	239	239	2	replace	    if(p1  <  p2  &&  p2  <=  0)  {  if(p1  >  maxDenominator)  {  this.numerator  =  p2;  this.denominator  =  p2;  }		non-compiled	[CE]  illegal  start  of  expression	18	None
211	[BUG]  [BUGGY]    p2  =  Math.floor(a1);  p2  =  Math.floor(q2);  [CE]  possible  loss  of  precision  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]    p2  =  Math.floor(a1);  p2  =  Math.floor(q2);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	    p2  =  Math.floor(a1);  p2  =  Math.floor(q2);		non-compiled	[CE]  possible  loss  of  precision	2	None
213	[BUG]  [BUGGY]    p2  =  Math.floor(r1);  p2  =  Math.floor(r2);  [CE]  possible  loss  of  precision  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]    p2  =  Math.floor(r1);  p2  =  Math.floor(r2);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	    p2  =  Math.floor(r1);  p2  =  Math.floor(r2);		non-compiled	[CE]  possible  loss  of  precision	2	None
215	[BUG]  [BUGGY]    p2  =  Math.floor(r1);  p2  =  Math.floor(a1);  [CE]  possible  loss  of  precision  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]    p2  =  Math.floor(r1);  p2  =  Math.floor(a1);  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	    p2  =  Math.floor(r1);  p2  =  Math.floor(a1);		non-compiled	[CE]  possible  loss  of  precision	2	None
274	[BUG]  [BUGGY]  numerator  =  BigInteger.valueOf(p);  [CE]  cannot  find  symbol  p  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  [BUGGY]  numerator  =  BigInteger.valueOf(p);  [BUGGY]  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	numerator  =  BigInteger.valueOf(p);	numerator  =  BigInteger.valueOf(p1);  	non-compiled	[CE]  cannot  find  symbol  p	3	None
302	[BUG]  [BUGGY]    this(value,  0,  value.doubleValue(),  maxDenominator);  [CE]  double  cannot  be  dereferenced  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    this(value,  0,  value.doubleValue(),  maxDenominator);  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	    this(value,  0,  value.doubleValue(),  maxDenominator);		non-compiled	[CE]  double  cannot  be  dereferenced	12	None
303	[BUG]  [BUGGY]    this(value,  0,  value.intValue(),  maxDenominator);  [CE]  double  cannot  be  dereferenced  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    this(value,  0,  value.intValue(),  maxDenominator);  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	    this(value,  0,  value.intValue(),  maxDenominator);		non-compiled	[CE]  double  cannot  be  dereferenced	12	None
304	[BUG]  [BUGGY]    this(value,  0,  value.intValue(),  DEFAULT_EPSILON,  maxDenominator);  [CE]  double  cannot  be  dereferenced  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    this(value,  0,  value.intValue(),  DEFAULT_EPSILON,  maxDenominator);  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	    this(value,  0,  value.intValue(),  DEFAULT_EPSILON,  maxDenominator);		non-compiled	[CE]  double  cannot  be  dereferenced	12	None
305	[BUG]  [BUGGY]    this(value,  0,  value.intValue(),  DEFAULT_EPSILON,  denominator);  [CE]  double  cannot  be  dereferenced  [CONTEXT]  public  Fraction(double  value,  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    this(value,  0,  value.intValue(),  DEFAULT_EPSILON,  denominator);  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,int)  double  value  int  maxDenominator  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  double  DEFAULT_EPSILON  epsilon  value  long  serialVersionUID  int  denominator  maxDenominator  maxIterations  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	144	144	2	replace	    this(value,  0,  value.intValue(),  DEFAULT_EPSILON,  denominator);		non-compiled	[CE]  double  cannot  be  dereferenced	12	None
334	[BUG]  [BUGGY]  this(value,  0,  maximumDenominator,  100);  [CE]  cannot  find  symbol  maximumDenominator  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]  this(value,  0,  maximumDenominator,  100);  [BUGGY]  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	this(value,  0,  maximumDenominator,  100);	this(value,  0,  maxDenominator,  100);  	non-compiled	[CE]  cannot  find  symbol  maximumDenominator	7	None
361	[BUG]  [BUGGY]    if(numerator  >  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  [BUGGY]    if(numerator  >  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [BUGGY]  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	    if(numerator  >  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }		non-compiled	[CE]  illegal  start  of  expression	6	None
362	[BUG]  [BUGGY]    if(numerator  >=  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  [BUGGY]    if(numerator  >=  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }  [BUGGY]  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	    if(numerator  >=  0)  {  if(maxDenominator  ==  0)  {  numerator  =  BigInteger.valueOf(maxDenominator);  }		non-compiled	[CE]  illegal  start  of  expression	6	None
363	[BUG]  [BUGGY]    if(numerator  >  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  [BUGGY]    if(numerator  >  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }  [BUGGY]  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	    if(numerator  >  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q2);  }		non-compiled	[CE]  illegal  start  of  expression	6	None
364	[BUG]  [BUGGY]    if(numerator  >  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  [BUGGY]    if(numerator  >  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p0);  }  [BUGGY]  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	    if(numerator  >  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(p0);  }		non-compiled	[CE]  illegal  start  of  expression	6	None
365	[BUG]  [BUGGY]    if(numerator  >  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q3);  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  numerator  =  BigInteger.valueOf(p1);  [BUGGY]    if(numerator  >  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q3);  }  [BUGGY]  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	333	333	2	replace	    if(numerator  >  maxDenominator)  {  if(maxDenominator  <  0)  {  numerator  =  BigInteger.valueOf(q3);  }		non-compiled	[CE]  illegal  start  of  expression	6	None
391	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  [BUGGY]  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(0.0,  p2,  q2);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	1	2
392	[BUG]  [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(0.0,  p2,  q2);  [BUGGY]  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(0.0,  p2,  q2);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	1	2
392	[BUG]  [BUGGY]  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  p2,  q2);  [BUGGY]  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	add	throw  new  FractionConversionException(n,  p2,  q2);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	1	2
393	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p2,  q2);  [FE]  FractionConversionException  testDigitLimitConstructor  [CONTEXT]  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  p2,  q2);  [BUGGY]  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.7071067811865475	306	306	2	replace	throw  new  FractionConversionException(n,  p2,  q2);	throw  new  FractionConversionException(value,  p2,  q2);  	compilable	  [FE]  FractionConversionException  testDigitLimitConstructor	1	2
422	[BUG]  [BUGGY]    setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator))?  ONE  :  ONE;  [CE]  not  a  statement  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator))?  ONE  :  ONE;  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	    setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator))?  ONE  :  ONE;		non-compiled	[CE]  not  a  statement	8	None
423	[BUG]  [BUGGY]    setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator):  0;  [CE]  ')'  expected  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator):  0;  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	    setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator):  0;		non-compiled	[CE]  ')'  expected	8	None
424	[BUG]  [BUGGY]    setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator));  [CE]  cannot  find  symbol  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator));  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	    setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator));		non-compiled	[CE]  cannot  find  symbol	8	None
425	[BUG]  [BUGGY]    setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator))?  ONE  :  ZERO;  [CE]  not  a  statement  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  [BUGGY]    setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator))?  ONE  :  ZERO;  [BUGGY]  this(value,  0,  maxDenominator,  100);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	356	356	2	replace	    setDenominator((  int)Math.abs(value)>  Math.abs(maxDenominator))?  ONE  :  ZERO;		non-compiled	[CE]  not  a  statement	8	None
452	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  value,  p2,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(int,double,long,long)  [CONTEXT]  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  value,  p2,  q2);  [BUGGY]  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	215	215	2	replace	throw  new  FractionConversionException(n,  value,  p2,  q2);	throw  new  FractionConversionException(value,  p2,  q2);  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(int,double,long,long)	15	None
481	[BUG]  [BUGGY]    numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  [CE]  cannot  find  symbol  q3  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  [BUGGY]    numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);  [BUGGY]  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	    numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q3);		non-compiled	[CE]  cannot  find  symbol  q3	4	None
484	[BUG]  [BUGGY]    BigInteger  p1  =  BigInteger.valueOf(p2);  [CE]  variable  p1  is  already  defined  in  constructor  BigFraction(double,double,int,int)  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  [BUGGY]    BigInteger  p1  =  BigInteger.valueOf(p2);  [BUGGY]  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	    BigInteger  p1  =  BigInteger.valueOf(p2);		non-compiled	[CE]  variable  p1  is  already  defined  in  constructor  BigFraction(double,double,int,int)	4	None
485	[BUG]  [BUGGY]    if(p2  >  maxDenominator)  {  if(p2  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (q2  <  maxDenominator)  {  numerator  =  BigInteger.valueOf(p2);  denominator  =  BigInteger.valueOf(q2);  }  else  {  [BUGGY]    if(p2  >  maxDenominator)  {  if(p2  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  numerator  =  BigInteger.valueOf(p1);  denominator  =  BigInteger.valueOf(q1);  }  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	332	332	2	replace	    if(p2  >  maxDenominator)  {  if(p2  <  0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	4	None
512	[BUG]  [BUGGY]    this.numerator  =(int)p1;  [CE]  variable  numerator  might  already  have  been  assigned  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;  [BUGGY]    this.numerator  =(int)p1;  [BUGGY]  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	    this.numerator  =(int)p1;		non-compiled	[CE]  variable  numerator  might  already  have  been  assigned	20	None
513	[BUG]  [BUGGY]    this.denominator  =(int)p1  -  1;  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;  [BUGGY]    this.denominator  =(int)p1  -  1;  [BUGGY]  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	    this.denominator  =(int)p1  -  1;		non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	20	None
514	[BUG]  [BUGGY]    this.denominator  =  Math.abs(q2  -  q1);  [CE]  possible  loss  of  precision  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;  [BUGGY]    this.denominator  =  Math.abs(q2  -  q1);  [BUGGY]  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	    this.denominator  =  Math.abs(q2  -  q1);		non-compiled	[CE]  possible  loss  of  precision	20	None
515	[BUG]  [BUGGY]    this.denominator  =(int)q2  -  1;  [CE]  variable  denominator  might  already  have  been  assigned  [CONTEXT]  if  (q2  <  maxDenominator)  {  this.numerator  =  (int)  p2;  this.denominator  =  (int)  q2;  }  else  {  this.numerator  =  (int)  p1;  [BUGGY]    this.denominator  =(int)q2  -  1;  [BUGGY]  this.denominator  =  (int)  q1;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.5	240	240	2	replace	    this.denominator  =(int)q2  -  1;		non-compiled	[CE]  variable  denominator  might  already  have  been  assigned	20	None
574	[BUG]  [BUGGY]  setDenominator((  int)Math.abs(value)/  Math.abs(maxDenominator));  [CE]  illegal  start  of  expression  [CONTEXT]  public  BigFraction(final  double  value,  final  int  maxDenominator)  throws  FractionConversionException  {  this(value,  0,  maxDenominator,  100);  [BUGGY]  setDenominator((  int)Math.abs(value)/  Math.abs(maxDenominator));  [BUGGY]    [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,int)  final  double  value  final  int  maxDenominator  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  value  int  maxDenominator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.5	357	357	2	replace	setDenominator((  int)Math.abs(value)/  Math.abs(maxDenominator));	}  	non-compiled	[CE]  illegal  start  of  expression	9	None
