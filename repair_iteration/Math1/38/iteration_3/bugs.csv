bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if((  a1  <  0.0)||(a1  >  0.0)||(a2  <  0.0)||(a1  >  0.0))  {  [CE]  cannot  find  symbol  a2  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a1  <  0.0)||(a1  >  0.0)||(a2  <  0.0)||(a1  >  0.0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((  a1  <  0.0)||(a1  >  0.0)||(a2  <  0.0)||(a1  >  0.0))  {	  if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    if((    a1    <    0.0)||(a1    >    0.0)||(a2    <    0.0)||(a1    >    0.0))    {    	non-compiled	[CE]  cannot  find  symbol  a2	41	None	replace
2	[BUG]  [BUGGY]  if(a1  <  0.0  ||  a1  >  0.0  ||  a1  <  0.0  ||  a2  >  0.0)  {  [CE]  cannot  find  symbol  a2  [FE]          FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(a1  <  0.0  ||  a1  >  0.0  ||  a1  <  0.0  ||  a2  >  0.0)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(a1  <  0.0  ||  a1  >  0.0  ||  a1  <  0.0  ||  a2  >  0.0)  {	  if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    if((    a1    <    0.0)||(a1    >    0.0)||(a2    <    0.0)||(a1    >    0.0))    {    	non-compiled	[CE]  cannot  find  symbol  a2	41	None	replace
3	[BUG]  [BUGGY]  if((  a0  <  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a2  >  0.0))  {  [CE]  cannot  find  symbol  a2  [FE]          FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a0  <  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a2  >  0.0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((  a0  <  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a2  >  0.0))  {	  if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a2    >    0.0))    {    	non-compiled	[CE]  cannot  find  symbol  a2	34	None	replace
4	[BUG]  [BUGGY]  if(n  <  maxDenominator)  {  if(n  <  maxDenominator)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(n  <  maxDenominator)  {  if(n  <  maxDenominator)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(n    <    maxDenominator)    {    if(n  <  maxDenominator)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
5	[BUG]  [BUGGY]  if(n  <  maxDenominator)  {  If(n  <  maxDenominator)  {  [CE]  ';'  expected  [FE]      FractionConversionException    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(n  <  maxDenominator)  {  If(n  <  maxDenominator)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(n    <    maxDenominator)    {    If(n  <  maxDenominator)  {	  	non-compiled	[CE]  ';'  expected	39	None	add
6	[BUG]  [BUGGY]  if(!stop  &&(value  <  =  0.0)||(value  >  maxDenominator))  {  [CE]  illegal  start  of  expression  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(!stop  &&(value  <  =  0.0)||(value  >  maxDenominator))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(!stop  &&(value  <  =  0.0)||(value  >  maxDenominator))  {	  if(!stop    &&(value    <    =    0.0)||(value    >    epsilon))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
7	[BUG]  [BUGGY]  if(!stop  ||(value  <  =  0.0)||(value  >  epsilon))  {  [CE]  illegal  start  of  expression  [FE]          FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(!stop  ||(value  <  =  0.0)||(value  >  epsilon))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(!stop  ||(value  <  =  0.0)||(value  >  epsilon))  {	  if(!stop    &&(value    <    =    0.0)||(value    >    epsilon))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
8	[BUG]  [BUGGY]  if(convergent  >  maxIterations)  {  if(convergent  >  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(convergent  >  maxIterations)  {  if(convergent  >  maxIterations)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(convergent    >    maxIterations)    {    if(convergent  >  maxIterations)  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
9	[BUG]  [BUGGY]  if(convergent  >  maxIterations)  {  If(convergent  >  maxIterations)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(convergent  >  maxIterations)  {  If(convergent  >  maxIterations)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(convergent    >    maxIterations)    {    If(convergent  >  maxIterations)  {	  	non-compiled	[CE]  ';'  expected	36	None	add
10	[BUG]  [BUGGY]  BigInteger  r1  =(BigInteger)Math.floor(convergent);  [CE]  while  expected  [FE]                  FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  BigInteger  r1  =(BigInteger)Math.floor(convergent);  [BUGGY]      if  ((n  <  maxIterations)  &&    (FastMath.abs(convergent  -  value)  >  epsilon)  &&        (q2  <  maxDenominator))  {  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	BigInteger  r1  =(BigInteger)Math.floor(convergent);	  BigInteger    r1    =(BigInteger)Math.floor(r2);    	non-compiled	[CE]  while  expected	9	None	replace
11	[BUG]  [BUGGY]  BigInteger  r1  =(BigInteger)Math.floor(r1);  [CE]  while  expected  [FE]                    FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  BigInteger  r1  =(BigInteger)Math.floor(r1);  [BUGGY]      if  ((n  <  maxIterations)  &&    (FastMath.abs(convergent  -  value)  >  epsilon)  &&        (q2  <  maxDenominator))  {  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	BigInteger  r1  =(BigInteger)Math.floor(r1);	  BigInteger    r1    =(BigInteger)Math.floor(r2);    	non-compiled	[CE]  while  expected	9	None	replace
12	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a1  <  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	add	if((  a1  <  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  <  0.0)||(a1  >  0.0))  {	  if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    	compilable	  [FE]  FractionConversionException  	5	6	replace
13	[BUG]  [BUGGY]  if((  a1  <  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a1  <  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((  a1  <  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  <  0.0)||(a1  >  0.0))  {	  if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    	compilable	  [FE]  FractionConversionException  	5	6	replace
14	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a1  <  0.0)||(a1  >  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	add	if((  a1  <  0.0)||(a1  >  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {	  if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    	compilable	  [FE]  FractionConversionException  	5	6	replace
15	[BUG]  [BUGGY]  if((  a1  <  0.0)||(a1  >  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a1  <  0.0)||(a1  >  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((  a1  <  0.0)||(a1  >  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {	  if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    	compilable	  [FE]  FractionConversionException  	5	6	replace
16	[BUG]  [BUGGY]  if(!stop  &&  value  <  =  epsilon)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(!stop  &&  value  <  =  epsilon)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(!stop  &&  value  <  =  epsilon)  {	  if(!stop    &&    value    >    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
17	[BUG]  [BUGGY]  if(convergent  <  =  epsilon)  {  [CE]  illegal  start  of  expression  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(convergent  <  =  epsilon)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(convergent  <  =  epsilon)  {	  if(convergent    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
18	[BUG]  [BUGGY]  if(convergent  <  =  value)  {  [CE]  illegal  start  of  expression  [FE]          FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(convergent  <  =  value)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(convergent  <  =  value)  {	  if(convergent    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
19	[BUG]  [BUGGY]  if(n  <  epsilon)  {  If(n  <  maxIterations)  {  [CE]  ';'  expected  [FE]          FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(n  <  epsilon)  {  If(n  <  maxIterations)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(n  <  epsilon)  {  If(n  <  maxIterations)  {	  if(n    <    maxIterations)    {    If(n    <    maxIterations)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
20	[BUG]  [BUGGY]  If(n  <  maxIterations)  {  [CE]  ';'  expected  [FE]            FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  If(n  <  maxIterations)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	If(n  <  maxIterations)  {	  if(n    <    maxIterations)    {    If(n    <    maxIterations)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
21	[BUG]  [BUGGY]  if((  a0  <  =  0.0)||(a1  >  0.0)||(a1  <  =  0.0)||(a1  >  0.0))  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a0  <  =  0.0)||(a1  >  0.0)||(a1  <  =  0.0)||(a1  >  0.0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((  a0  <  =  0.0)||(a1  >  0.0)||(a1  <  =  0.0)||(a1  >  0.0))  {	  if((    a0    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
22	[BUG]  [BUGGY]  if((  n  <  maxIterations)&&  (FastMath.abs(value  -  convergent)>  epsilon)&&  (q2  <  =  0))  {  [CE]  illegal  start  of  expression  [FE]              FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  n  <  maxIterations)&&  (FastMath.abs(value  -  convergent)>  epsilon)&&  (q2  <  =  0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((  n  <  maxIterations)&&  (FastMath.abs(value  -  convergent)>  epsilon)&&  (q2  <  =  0))  {	  if((    n    <    maxIterations)&&    (FastMath.abs(convergent    -    value)    >    epsilon)    &&    (q2    <    =    0))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
23	[BUG]  [BUGGY]  if((  n  <  =  maxIterations)&&  (FastMath.abs(convergent  -  value)>  epsilon)&&  (q2  <  =  0))  {  [CE]  illegal  start  of  expression  [FE]                FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  n  <  =  maxIterations)&&  (FastMath.abs(convergent  -  value)>  epsilon)&&  (q2  <  =  0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((  n  <  =  maxIterations)&&  (FastMath.abs(convergent  -  value)>  epsilon)&&  (q2  <  =  0))  {	  if((    n    <    maxIterations)&&    (FastMath.abs(convergent    -    value)    >    epsilon)    &&    (q2    <    =    0))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
24	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    AssertionError    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(convergent  >  epsilon)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	add	if(convergent  >  epsilon)  {	  if(convergent    <    epsilon)    {    	compilable	  [FE]  FractionConversionException  	20	6	replace
25	[BUG]  [BUGGY]  if(convergent  >  epsilon)  {  [FE]  FractionConversionException  [FE]    AssertionError    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(convergent  >  epsilon)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(convergent  >  epsilon)  {	  if(convergent    <    epsilon)    {    	compilable	  [FE]  FractionConversionException  	20	6	replace
26	[BUG]  [BUGGY]  BigInteger  n  =(BigInteger)Math.floor(r2);  [CE]  while  expected  [FE]                FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  BigInteger  n  =(BigInteger)Math.floor(r2);  [BUGGY]      if  ((n  <  maxIterations)  &&    (FastMath.abs(convergent  -  value)  >  epsilon)  &&        (q2  <  maxDenominator))  {  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	BigInteger  n  =(BigInteger)Math.floor(r2);	  BigInteger    n    =(BigInteger)Math.floor(convergent);    	non-compiled	[CE]  while  expected	8	None	replace
27	[BUG]  [BUGGY]  if((  a1  >=  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  if((  a1  >=  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a1  >=  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  if((  a1  >=  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((    a1    >=    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    if((  a1  >=  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
28	[BUG]  [BUGGY]  if((  a1  >=  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  if((  a1  >>  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  [CE]  illegal  start  of  expression  [FE]      FractionConversionException    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a1  >=  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  if((  a1  >>  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((    a1    >=    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    if((  a1  >>  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
29	[BUG]  [BUGGY]  if((  a1  >=  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  if((  a1!=  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  [CE]  illegal  start  of  expression  [FE]        FractionConversionException    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a1  >=  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  if((  a1!=  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((    a1    >=    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    if((  a1!=  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
30	[BUG]  [BUGGY]  BigInteger  n  =  BigInteger.parseBigInteger(convergent);  [CE]  while  expected  [FE]            FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  BigInteger  n  =  BigInteger.parseBigInteger(convergent);  [BUGGY]      if  ((n  <  maxIterations)  &&    (FastMath.abs(convergent  -  value)  >  epsilon)  &&        (q2  <  maxDenominator))  {  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	BigInteger  n  =  BigInteger.parseBigInteger(convergent);	  BigInteger    n    =    BigInteger.valueOf(0);    	non-compiled	[CE]  while  expected	23	None	replace
31	[BUG]  [BUGGY]  if((  a0  <  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  if((  a0  <  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a0  <  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  if((  a0  <  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((    a0    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    if((  a0  <  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
32	[BUG]  [BUGGY]  if(n  <  epsilon)  {  if(n  <  epsilon)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(n  <  epsilon)  {  if(n  <  epsilon)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(n    <    epsilon)    {    if(n  <  epsilon)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
33	[BUG]  [BUGGY]  if(n  <  epsilon)  {  If(n  <  epsilon)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(n  <  epsilon)  {  If(n  <  epsilon)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(n    <    epsilon)    {    If(n  <  epsilon)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
34	[BUG]  [BUGGY]  if(convergent  <  epsilon)  {  if(convergent  <  epsilon)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(convergent  <  epsilon)  {  if(convergent  <  epsilon)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(convergent    <    epsilon)    {    if(convergent  <  epsilon)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
35	[BUG]  [BUGGY]  if(convergent  <  epsilon)  {  If(convergent  <  epsilon)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(convergent  <  epsilon)  {  If(convergent  <  epsilon)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(convergent    <    epsilon)    {    If(convergent  <  epsilon)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
36	[BUG]  [BUGGY]  if((  n  <  =  maxIterations)&&  (FastMath.abs(convergent  -  value)>  epsilon)&&  (maxDenominator  <  =  1))  {  [CE]  illegal  start  of  expression  [FE]              FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  n  <  =  maxIterations)&&  (FastMath.abs(convergent  -  value)>  epsilon)&&  (maxDenominator  <  =  1))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((  n  <  =  maxIterations)&&  (FastMath.abs(convergent  -  value)>  epsilon)&&  (maxDenominator  <  =  1))  {	  if((    n    <    maxIterations)&&    (FastMath.abs(convergent    -    value)>    epsilon)    &&    (maxDenominator    <    =    1))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
37	[BUG]  [BUGGY]  if(!stop  &&!denominator.equals(convergent))  {  [CE]  variable  denominator  might  not  have  been  initialized  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(!stop  &&!denominator.equals(convergent))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(!stop  &&!denominator.equals(convergent))  {	  if(!stop    &&!converter.equals(convergent))    {    	non-compiled	[CE]  variable  denominator  might  not  have  been  initialized	10	None	replace
38	[BUG]  [BUGGY]  if(!stop  &&!numerator.equals(convergent))  {  [CE]  variable  numerator  might  not  have  been  initialized  [FE]          FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(!stop  &&!numerator.equals(convergent))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(!stop  &&!numerator.equals(convergent))  {	  if(!stop    &&!converter.equals(convergent))    {    	non-compiled	[CE]  variable  numerator  might  not  have  been  initialized	10	None	replace
39	[BUG]  [BUGGY]  BigInteger  r0  =(BigInteger)FastMath.floor(r2);  [CE]  while  expected  [FE]              FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  BigInteger  r0  =(BigInteger)FastMath.floor(r2);  [BUGGY]      if  ((n  <  maxIterations)  &&    (FastMath.abs(convergent  -  value)  >  epsilon)  &&        (q2  <  maxDenominator))  {  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	BigInteger  r0  =(BigInteger)FastMath.floor(r2);	  BigInteger    r0    =(BigInteger)FastMath.floor(r1);    	non-compiled	[CE]  while  expected	38	None	replace
40	[BUG]  [BUGGY]  if(null  <  =  maxDenominator)  {  if(!stop)  {  [CE]  illegal  start  of  expression  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(null  <  =  maxDenominator)  {  if(!stop)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(null  <  =  maxDenominator)  {  if(!stop)  {	  if(!stop)    {    if(!stop)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
41	[BUG]  [BUGGY]  if(null!=  epsilon)  {  if(!stop)  {  [CE]  while  expected  [FE]          FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(null!=  epsilon)  {  if(!stop)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(null!=  epsilon)  {  if(!stop)  {	  if(!stop)    {    if(!stop)    {    	non-compiled	[CE]  while  expected	25	None	replace
42	[BUG]  [BUGGY]  BigInteger  n  =(BigInteger)Factory.floor(r0);  [CE]  while  expected  [FE]                  FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  BigInteger  n  =(BigInteger)Factory.floor(r0);  [BUGGY]      if  ((n  <  maxIterations)  &&    (FastMath.abs(convergent  -  value)  >  epsilon)  &&        (q2  <  maxDenominator))  {  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	BigInteger  n  =(BigInteger)Factory.floor(r0);	  BigInteger    n    =(BigInteger)Factory.floor(r1);    	non-compiled	[CE]  while  expected	22	None	replace
43	[BUG]  [BUGGY]  if(stop)  {  If(!stop)  {  [CE]  ';'  expected  [FE]          FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(stop)  {  If(!stop)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(stop)  {  If(!stop)  {	  if(!stop)    {    If(!stop)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
44	[BUG]  [BUGGY]  if(value  <  maxIterations)  {  if(convergent  <  epsilon)  {  [CE]  while  expected  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(value  <  maxIterations)  {  if(convergent  <  epsilon)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(value  <  maxIterations)  {  if(convergent  <  epsilon)  {	  if(convergent    <    maxIterations)    {    if(convergent    <    maxIterations)    {    	non-compiled	[CE]  while  expected	12	None	replace
45	[BUG]  [BUGGY]  If(convergent  <  epsilon)  {  [CE]  ';'  expected  [FE]          FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  If(convergent  <  epsilon)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	If(convergent  <  epsilon)  {	  if(convergent    <    maxIterations)    {    If(convergent    <    maxIterations)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
46	[BUG]  [BUGGY]  If(convergent  <  maxIterations)  {  [CE]  ';'  expected  [FE]            FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  If(convergent  <  maxIterations)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	If(convergent  <  maxIterations)  {	  if(convergent    <    maxIterations)    {    If(convergent    <    maxIterations)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
47	[BUG]  [BUGGY]  if(!stop  &&  value  >  epsilon)  {  if(!stop  &&  value  >  epsilon)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(!stop  &&  value  >  epsilon)  {  if(!stop  &&  value  >  epsilon)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(!stop    &&    value    >    epsilon)    {    if(!stop  &&  value  >  epsilon)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
48	[BUG]  [BUGGY]  if(!stop  &&  value  >  epsilon)  {  If(!stop  &&  value  >  epsilon)  {  [CE]  ';'  expected  [FE]      FractionConversionException    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(!stop  &&  value  >  epsilon)  {  If(!stop  &&  value  >  epsilon)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(!stop    &&    value    >    epsilon)    {    If(!stop  &&  value  >  epsilon)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
49	[BUG]  [BUGGY]  if(n  <  =  epsilon)  {  [CE]  illegal  start  of  expression  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(n  <  =  epsilon)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(n  <  =  epsilon)  {	  if(n    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
50	[BUG]  [BUGGY]  if(value  <  maxDenominator)  {  if(n  <  maxIterations)  {  [CE]  while  expected  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(value  <  maxDenominator)  {  if(n  <  maxIterations)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(value  <  maxDenominator)  {  if(n  <  maxIterations)  {	  if(n    <    maxIterations)    {    if(n    <    maxIterations)    {    	non-compiled	[CE]  while  expected	14	None	replace
51	[BUG]  [BUGGY]  if(n  <  =  maxIterations)  {  if(n  <  =  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]          FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(n  <  =  maxIterations)  {  if(n  <  =  maxIterations)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(n  <  =  maxIterations)  {  if(n  <  =  maxIterations)  {	  if(n    <    maxIterations)    {    if(n    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
52	[BUG]  [BUGGY]  if(n  <  =  maxDenominator)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(n  <  =  maxDenominator)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(n  <  =  maxDenominator)  {	  if(n    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
53	[BUG]  [BUGGY]  if(!stop  &&!converter.equals(value))  {  [CE]  cannot  find  symbol  converter  [FE]          FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(!stop  &&!converter.equals(value))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(!stop  &&!converter.equals(value))  {	  if(!stop    &&!converter.equals(gcd))    {    	non-compiled	[CE]  cannot  find  symbol  converter	11	None	replace
54	[BUG]  [BUGGY]  if(!stop  &&!converter.equals(numerator))  {  [CE]  cannot  find  symbol  converter  [FE]            FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(!stop  &&!converter.equals(numerator))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(!stop  &&!converter.equals(numerator))  {	  if(!stop    &&!converter.equals(gcd))    {    	non-compiled	[CE]  cannot  find  symbol  converter	11	None	replace
55	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(!stop  &&  value  <  maxDenominator)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	add	if(!stop  &&  value  <  maxDenominator)  {	  if(!stop    &&    value    <    =    maxDenominator)    {    	compilable	  [FE]  FractionConversionException  	28	6	replace
56	[BUG]  [BUGGY]  if(!stop  &&  value  <  maxDenominator)  {  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(!stop  &&  value  <  maxDenominator)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(!stop  &&  value  <  maxDenominator)  {	  if(!stop    &&    value    <    =    maxDenominator)    {    	compilable	  [FE]  FractionConversionException  	28	6	replace
57	[BUG]  [BUGGY]  BigInteger  r0  =(BigInteger)Math.floor(convergent);  [CE]  while  expected  [FE]                FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  BigInteger  r0  =(BigInteger)Math.floor(convergent);  [BUGGY]      if  ((n  <  maxIterations)  &&    (FastMath.abs(convergent  -  value)  >  epsilon)  &&        (q2  <  maxDenominator))  {  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	BigInteger  r0  =(BigInteger)Math.floor(convergent);	  BigInteger    r0    =(BigInteger)Math.floor(r1);    	non-compiled	[CE]  while  expected	35	None	replace
58	[BUG]  [BUGGY]  if((  a0  <  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  if((  a0  <  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a2  >  0.0))  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a0  <  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  if((  a0  <  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a2  >  0.0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((    a0    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    if((  a0  <  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a2  >  0.0))  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
59	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(convergent  <  maxDenominator)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	add	if(convergent  <  maxDenominator)  {	  if(convergent    <    =    maxIterations)    {    	compilable	  [FE]  FractionConversionException  	18	6	replace
60	[BUG]  [BUGGY]  if(convergent  <  maxDenominator)  {  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(convergent  <  maxDenominator)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(convergent  <  maxDenominator)  {	  if(convergent    <    =    maxIterations)    {    	compilable	  [FE]  FractionConversionException  	18	6	replace
61	[BUG]  [BUGGY]  if(n  <  epsilon)  {  If(n  >=  maxIterations)  {  [CE]  ';'  expected  [FE]          FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(n  <  epsilon)  {  If(n  >=  maxIterations)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(n  <  epsilon)  {  If(n  >=  maxIterations)  {	  if(n    <    maxIterations)    {    If(n    <    maxIterations)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
62	[BUG]  [BUGGY]  if(n  <  epsilon)  {  If(n  >  maxIterations)  {  [CE]  ';'  expected  [FE]            FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(n  <  epsilon)  {  If(n  >  maxIterations)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(n  <  epsilon)  {  If(n  >  maxIterations)  {	  if(n    <    maxIterations)    {    If(n    <    maxIterations)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
63	[BUG]  [BUGGY]  if((  a1  <  0.0)||(a1  >  0.0)||(a1  >  0.0)||(a2  >  0.0))  {  [CE]  cannot  find  symbol  a2  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a1  <  0.0)||(a1  >  0.0)||(a1  >  0.0)||(a2  >  0.0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((  a1  <  0.0)||(a1  >  0.0)||(a1  >  0.0)||(a2  >  0.0))  {	  if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a2    >    0.0))    {    	non-compiled	[CE]  cannot  find  symbol  a2	27	None	replace
64	[BUG]  [BUGGY]  if((  a1  <  0.0)||(a1  >  0.0)||(a2  >  0.0))  {  [CE]  cannot  find  symbol  a2  [FE]          FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a1  <  0.0)||(a1  >  0.0)||(a2  >  0.0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((  a1  <  0.0)||(a1  >  0.0)||(a2  >  0.0))  {	  if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a2    >    0.0))    {    	non-compiled	[CE]  cannot  find  symbol  a2	27	None	replace
65	[BUG]  [BUGGY]  BigInteger  r0  =(BigInteger)FastMath.floor(convergent);  [CE]  while  expected  [FE]              FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  BigInteger  r0  =(BigInteger)FastMath.floor(convergent);  [BUGGY]      if  ((n  <  maxIterations)  &&    (FastMath.abs(convergent  -  value)  >  epsilon)  &&        (q2  <  maxDenominator))  {  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	BigInteger  r0  =(BigInteger)FastMath.floor(convergent);	  BigInteger    r0    =(BigInteger)FastMath.floor(r1);    	non-compiled	[CE]  while  expected	38	None	replace
66	[BUG]  [BUGGY]  if((  n  <  maxIterations)&&  (FastMath.abs(value  -  value)>  epsilon)&&  (maxDenominator  <  =  1))  {  [CE]  illegal  start  of  expression  [FE]              FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  n  <  maxIterations)&&  (FastMath.abs(value  -  value)>  epsilon)&&  (maxDenominator  <  =  1))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((  n  <  maxIterations)&&  (FastMath.abs(value  -  value)>  epsilon)&&  (maxDenominator  <  =  1))  {	  if((    n    <    maxIterations)&&    (FastMath.abs(convergent    -    value)>    epsilon)    &&    (maxDenominator    <    =    1))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
67	[BUG]  [BUGGY]  if(convergent  >  maxIterations)  {  If(convergent  <  maxIterations)  {  [CE]  ';'  expected  [FE]          FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(convergent  >  maxIterations)  {  If(convergent  <  maxIterations)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(convergent  >  maxIterations)  {  If(convergent  <  maxIterations)  {	  if(convergent    <    maxIterations)    {    If(convergent    <    maxIterations)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
68	[BUG]  [BUGGY]  if(convergent  <  =  maxIterations)  {  If(convergent  <  =  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]            FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(convergent  <  =  maxIterations)  {  If(convergent  <  =  maxIterations)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(convergent  <  =  maxIterations)  {  If(convergent  <  =  maxIterations)  {	  if(convergent    <    maxIterations)    {    If(convergent    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
69	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a1  <  0.0)||(a1  >  0.0)||(a1  >  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	add	if((  a1  <  0.0)||(a1  >  0.0)||(a1  >  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {	  if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    	compilable	  [FE]  FractionConversionException  	5	6	replace
70	[BUG]  [BUGGY]  if((  a1  <  0.0)||(a1  >  0.0)||(a1  >  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a1  <  0.0)||(a1  >  0.0)||(a1  >  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((  a1  <  0.0)||(a1  >  0.0)||(a1  >  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {	  if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    	compilable	  [FE]  FractionConversionException  	5	6	replace
71	[BUG]  [BUGGY]  BigInteger  n  =  BigDecimal.valueOf(0);  [CE]  while  expected  [FE]            FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  BigInteger  n  =  BigDecimal.valueOf(0);  [BUGGY]      if  ((n  <  maxIterations)  &&    (FastMath.abs(convergent  -  value)  >  epsilon)  &&        (q2  <  maxDenominator))  {  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	BigInteger  n  =  BigDecimal.valueOf(0);	  BigInteger    n    =    BigInteger.valueOf(0);    	non-compiled	[CE]  while  expected	23	None	replace
72	[BUG]  [BUGGY]  if(n  <  =  maxDenominator)  {  If(!stop)  {  [CE]  illegal  start  of  expression  [FE]          FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(n  <  =  maxDenominator)  {  If(!stop)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(n  <  =  maxDenominator)  {  If(!stop)  {	  if(!stop)    {    If(!stop)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
73	[BUG]  [BUGGY]  if((  a1  >=  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a2  >  0.0))  {  [CE]  cannot  find  symbol  a2  [FE]    FractionConversionException    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a1  >=  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a2  >  0.0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((  a1  >=  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a2  >  0.0))  {	  if((    a1    >=    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    	non-compiled	[CE]  cannot  find  symbol  a2	33	None	replace
74	[BUG]  [BUGGY]  BigInteger  r1  =(BigInteger)FastMath.floor(r1);  [CE]  while  expected  [FE]                  FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  BigInteger  r1  =(BigInteger)FastMath.floor(r1);  [BUGGY]      if  ((n  <  maxIterations)  &&    (FastMath.abs(convergent  -  value)  >  epsilon)  &&        (q2  <  maxDenominator))  {  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	BigInteger  r1  =(BigInteger)FastMath.floor(r1);	  BigInteger    r1    =(BigInteger)Math.floor(r2);    	non-compiled	[CE]  while  expected	9	None	replace
75	[BUG]  [BUGGY]  if(value  <  =  maxDenominator)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(value  <  =  maxDenominator)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(value  <  =  maxDenominator)  {	  if(n    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
76	[BUG]  [BUGGY]  if((  n  <  maxIterations)&&  (FastMath.abs(convergent  -  value)>  epsilon)||(q2  <  =  0))  {  [CE]  illegal  start  of  expression  [FE]              FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  n  <  maxIterations)&&  (FastMath.abs(convergent  -  value)>  epsilon)||(q2  <  =  0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((  n  <  maxIterations)&&  (FastMath.abs(convergent  -  value)>  epsilon)||(q2  <  =  0))  {	  if((    n    <    maxIterations)&&    (FastMath.abs(convergent    -    value)    >    epsilon)    &&    (q2    <    =    0))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(value  <  epsilon)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	add	if(value  <  epsilon)  {	  if(n    <    maxIterations)    {    if(n    <    maxIterations)    {    	compilable	  [FE]  AssertionError  	14	6	replace
78	[BUG]  [BUGGY]  if(value  <  epsilon)  {  [FE]  AssertionError  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(value  <  epsilon)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(value  <  epsilon)  {	  if(n    <    maxIterations)    {    if(n    <    maxIterations)    {    	compilable	  [FE]  AssertionError  	14	6	replace
79	[BUG]  [BUGGY]  if(value  <  =  maxDenominator)  {  if(n  <  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]          FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(value  <  =  maxDenominator)  {  if(n  <  maxIterations)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(value  <  =  maxDenominator)  {  if(n  <  maxIterations)  {	  if(n    <    maxIterations)    {    if(n    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
80	[BUG]  [BUGGY]  if((  a1  <  0.0)||(a1  >  0.0)||(a2  >  0.0)||(a1  >  0.0))  {  [CE]  cannot  find  symbol  a2  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a1  <  0.0)||(a1  >  0.0)||(a2  >  0.0)||(a1  >  0.0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((  a1  <  0.0)||(a1  >  0.0)||(a2  >  0.0)||(a1  >  0.0))  {	  if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    if((    a1    <    0.0)||(a1    >    0.0)||(a2    <    0.0)||(a1    >    0.0))    {    	non-compiled	[CE]  cannot  find  symbol  a2	41	None	replace
81	[BUG]  [BUGGY]  if((  a1  >  0.0)||(a1  >  0.0)||(a2  <  0.0)||(a1  >  0.0))  {  [CE]  cannot  find  symbol  a2  [FE]          FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a1  >  0.0)||(a1  >  0.0)||(a2  <  0.0)||(a1  >  0.0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((  a1  >  0.0)||(a1  >  0.0)||(a2  <  0.0)||(a1  >  0.0))  {	  if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    if((    a1    <    0.0)||(a1    >    0.0)||(a2    <    0.0)||(a1    >    0.0))    {    	non-compiled	[CE]  cannot  find  symbol  a2	41	None	replace
82	[BUG]  [BUGGY]  if(n  >  maxDenominator)  {  if(!stop)  {  [CE]  while  expected  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(n  >  maxDenominator)  {  if(!stop)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(n  >  maxDenominator)  {  if(!stop)  {	  if(!stop)    {    if(!stop)    {    	non-compiled	[CE]  while  expected	25	None	replace
83	[BUG]  [BUGGY]  if(n  <  =  maxDenominator)  {  if(!stop)  {  [CE]  illegal  start  of  expression  [FE]          FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(n  <  =  maxDenominator)  {  if(!stop)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(n  <  =  maxDenominator)  {  if(!stop)  {	  if(!stop)    {    if(!stop)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
84	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    FractionConversionException    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(!stop  &&  value  >  maxDenominator)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	add	if(!stop  &&  value  >  maxDenominator)  {	  if(!stop    &&    value    >    epsilon)    {    	compilable	  [FE]  AssertionError  	30	6	replace
85	[BUG]  [BUGGY]  if(!stop  &&  value  >  maxDenominator)  {  [FE]  AssertionError  [FE]    FractionConversionException    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(!stop  &&  value  >  maxDenominator)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(!stop  &&  value  >  maxDenominator)  {	  if(!stop    &&    value    >    epsilon)    {    	compilable	  [FE]  AssertionError  	30	6	replace
86	[BUG]  [BUGGY]  BigInteger  n  =  BigInteger.ZERO;  [CE]  while  expected  [FE]            FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  BigInteger  n  =  BigInteger.ZERO;  [BUGGY]      if  ((n  <  maxIterations)  &&    (FastMath.abs(convergent  -  value)  >  epsilon)  &&        (q2  <  maxDenominator))  {  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	BigInteger  n  =  BigInteger.ZERO;	  BigInteger    n    =    BigInteger.valueOf(0);    	non-compiled	[CE]  while  expected	23	None	replace
87	[BUG]  [BUGGY]  if(!stop  &&  value  <  =  denominator)  {  [CE]  illegal  start  of  expression  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(!stop  &&  value  <  =  denominator)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(!stop  &&  value  <  =  denominator)  {	  if(!stop    &&    value    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
88	[BUG]  [BUGGY]  if((  n  <  maxIterations)&&  (FastMath.abs(convergent  -  value)  >  epsilon)&&  (q2  <  =  1))  {  [CE]  illegal  start  of  expression  [FE]              FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  n  <  maxIterations)&&  (FastMath.abs(convergent  -  value)  >  epsilon)&&  (q2  <  =  1))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((  n  <  maxIterations)&&  (FastMath.abs(convergent  -  value)  >  epsilon)&&  (q2  <  =  1))  {	  if((    n    <    maxIterations)&&    (FastMath.abs(convergent    -    value)>    epsilon)    &&    (maxDenominator    <    =    1))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
89	[BUG]  [BUGGY]  if((  a  <  maxIterations)&&  (FastMath.abs(convergent  -  value)>  epsilon)&&  (q2  <  =  0))  {  [CE]  illegal  start  of  expression  [FE]              FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a  <  maxIterations)&&  (FastMath.abs(convergent  -  value)>  epsilon)&&  (q2  <  =  0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((  a  <  maxIterations)&&  (FastMath.abs(convergent  -  value)>  epsilon)&&  (q2  <  =  0))  {	  if((    n    <    maxIterations)&&    (FastMath.abs(convergent    -    value)    >    epsilon)    &&    (q2    <    =    0))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
90	[BUG]  [BUGGY]  BigInteger  n  =  BigInteger.valueOf(convert);  [CE]  while  expected  [FE]            FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  BigInteger  n  =  BigInteger.valueOf(convert);  [BUGGY]      if  ((n  <  maxIterations)  &&    (FastMath.abs(convergent  -  value)  >  epsilon)  &&        (q2  <  maxDenominator))  {  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	BigInteger  n  =  BigInteger.valueOf(convert);	  BigInteger    n    =    BigInteger.valueOf(p);    	non-compiled	[CE]  while  expected	45	None	replace
91	[BUG]  [BUGGY]  if((  a1  <  0.0)||(a1  >  0.0)||(a2  >  0.0)||(a1  <  0.0))  {  [CE]  cannot  find  symbol  a2  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a1  <  0.0)||(a1  >  0.0)||(a2  >  0.0)||(a1  <  0.0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((  a1  <  0.0)||(a1  >  0.0)||(a2  >  0.0)||(a1  <  0.0))  {	  if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    if((    a1    <    0.0)||(a1    >    0.0)||(a2    <    0.0)||(a1    >    0.0))    {    	non-compiled	[CE]  cannot  find  symbol  a2	41	None	replace
92	[BUG]  [BUGGY]  if((  a1  <  0.0)||(a1  >  0.0)||(a1  >  0.0)||(a2  <  0.0)||(a1  >  0.0))  {  [CE]  cannot  find  symbol  a2  [FE]        FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a1  <  0.0)||(a1  >  0.0)||(a1  >  0.0)||(a2  <  0.0)||(a1  >  0.0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((  a1  <  0.0)||(a1  >  0.0)||(a1  >  0.0)||(a2  <  0.0)||(a1  >  0.0))  {	  if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    if((    a1    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    	non-compiled	[CE]  cannot  find  symbol  a2	5	None	replace
93	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(value  <  maxDenominator)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	add	if(value  <  maxDenominator)  {	  if(n    <    maxDenominator)    {    	compilable	  [FE]  FractionConversionException  	40	6	replace
94	[BUG]  [BUGGY]  if(value  <  maxDenominator)  {  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(value  <  maxDenominator)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(value  <  maxDenominator)  {	  if(n    <    maxDenominator)    {    	compilable	  [FE]  FractionConversionException  	40	6	replace
95	[BUG]  [BUGGY]  if(n  <  =  maxIterations)  {  If(n  <  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]          FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(n  <  =  maxIterations)  {  If(n  <  maxIterations)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(n  <  =  maxIterations)  {  If(n  <  maxIterations)  {	  if(n    <    maxIterations)    {    If(n    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
96	[BUG]  [BUGGY]  if(n  <  =  maxDenominator)  {  If(n  <  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]            FractionConversionException      [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if(n  <  =  maxDenominator)  {  If(n  <  maxIterations)  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if(n  <  =  maxDenominator)  {  If(n  <  maxIterations)  {	  if(n    <    maxIterations)    {    If(n    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
97	[BUG]  [BUGGY]  if((  a0  <  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  if((  a0  <  0.0)||(a1  >  0.0)||(a2  <  0.0)||(a1  >  0.0))  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;      [BUGGY]  if((  a0  <  0.0)||(a1  >  0.0)||(a1  <  0.0)||(a1  >  0.0))  {  if((  a0  <  0.0)||(a1  >  0.0)||(a2  <  0.0)||(a1  >  0.0))  {  [BUGGY]      (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	310	312	2	replace	if((    a0    <    0.0)||(a1    >    0.0)||(a1    <    0.0)||(a1    >    0.0))    {    if((  a0  <  0.0)||(a1  >  0.0)||(a2  <  0.0)||(a1  >  0.0))  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
