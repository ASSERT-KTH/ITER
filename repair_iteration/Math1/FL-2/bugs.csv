bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] this(value, 0, maxDenominator, 100); [FE] FractionConversionException [CONTEXT] public Fraction(double value, int maxDenominator) throws FractionConversionException { [BUGGY] this(value, 0, maxDenominator, 100); [BUGGY] } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,int)  double value int maxDenominator [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON epsilon value long serialVersionUID int denominator maxDenominator maxIterations numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	144	144	1	replace	
2	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] public Fraction(double value, int maxDenominator) throws FractionConversionException { [BUGGY] [BUGGY] this(value, 0, maxDenominator, 100); } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,int)  double value int maxDenominator [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON epsilon value long serialVersionUID int denominator maxDenominator maxIterations numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	144	144	1	add	
3	[BUG] [BUGGY] } [FE] FractionConversionException [CONTEXT] public Fraction(double value, int maxDenominator) throws FractionConversionException { this(value, 0, maxDenominator, 100); [BUGGY] } [BUGGY]  [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,int)  double value int maxDenominator [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON epsilon value long serialVersionUID int denominator maxDenominator maxIterations numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	145	145	1	replace	
4	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] public Fraction(double value, int maxDenominator) throws FractionConversionException { this(value, 0, maxDenominator, 100); [BUGGY] [BUGGY] } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,int)  double value int maxDenominator [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON epsilon value long serialVersionUID int denominator maxDenominator maxIterations numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	145	145	1	add	
5	[BUG] [BUGGY] throw new FractionConversionException(value, p2, q2); [FE] FractionConversionException [CONTEXT] do { ++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   [BUGGY] throw new FractionConversionException(value, p2, q2); [BUGGY] } double convergent = (double)p2 / (double)q2; if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	
6	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] do { ++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   [BUGGY] [BUGGY] throw new FractionConversionException(value, p2, q2); } double convergent = (double)p2 / (double)q2; if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	add	
7	[BUG] [BUGGY] this.numerator = (int) p1; [FE] FractionConversionException [CONTEXT] if (q2 < maxDenominator) { this.numerator = (int) p2; this.denominator = (int) q2; } else { [BUGGY] this.numerator = (int) p1; [BUGGY] this.denominator = (int) q1; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	239	239	1	replace	
8	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if (q2 < maxDenominator) { this.numerator = (int) p2; this.denominator = (int) q2; } else { [BUGGY] [BUGGY] this.numerator = (int) p1; this.denominator = (int) q1; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	239	239	1	add	
9	[BUG] [BUGGY] this.denominator = (int) q1; [FE] FractionConversionException [CONTEXT] if (q2 < maxDenominator) { this.numerator = (int) p2; this.denominator = (int) q2; } else { this.numerator = (int) p1; [BUGGY] this.denominator = (int) q1; [BUGGY] } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	240	240	1	replace	
10	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if (q2 < maxDenominator) { this.numerator = (int) p2; this.denominator = (int) q2; } else { this.numerator = (int) p1; [BUGGY] [BUGGY] this.denominator = (int) q1; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	240	240	1	add	
11	[BUG] [BUGGY] this.numerator = (int) p2; [FE] FractionConversionException [CONTEXT] } else { stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } if (q2 < maxDenominator) { [BUGGY] this.numerator = (int) p2; [BUGGY] this.denominator = (int) q2; } else { this.numerator = (int) p1; this.denominator = (int) q1; } } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.4472135954999579	236	236	1	replace	
12	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] } else { stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } if (q2 < maxDenominator) { [BUGGY] [BUGGY] this.numerator = (int) p2; this.denominator = (int) q2; } else { this.numerator = (int) p1; this.denominator = (int) q1; } } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.4472135954999579	236	236	1	add	
13	[BUG] [BUGGY] this.denominator = (int) q2; [FE] FractionConversionException [CONTEXT] stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } if (q2 < maxDenominator) { this.numerator = (int) p2; [BUGGY] this.denominator = (int) q2; [BUGGY] } else { this.numerator = (int) p1; this.denominator = (int) q1; } } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.4472135954999579	237	237	1	replace	
14	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } if (q2 < maxDenominator) { this.numerator = (int) p2; [BUGGY] [BUGGY] this.denominator = (int) q2; } else { this.numerator = (int) p1; this.denominator = (int) q1; } } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.4472135954999579	237	237	1	add	
15	[BUG] [BUGGY] if (q2 < maxDenominator) { [FE] FractionConversionException [CONTEXT] r0 = r1; } else { stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } [BUGGY] if (q2 < maxDenominator) { [BUGGY] this.numerator = (int) p2; this.denominator = (int) q2; } else { this.numerator = (int) p1; this.denominator = (int) q1; } } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.4082482904638631	235	235	1	replace	
16	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] r0 = r1; } else { stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } [BUGGY] [BUGGY] if (q2 < maxDenominator) { this.numerator = (int) p2; this.denominator = (int) q2; } else { this.numerator = (int) p1; this.denominator = (int) q1; } } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.4082482904638631	235	235	1	add	
18	[BUG] [BUGGY] stop = true; [FE] FractionConversionException [CONTEXT] if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { [BUGGY] stop = true; [BUGGY] } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.3779644730092272	227	227	1	replace	
19	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { [BUGGY] [BUGGY] stop = true; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.3779644730092272	227	227	1	add	
20	[BUG] [BUGGY] if (n >= maxIterations) { [FE] FractionConversionException [CONTEXT] p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } } while (!stop); [BUGGY] if (n >= maxIterations) { [BUGGY] throw new FractionConversionException(value, maxIterations); } if (q2 < maxDenominator) { this.numerator = (int) p2; this.denominator = (int) q2; } else { this.numerator = (int) p1; this.denominator = (int) q1; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.3779644730092272	231	231	1	replace	
21	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } } while (!stop); [BUGGY] [BUGGY] if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } if (q2 < maxDenominator) { this.numerator = (int) p2; this.denominator = (int) q2; } else { this.numerator = (int) p1; this.denominator = (int) q1; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.3779644730092272	231	231	1	add	
22	[BUG] [BUGGY] { [FE] FractionConversionException [CONTEXT] [BUGGY] { [BUGGY] long overflow = Integer.MAX_VALUE; double r0 = value; long a0 = (long)FastMath.floor(r0); if (FastMath.abs(a0) > overflow) { throw new FractionConversionException(value, a0, 1l); }  if (FastMath.abs(a0 - value) < epsilon) { this.numerator = (int) a0; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	
23	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] [BUGGY] [BUGGY] { long overflow = Integer.MAX_VALUE; double r0 = value; long a0 = (long)FastMath.floor(r0); if (FastMath.abs(a0) > overflow) { throw new FractionConversionException(value, a0, 1l); }  if (FastMath.abs(a0 - value) < epsilon) { this.numerator = (int) a0; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	add	
24	[BUG] [BUGGY] long overflow = Integer.MAX_VALUE; [FE] FractionConversionException [CONTEXT] { [BUGGY] long overflow = Integer.MAX_VALUE; [BUGGY] double r0 = value; long a0 = (long)FastMath.floor(r0); if (FastMath.abs(a0) > overflow) { throw new FractionConversionException(value, a0, 1l); }  if (FastMath.abs(a0 - value) < epsilon) { this.numerator = (int) a0; this.denominator = 1; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	181	181	1	replace	
25	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] { [BUGGY] [BUGGY] long overflow = Integer.MAX_VALUE; double r0 = value; long a0 = (long)FastMath.floor(r0); if (FastMath.abs(a0) > overflow) { throw new FractionConversionException(value, a0, 1l); }  if (FastMath.abs(a0 - value) < epsilon) { this.numerator = (int) a0; this.denominator = 1; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	181	181	1	add	
26	[BUG] [BUGGY] double r0 = value; [FE] FractionConversionException [CONTEXT] { long overflow = Integer.MAX_VALUE; [BUGGY] double r0 = value; [BUGGY] long a0 = (long)FastMath.floor(r0); if (FastMath.abs(a0) > overflow) { throw new FractionConversionException(value, a0, 1l); }  if (FastMath.abs(a0 - value) < epsilon) { this.numerator = (int) a0; this.denominator = 1; return; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	182	182	1	replace	
27	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] { long overflow = Integer.MAX_VALUE; [BUGGY] [BUGGY] double r0 = value; long a0 = (long)FastMath.floor(r0); if (FastMath.abs(a0) > overflow) { throw new FractionConversionException(value, a0, 1l); }  if (FastMath.abs(a0 - value) < epsilon) { this.numerator = (int) a0; this.denominator = 1; return; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	182	182	1	add	
28	[BUG] [BUGGY] long a0 = (long)FastMath.floor(r0); [FE] FractionConversionException [CONTEXT] { long overflow = Integer.MAX_VALUE; double r0 = value; [BUGGY] long a0 = (long)FastMath.floor(r0); [BUGGY] if (FastMath.abs(a0) > overflow) { throw new FractionConversionException(value, a0, 1l); }  if (FastMath.abs(a0 - value) < epsilon) { this.numerator = (int) a0; this.denominator = 1; return; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	183	183	1	replace	
29	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] { long overflow = Integer.MAX_VALUE; double r0 = value; [BUGGY] [BUGGY] long a0 = (long)FastMath.floor(r0); if (FastMath.abs(a0) > overflow) { throw new FractionConversionException(value, a0, 1l); }  if (FastMath.abs(a0 - value) < epsilon) { this.numerator = (int) a0; this.denominator = 1; return; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	183	183	1	add	
30	[BUG] [BUGGY] if (FastMath.abs(a0) > overflow) { [FE] FractionConversionException [CONTEXT] { long overflow = Integer.MAX_VALUE; double r0 = value; long a0 = (long)FastMath.floor(r0); [BUGGY] if (FastMath.abs(a0) > overflow) { [BUGGY] throw new FractionConversionException(value, a0, 1l); }  if (FastMath.abs(a0 - value) < epsilon) { this.numerator = (int) a0; this.denominator = 1; return; }  [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	184	184	1	replace	
31	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] { long overflow = Integer.MAX_VALUE; double r0 = value; long a0 = (long)FastMath.floor(r0); [BUGGY] [BUGGY] if (FastMath.abs(a0) > overflow) { throw new FractionConversionException(value, a0, 1l); }  if (FastMath.abs(a0 - value) < epsilon) { this.numerator = (int) a0; this.denominator = 1; return; }  [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	184	184	1	add	
32	[BUG] [BUGGY] if (FastMath.abs(a0 - value) < epsilon) { [FE] FractionConversionException [CONTEXT] { long overflow = Integer.MAX_VALUE; double r0 = value; long a0 = (long)FastMath.floor(r0); if (FastMath.abs(a0) > overflow) { throw new FractionConversionException(value, a0, 1l); }  [BUGGY] if (FastMath.abs(a0 - value) < epsilon) { [BUGGY] this.numerator = (int) a0; this.denominator = 1; return; } long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1;  [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	189	189	1	replace	
33	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] { long overflow = Integer.MAX_VALUE; double r0 = value; long a0 = (long)FastMath.floor(r0); if (FastMath.abs(a0) > overflow) { throw new FractionConversionException(value, a0, 1l); }  [BUGGY] [BUGGY] if (FastMath.abs(a0 - value) < epsilon) { this.numerator = (int) a0; this.denominator = 1; return; } long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1;  [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	189	189	1	add	
34	[BUG] [BUGGY] long p0 = 1; [FE] FractionConversionException [CONTEXT] throw new FractionConversionException(value, a0, 1l); }  if (FastMath.abs(a0 - value) < epsilon) { this.numerator = (int) a0; this.denominator = 1; return; } [BUGGY] long p0 = 1; [BUGGY] long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	195	195	1	replace	
35	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] throw new FractionConversionException(value, a0, 1l); }  if (FastMath.abs(a0 - value) < epsilon) { this.numerator = (int) a0; this.denominator = 1; return; } [BUGGY] [BUGGY] long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	195	195	1	add	
36	[BUG] [BUGGY] long q0 = 0; [FE] FractionConversionException [CONTEXT] }  if (FastMath.abs(a0 - value) < epsilon) { this.numerator = (int) a0; this.denominator = 1; return; } long p0 = 1; [BUGGY] long q0 = 0; [BUGGY] long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	196	196	1	replace	
37	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] }  if (FastMath.abs(a0 - value) < epsilon) { this.numerator = (int) a0; this.denominator = 1; return; } long p0 = 1; [BUGGY] [BUGGY] long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	196	196	1	add	
38	[BUG] [BUGGY] long p1 = a0; [FE] FractionConversionException [CONTEXT]  if (FastMath.abs(a0 - value) < epsilon) { this.numerator = (int) a0; this.denominator = 1; return; } long p0 = 1; long q0 = 0; [BUGGY] long p1 = a0; [BUGGY] long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; double r1 = 1.0 / (r0 - a0); [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	197	197	1	replace	
39	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT]  if (FastMath.abs(a0 - value) < epsilon) { this.numerator = (int) a0; this.denominator = 1; return; } long p0 = 1; long q0 = 0; [BUGGY] [BUGGY] long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; double r1 = 1.0 / (r0 - a0); [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	197	197	1	add	
40	[BUG] [BUGGY] long q1 = 1; [FE] FractionConversionException [CONTEXT]  if (FastMath.abs(a0 - value) < epsilon) { this.numerator = (int) a0; this.denominator = 1; return; } long p0 = 1; long q0 = 0; long p1 = a0; [BUGGY] long q1 = 1; [BUGGY]  long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	198	198	1	replace	
41	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT]  if (FastMath.abs(a0 - value) < epsilon) { this.numerator = (int) a0; this.denominator = 1; return; } long p0 = 1; long q0 = 0; long p1 = a0; [BUGGY] [BUGGY] long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	198	198	1	add	
42	[BUG] [BUGGY] long p2 = 0; [FE] FractionConversionException [CONTEXT] this.numerator = (int) a0; this.denominator = 1; return; } long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1; [BUGGY] long p2 = 0; [BUGGY] long q2 = 1; int n = 0; boolean stop = false; do { ++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	200	200	1	replace	
43	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] this.numerator = (int) a0; this.denominator = 1; return; } long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1; [BUGGY] [BUGGY] long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	200	200	1	add	
44	[BUG] [BUGGY] long q2 = 1; [FE] FractionConversionException [CONTEXT] this.denominator = 1; return; } long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; [BUGGY] long q2 = 1; [BUGGY]  int n = 0; boolean stop = false; do { ++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0;  [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	201	201	1	replace	
45	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] this.denominator = 1; return; } long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; [BUGGY] [BUGGY] long q2 = 1; int n = 0; boolean stop = false; do { ++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0;  [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	201	201	1	add	
46	[BUG] [BUGGY] int n = 0; [FE] FractionConversionException [CONTEXT] } long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; [BUGGY] int n = 0; [BUGGY] boolean stop = false; do { ++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {  [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	203	203	1	replace	
47	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] } long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; [BUGGY] [BUGGY] int n = 0; boolean stop = false; do { ++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {  [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	203	203	1	add	
48	[BUG] [BUGGY] boolean stop = false; [FE] FractionConversionException [CONTEXT] long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; [BUGGY] boolean stop = false; [BUGGY] do { ++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	204	204	1	replace	
49	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; [BUGGY] [BUGGY] boolean stop = false; do { ++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	204	204	1	add	
50	[BUG] [BUGGY] ++n; [FE] FractionConversionException [CONTEXT] long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { [BUGGY] ++n; [BUGGY] double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   throw new FractionConversionException(value, p2, q2); } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	206	206	1	replace	
51	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { [BUGGY] [BUGGY] ++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   throw new FractionConversionException(value, p2, q2); } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	206	206	1	add	
52	[BUG] [BUGGY] double r1 = 1.0 / (r0 - a0); [FE] FractionConversionException [CONTEXT] long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; [BUGGY] double r1 = 1.0 / (r0 - a0); [BUGGY] long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   throw new FractionConversionException(value, p2, q2); }  [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	207	207	1	replace	
53	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; [BUGGY] [BUGGY] double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   throw new FractionConversionException(value, p2, q2); }  [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	207	207	1	add	
54	[BUG] [BUGGY] long a1 = (long)FastMath.floor(r1); [FE] FractionConversionException [CONTEXT] long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; double r1 = 1.0 / (r0 - a0); [BUGGY] long a1 = (long)FastMath.floor(r1); [BUGGY] p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   throw new FractionConversionException(value, p2, q2); } double convergent = (double)p2 / (double)q2; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	
55	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; double r1 = 1.0 / (r0 - a0); [BUGGY] [BUGGY] long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   throw new FractionConversionException(value, p2, q2); } double convergent = (double)p2 / (double)q2; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	add	
56	[BUG] [BUGGY] p2 = (a1 * p1) + p0; [FE] FractionConversionException [CONTEXT] long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); [BUGGY] p2 = (a1 * p1) + p0; [BUGGY] q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   throw new FractionConversionException(value, p2, q2); } double convergent = (double)p2 / (double)q2; if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	
57	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); [BUGGY] [BUGGY] p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   throw new FractionConversionException(value, p2, q2); } double convergent = (double)p2 / (double)q2; if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	add	
58	[BUG] [BUGGY] q2 = (a1 * q1) + q0; [FE] FractionConversionException [CONTEXT] long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; [BUGGY] q2 = (a1 * q1) + q0; [BUGGY]  if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   throw new FractionConversionException(value, p2, q2); } double convergent = (double)p2 / (double)q2; if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	210	210	1	replace	
59	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] long p2 = 0; long q2 = 1; int n = 0; boolean stop = false; do { ++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; [BUGGY] [BUGGY] q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   throw new FractionConversionException(value, p2, q2); } double convergent = (double)p2 / (double)q2; if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	210	210	1	add	
60	[BUG] [BUGGY] if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) { [FE] FractionConversionException [CONTEXT] int n = 0; boolean stop = false; do { ++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; [BUGGY] if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) { [BUGGY]   throw new FractionConversionException(value, p2, q2); } double convergent = (double)p2 / (double)q2; if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; q0 = q1; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	212	212	1	replace	
61	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] int n = 0; boolean stop = false; do { ++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; [BUGGY] [BUGGY] if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   throw new FractionConversionException(value, p2, q2); } double convergent = (double)p2 / (double)q2; if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; q0 = q1; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	212	212	1	add	
62	[BUG] [BUGGY] double convergent = (double)p2 / (double)q2; [FE] FractionConversionException [CONTEXT] long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   throw new FractionConversionException(value, p2, q2); } [BUGGY] double convergent = (double)p2 / (double)q2; [BUGGY] if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	218	218	1	replace	
63	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   throw new FractionConversionException(value, p2, q2); } [BUGGY] [BUGGY] double convergent = (double)p2 / (double)q2; if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	218	218	1	add	
64	[BUG] [BUGGY] if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { [FE] FractionConversionException [CONTEXT] p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   throw new FractionConversionException(value, p2, q2); } double convergent = (double)p2 / (double)q2; [BUGGY] if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { [BUGGY] p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } } while (!stop); [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	
65	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   throw new FractionConversionException(value, p2, q2); } double convergent = (double)p2 / (double)q2; [BUGGY] [BUGGY] if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } } while (!stop); [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	add	
66	[BUG] [BUGGY] p0 = p1; [FE] FractionConversionException [CONTEXT] q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   throw new FractionConversionException(value, p2, q2); } double convergent = (double)p2 / (double)q2; if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { [BUGGY] p0 = p1; [BUGGY] p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } } while (!stop);  [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	220	220	1	replace	
67	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   throw new FractionConversionException(value, p2, q2); } double convergent = (double)p2 / (double)q2; if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { [BUGGY] [BUGGY] p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } } while (!stop);  [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	220	220	1	add	
68	[BUG] [BUGGY] p1 = p2; [FE] FractionConversionException [CONTEXT] if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   throw new FractionConversionException(value, p2, q2); } double convergent = (double)p2 / (double)q2; if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; [BUGGY] p1 = p2; [BUGGY] q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } } while (!stop); if (n >= maxIterations) { [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	221	221	1	replace	
69	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   throw new FractionConversionException(value, p2, q2); } double convergent = (double)p2 / (double)q2; if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; [BUGGY] [BUGGY] p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } } while (!stop); if (n >= maxIterations) { [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	221	221	1	add	
70	[BUG] [BUGGY] q0 = q1; [FE] FractionConversionException [CONTEXT] if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   throw new FractionConversionException(value, p2, q2); } double convergent = (double)p2 / (double)q2; if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; [BUGGY] q0 = q1; [BUGGY] q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	222	222	1	replace	
71	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {   throw new FractionConversionException(value, p2, q2); } double convergent = (double)p2 / (double)q2; if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; [BUGGY] [BUGGY] q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	222	222	1	add	
72	[BUG] [BUGGY] q1 = q2; [FE] FractionConversionException [CONTEXT]   throw new FractionConversionException(value, p2, q2); } double convergent = (double)p2 / (double)q2; if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; q0 = q1; [BUGGY] q1 = q2; [BUGGY] a0 = a1; r0 = r1; } else { stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	223	223	1	replace	
73	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT]   throw new FractionConversionException(value, p2, q2); } double convergent = (double)p2 / (double)q2; if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; q0 = q1; [BUGGY] [BUGGY] q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	223	223	1	add	
74	[BUG] [BUGGY] a0 = a1; [FE] FractionConversionException [CONTEXT]  throw new FractionConversionException(value, p2, q2); } double convergent = (double)p2 / (double)q2; if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; [BUGGY] a0 = a1; [BUGGY] r0 = r1; } else { stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); }  [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	224	224	1	replace	
75	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT]  throw new FractionConversionException(value, p2, q2); } double convergent = (double)p2 / (double)q2; if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; [BUGGY] [BUGGY] a0 = a1; r0 = r1; } else { stop = true; } } while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); }  [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	224	224	1	add	
76	[BUG] [BUGGY] r0 = r1; [FE] FractionConversionException [CONTEXT] if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; [BUGGY] r0 = r1; [BUGGY] } else { stop = true; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	225	225	1	replace	
77	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; [BUGGY] [BUGGY] r0 = r1; } else { stop = true; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	225	225	1	add	
78	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	229	229	1	replace	
79	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(double,double,int,int)  double value double epsilon int maxDenominator int maxIterations [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean stop double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int denominator maxDenominator maxIterations n numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	229	229	1	add	
80	[BUG] [BUGGY] return denominator; [FE] FractionConversionException [CONTEXT] public int getDenominator() { [BUGGY] return denominator; [BUGGY] } [CLASS] Fraction [METHOD] getDenominator [RETURN_TYPE] int  [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO object ret rhs boolean double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 dOn nOd overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2886751345948129	366	366	1	replace	
81	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] public int getDenominator() { [BUGGY] [BUGGY] return denominator; } [CLASS] Fraction [METHOD] getDenominator [RETURN_TYPE] int  [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO object ret rhs boolean double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 dOn nOd overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2886751345948129	366	366	1	add	
82	[BUG] [BUGGY] return numerator; [FE] FractionConversionException [CONTEXT] public int getNumerator() { [BUGGY] return numerator; [BUGGY] } [CLASS] Fraction [METHOD] getNumerator [RETURN_TYPE] int  [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO object ret rhs boolean double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 dOn nOd overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2773500981126146	374	374	1	replace	
83	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] public int getNumerator() { [BUGGY] [BUGGY] return numerator; } [CLASS] Fraction [METHOD] getNumerator [RETURN_TYPE] int  [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO object ret rhs boolean double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 dOn nOd overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2773500981126146	374	374	1	add	
84	[BUG] [BUGGY] public Fraction(int num, int den) { [FE] FractionConversionException [CONTEXT] [BUGGY] public Fraction(int num, int den) { [BUGGY] if (den == 0) { throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, num, den); } if (den < 0) { if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den); } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2	261	261	1	replace	
85	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] [BUGGY] [BUGGY] public Fraction(int num, int den) { if (den == 0) { throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, num, den); } if (den < 0) { if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den); } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2	261	261	1	add	
86	[BUG] [BUGGY] if (den == 0) { [FE] FractionConversionException [CONTEXT] public Fraction(int num, int den) { [BUGGY] if (den == 0) { [BUGGY] throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, num, den); } if (den < 0) { if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den); } num = -num; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2	262	262	1	replace	
87	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] public Fraction(int num, int den) { [BUGGY] [BUGGY] if (den == 0) { throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, num, den); } if (den < 0) { if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den); } num = -num; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2	262	262	1	add	
88	[BUG] [BUGGY] if (den < 0) { [FE] FractionConversionException [CONTEXT] public Fraction(int num, int den) { if (den == 0) { throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, num, den); } [BUGGY] if (den < 0) { [BUGGY] if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den); } num = -num; den = -den; }  final int d = ArithmeticUtils.gcd(num, den); [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2	266	266	1	replace	
89	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] public Fraction(int num, int den) { if (den == 0) { throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, num, den); } [BUGGY] [BUGGY] if (den < 0) { if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den); } num = -num; den = -den; }  final int d = ArithmeticUtils.gcd(num, den); [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2	266	266	1	add	
90	[BUG] [BUGGY] final int d = ArithmeticUtils.gcd(num, den); [FE] FractionConversionException [CONTEXT] if (den < 0) { if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den); } num = -num; den = -den; }  [BUGGY] final int d = ArithmeticUtils.gcd(num, den); [BUGGY] if (d > 1) { num /= d; den /= d; }  if (den < 0) { num = -num; den = -den; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2	276	276	1	replace	
91	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if (den < 0) { if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den); } num = -num; den = -den; }  [BUGGY] [BUGGY] final int d = ArithmeticUtils.gcd(num, den); if (d > 1) { num /= d; den /= d; }  if (den < 0) { num = -num; den = -den; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2	276	276	1	add	
92	[BUG] [BUGGY] if (d > 1) { [FE] FractionConversionException [CONTEXT] if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den); } num = -num; den = -den; }  final int d = ArithmeticUtils.gcd(num, den); [BUGGY] if (d > 1) { [BUGGY] num /= d; den /= d; }  if (den < 0) { num = -num; den = -den; } this.numerator = num; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2	277	277	1	replace	
93	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) { throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den); } num = -num; den = -den; }  final int d = ArithmeticUtils.gcd(num, den); [BUGGY] [BUGGY] if (d > 1) { num /= d; den /= d; }  if (den < 0) { num = -num; den = -den; } this.numerator = num; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2	277	277	1	add	
94	[BUG] [BUGGY] num /= d; [FE] FractionConversionException [CONTEXT] den == Integer.MIN_VALUE) { throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den); } num = -num; den = -den; }  final int d = ArithmeticUtils.gcd(num, den); if (d > 1) { [BUGGY] num /= d; [BUGGY] den /= d; }  if (den < 0) { num = -num; den = -den; } this.numerator = num; this.denominator = den; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2	278	278	1	replace	
95	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] den == Integer.MIN_VALUE) { throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den); } num = -num; den = -den; }  final int d = ArithmeticUtils.gcd(num, den); if (d > 1) { [BUGGY] [BUGGY] num /= d; den /= d; }  if (den < 0) { num = -num; den = -den; } this.numerator = num; this.denominator = den; [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2	278	278	1	add	
96	[BUG] [BUGGY] den /= d; [FE] FractionConversionException [CONTEXT] throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den); } num = -num; den = -den; }  final int d = ArithmeticUtils.gcd(num, den); if (d > 1) { num /= d; [BUGGY] den /= d; [BUGGY] }  if (den < 0) { num = -num; den = -den; } this.numerator = num; this.denominator = den; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2	279	279	1	replace	
97	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den); } num = -num; den = -den; }  final int d = ArithmeticUtils.gcd(num, den); if (d > 1) { num /= d; [BUGGY] [BUGGY] den /= d; }  if (den < 0) { num = -num; den = -den; } this.numerator = num; this.denominator = den; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2	279	279	1	add	
98	[BUG] [BUGGY] if (den < 0) { [FE] FractionConversionException [CONTEXT] den = -den; }  final int d = ArithmeticUtils.gcd(num, den); if (d > 1) { num /= d; den /= d; }  [BUGGY] if (den < 0) { [BUGGY] num = -num; den = -den; } this.numerator = num; this.denominator = den; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2	283	283	1	replace	
99	[BUG] [BUGGY] [FE] FractionConversionException [CONTEXT] den = -den; }  final int d = ArithmeticUtils.gcd(num, den); if (d > 1) { num /= d; den /= d; }  [BUGGY] [BUGGY] if (den < 0) { num = -num; den = -den; } this.numerator = num; this.denominator = den; } [CLASS] Fraction [METHOD] <init> [RETURN_TYPE] Fraction(int,int)  int num int den [VARIABLES] Fraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO boolean double DEFAULT_EPSILON convergent epsilon r0 r1 value long a0 a1 overflow p0 p1 p2 q0 q1 q2 serialVersionUID int d den denominator maxDenominator maxIterations n num numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.2	283	283	1	add	