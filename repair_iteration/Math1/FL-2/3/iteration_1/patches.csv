bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  p2,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,long)  [FE]                                                FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(value,  epsilon,  p2,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,long)	29	None	replace
2	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  value,  p2,  epsilon);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,double)  [FE]                                                  FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  value,  p2,  epsilon);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(value,  value,  p2,  epsilon);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,double)	29	None	replace
3	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  p2,  q1);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,long)  [FE]                                                    FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  p2,  q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(value,  epsilon,  p2,  q1);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,long)	29	None	replace
4	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  value,  epsilon,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,double,long)  [FE]                                                      FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  value,  epsilon,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(value,  value,  epsilon,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,double,long)	29	None	replace
5	[BUG]  [BUGGY]  throw  new  FractionConversionException(denominator,  value,  p2,  epsilon);  [CE]  no  suitable  constructor  found  for  FractionConversionException(int,double,long,double)  [FE]                                                        FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(denominator,  value,  p2,  epsilon);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(denominator,  value,  p2,  epsilon);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(int,double,long,double)	29	None	replace
6	[BUG]  [BUGGY]  throw  new  FractionConversionException(p0,  value,  epsilon,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(long,double,double,long)  [FE]                                                          FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p0,  value,  epsilon,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(p0,  value,  epsilon,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(long,double,double,long)	29	None	replace
7	[BUG]  [BUGGY]  throw  new  FractionConversionException(fn,  value,  p2,  epsilon);  [CE]  cannot  find  symbol  fn  [FE]                                                            FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(fn,  value,  p2,  epsilon);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(fn,  value,  p2,  epsilon);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol  fn	29	None	replace
8	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  value,  p2,  epsilon);  [CE]  no  suitable  constructor  found  for  FractionConversionException(int,double,long,double)  [FE]                                                              FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  value,  p2,  epsilon);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(n,  value,  p2,  epsilon);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(int,double,long,double)	29	None	replace
9	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p2),  value,  epsilon,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(long,double,double,long)  [FE]                                                                FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p2),  value,  epsilon,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p2),  value,  epsilon,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(long,double,double,long)	29	None	replace
10	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p1),  value,  epsilon,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(long,double,double,long)  [FE]                                                                  FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p1),  value,  epsilon,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p1),  value,  epsilon,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(long,double,double,long)	29	None	replace
11	[BUG]  [BUGGY]  throw  new  FractionConversionException(p0,  p1,  value,  epsilon,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(long,long,double,double,long)  [FE]                                                                    FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p0,  p1,  value,  epsilon,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(p0,  p1,  value,  epsilon,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(long,long,double,double,long)	29	None	replace
12	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p0,  p2,  epsilon);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,long,double)  [FE]                                                                      FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p0,  p2,  epsilon);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(value,  p0,  p2,  epsilon);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,long,double)	29	None	replace
13	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0),  value,  epsilon,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(long,double,double,long)  [FE]                                                                        FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0),  value,  epsilon,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0),  value,  epsilon,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(long,double,double,long)	29	None	replace
14	[BUG]  [BUGGY]  throw  new  FractionConversionException(p1,  value,  epsilon,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(long,double,double,long)  [FE]                                                                          FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p1,  value,  epsilon,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(p1,  value,  epsilon,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(long,double,double,long)	29	None	replace
15	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  p2,  q0);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,long)  [FE]                                                                            FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  p2,  q0);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(value,  epsilon,  p2,  q0);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,long)	29	None	replace
16	[BUG]  [BUGGY]  throw  new  FractionConversionException(defULT_EPSILON,  value,  p2,  epsilon);  [CE]  cannot  find  symbol  defULT_EPSILON  [FE]                                                                              FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(defULT_EPSILON,  value,  p2,  epsilon);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(defULT_EPSILON,  value,  p2,  epsilon);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol  defULT_EPSILON	29	None	replace
17	[BUG]  [BUGGY]  throw  new  FractionConversionException(epsilon,  p1,  value,  p2,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,double,long,long)  [FE]                                                                                FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(epsilon,  p1,  value,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(epsilon,  p1,  value,  p2,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,double,long,long)	29	None	replace
18	[BUG]  [BUGGY]  throw  new  FractionConversionException(epsilon,  value,  p1,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,long)  [FE]                                                                                  FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(epsilon,  value,  p1,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(epsilon,  value,  p1,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,long)	29	None	replace
19	[BUG]  [BUGGY]  throw  new  FractionConversionException(epsilon,  p0,  p2,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,long,long)  [FE]                                                                                    FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(epsilon,  p0,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(epsilon,  p0,  p2,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,long,long)	29	None	replace
20	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p1,  epsilon,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,double,long)  [FE]                                                                                      FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p1,  epsilon,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(value,  p1,  epsilon,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,double,long)	29	None	replace
21	[BUG]  [BUGGY]  throw  new  FractionConversionException(epsilon,  DEFAULT_EPSILON,  value,  p2,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,double,long,long)  [FE]                                                                                        FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(epsilon,  DEFAULT_EPSILON,  value,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(epsilon,  DEFAULT_EPSILON,  value,  p2,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,double,long,long)	29	None	replace
22	[BUG]  [BUGGY]  throw  new  FractionConversionException(p0,  p2,  value,  epsilon,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(long,long,double,double,long)  [FE]                                                                                          FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p0,  p2,  value,  epsilon,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(p0,  p2,  value,  epsilon,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(long,long,double,double,long)	29	None	replace
23	[BUG]  [BUGGY]  throw  new  FractionConversionException(epsilon,  value,  p0,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,long)  [FE]                                                                                            FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(epsilon,  value,  p0,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(epsilon,  value,  p0,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,long)	29	None	replace
24	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  epsilon,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,double,long)  [FE]                                                                                              FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  epsilon,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(value,  p2,  epsilon,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,double,long)	29	None	replace
25	[BUG]  [BUGGY]  throw  new  FractionConversionException(fn,  epsilon,  value,  p2,  q2);  [CE]  cannot  find  symbol  fn  [FE]                                                                                                FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(fn,  epsilon,  value,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(fn,  epsilon,  value,  p2,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol  fn	29	None	replace
26	[BUG]  [BUGGY]  throw  new  FractionConversionException(DEFAULT_EPSILON,  value,  p2,  epsilon);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,double)  [FE]                                                                                                  FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(DEFAULT_EPSILON,  value,  p2,  epsilon);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(DEFAULT_EPSILON,  value,  p2,  epsilon);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,double)	29	None	replace
27	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p1,  value,  epsilon,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,double,double,long)  [FE]                                                                                                    FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p1,  value,  epsilon,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(value,  p1,  value,  epsilon,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,double,double,long)	29	None	replace
28	[BUG]  [BUGGY]  throw  new  FractionConversionException(defult_EPSILON,  value,  p2,  epsilon);  [CE]  cannot  find  symbol  defult_EPSILON  [FE]                                                                                                      FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(defult_EPSILON,  value,  p2,  epsilon);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(defult_EPSILON,  value,  p2,  epsilon);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol  defult_EPSILON	29	None	replace
29	[BUG]  [BUGGY]  throw  new  FractionConversionException(p0,  value,  epsilon,  q2,  epsilon);  [CE]  no  suitable  constructor  found  for  FractionConversionException(long,double,double,long,double)  [FE]                                                                                                        FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(p0,  value,  epsilon,  q2,  epsilon);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(p0,  value,  epsilon,  q2,  epsilon);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(long,double,double,long,double)	29	None	replace
30	[BUG]  [BUGGY]  throw  new  FractionConversionException(epsilon,  p0,  p2,  value);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,long,double)  [FE]                                                                                                          FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(epsilon,  p0,  p2,  value);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(epsilon,  p0,  p2,  value);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,long,double)	29	None	replace
31	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  p2,  denominator);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,int)  [FE]                                                                                                            FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  p2,  denominator);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(value,  epsilon,  p2,  denominator);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,int)	29	None	replace
32	[BUG]  [BUGGY]  throw  new  FractionConversionException(epsilon,  r1,  value,  p2,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,double,long,long)  [FE]                                                                                                              FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(epsilon,  r1,  value,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(epsilon,  r1,  value,  p2,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,double,long,long)	29	None	replace
33	[BUG]  [BUGGY]  throw  new  FractionConversionException(failon,  value,  p2,  epsilon);  [CE]  cannot  find  symbol  failon  [FE]                                                                                                                FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(failon,  value,  p2,  epsilon);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(failon,  value,  p2,  epsilon);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol  failon	29	None	replace
34	[BUG]  [BUGGY]  throw  new  FractionConversionException(denominator,  value,  epsilon,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(int,double,double,long)  [FE]                                                                                                                  FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(denominator,  value,  epsilon,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(denominator,  value,  epsilon,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(int,double,double,long)	29	None	replace
35	[BUG]  [BUGGY]  throw  new  FractionConversionException(t,  value,  p2,  epsilon);  [CE]  cannot  find  symbol  t  [FE]                                                                                                                    FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(t,  value,  p2,  epsilon);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(t,  value,  p2,  epsilon);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol  t	29	None	replace
36	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p1,  value,  p2,  epsilon));  [CE]  no  suitable  method  found  for  abs(long,double,long,double)  [FE]                                                                                                                      FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p1,  value,  p2,  epsilon));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p1,  value,  p2,  epsilon));	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,double,long,double)	29	None	replace
37	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  value,  epsilon,  q2,  denominator);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,double,long,int)  [FE]                                                                                                                        FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  value,  epsilon,  q2,  denominator);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(value,  value,  epsilon,  q2,  denominator);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,double,long,int)	29	None	replace
38	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  value,  p2,  q1);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,double,long,long)  [FE]                                                                                                                          FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  epsilon,  value,  p2,  q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(value,  epsilon,  value,  p2,  q1);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,double,long,long)	29	None	replace
39	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p2,  value),  epsilon,  q2);  [CE]  no  suitable  method  found  for  abs(long,long,double)  [FE]                                                                                                                            FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p2,  value),  epsilon,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  p2,  value),  epsilon,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long,double)	29	None	replace
40	[BUG]  [BUGGY]  throw  new  FractionConversionException(epsilon,  p0,  value,  q2,  epsilon);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,double,long,double)  [FE]                                                                                                                              FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(epsilon,  p0,  value,  q2,  epsilon);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(epsilon,  p0,  value,  q2,  epsilon);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,double,long,double)	29	None	replace
41	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p1,  value,  epsilon,  q2));  [CE]  no  suitable  method  found  for  abs(long,double,double,long)  [FE]                                                                                                                                FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p1,  value,  epsilon,  q2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p1,  value,  epsilon,  q2));	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,double,double,long)	29	None	replace
42	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  epsilon);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,double)  [FE]                                                                                                                                  FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(value,  p2,  epsilon);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(value,  p2,  epsilon);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,long,double)	29	None	replace
43	[BUG]  [BUGGY]  throw  new  FractionConversionException(expsilon,  value,  p2,  epsilon);  [CE]  cannot  find  symbol  expsilon  [FE]                                                                                                                                    FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(expsilon,  value,  p2,  epsilon);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(expsilon,  value,  p2,  epsilon);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol  expsilon	29	None	replace
44	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p1,  value,  epsilon,  q2));  [CE]  no  suitable  method  found  for  abs(long,long,double,double,long)  [FE]                                                                                                                                      FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p1,  value,  epsilon,  q2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  p1,  value,  epsilon,  q2));	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long,double,double,long)	29	None	replace
45	[BUG]  [BUGGY]  throw  new  FractionConversionException(fn,  value,  epsilon,  q2);  [CE]  cannot  find  symbol  fn  [FE]                                                                                                                                        FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(fn,  value,  epsilon,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(fn,  value,  epsilon,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol  fn	29	None	replace
46	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p1),  value,  epsilon,  q2);  [CE]  no  suitable  method  found  for  abs(long,long)  [FE]                                                                                                                                          FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p1),  value,  epsilon,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  p1),  value,  epsilon,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long)	29	None	replace
47	[BUG]  [BUGGY]  throw  new  FractionConversionException(DEFAULT_EPSILON,  value,  p1,  q2);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,long)  [FE]                                                                                                                                            FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(DEFAULT_EPSILON,  value,  p1,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(DEFAULT_EPSILON,  value,  p1,  q2);	  throw    new    FractionConversionException(epsilon,    value,    p2,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long,long)	29	None	replace
48	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  r1));  [CE]  no  suitable  method  found  for  abs(long,double)  [FE]                                                                                  FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  r1));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  r1));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,double)	50	None	replace
49	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(r0,  p2));  [CE]  no  suitable  method  found  for  abs(double,long)  [FE]                                                                                    FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(r0,  p2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(r0,  p2));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,long)	50	None	replace
50	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  a1));  [CE]  no  suitable  method  found  for  abs(long,long)  [FE]                                                                                      FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  a1));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  a1));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long)	50	None	replace
51	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  q2));  [CE]  no  suitable  method  found  for  abs(long,long)  [FE]                                                                                        FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  q2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  q2));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long)	50	None	replace
52	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  n),  p2));  [CE]  ';'  expected  [FE]                                                                                          FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  n),  p2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  n),  p2));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  ';'  expected	50	None	replace
53	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p1));  [CE]  no  suitable  method  found  for  abs(long,long)  [FE]                                                                                            FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p1));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  p1));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long)	50	None	replace
54	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p2),  denominator);  [CE]  no  suitable  method  found  for  abs(long,long)  [FE]                                                                                              FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p2),  denominator);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  p2),  denominator);	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long)	50	None	replace
55	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p1,  p1));  [CE]  no  suitable  method  found  for  abs(long,long)  [FE]                                                                                                FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p1,  p1));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p1,  p1));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long)	50	None	replace
56	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p1,  p2));  [CE]  no  suitable  method  found  for  abs(long,long,long)  [FE]                                                                                                  FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p1,  p2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  p1,  p2));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long,long)	50	None	replace
57	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(r1,  p0,  p2));  [CE]  no  suitable  method  found  for  abs(double,long,long)  [FE]                                                                                                    FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(r1,  p0,  p2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(r1,  p0,  p2));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,long,long)	50	None	replace
58	[BUG]  [BUGGY]  Throwables.throw  new  FractionConversionException(FastMath.abs(p0,  p2));  [CE]  <identifier>  expected  [FE]                                                                                                      FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  Throwables.throw  new  FractionConversionException(FastMath.abs(p0,  p2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	Throwables.throw  new  FractionConversionException(FastMath.abs(p0,  p2));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  <identifier>  expected	50	None	replace
59	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p2,  p0));  [CE]  no  suitable  method  found  for  abs(long,long)  [FE]                                                                                                        FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p2,  p0));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p2,  p0));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long)	50	None	replace
60	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  a1),  p2);  [CE]  no  suitable  method  found  for  abs(long,long)  [FE]                                                                                                          FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  a1),  p2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  a1),  p2);	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long)	50	None	replace
61	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(n,  p0,  p2));  [CE]  no  suitable  method  found  for  abs(int,long,long)  [FE]                                                                                                            FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(n,  p0,  p2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(n,  p0,  p2));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(int,long,long)	50	None	replace
62	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  a1),  p2));  [CE]  ';'  expected  [FE]                                                                                                              FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  a1),  p2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  a1),  p2));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  ';'  expected	50	None	replace
63	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p1,  p0));  [CE]  no  suitable  method  found  for  abs(long,long)  [FE]                                                                                                                FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p1,  p0));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p1,  p0));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long)	50	None	replace
64	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  q1));  [CE]  no  suitable  method  found  for  abs(long,long)  [FE]                                                                                                                  FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  q1));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  q1));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long)	50	None	replace
65	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p1),  p0);  [CE]  no  suitable  constructor  found  for  FractionConversionException(long,long)  [FE]                                                                                                                    FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p1),  p0);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p1),  p0);	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(long,long)	50	None	replace
66	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  epsilon,  p2));  [CE]  no  suitable  method  found  for  abs(long,double,long)  [FE]                                                                                                                      FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  epsilon,  p2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  epsilon,  p2));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,double,long)	50	None	replace
67	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  a1,  p2));  [CE]  no  suitable  method  found  for  abs(long,long,long)  [FE]                                                                                                                        FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  a1,  p2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  a1,  p2));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long,long)	50	None	replace
68	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  r2));  [CE]  cannot  find  symbol  r2  [FE]                                                                                                                          FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  r2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  r2));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  cannot  find  symbol  r2	50	None	replace
69	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p2),  n);  [CE]  no  suitable  method  found  for  abs(long,long)  [FE]                                                                                                                            FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p2),  n);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  p2),  n);	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long)	50	None	replace
70	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p1,  p0,  p2));  [CE]  no  suitable  method  found  for  abs(long,long,long)  [FE]                                                                                                                              FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p1,  p0,  p2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p1,  p0,  p2));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long,long)	50	None	replace
71	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p2),  numerator);  [CE]  no  suitable  method  found  for  abs(long,long)  [FE]                                                                                                                                FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p2),  numerator);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  p2),  numerator);	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long)	50	None	replace
72	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  r1,  p2));  [CE]  no  suitable  method  found  for  abs(long,double,long)  [FE]                                                                                                                                  FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  r1,  p2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  r1,  p2));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,double,long)	50	None	replace
73	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(r0,  p2,  p2));  [CE]  no  suitable  method  found  for  abs(double,long,long)  [FE]                                                                                                                                    FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(r0,  p2,  p2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(r0,  p2,  p2));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,long,long)	50	None	replace
74	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  n));  [CE]  no  suitable  method  found  for  abs(long,int)  [FE]                                                                                                                                      FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  n));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  n));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,int)	50	None	replace
75	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p1),  denominator);  [CE]  no  suitable  method  found  for  abs(long,long)  [FE]                                                                                                                                        FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p1),  denominator);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  p1),  denominator);	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long)	50	None	replace
76	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p2),  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  abs(long,long)  [FE]                                                                                                                                          FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p2),  DEFAULT_EPSILON);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  p2),  DEFAULT_EPSILON);	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long)	50	None	replace
77	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(f0,  p2));  [CE]  cannot  find  symbol  f0  [FE]                                                                                                                                            FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(f0,  p2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(f0,  p2));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  cannot  find  symbol  f0	50	None	replace
78	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p1),  p2);  [CE]  no  suitable  method  found  for  abs(long,long)  [FE]                                                                                                                                              FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p1),  p2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  p1),  p2);	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long)	50	None	replace
79	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  a2));  [CE]  cannot  find  symbol  a2  [FE]                                                                                                                                                FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  a2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  a2));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  cannot  find  symbol  a2	50	None	replace
80	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  q1,  p2));  [CE]  no  suitable  method  found  for  abs(long,long,long)  [FE]                                                                                                                                                  FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  q1,  p2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  q1,  p2));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long,long)	50	None	replace
81	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(q0,  p2));  [CE]  no  suitable  method  found  for  abs(long,long)  [FE]                                                                                                                                                    FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(q0,  p2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(q0,  p2));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long)	50	None	replace
82	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  d1,  p2));  [CE]  cannot  find  symbol  d1  [FE]                                                                                                                                                      FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  d1,  p2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  d1,  p2));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  cannot  find  symbol  d1	50	None	replace
83	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  q2,  p2));  [CE]  no  suitable  method  found  for  abs(long,long,long)  [FE]                                                                                                                                                        FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  q2,  p2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  q2,  p2));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long,long)	50	None	replace
84	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p2,  n));  [CE]  no  suitable  method  found  for  abs(long,long,int)  [FE]                                                                                                                                                          FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p2,  n));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  p2,  n));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long,int)	50	None	replace
85	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  n),  p2);  [CE]  no  suitable  method  found  for  abs(long,int)  [FE]                                                                                                                                                            FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  n),  p2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  n),  p2);	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,int)	50	None	replace
86	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p2,  a1));  [CE]  no  suitable  method  found  for  abs(long,long,long)  [FE]                                                                                                                                                              FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  p2,  a1));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  p2,  a1));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  no  suitable  method  found  for  abs(long,long,long)	50	None	replace
87	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  f1));  [CE]  cannot  find  symbol  f1  [FE]                                                                                                                                                                FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p0,  f1));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p0,  f1));	  throw    new    FractionConversionException(FastMath.abs(p0,    p2));    	non-compiled	[CE]  cannot  find  symbol  f1	50	None	replace
88	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p2),  a0,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	add	throw  new  FractionConversionException(FastMath.abs(p2),  a0,  q2);	  throw    new    FractionConversionException(value,    a0,    q2);    	compilable	  [FE]  FractionConversionException  	120	1	replace
89	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p2),  a0,  q2);  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p2),  a0,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p2),  a0,  q2);	  throw    new    FractionConversionException(value,    a0,    q2);    	compilable	  [FE]  FractionConversionException  	120	1	replace
90	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]      FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p1),  a0,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	add	throw  new  FractionConversionException(FastMath.abs(p1),  a0,  q2);	  throw    new    FractionConversionException(value,    a0,    q2);    	compilable	  [FE]  FractionConversionException  	120	1	replace
91	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p1),  a0,  q2);  [FE]  FractionConversionException  [FE]      FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p1),  a0,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p1),  a0,  q2);	  throw    new    FractionConversionException(value,    a0,    q2);    	compilable	  [FE]  FractionConversionException  	120	1	replace
92	[BUG]  [BUGGY]  throw  new  FractionConversionException(fastMath.abs(p2),  a0,  q2);  [CE]  cannot  find  symbol  fastMath  [FE]        FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(fastMath.abs(p2),  a0,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(fastMath.abs(p2),  a0,  q2);	  throw    new    FractionConversionException(value,    a0,    q2);    	non-compiled	[CE]  cannot  find  symbol  fastMath	120	None	replace
93	[BUG]  [BUGGY]  throw  new  FractionConversionException(fastMath.abs(p1),  a0,  q2);  [CE]  cannot  find  symbol  fastMath  [FE]          FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(fastMath.abs(p1),  a0,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(fastMath.abs(p1),  a0,  q2);	  throw    new    FractionConversionException(value,    a0,    q2);    	non-compiled	[CE]  cannot  find  symbol  fastMath	120	None	replace
94	[BUG]  [BUGGY]  throw  new  FractionConversionException(fn,  a0,  q2);  [CE]  cannot  find  symbol  fn  [FE]            FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(fn,  a0,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(fn,  a0,  q2);	  throw    new    FractionConversionException(value,    a0,    q2);    	non-compiled	[CE]  cannot  find  symbol  fn	120	None	replace
95	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]              FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  a0,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	add	throw  new  FractionConversionException(n,  a0,  q2);	  throw    new    FractionConversionException(value,    a0,    q2);    	compilable	  [FE]  FractionConversionException  	120	1	replace
96	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  a0,  q2);  [FE]  FractionConversionException  [FE]              FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(n,  a0,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(n,  a0,  q2);	  throw    new    FractionConversionException(value,    a0,    q2);    	compilable	  [FE]  FractionConversionException  	120	1	replace
97	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]                FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(r1),  a0,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	add	throw  new  FractionConversionException(FastMath.abs(r1),  a0,  q2);	  throw    new    FractionConversionException(value,    a0,    q2);    	compilable	  [FE]  FractionConversionException  	120	1	replace
98	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(r1),  a0,  q2);  [FE]  FractionConversionException  [FE]                FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(r1),  a0,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(r1),  a0,  q2);	  throw    new    FractionConversionException(value,    a0,    q2);    	compilable	  [FE]  FractionConversionException  	120	1	replace
99	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p2),  value,  a0);  [CE]  no  suitable  constructor  found  for  FractionConversionException(long,double,long)  [FE]                  FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p2),  value,  a0);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p2),  value,  a0);	  throw    new    FractionConversionException(value,    a0,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(long,double,long)	120	None	replace
100	[BUG]  [BUGGY]  throw  new  FractionConversionException(fastMath.abs(p2),  a0,  value);  [CE]  cannot  find  symbol  fastMath  [FE]                    FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(fastMath.abs(p2),  a0,  value);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(fastMath.abs(p2),  a0,  value);	  throw    new    FractionConversionException(value,    a0,    q2);    	non-compiled	[CE]  cannot  find  symbol  fastMath	120	None	replace
101	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p2),  a0,  value);  [CE]  no  suitable  constructor  found  for  FractionConversionException(long,long,double)  [FE]                      FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(FastMath.abs(p2),  a0,  value);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(FastMath.abs(p2),  a0,  value);	  throw    new    FractionConversionException(value,    a0,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(long,long,double)	120	None	replace
102	[BUG]  [BUGGY]  throw  new  FractionConversionException(a1,  a0,  value);  [CE]  no  suitable  constructor  found  for  FractionConversionException(long,long,double)  [FE]                        FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(a1,  a0,  value);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(a1,  a0,  value);	  throw    new    FractionConversionException(value,    a0,    q2);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(long,long,double)	120	None	replace
103	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]                          FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(a0,  p1,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	add	throw  new  FractionConversionException(a0,  p1,  q2);	  throw    new    FractionConversionException(value,    a0,    q2);    	compilable	  [FE]  FractionConversionException  	120	1	replace
104	[BUG]  [BUGGY]  throw  new  FractionConversionException(a0,  p1,  q2);  [FE]  FractionConversionException  [FE]                          FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(a0,  p1,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(a0,  p1,  q2);	  throw    new    FractionConversionException(value,    a0,    q2);    	compilable	  [FE]  FractionConversionException  	120	1	replace
105	[BUG]  [BUGGY]  throw  new  FractionConversionException(fastMath.abs(p2),  value,  a0);  [CE]  cannot  find  symbol  fastMath  [FE]                            FractionConversionException    [CONTEXT]    do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((FastMath.abs(p2)  >  overflow)  ||  (FastMath.abs(q2)  >  overflow))  {      [BUGGY]  throw  new  FractionConversionException(fastMath.abs(p2),  value,  a0);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  double  DEFAULT_EPSILON  convergent  epsilon  r0  r1  value  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.7071067811865475	215	215	1	replace	throw  new  FractionConversionException(fastMath.abs(p2),  value,  a0);	  throw    new    FractionConversionException(value,    a0,    q2);    	non-compiled	[CE]  cannot  find  symbol  fastMath	120	None	replace
