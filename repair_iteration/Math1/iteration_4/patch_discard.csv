increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2    =(int)FastMath.floor(q2);    p2  =(int)FastMath.floor(p2);  p1  =(long)FastMath.floor(p2);  p2  =(long)FastMath.floor(p2);  ,p2 =(int)FastMath.floor(p2); p1 =(int)FastMath.floor(p2); p2 =(int)FastMath.floor(p2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2    =(int)FastMath.floor(q2);    p2  =(int)FastMath.floor(p2);  p1  =(long)FastMath.floor(p2);  p2  =(long)FastMath.floor(p2);  ,p2 =(long)FastMath.floor(p2); p1 =(long)FastMath.floor(p2); p2 =(long)FastMath.floor(p2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(r1);  p1  =(int)FastMath.floor(r2);  ,p2 =(int)FastMath.floor(p2); p1 =(int)FastMath.floor(q2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(r1);  p1  =(int)FastMath.floor(r2);  ,p2 =(int)FastMath.floor(p1); p1 =(int)FastMath.floor(q2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(long)FastMath.floor(p2)-  1;  p2  =(int)FastMath.floor(p2)-  1;  ,p1 =(long)FastMath.floor(p2)- 1; p2 =(long)FastMath.floor(p2)+ 1;
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2    =(int)FastMath.floor(r1);    p2  =(int)FastMath.floor(r1)-  1;  p0  =(long)FastMath.floor(r1);  p2  =(long)FastMath.floor(r1)-  1;  ,p1 =(int)FastMath.floor(r1);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p1  =  Math.round(p1);  q2  =  Math.round(q2);  ,p1 = Math.round(p2); q2 = Math.round(q2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(r2);  p1  =(int)FastMath.floor(r1);  ,p2 =(int)FastMath.floor(q2); p1 =(int)FastMath.floor(r1);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(r2);  p1  =(int)FastMath.floor(r1);  ,p2 =(int)FastMath.floor(p2); p1 =(int)FastMath.floor(r1);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(r2);  p1  =(int)FastMath.floor(r1);  ,p2 =(int)FastMath.floor(p2); p1 =(int)FastMath.floor(q1);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, throw  new  FractionConversionException(value,  a1,  q0);  ,p0 = p1; p1 = p2; p1 = p2; p2 = p2; p2 = q0;
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, throw  new  FractionConversionException(value,  a1,  q0);  ,p0 = p1; p2 = p2; p1 = p2; p2 = p2; p2 = q0;
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, throw  new  FractionConversionException(value,  a1,  q0);  ,p0 = p1; p1 = p2; p1 = p2; p2 = q2; p2 = q0;
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, throw  new  FractionConversionException(q1,  p1);  p2  =(p2)FastMath.floor(r1);  ,p2 = Math.round(a1); p2 = Math.round(q2); p1 = Math.round(q1); q1 = Math.round(q2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, throw  new  FractionConversionException(q1,  p1);  p2  =(p2)FastMath.floor(r1);  ,p2 = Math.round(a1); p2 = Math.round(q2); p1 = Math.round(q1); q2 = Math.round(q2);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p1  =(int)FastMath.floor(p1);  p2  =(int)FastMath.floor(p2);  p2  =(int)FastMath.ceil(p1);  ,p1 =(p2); p2 =(int)FastMath.floor(p2); p2 =(int)FastMath.ceil(p1);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p1  =(int)FastMath.floor(p1);  p2  =(int)FastMath.floor(p2);  p2  =(int)FastMath.ceil(p1);  ,p1 =(int)FastMath.floor(p2); p2 =(int)FastMath.floor(p2); p2 =(int)FastMath.ceil(p1);
increase failing tests,215,replace, [FE] FractionConversionException testDigitLimitConstructor, p2  =(int)FastMath.floor(p1);  p2  =(int)FastMath.floor(p2);  p1  =(int)FastMath.floor(p1);  ,p2 =(int)FastMath.floor(p2); p2 =(int)FastMath.floor(p1); p1 =(int)FastMath.floor(q2);
increase failing tests,240,replace, [FE] FractionConversionException testDigitLimitConstructor, if(q2  >  maxDenominator)  {  if(maxDenominator  <  epsilon)regal  this.numerator  =(int)p1;  }  ,throw new FractionConversionException(p1, a0, q1);
increase failing tests,240,replace, [FE] FractionConversionException testDigitLimitConstructor, if(q2  >  maxDenominator)  {  if(maxDenominator  <  epsilon)regal  this.numerator  =(int)p1;  }  ,throw new FractionConversionException(p1, a0, p1);
increase failing tests,240,replace, [FE] FractionConversionException testDigitLimitConstructor, if(q2  >  maxDenominator)  {  if(maxDenominator  <  epsilon)regal  this.numerator  =(int)p1;  }  ,throw new FractionConversionException(p1, a0, q2);
increase failing tests,306,replace, [FE] FractionConversionException testDigitLimitConstructor, throw  new  FractionConversionException(n,  a1,  a2);  ,throw new FractionConversionException(n, overflow, a1);
