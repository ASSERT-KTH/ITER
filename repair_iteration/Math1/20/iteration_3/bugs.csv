bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  BigInteger  a1  =(BigInteger)FastMath.floor(value,  r0);  [CE]  method  floor  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              FractionConversionException      [CONTEXT]      throws  FractionConversionException  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  BigInteger  a1  =(BigInteger)FastMath.floor(value,  r0);  [BUGGY]      long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  numerator  =  BigInteger.valueOf(a0);  denominator  =  BigInteger.ONE;  return;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	274	274	2	replace	BigInteger  a1  =(BigInteger)FastMath.floor(value,  r0);	  BigInteger    a1    =(BigInteger)FastMath.floor(r0,    value);    	non-compiled	[CE]  method  floor  in  class  FastMath  cannot  be  applied  to  given  types;	7	None	replace
2	[BUG]  [BUGGY]  BigInteger  a1  =(BigInteger)FastMath.floor(r0,  value,  r1);  [CE]  cannot  find  symbol  r1  [FE]                FractionConversionException      [CONTEXT]      throws  FractionConversionException  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  BigInteger  a1  =(BigInteger)FastMath.floor(r0,  value,  r1);  [BUGGY]      long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  numerator  =  BigInteger.valueOf(a0);  denominator  =  BigInteger.ONE;  return;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	274	274	2	replace	BigInteger  a1  =(BigInteger)FastMath.floor(r0,  value,  r1);	  BigInteger    a1    =(BigInteger)FastMath.floor(r0,    value);    	non-compiled	[CE]  cannot  find  symbol  r1	7	None	replace
3	[BUG]  [BUGGY]  BigInteger  a1  =  denominator;  [CE]  cannot  find  symbol  a0  [FE]                FractionConversionException      [CONTEXT]      throws  FractionConversionException  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  BigInteger  a1  =  denominator;  [BUGGY]      if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  numerator  =  BigInteger.valueOf(a0);  denominator  =  BigInteger.ONE;  return;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	274	274	2	replace	BigInteger  a1  =  denominator;	  BigInteger    a1    =    numerator;    	non-compiled	[CE]  cannot  find  symbol  a0	11	None	replace
4	[BUG]  [BUGGY]  long  a0  =  overflow.longValue();  [CE]  long  cannot  be  dereferenced  [FE]              FractionConversionException      [CONTEXT]      throws  FractionConversionException  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  long  a0  =  overflow.longValue();  [BUGGY]      if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  numerator  =  BigInteger.valueOf(a0);  denominator  =  BigInteger.ONE;  return;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	274	274	2	replace	long  a0  =  overflow.longValue();	  long    a0    =    value.longValue();    	non-compiled	[CE]  long  cannot  be  dereferenced	15	None	replace
5	[BUG]  [BUGGY]  double  a0  =  (double)FastMath.floor(value);  [CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long)  [FE]        FractionConversionException      [CONTEXT]      throws  FractionConversionException  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  double  a0  =  (double)FastMath.floor(value);  [BUGGY]      if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  numerator  =  BigInteger.valueOf(a0);  denominator  =  BigInteger.ONE;  return;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	274	274	2	replace	double  a0  =  (double)FastMath.floor(value);	  int    a0    =    (int)FastMath.floor(value);    	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(double,double,long)	9	None	replace
6	[BUG]  [BUGGY]  BigInteger  r1  =  BigInteger.valueOf(r0);  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                FractionConversionException      [CONTEXT]      throws  FractionConversionException  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  BigInteger  r1  =  BigInteger.valueOf(r0);  [BUGGY]      if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  numerator  =  BigInteger.valueOf(a0);  denominator  =  BigInteger.ONE;  return;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	274	274	2	replace	BigInteger  r1  =  BigInteger.valueOf(r0);	  BigInteger    a1    =    BigInteger.valueOf(r1);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	14	None	replace
7	[BUG]  [BUGGY]  BigInteger  a1  =  (int)FastMath.floor(r0,  overflow);  [CE]  method  floor  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                FractionConversionException      [CONTEXT]      throws  FractionConversionException  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  BigInteger  a1  =  (int)FastMath.floor(r0,  overflow);  [BUGGY]      long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  numerator  =  BigInteger.valueOf(a0);  denominator  =  BigInteger.ONE;  return;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	274	274	2	replace	BigInteger  a1  =  (int)FastMath.floor(r0,  overflow);	  BigInteger    a1    =    (int)FastMath.floor(r0);    	non-compiled	[CE]  method  floor  in  class  FastMath  cannot  be  applied  to  given  types;	1	None	replace
8	[BUG]  [BUGGY]  double  a0  =  (double)FastMath.floor(value,  r0);  [CE]  method  floor  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            FractionConversionException      [CONTEXT]      throws  FractionConversionException  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  double  a0  =  (double)FastMath.floor(value,  r0);  [BUGGY]      if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  numerator  =  BigInteger.valueOf(a0);  denominator  =  BigInteger.ONE;  return;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	274	274	2	replace	double  a0  =  (double)FastMath.floor(value,  r0);	  double    a0    =    (double)FastMath.floor(r0);    	non-compiled	[CE]  method  floor  in  class  FastMath  cannot  be  applied  to  given  types;	5	None	replace
9	[BUG]  [BUGGY]  BigInteger  a1  =(BigInteger)FastMath.floor(r0,  r1);  [CE]  cannot  find  symbol  r1  [FE]            FractionConversionException      [CONTEXT]      throws  FractionConversionException  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  BigInteger  a1  =(BigInteger)FastMath.floor(r0,  r1);  [BUGGY]      long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  numerator  =  BigInteger.valueOf(a0);  denominator  =  BigInteger.ONE;  return;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	274	274	2	replace	BigInteger  a1  =(BigInteger)FastMath.floor(r0,  r1);	  BigInteger    a1    =(BigInteger)FastMath.floor(r0,    overflow);    	non-compiled	[CE]  cannot  find  symbol  r1	6	None	replace
10	[BUG]  [BUGGY]  long  a1  =(long)FastMath.floor(r1);  [CE]  cannot  find  symbol  r1  [FE]            FractionConversionException      [CONTEXT]      throws  FractionConversionException  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  long  a1  =(long)FastMath.floor(r1);  [BUGGY]      long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  numerator  =  BigInteger.valueOf(a0);  denominator  =  BigInteger.ONE;  return;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	274	274	2	replace	long  a1  =(long)FastMath.floor(r1);	  long    a1    =(long)FastMath.floor(r0);    	non-compiled	[CE]  cannot  find  symbol  r1	8	None	replace
11	[BUG]  [BUGGY]  BigInteger  a1  =  BigInteger.valueOf(r0,  value);  [CE]  no  suitable  method  found  for  valueOf(double,double)  [FE]              FractionConversionException      [CONTEXT]      throws  FractionConversionException  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  BigInteger  a1  =  BigInteger.valueOf(r0,  value);  [BUGGY]      if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  numerator  =  BigInteger.valueOf(a0);  denominator  =  BigInteger.ONE;  return;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	274	274	2	replace	BigInteger  a1  =  BigInteger.valueOf(r0,  value);	  BigInteger    a1    =    BigInteger.valueOf(r0);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double,double)	13	None	replace
12	[BUG]  [BUGGY]  BigInteger  a1  =  BigInteger.valueOf(r0,  overflow);  [CE]  no  suitable  method  found  for  valueOf(double,long)  [FE]                FractionConversionException      [CONTEXT]      throws  FractionConversionException  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  BigInteger  a1  =  BigInteger.valueOf(r0,  overflow);  [BUGGY]      if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  numerator  =  BigInteger.valueOf(a0);  denominator  =  BigInteger.ONE;  return;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	274	274	2	replace	BigInteger  a1  =  BigInteger.valueOf(r0,  overflow);	  BigInteger    a1    =    BigInteger.valueOf(r0);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double,long)	13	None	replace
13	[BUG]  [BUGGY]  BigInteger  a1  =  (long)FastMath.floor(r0,  r1);  [CE]  cannot  find  symbol  r1  [FE]                  FractionConversionException      [CONTEXT]      throws  FractionConversionException  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  BigInteger  a1  =  (long)FastMath.floor(r0,  r1);  [BUGGY]      long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  numerator  =  BigInteger.valueOf(a0);  denominator  =  BigInteger.ONE;  return;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	274	274	2	replace	BigInteger  a1  =  (long)FastMath.floor(r0,  r1);	  BigInteger    a1    =    (long)FastMath.floor(r0,    overflow);    	non-compiled	[CE]  cannot  find  symbol  r1	2	None	replace
14	[BUG]  [BUGGY]  BigInteger  a1  =  r0.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              FractionConversionException      [CONTEXT]      throws  FractionConversionException  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  BigInteger  a1  =  r0.doubleValue();  [BUGGY]      if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  numerator  =  BigInteger.valueOf(a0);  denominator  =  BigInteger.ONE;  return;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	274	274	2	replace	BigInteger  a1  =  r0.doubleValue();	  BigInteger    a1    =    value.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	10	None	replace
15	[BUG]  [BUGGY]  int  a0  =  (int)FastMath.floor(value);  int  a0  =  (int)FastMath.floor(value);  [CE]  variable  a0  is  already  defined  in  constructor  BigFraction(double,double,int,int)  [FE]        FractionConversionException      [CONTEXT]      throws  FractionConversionException  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  a0  =  (int)FastMath.floor(value);  int  a0  =  (int)FastMath.floor(value);  [BUGGY]      if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  numerator  =  BigInteger.valueOf(a0);  denominator  =  BigInteger.ONE;  return;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	274	274	2	replace	int  a0  =  (int)FastMath.floor(value);  int  a0  =  (int)FastMath.floor(value);	  long    a0    =    (long)FastMath.floor(value);    long    a0    =    (long)FastMath.floor(value);    	non-compiled	[CE]  variable  a0  is  already  defined  in  constructor  BigFraction(double,double,int,int)	3	None	replace
16	[BUG]  [BUGGY]  BigInteger  a1  =  (long)FastMath.floor(r0,  value);  [CE]  method  floor  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                  FractionConversionException      [CONTEXT]      throws  FractionConversionException  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  BigInteger  a1  =  (long)FastMath.floor(r0,  value);  [BUGGY]      long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  numerator  =  BigInteger.valueOf(a0);  denominator  =  BigInteger.ONE;  return;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	274	274	2	replace	BigInteger  a1  =  (long)FastMath.floor(r0,  value);	  BigInteger    a1    =    (long)FastMath.floor(r0,    overflow);    	non-compiled	[CE]  method  floor  in  class  FastMath  cannot  be  applied  to  given  types;	2	None	replace
17	[BUG]  [BUGGY]  double  a0  =  (double)FastMath.floor(r0,  value);  [CE]  method  floor  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            FractionConversionException      [CONTEXT]      throws  FractionConversionException  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  double  a0  =  (double)FastMath.floor(r0,  value);  [BUGGY]      if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  numerator  =  BigInteger.valueOf(a0);  denominator  =  BigInteger.ONE;  return;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	274	274	2	replace	double  a0  =  (double)FastMath.floor(r0,  value);	  double    a0    =    (double)FastMath.floor(r0);    	non-compiled	[CE]  method  floor  in  class  FastMath  cannot  be  applied  to  given  types;	5	None	replace
18	[BUG]  [BUGGY]  BigInteger  a1  =(BigInteger)FastMath.floor(r0,  value  +  1);  [CE]  method  floor  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            FractionConversionException      [CONTEXT]      throws  FractionConversionException  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  BigInteger  a1  =(BigInteger)FastMath.floor(r0,  value  +  1);  [BUGGY]      long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  numerator  =  BigInteger.valueOf(a0);  denominator  =  BigInteger.ONE;  return;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	274	274	2	replace	BigInteger  a1  =(BigInteger)FastMath.floor(r0,  value  +  1);	  BigInteger    a1    =(BigInteger)FastMath.floor(r0    +    1);    	non-compiled	[CE]  method  floor  in  class  FastMath  cannot  be  applied  to  given  types;	12	None	replace
19	[BUG]  [BUGGY]  BigInteger  a1  =(BigInteger)FastMath.floor(r0,  value,  epsilon);  [CE]  method  floor  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              FractionConversionException      [CONTEXT]      throws  FractionConversionException  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  BigInteger  a1  =(BigInteger)FastMath.floor(r0,  value,  epsilon);  [BUGGY]      long  a0  =  (long)  FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  numerator  =  BigInteger.valueOf(a0);  denominator  =  BigInteger.ONE;  return;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	274	274	2	replace	BigInteger  a1  =(BigInteger)FastMath.floor(r0,  value,  epsilon);	  BigInteger    a1    =(BigInteger)FastMath.floor(r0,    value);    	non-compiled	[CE]  method  floor  in  class  FastMath  cannot  be  applied  to  given  types;	7	None	replace
20	[BUG]  [BUGGY]  BigInteger  a1  =  BigInteger.valueOf(r0,  1);  [CE]  no  suitable  method  found  for  valueOf(double,int)  [FE]              FractionConversionException      [CONTEXT]      throws  FractionConversionException  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  BigInteger  a1  =  BigInteger.valueOf(r0,  1);  [BUGGY]      if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  numerator  =  BigInteger.valueOf(a0);  denominator  =  BigInteger.ONE;  return;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	274	274	2	replace	BigInteger  a1  =  BigInteger.valueOf(r0,  1);	  BigInteger    a1    =    BigInteger.valueOf(r0);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double,int)	13	None	replace
