bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  BigInteger  value  =  BigInteger.valueOf(q2);  [CE]  while  expected  [FE]        FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  BigInteger  value  =  BigInteger.valueOf(q2);  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  value  =  BigInteger.valueOf(q2);	      BigInteger    value    =    BigInteger.valueOf(r1);    	non-compiled	[CE]  while  expected	13	None	replace
2	[BUG]  [BUGGY]  BigInteger  value  =  BigInteger.valueOf(0);  [CE]  while  expected  [FE]          FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  BigInteger  value  =  BigInteger.valueOf(0);  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  value  =  BigInteger.valueOf(0);	      BigInteger    value    =    BigInteger.valueOf(r1);    	non-compiled	[CE]  while  expected	13	None	replace
3	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	2	None	replace
4	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]      FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	2	None	replace
5	[BUG]  [BUGGY]  try  {  if((  a2  >  overflow)  ||(q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  'try'  without  'catch'  or  'finally'  [FE]          FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  try  {  if((  a2  >  overflow)  ||(q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	try  {  if((  a2  >  overflow)  ||(q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q1);  }	      if(n    <    maxIterations)    {    if((    a2    >    overflow)||(q2    >    overflow))    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	20	None	replace
6	[BUG]  [BUGGY]  try  {  if((  a2  >  overflow)  ||(q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [CE]  'try'  without  'catch'  or  'finally'  [FE]            FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  try  {  if((  a2  >  overflow)  ||(q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	try  {  if((  a2  >  overflow)  ||(q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q0);  }	      if(n    <    maxIterations)    {    if((    a2    >    overflow)||(q2    >    overflow))    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	20	None	replace
7	[BUG]  [BUGGY]  BigInteger  value  =(BigInteger)FastMath.floor(value);  [CE]  while  expected  [FE]            FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  BigInteger  value  =(BigInteger)FastMath.floor(value);  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  value  =(BigInteger)FastMath.floor(value);	      	non-compiled	[CE]  while  expected	5	None	replace
8	[BUG]  [BUGGY]  BigInteger  value  =(BigInteger)FastMath.floor(r1);  [CE]  while  expected  [FE]              FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  BigInteger  value  =(BigInteger)FastMath.floor(r1);  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  value  =(BigInteger)FastMath.floor(r1);	      	non-compiled	[CE]  while  expected	5	None	replace
9	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  <  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a1  ||  q2  >  a1)  {	  if(q2    >    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	4	6	replace
10	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1)  {  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  <  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1)  {	  if(q2    >    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	4	6	replace
11	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  ==  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  ==  0.0)  {	  if(q2    >=    0.0)    {    	compilable	  [FE]  FractionConversionException  	12	1	replace
12	[BUG]  [BUGGY]  if(q2  ==  0.0)  {  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  ==  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  ==  0.0)  {	  if(q2    >=    0.0)    {    	compilable	  [FE]  FractionConversionException  	12	1	replace
13	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	18	6	replace
14	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	18	6	replace
15	[BUG]  [BUGGY]  BigInteger  p2  =(long)FastMath.floor(r1);  [CE]  while  expected  [FE]          FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  BigInteger  p2  =(long)FastMath.floor(r1);  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  p2  =(long)FastMath.floor(r1);	      BigInteger    p2    =(int)FastMath.floor(r1);    	non-compiled	[CE]  while  expected	7	None	replace
16	[BUG]  [BUGGY]  BigInteger  p2  =(BigInteger)FastMath.floor(r0);  [CE]  while  expected  [FE]        FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  BigInteger  p2  =(BigInteger)FastMath.floor(r0);  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  p2  =(BigInteger)FastMath.floor(r0);	      BigInteger    p2    =(BigInteger)FastMath.floor(r1);    	non-compiled	[CE]  while  expected	6	None	replace
17	[BUG]  [BUGGY]  try  {  if((  p2  >  overflow)  ||(q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  'try'  without  'catch'  or  'finally'  [FE]        FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  try  {  if((  p2  >  overflow)  ||(q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	try  {  if((  p2  >  overflow)  ||(q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q1);  }	      if(n    <    maxIterations)    {    if((    a2    >    overflow)||(q2    >    overflow))    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	19	None	replace
18	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  if(q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [CE]  ')'  expected  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  if(q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a	  	non-compiled	[CE]  ')'  expected	1	None	add
19	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  if(q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [CE]  ')'  expected  [FE]      FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  if(q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a	  	non-compiled	[CE]  ')'  expected	1	None	add
20	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  if(q2  >  a1  ||  q2  <  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [CE]  ')'  expected  [FE]        FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  if(q2  >  a1  ||  q2  <  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2  >  a1  ||  q2  <  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a	  	non-compiled	[CE]  ')'  expected	1	None	add
21	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
22	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  If(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [CE]  ';'  expected  [FE]      FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  If(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    If(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
23	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	16	6	replace
24	[BUG]  [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	16	6	replace
25	[BUG]  [BUGGY]  BigInteger  p2  =(BigInteger)FieldMath.floor(r0);  [CE]  while  expected  [FE]            FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  BigInteger  p2  =(BigInteger)FieldMath.floor(r0);  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  p2  =(BigInteger)FieldMath.floor(r0);	      BigInteger    p2    =(BigInteger)FieldMath.floor(r1);    	non-compiled	[CE]  while  expected	8	None	replace
26	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  ==  0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  ==  0)  {	  if(q2    >=    0)    {    	compilable	  [FE]  FractionConversionException  	10	1	replace
27	[BUG]  [BUGGY]  if(q2  ==  0)  {  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  ==  0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  ==  0)  {	  if(q2    >=    0)    {    	compilable	  [FE]  FractionConversionException  	10	1	replace
28	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]      FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2!=  0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2!=  0)  {	  if(q2    >=    0)    {    	compilable	  [FE]  FractionConversionException  	10	6	replace
29	[BUG]  [BUGGY]  if(q2!=  0)  {  [FE]  FractionConversionException  [FE]      FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2!=  0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2!=  0)  {	  if(q2    >=    0)    {    	compilable	  [FE]  FractionConversionException  	10	6	replace
30	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  <  a1)  {  if(q2  >  a1  ||  q2  <  a1)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >  a1  ||  q2  <  a1)  {  if(q2  >  a1  ||  q2  <  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    >    a1    ||    q2    <    a1)    {    if(q2  >  a1  ||  q2  <  a1)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
31	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  <  a1)  {  If(q2  >  a1  ||  q2  <  a1)  {  [CE]  ';'  expected  [FE]      FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >  a1  ||  q2  <  a1)  {  If(q2  >  a1  ||  q2  <  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    >    a1    ||    q2    <    a1)    {    If(q2  >  a1  ||  q2  <  a1)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
32	[BUG]  [BUGGY]  if(q2  >=  0)  {  if(q2  >=  0)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >=  0)  {  if(q2  >=  0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    >=    0)    {    if(q2  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
33	[BUG]  [BUGGY]  if(q2  >=  0)  {  if(q2!=  0)  {  [CE]  illegal  start  of  expression  [FE]      FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >=  0)  {  if(q2!=  0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    >=    0)    {    if(q2!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
34	[BUG]  [BUGGY]  if(q2  >=  0)  {  if(q2  >>  0)  {  [CE]  illegal  start  of  expression  [FE]        FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >=  0)  {  if(q2  >>  0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    >=    0)    {    if(q2  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
35	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
36	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [CE]  illegal  start  of  expression  [FE]      FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
37	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [CE]  illegal  start  of  expression  [FE]        FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
38	[BUG]  [BUGGY]  if(q2  >=  0.0)  {  if(q2  >=  0.0)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >=  0.0)  {  if(q2  >=  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    >=    0.0)    {    if(q2  >=  0.0)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
39	[BUG]  [BUGGY]  if(q2  >=  0.0)  {  if(q2!=  0.0)  {  [CE]  illegal  start  of  expression  [FE]      FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >=  0.0)  {  if(q2!=  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    >=    0.0)    {    if(q2!=  0.0)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
40	[BUG]  [BUGGY]  if(q2  >=  0.0)  {  if(q2  >>  0.0)  {  [CE]  illegal  start  of  expression  [FE]        FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >=  0.0)  {  if(q2  >>  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    >=    0.0)    {    if(q2  >>  0.0)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
41	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
42	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [CE]  illegal  start  of  expression  [FE]      FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p2)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
43	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >=  a1  ||  q2  <  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  >=  a1  ||  q2  <  a1)  {	  if(q2    >    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	4	6	replace
44	[BUG]  [BUGGY]  if(q2  >=  a1  ||  q2  <  a1)  {  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >=  a1  ||  q2  <  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  >=  a1  ||  q2  <  a1)  {	  if(q2    >    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	4	6	replace
45	[BUG]  [BUGGY]  read();  [CE]  while  expected  [FE]        FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  read();  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	read();	      if(n    <    maxIterations)    {    if((    a2    >    overflow)||(q2    >    overflow))    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  while  expected	19	None	replace
46	[BUG]  [BUGGY]  luate(n,  p2);  [CE]  while  expected  [FE]          FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  luate(n,  p2);  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	luate(n,  p2);	      if(n    <    maxIterations)    {    if((    a2    >    overflow)||(q2    >    overflow))    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  while  expected	19	None	replace
47	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  q0  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  q0  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  q0  >  p2)  {	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	2	None	replace
48	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]      FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	2	None	replace
49	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  <  a1)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  <  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  <  a1)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
50	[BUG]  [BUGGY]  BigInteger  p2  =(BigInteger)FieldMath.floor(r2);  [CE]  while  expected  [FE]            FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  BigInteger  p2  =(BigInteger)FieldMath.floor(r2);  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  p2  =(BigInteger)FieldMath.floor(r2);	      BigInteger    p2    =(BigInteger)FieldMath.floor(r1);    	non-compiled	[CE]  while  expected	8	None	replace
51	[BUG]  [BUGGY]  BigInteger  p2  =(int)FastMath.floor(r2);  [CE]  while  expected  [FE]          FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  BigInteger  p2  =(int)FastMath.floor(r2);  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  p2  =(int)FastMath.floor(r2);	      BigInteger    p2    =(int)FastMath.floor(r1);    	non-compiled	[CE]  while  expected	7	None	replace
52	[BUG]  [BUGGY]  BigInteger  r1  =  BigInteger.valueOf(r1);  [CE]  while  expected  [FE]        FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  BigInteger  r1  =  BigInteger.valueOf(r1);  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  r1  =  BigInteger.valueOf(r1);	      BigInteger    value    =    BigInteger.valueOf(r1);    	non-compiled	[CE]  while  expected	13	None	replace
53	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	18	6	replace
54	[BUG]  [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	18	6	replace
55	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2!=  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2!=  0.0)  {	  if(q2    >=    0.0)    {    	compilable	  [FE]  FractionConversionException  	12	6	replace
56	[BUG]  [BUGGY]  if(q2!=  0.0)  {  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2!=  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2!=  0.0)  {	  if(q2    >=    0.0)    {    	compilable	  [FE]  FractionConversionException  	12	6	replace
57	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [CE]  ')'  expected  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a	  	non-compiled	[CE]  ')'  expected	1	None	add
58	[BUG]  [BUGGY]  if(q2  >=  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >=  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  >=  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p2)  {	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	2	None	replace
59	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p2  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]      FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p2  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p2  >  p2)  {	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	2	None	replace
60	[BUG]  [BUGGY]  parent  =  parent.getParent();  [CE]  while  expected  [FE]        FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  parent  =  parent.getParent();  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	parent  =  parent.getParent();	      if(n    <    maxIterations)    {    if((    a2    >    overflow)||(q2    >    overflow))    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  while  expected	19	None	replace
61	[BUG]  [BUGGY]  if(q2  <  =  0.0)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  <  =  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  =  0.0)  {	  if(q2    >=    0.0)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
62	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]      FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  >  0.0)  {	  if(q2    >=    0.0)    {    	compilable	  [FE]  FractionConversionException  	12	6	replace
63	[BUG]  [BUGGY]  if(q2  >  0.0)  {  [FE]  FractionConversionException  [FE]      FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  >  0.0)  {	  if(q2    >=    0.0)    {    	compilable	  [FE]  FractionConversionException  	12	6	replace
64	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	16	6	replace
65	[BUG]  [BUGGY]  if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	16	6	replace
66	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
67	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [CE]  illegal  start  of  expression  [FE]      FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
68	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [CE]  illegal  start  of  expression  [FE]        FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p2)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
69	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >  0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  >  0)  {	  if(q2    >=    0)    {    	compilable	  [FE]  FractionConversionException  	10	6	replace
70	[BUG]  [BUGGY]  if(q2  >  0)  {  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >  0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  >  0)  {	  if(q2    >=    0)    {    	compilable	  [FE]  FractionConversionException  	10	6	replace
71	[BUG]  [BUGGY]  if(q2  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]      FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  <  =  0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  =  0)  {	  if(q2    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
72	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  <  a1  ||  q2  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  <  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	18	None	replace
73	[BUG]  [BUGGY]  q2  =(a1  *  q2)+  q0;  [CE]  while  expected  [FE]            FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  q2  =(a1  *  q2)+  q0;  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	q2  =(a1  *  q2)+  q0;	      	non-compiled	[CE]  while  expected	5	None	replace
74	[BUG]  [BUGGY]  q2  =(a1  *  q1)+  q0;  [CE]  while  expected  [FE]              FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  q2  =(a1  *  q1)+  q0;  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	q2  =(a1  *  q1)+  q0;	      	non-compiled	[CE]  while  expected	5	None	replace
75	[BUG]  [BUGGY]  readMore();  [CE]  while  expected  [FE]          FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  readMore();  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	readMore();	      if(n    <    maxIterations)    {    if((    a2    >    overflow)||(q2    >    overflow))    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  while  expected	20	None	replace
76	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
77	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  [CE]  illegal  start  of  expression  [FE]      FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
78	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [CE]  illegal  start  of  expression  [FE]        FractionConversionException    [CONTEXT]    long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;    [BUGGY]  if(q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
