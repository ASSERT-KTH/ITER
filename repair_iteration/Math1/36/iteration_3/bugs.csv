bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	35	6	replace
2	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	35	6	replace
3	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p0  <  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  p1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(p0  <  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  p1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	35	6	replace
4	[BUG]  [BUGGY]  if(p0  <  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  p1)  {  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p0  <  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  p1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(p0  <  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  p1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	35	6	replace
5	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >=  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q1  <  a0  ||  q2  >  a1  ||  q2  >=  a1  ||  q2  <  a1)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	24	6	replace
6	[BUG]  [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >=  a1  ||  q2  <  a1)  {  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >=  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  <  a0  ||  q2  >  a1  ||  q2  >=  a1  ||  q2  <  a1)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	24	6	replace
7	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	14	6	replace
8	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p1)  {  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	14	6	replace
9	[BUG]  [BUGGY]  if(q0  <  a1  ||  q0  >  a1  ||  q0  <  a1  ||  q0  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [CE]  ')'  expected  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q0  <  a1  ||  q0  >  a1  ||  q0  <  a1  ||  q0  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q0  <  a1  ||  q0  >  a1  ||  q0  <  a1  ||  q0  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a    	non-compiled	[CE]  ')'  expected	19	None	replace
10	[BUG]  [BUGGY]  if(q0  <  a1  ||  q0  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [CE]  ')'  expected  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q0  <  a1  ||  q0  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q0  <  a1  ||  q0  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a    	non-compiled	[CE]  ')'  expected	19	None	replace
11	[BUG]  [BUGGY]  if(q2  ==  0.0)  {  if(q2  ==  0.0)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  ==  0.0)  {  if(q2  ==  0.0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    ==    0.0)    {    if(q2  ==  0.0)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
12	[BUG]  [BUGGY]  if(q2  ==  0.0)  {  if(q2!=  0.0)  {  [CE]  illegal  start  of  expression  [FE]      FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  ==  0.0)  {  if(q2!=  0.0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    ==    0.0)    {    if(q2!=  0.0)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
13	[BUG]  [BUGGY]  if(q0  <  a1  ||  q0  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [CE]  ')'  expected  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q0  <  a1  ||  q0  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q0  <  a1  ||  q0  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2    >    a1    ||    q2    <    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a    	non-compiled	[CE]  ')'  expected	20	None	replace
14	[BUG]  [BUGGY]  if(q0  <  a1  ||  q0  >  a1  ||  q0  <  a1  ||  q0  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [CE]  ')'  expected  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q0  <  a1  ||  q0  >  a1  ||  q0  <  a1  ||  q0  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q0  <  a1  ||  q0  >  a1  ||  q0  <  a1  ||  q0  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a    	non-compiled	[CE]  ')'  expected	18	None	replace
15	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >=  0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q1  >=  0)  {	  if(q2    >=    0)    {    if(q2!=    0)    {    	compilable	  [FE]  FractionConversionException  	33	6	replace
16	[BUG]  [BUGGY]  if(q1  >=  0)  {  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >=  0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  >=  0)  {	  if(q2    >=    0)    {    if(q2!=    0)    {    	compilable	  [FE]  FractionConversionException  	33	6	replace
17	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q2  >  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a0  ||  q2  >  a1)  {	  if(q2    <    a1    ||    q2    >    a1)    {    	compilable	  [FE]  FractionConversionException  	10	6	replace
18	[BUG]  [BUGGY]  if(q2  <  a0  ||  q2  >  a1)  {  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q2  >  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a0  ||  q2  >  a1)  {	  if(q2    <    a1    ||    q2    >    a1)    {    	compilable	  [FE]  FractionConversionException  	10	6	replace
19	[BUG]  [BUGGY]  if(q1  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  =  0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  <  =  0)  {	  if(q2    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
20	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >=  a0  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  >=  a0  ||  q2  <  a1)  {	  if(q2    >=    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	44	6	replace
21	[BUG]  [BUGGY]  if(q2  >=  a0  ||  q2  <  a1)  {  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >=  a0  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  >=  a0  ||  q2  <  a1)  {	  if(q2    >=    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	44	6	replace
22	[BUG]  [BUGGY]  if(q2!=  0.0)  {  if(q2!=  0.0)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2!=  0.0)  {  if(q2!=  0.0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2!=    0.0)    {    if(q2!=  0.0)  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
23	[BUG]  [BUGGY]  if(q2!=  0.0)  {  if(q2  >=  0.0)  {  [CE]  illegal  start  of  expression  [FE]      FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2!=  0.0)  {  if(q2  >=  0.0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2!=    0.0)    {    if(q2  >=  0.0)  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
24	[BUG]  [BUGGY]  if(q2!=  0.0)  {  if(q2  ==  0.0)  {  [CE]  illegal  start  of  expression  [FE]        FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2!=  0.0)  {  if(q2  ==  0.0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2!=    0.0)    {    if(q2  ==  0.0)  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
25	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [CE]  ')'  expected  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  ')'  expected	76	None	replace
26	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	76	6	replace
27	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	76	6	replace
28	[BUG]  [BUGGY]  readFully();  [CE]  while  expected  [FE]              FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  readFully();  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	readFully();	  readMore();    	non-compiled	[CE]  while  expected	75	None	replace
29	[BUG]  [BUGGY]  BigInteger  value  =  BigInteger.valueOf(p1);  [CE]  while  expected  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  BigInteger  value  =  BigInteger.valueOf(p1);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  value  =  BigInteger.valueOf(p1);	  BigInteger    value    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  while  expected	1	None	replace
30	[BUG]  [BUGGY]  if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
31	[BUG]  [BUGGY]  if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  If(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [CE]  ';'  expected  [FE]      FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  If(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    If(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
32	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	67	6	replace
33	[BUG]  [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	67	6	replace
34	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  <  a1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	49	6	replace
35	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  <  a1)  {  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  <  a1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	49	6	replace
36	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q1  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  <  a1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	49	6	replace
37	[BUG]  [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  <  a1)  {  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  <  a1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	49	6	replace
38	[BUG]  [BUGGY]  if(q2!=  0)  {  if(q2!=  0)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2!=  0)  {  if(q2!=  0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2!=    0)    {    if(q2!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
39	[BUG]  [BUGGY]  if(q2!=  0)  {  if(q2  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2!=  0)  {  if(q2  >=  0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2!=    0)    {    if(q2  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
40	[BUG]  [BUGGY]  if(q2!=  0)  {  if(q2  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2!=  0)  {  if(q2  ==  0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2!=    0)    {    if(q2  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
41	[BUG]  [BUGGY]  BigInteger  value  =(BigInteger)FastMath.floor(q2);  [CE]  while  expected  [FE]                FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  BigInteger  value  =(BigInteger)FastMath.floor(q2);  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  value  =(BigInteger)FastMath.floor(q2);	  BigInteger    value    =(BigInteger)FastMath.floor(value);    	non-compiled	[CE]  while  expected	7	None	replace
42	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >=  0.0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q1  >=  0.0)  {	  if(q2    >=    0.0)    {    if(q2    >>    0.0)    {    	compilable	  [FE]  FractionConversionException  	40	6	replace
43	[BUG]  [BUGGY]  if(q1  >=  0.0)  {  [FE]  FractionConversionException  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >=  0.0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  >=  0.0)  {	  if(q2    >=    0.0)    {    if(q2    >>    0.0)    {    	compilable	  [FE]  FractionConversionException  	40	6	replace
44	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >  0.0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q1  >  0.0)  {	  if(q2    >    0.0)    {    	compilable	  [FE]  FractionConversionException  	63	6	replace
45	[BUG]  [BUGGY]  if(q1  >  0.0)  {  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >  0.0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  >  0.0)  {	  if(q2    >    0.0)    {    	compilable	  [FE]  FractionConversionException  	63	6	replace
46	[BUG]  [BUGGY]  if(q2  >=  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a2  ||  p0  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >=  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a2  ||  p0  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  >=  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a2  ||  p0  >  p2)  {	  if(q2    >=    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a2    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	58	None	replace
47	[BUG]  [BUGGY]  if(q1  >=  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a2  ||  p0  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >=  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a2  ||  p0  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  >=  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a2  ||  p0  >  p2)  {	  if(q2    >=    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a2    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	58	None	replace
48	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	54	6	replace
49	[BUG]  [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	54	6	replace
50	[BUG]  [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [CE]  cannot  find  symbol  a2  [FE]      FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	54	None	replace
51	[BUG]  [BUGGY]  readFully(q2);  [CE]  while  expected  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  readFully(q2);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	readFully(q2);	  read();    	non-compiled	[CE]  while  expected	45	None	replace
52	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1)  {  If(q2  >  a1  ||  q2  <  a1)  {  [CE]  ';'  expected  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1)  {  If(q2  >  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1)  {  If(q2  >  a1  ||  q2  <  a1)  {	  if(q2    >    a1    ||    q2    <    a1)    {    If(q2    >    a1    ||    q2    <    a1)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
53	[BUG]  [BUGGY]  if(q2  <  a1)  {  If(q2  >  a1  ||  q2  <  a1)  {  [CE]  ';'  expected  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1)  {  If(q2  >  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1)  {  If(q2  >  a1  ||  q2  <  a1)  {	  if(q2    >    a1    ||    q2    <    a1)    {    If(q2    >    a1    ||    q2    <    a1)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
54	[BUG]  [BUGGY]  if(q1  <  =  0.0)  {  [CE]  illegal  start  of  expression  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  =  0.0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  <  =  0.0)  {	  if(q2    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
55	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [CE]  ')'  expected  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  ')'  expected	78	None	replace
56	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	41	6	replace
57	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	41	6	replace
58	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [CE]  ')'  expected  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
59	[BUG]  [BUGGY]  BigInteger  r1  =  BigInteger.valueOf(0);  [CE]  while  expected  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  BigInteger  r1  =  BigInteger.valueOf(0);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  r1  =  BigInteger.valueOf(0);	  BigInteger    r1    =    BigInteger.valueOf(r1);    	non-compiled	[CE]  while  expected	52	None	replace
60	[BUG]  [BUGGY]  BigInteger  r1  =  BigInteger.valueOf(r0);  [CE]  while  expected  [FE]              FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  BigInteger  r1  =  BigInteger.valueOf(r0);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  r1  =  BigInteger.valueOf(r0);	  BigInteger    r1    =    BigInteger.valueOf(r1);    	non-compiled	[CE]  while  expected	52	None	replace
61	[BUG]  [BUGGY]  q2  =(a1  *  q2)+  q1;  [CE]  while  expected  [FE]                FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  q2  =(a1  *  q2)+  q1;  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	q2  =(a1  *  q2)+  q1;	  q2    =(a1    *    q2)+    q0;    	non-compiled	[CE]  while  expected	73	None	replace
62	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  ==  0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q1  ==  0)  {	  if(q2    ==    0)    {    	compilable	  [FE]  FractionConversionException  	27	1	replace
63	[BUG]  [BUGGY]  if(q1  ==  0)  {  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  ==  0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  ==  0)  {	  if(q2    ==    0)    {    	compilable	  [FE]  FractionConversionException  	27	1	replace
64	[BUG]  [BUGGY]  if(p0  <  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  p2  >  a2  ||  q2  >  a  [CE]  ')'  expected  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p0  <  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  p2  >  a2  ||  q2  >  a  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(p0  <  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  p2  >  a2  ||  q2  >  a	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a2    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  ')'  expected	48	None	replace
65	[BUG]  [BUGGY]  if(p0  <  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  p2  >  a2  ||  p0  >  a  [CE]  ')'  expected  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p0  <  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  p2  >  a2  ||  p0  >  a  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(p0  <  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  p2  >  a2  ||  p0  >  a	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a2    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  ')'  expected	48	None	replace
66	[BUG]  [BUGGY]  if(p0  <  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p2  >  a2  ||  p2  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p0  <  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p2  >  a2  ||  p2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(p0  <  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p0  >  a1  ||  p2  >  a2  ||  p2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a2    ||    p2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	59	None	replace
67	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p2  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a2    ||    p2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	59	None	replace
68	[BUG]  [BUGGY]  if(q2  >  0.0)  {  if(q2  >  0.0)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  0.0)  {  if(q2  >  0.0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    >    0.0)    {    if(q2  >  0.0)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
69	[BUG]  [BUGGY]  if(q2  >  0.0)  {  If(q2  >  0.0)  {  [CE]  ';'  expected  [FE]      FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  0.0)  {  If(q2  >  0.0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    >    0.0)    {    If(q2  >  0.0)  {	  	non-compiled	[CE]  ';'  expected	62	None	add
70	[BUG]  [BUGGY]  luate(n,  q2);  [CE]  while  expected  [FE]              FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  luate(n,  q2);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	luate(n,  q2);	  luate(n,    p2);    	non-compiled	[CE]  while  expected	46	None	replace
71	[BUG]  [BUGGY]  luate(n,  a1);  [CE]  while  expected  [FE]                FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  luate(n,  a1);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	luate(n,  a1);	  luate(n,    p2);    	non-compiled	[CE]  while  expected	46	None	replace
72	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1)  {  if(q2  <  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1)  {  if(q2  <  a1  ||  q2  >  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    <    a1    ||    q2    >    a1)    {    if(q2  <  a1  ||  q2  >  a1)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
73	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1)  {  If(q2  <  a1  ||  q2  >  a1)  {  [CE]  ';'  expected  [FE]      FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1)  {  If(q2  <  a1  ||  q2  >  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    <    a1    ||    q2    >    a1)    {    If(q2  <  a1  ||  q2  >  a1)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
74	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	66	6	replace
75	[BUG]  [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	66	6	replace
76	[BUG]  [BUGGY]  try  {  [Delete]  [CE]  illegal  start  of  expression  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  try  {  [Delete]  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	try  {  [Delete]	  try    {    if((    p2    >    overflow)    ||(q2    >    overflow))    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
77	[BUG]  [BUGGY]  try  {  }  [CE]  'try'  without  'catch'  or  'finally'  [FE]              FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  try  {  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	try  {  }	  try    {    if((    p2    >    overflow)    ||(q2    >    overflow))    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	17	None	replace
78	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	36	6	replace
79	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	36	6	replace
80	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	36	6	replace
81	[BUG]  [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [FE]  FractionConversionException  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	36	6	replace
82	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {	  if(q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a2    ||    q2    >    a1    ||    q2    >    a2    ||    q0    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	47	None	replace
83	[BUG]  [BUGGY]  if(q1  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {	  if(q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a2    ||    q2    >    a1    ||    q2    >    a2    ||    q0    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	47	None	replace
84	[BUG]  [BUGGY]  if(q1  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [CE]  ')'  expected  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    	non-compiled	[CE]  ')'  expected	77	None	replace
85	[BUG]  [BUGGY]  if(q1  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [CE]  ')'  expected  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    	non-compiled	[CE]  ')'  expected	77	None	replace
86	[BUG]  [BUGGY]  BigInteger  value  =(BigInteger)FastMath.floor(r0);  [CE]  while  expected  [FE]                  FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  BigInteger  value  =(BigInteger)FastMath.floor(r0);  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  value  =(BigInteger)FastMath.floor(r0);	  BigInteger    value    =(BigInteger)FastMath.floor(r1);    	non-compiled	[CE]  while  expected	8	None	replace
87	[BUG]  [BUGGY]  BigInteger  value  =(BigInteger)FastMath.floor(r2);  [CE]  while  expected  [FE]                    FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  BigInteger  value  =(BigInteger)FastMath.floor(r2);  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  value  =(BigInteger)FastMath.floor(r2);	  BigInteger    value    =(BigInteger)FastMath.floor(r1);    	non-compiled	[CE]  while  expected	8	None	replace
88	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	21	6	replace
89	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	21	6	replace
90	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q1  >  a1  ||  q2  <  a1)  {	  if(q2    >    a1    ||    q2    <    a1)    {    if(q2    >    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	30	5	replace
91	[BUG]  [BUGGY]  if(q1  >  a1  ||  q2  <  a1)  {  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  >  a1  ||  q2  <  a1)  {	  if(q2    >    a1    ||    q2    <    a1)    {    if(q2    >    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	30	5	replace
92	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a2    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	68	None	replace
93	[BUG]  [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]              FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a2    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	68	None	replace
94	[BUG]  [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  <  a1  ||  q2  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  <  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a2    ||    q2    <    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	72	None	replace
95	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	37	6	replace
96	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [FE]  FractionConversionException  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	37	6	replace
97	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]              FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	37	6	replace
98	[BUG]  [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [FE]  FractionConversionException  [FE]              FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	37	6	replace
99	[BUG]  [BUGGY]  if(q2  ==  0)  {  if(q2  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  ==  0)  {  if(q2  ==  0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    ==    0)    {    if(q2  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
100	[BUG]  [BUGGY]  if(q2  ==  0)  {  if(q2!=  0)  {  [CE]  illegal  start  of  expression  [FE]      FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  ==  0)  {  if(q2!=  0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    ==    0)    {    if(q2!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
101	[BUG]  [BUGGY]  BigInteger  value  =  BigInteger.parseBigInteger(r1);  [CE]  while  expected  [FE]              FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  BigInteger  value  =  BigInteger.parseBigInteger(r1);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  value  =  BigInteger.parseBigInteger(r1);	  BigInteger    value    =    BigInteger.valueOf(0);    	non-compiled	[CE]  while  expected	2	None	replace
102	[BUG]  [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
103	[BUG]  [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  If(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [CE]  ';'  expected  [FE]      FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  If(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    If(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
104	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
105	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p1)  {  [CE]  illegal  start  of  expression  [FE]      FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p1)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
106	[BUG]  [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
107	[BUG]  [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [CE]  illegal  start  of  expression  [FE]      FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
108	[BUG]  [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p1)  {  [CE]  illegal  start  of  expression  [FE]        FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p1)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
109	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a2  ||  p0  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a2  ||  p0  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a2  ||  p0  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a2    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	42	None	replace
110	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a2    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	42	None	replace
111	[BUG]  [BUGGY]  parent  =  n.getParent();  [CE]  while  expected  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  parent  =  n.getParent();  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	parent  =  n.getParent();	  parent    =    parent.getParent();    	non-compiled	[CE]  while  expected	60	None	replace
112	[BUG]  [BUGGY]  if(q2  >=  a1  ||  q2  <  a1)  {  if(q2  >=  a1  ||  q2  <  a1)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >=  a1  ||  q2  <  a1)  {  if(q2  >=  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    >=    a1    ||    q2    <    a1)    {    if(q2  >=  a1  ||  q2  <  a1)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
113	[BUG]  [BUGGY]  if(q2  >=  a1  ||  q2  <  a1)  {  if(q2!=  a1  ||  q2  <  a1)  {  [CE]  illegal  start  of  expression  [FE]      FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >=  a1  ||  q2  <  a1)  {  if(q2!=  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    >=    a1    ||    q2    <    a1)    {    if(q2!=  a1  ||  q2  <  a1)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
114	[BUG]  [BUGGY]  if(q2  >=  a1  ||  q2  <  a1)  {  if(q2  ==  a1  ||  q2  <  a1)  {  [CE]  illegal  start  of  expression  [FE]        FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >=  a1  ||  q2  <  a1)  {  if(q2  ==  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    >=    a1    ||    q2    <    a1)    {    if(q2  ==  a1  ||  q2  <  a1)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
115	[BUG]  [BUGGY]  BigInteger  p2  =(long)FastMath.floor(r2);  [CE]  while  expected  [FE]              FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  BigInteger  p2  =(long)FastMath.floor(r2);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  p2  =(long)FastMath.floor(r2);	  BigInteger    p2    =(int)FastMath.floor(r2);    	non-compiled	[CE]  while  expected	51	None	replace
116	[BUG]  [BUGGY]  If(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [CE]  ';'  expected  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  If(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	If(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    If(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
117	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1)  {  If(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [CE]  ';'  expected  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1)  {  If(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1)  {  If(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    If(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
118	[BUG]  [BUGGY]  if(q2  >  0)  {  if(q2  >  0)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  0)  {  if(q2  >  0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    >    0)    {    if(q2  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
119	[BUG]  [BUGGY]  if(q2  >  0)  {  If(q2  >  0)  {  [CE]  ';'  expected  [FE]      FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  0)  {  If(q2  >  0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    >    0)    {    If(q2  >  0)  {	  	non-compiled	[CE]  ';'  expected	69	None	add
120	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {	  if(q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a2    ||    p0    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	3	None	replace
121	[BUG]  [BUGGY]  if(q1  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {	  if(q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a2    ||    p0    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	3	None	replace
122	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  ==  0.0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q1  ==  0.0)  {	  if(q2    ==    0.0)    {    	compilable	  [FE]  FractionConversionException  	12	1	replace
123	[BUG]  [BUGGY]  if(q1  ==  0.0)  {  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  ==  0.0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  ==  0.0)  {	  if(q2    ==    0.0)    {    	compilable	  [FE]  FractionConversionException  	12	1	replace
124	[BUG]  [BUGGY]  q2  =(a1  *  q1)+  q1;  [CE]  while  expected  [FE]                  FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  q2  =(a1  *  q1)+  q1;  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	q2  =(a1  *  q1)+  q1;	  q2    =(a1    *    q1)+    q0;    	non-compiled	[CE]  while  expected	74	None	replace
125	[BUG]  [BUGGY]  BigInteger  value  =  BigInteger.MAX_VALUE;  [CE]  while  expected  [FE]              FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  BigInteger  value  =  BigInteger.MAX_VALUE;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  value  =  BigInteger.MAX_VALUE;	  BigInteger    value    =    BigInteger.valueOf(0);    	non-compiled	[CE]  while  expected	2	None	replace
126	[BUG]  [BUGGY]  BigInteger  p2  =(BigInteger)FieldMath.floor(q2);  [CE]  while  expected  [FE]                FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  BigInteger  p2  =(BigInteger)FieldMath.floor(q2);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  p2  =(BigInteger)FieldMath.floor(q2);	  BigInteger    p2    =(BigInteger)FieldMath.floor(r2);    	non-compiled	[CE]  while  expected	50	None	replace
127	[BUG]  [BUGGY]  If(q2  >  a1  ||  q2  <  a1)  {  [CE]  ';'  expected  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  If(q2  >  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	If(q2  >  a1  ||  q2  <  a1)  {	  if(q2    >    a1    ||    q2    <    a1)    {    If(q2    >    a1    ||    q2    <    a1)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
128	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	37	None	replace
129	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  p0  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]              FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  p0  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  p0  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	37	None	replace
130	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a2    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	42	None	replace
131	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p1)  {  [CE]  cannot  find  symbol  a2  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a2    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	42	None	replace
132	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a2    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	4	None	replace
133	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  [CE]  illegal  start  of  expression  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
134	[BUG]  [BUGGY]  if(q2  ==  0.0)  {  If(q2  ==  0.0)  {  [CE]  ';'  expected  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  ==  0.0)  {  If(q2  ==  0.0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    ==    0.0)    {    If(q2  ==  0.0)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
135	[BUG]  [BUGGY]  if(q2  >=  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p1)  {  [CE]  cannot  find  symbol  a2  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >=  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  >=  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p1)  {	  if(q2    >=    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a2    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	58	None	replace
136	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	35	None	replace
137	[BUG]  [BUGGY]  parent  =  r1.getParent();  [CE]  while  expected  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  parent  =  r1.getParent();  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	parent  =  r1.getParent();	  parent    =    parent.getParent();    	non-compiled	[CE]  while  expected	60	None	replace
138	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	41	None	replace
139	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p1)  {  [CE]  cannot  find  symbol  a2  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	41	None	replace
140	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p1)  {  [CE]  cannot  find  symbol  a2  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a2    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	68	None	replace
141	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p1)  {  [CE]  cannot  find  symbol  a2  [FE]              FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a2    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	68	None	replace
142	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  [CE]  ')'  expected  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a    	non-compiled	[CE]  ')'  expected	57	None	replace
143	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [CE]  ')'  expected  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a    	non-compiled	[CE]  ')'  expected	57	None	replace
144	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	49	6	replace
145	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	49	6	replace
146	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  [CE]  ')'  expected  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a    	non-compiled	[CE]  ')'  expected	19	None	replace
147	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  |  [CE]  illegal  start  of  expression  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  |  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  |	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
148	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	36	None	replace
149	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p2)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
150	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [CE]  illegal  start  of  expression  [FE]      FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
151	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a1)  {	  if(q2    >    a1    ||    q2    <    a1)    {    if(q2    >    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	30	1	replace
152	[BUG]  [BUGGY]  if(q2  <  a1)  {  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1)  {	  if(q2    >    a1    ||    q2    <    a1)    {    if(q2    >    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	30	1	replace
153	[BUG]  [BUGGY]  luate(r1,  p2);  [CE]  while  expected  [FE]              FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  luate(r1,  p2);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	luate(r1,  p2);	  luate(n,    p2);    	non-compiled	[CE]  while  expected	46	None	replace
154	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	67	6	replace
155	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	67	6	replace
156	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p2  >  a0)  {  [CE]  cannot  find  symbol  a2  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p2  >  a0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p2  >  a0)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a2    ||    p2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	59	None	replace
157	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p2  >  p0)  {  [CE]  cannot  find  symbol  a2  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p2  >  p0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p2  >  p0)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a2    ||    p2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	59	None	replace
158	[BUG]  [BUGGY]  BigInteger  r1  =  BigInteger.valueOf(q2);  [CE]  while  expected  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  BigInteger  r1  =  BigInteger.valueOf(q2);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  r1  =  BigInteger.valueOf(q2);	  BigInteger    r1    =    BigInteger.valueOf(r1);    	non-compiled	[CE]  while  expected	52	None	replace
159	[BUG]  [BUGGY]  if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a2)  {  [CE]  cannot  find  symbol  a2  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a2)  {	  if(q2    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    	non-compiled	[CE]  cannot  find  symbol  a2	65	None	replace
160	[BUG]  [BUGGY]  BigInteger  value  =  BigInteger.valueOf(q1);  [CE]  while  expected  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  BigInteger  value  =  BigInteger.valueOf(q1);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  value  =  BigInteger.valueOf(q1);	  BigInteger    value    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  while  expected	1	None	replace
161	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q1  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a0  ||  q1  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	24	6	replace
162	[BUG]  [BUGGY]  if(q2  <  a0  ||  q1  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q1  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a0  ||  q1  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	24	6	replace
163	[BUG]  [BUGGY]  if(q2  ==  0)  {  If(q2  ==  0)  {  [CE]  ';'  expected  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  ==  0)  {  If(q2  ==  0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    ==    0)    {    If(q2  ==  0)  {	  	non-compiled	[CE]  ';'  expected	26	None	add
164	[BUG]  [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
165	[BUG]  [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [CE]  illegal  start  of  expression  [FE]      FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p2)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
166	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q1  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a0  ||  q1  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	54	6	replace
167	[BUG]  [BUGGY]  if(q2  <  a0  ||  q1  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q1  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a0  ||  q1  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	54	6	replace
168	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]      FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	54	6	replace
169	[BUG]  [BUGGY]  if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [FE]  FractionConversionException  [FE]      FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	54	6	replace
170	[BUG]  [BUGGY]  q2  =(a1  *  q1)+  q2;  [CE]  while  expected  [FE]                  FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  q2  =(a1  *  q1)+  q2;  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	q2  =(a1  *  q1)+  q2;	  q2    =(a1    *    q1)+    q0;    	non-compiled	[CE]  while  expected	74	None	replace
171	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >=  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >=  a1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	21	6	replace
172	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >=  a1)  {  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >=  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >=  a1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	21	6	replace
173	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a2)  {  [CE]  cannot  find  symbol  a2  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a2)  {	  if(q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  cannot  find  symbol  a2	10	None	replace
174	[BUG]  [BUGGY]  n  =  0;  [CE]  while  expected  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  =  0;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	n  =  0;	  read();    	non-compiled	[CE]  while  expected	45	None	replace
175	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [CE]  cannot  find  symbol  a2  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	14	None	replace
176	[BUG]  [BUGGY]  if(q1  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  q0  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  q0  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  q0  >  p2)  {	  if(q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a2    ||    q2    >    a1    ||    q2    >    a2    ||    q0    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	47	None	replace
177	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p1)  {  [CE]  cannot  find  symbol  a2  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	66	None	replace
178	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a  [CE]  ')'  expected  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a2    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  ')'  expected	48	None	replace
179	[BUG]  [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a  [CE]  ')'  expected  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a2    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  ')'  expected	48	None	replace
180	[BUG]  [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
181	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p1)  {  [CE]  cannot  find  symbol  a2  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p0  >  p1)  {	  if(q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a2    ||    p0    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	3	None	replace
182	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  0.0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  0.0)  {	  if(q2    <    =    0.0)    {    	compilable	  [FE]  FractionConversionException  	61	1	replace
183	[BUG]  [BUGGY]  if(q2  <  0.0)  {  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  0.0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  0.0)  {	  if(q2    <    =    0.0)    {    	compilable	  [FE]  FractionConversionException  	61	1	replace
184	[BUG]  [BUGGY]  if(q2  <  =  0.0  ||  q2  >  0.0)  {  [CE]  illegal  start  of  expression  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  =  0.0  ||  q2  >  0.0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  =  0.0  ||  q2  >  0.0)  {	  if(q2    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
185	[BUG]  [BUGGY]  BigInteger  value  =  BigInteger.ZERO;  [CE]  while  expected  [FE]              FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  BigInteger  value  =  BigInteger.ZERO;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  value  =  BigInteger.ZERO;	  BigInteger    value    =    BigInteger.valueOf(0);    	non-compiled	[CE]  while  expected	2	None	replace
186	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a2    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	42	None	replace
187	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	41	6	replace
188	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	41	6	replace
189	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	41	6	replace
190	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	41	6	replace
191	[BUG]  [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
192	[BUG]  [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [CE]  illegal  start  of  expression  [FE]      FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
193	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  p2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  p2  >  p2)  {	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	76	6	replace
194	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  p2  >  p2)  {  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  p2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  p2  >  p2)  {	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	76	6	replace
195	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >=  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >=  a1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	49	6	replace
196	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >=  a1)  {  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >=  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >=  a1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	49	6	replace
197	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(p2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	36	6	replace
198	[BUG]  [BUGGY]  if(p2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(p2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	36	6	replace
199	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  0)  {	  if(q2    <    =    0)    {    	compilable	  [FE]  FractionConversionException  	71	1	replace
200	[BUG]  [BUGGY]  if(q2  <  0)  {  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  0)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  0)  {	  if(q2    <    =    0)    {    	compilable	  [FE]  FractionConversionException  	71	1	replace
201	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  [CE]  illegal  start  of  expression  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
202	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >=  a1  ||  q2  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >=  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >=  a1  ||  q2  >  p2)  {	  if(q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a2    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	4	None	replace
203	[BUG]  [BUGGY]  if(q1  <  a0)  {  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [CE]  ')'  expected  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0)  {  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  <  a0)  {  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2    >    a1    ||    q2    <    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a    	non-compiled	[CE]  ')'  expected	20	None	replace
204	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  q0  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  q0  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  q0  >  p2)  {	  if(q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a2    ||    q2    >    a1    ||    q2    >    a2    ||    q0    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	47	None	replace
205	[BUG]  [BUGGY]  BigInteger  value  =  BigInteger.valueOf(p2);  [CE]  while  expected  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  BigInteger  value  =  BigInteger.valueOf(p2);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  value  =  BigInteger.valueOf(p2);	  BigInteger    value    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  while  expected	1	None	replace
206	[BUG]  [BUGGY]  BigInteger  value  =  BigInteger.valueOf(a1);  [CE]  while  expected  [FE]              FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  BigInteger  value  =  BigInteger.valueOf(a1);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	BigInteger  value  =  BigInteger.valueOf(a1);	  BigInteger    value    =    BigInteger.valueOf(q2);    	non-compiled	[CE]  while  expected	1	None	replace
207	[BUG]  [BUGGY]  if(q2  <  a0  ||  q1  >  a1  ||  q2  >  a2  ||  q2  <  a1)  {  [CE]  cannot  find  symbol  a2  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q1  >  a1  ||  q2  >  a2  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a0  ||  q1  >  a1  ||  q2  >  a2  ||  q2  <  a1)  {	  if(q2    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    	non-compiled	[CE]  cannot  find  symbol  a2	65	None	replace
208	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	24	6	replace
209	[BUG]  [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1)  {  [FE]  FractionConversionException  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    	compilable	  [FE]  FractionConversionException  	24	6	replace
210	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  [CE]  illegal  start  of  expression  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >	  if(q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    p2)    {    if(q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
211	[BUG]  [BUGGY]  if(q2  <  a1  ||  q1  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p2  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q1  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q1  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  p2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a2    ||    p2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	59	None	replace
212	[BUG]  [BUGGY]  if(p2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(p2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a2    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	68	None	replace
213	[BUG]  [BUGGY]  luate(a1,  p2);  [CE]  while  expected  [FE]              FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  luate(a1,  p2);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	luate(a1,  p2);	  luate(n,    p2);    	non-compiled	[CE]  while  expected	46	None	replace
214	[BUG]  [BUGGY]  if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  if(q2  <  a0  ||  q1  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [CE]  illegal  start  of  expression  [FE]    FractionConversionException    [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  if(q2  <  a0  ||  q1  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1)    {    if(q2  <  a0  ||  q1  >  a1  ||  q2  >  a1  ||  q2  <  a1)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
215	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	37	6	replace
216	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [FE]  FractionConversionException  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	37	6	replace
217	[BUG]  [BUGGY]  if(q2  >=  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >=  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  >=  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  p2)  {	  if(q2    >=    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a2    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	58	None	replace
218	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  p2  >  a1  ||  p2  >  p2)  {  [CE]  cannot  find  symbol  a2  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  p2  >  a1  ||  p2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  p2  >  a1  ||  p2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a2    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	48	None	replace
219	[BUG]  [BUGGY]  if(q2  <  a1  ||  q1  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  p2  >  a1  ||  p2  >  a2)  {  [CE]  cannot  find  symbol  a2  [FE]            FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q1  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  p2  >  a1  ||  p2  >  a2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(q2  <  a1  ||  q1  >  a1  ||  q2  >  a1  ||  q2  >  a2  ||  q2  >  a1  ||  q2  >  a2  ||  p2  >  a1  ||  p2  >  a2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    >    a2    ||    q2    >    a1    ||    q2    >    p2)    {    	non-compiled	[CE]  cannot  find  symbol  a2	48	None	replace
220	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(p2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	67	6	replace
221	[BUG]  [BUGGY]  if(p2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [FE]  FractionConversionException  [FE]          FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(p2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	67	6	replace
222	[BUG]  [BUGGY]  q2  =(a1  *  q1)+  1;  [CE]  while  expected  [FE]                  FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  q2  =(a1  *  q1)+  1;  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	q2  =(a1  *  q1)+  1;	  q2    =(a1    *    q1)+    q0;    	non-compiled	[CE]  while  expected	74	None	replace
223	[BUG]  [BUGGY]  q2  =(a1  *  q2)+  1;  [CE]  while  expected  [FE]                FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  q2  =(a1  *  q2)+  1;  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	q2  =(a1  *  q2)+  1;	  q2    =(a1    *    q2)+    q0;    	non-compiled	[CE]  while  expected	73	None	replace
224	[BUG]  [BUGGY]  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	add	if(p2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	66	6	replace
225	[BUG]  [BUGGY]  if(p2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [FE]  FractionConversionException  [FE]        FractionConversionException      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  final  double  r1  =  1.0  /  (r0  -  a0);  final  long  a1  =  (long)  FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {  [BUGGY]        throw  new  FractionConversionException(value,  p2,  q2);  }  final  double  convergent  =  (double)  p2  /  (double)  q2;  if  ((n  <  maxIterations)  &&  (FastMath.abs(convergent  -  value)  >  epsilon)  &&  (q2  <  maxDenominator))  {  p0  =  p1;  [CLASS]  BigFraction  [METHOD]  <init>  [RETURN_TYPE]  BigFraction(double,double,int,int)  final  double  value  final  double  epsilon  final  int  maxDenominator  int  maxIterations  [VARIABLES]  BigInteger  ONE_HUNDRED  den  denominator  gcd  num  numerator  boolean  stop  BigFraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  long  a0  a1  bits  exponent  m  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  sign  double  convergent  epsilon  r0  r1  value  int  maxDenominator  maxIterations  n  	projects/Math1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java	0.2886751345948129	303	303	2	replace	if(p2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    p2)    {    if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    >    p2)    {    	compilable	  [FE]  FractionConversionException  	66	6	replace
