bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(namespaceName);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(namespaceName);  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(namespaceName);	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(namespaceName);    	non-compiled	[CE]  	49	None	replace
2	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.addAll(namespaceName);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.addAll(namespaceName);  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.addAll(namespaceName);	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(namespaceName);    	non-compiled	[CE]  	49	None	replace
3	[BUG]  [BUGGY]  if(compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	60	None	replace
4	[BUG]  [BUGGY]  if(compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	60	None	replace
5	[BUG]  [BUGGY]  if(compiler.hasRegExpGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasRegExpGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasRegExpGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.STRING)  {	  if(compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	60	None	replace
6	[BUG]  [BUGGY]  if(compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	60	None	replace
7	[BUG]  [BUGGY]  if(compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	60	None	replace
8	[BUG]  [BUGGY]  if(compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	60	None	replace
9	[BUG]  [BUGGY]  if(name.getLastChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(name.getLastChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(name.getLastChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(name.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	38	None	replace
10	[BUG]  [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  ||  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  ||  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(name.getFirstChild().getType()  ==  Token.REGEXP  ||  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(name.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	38	None	replace
11	[BUG]  [BUGGY]  if(name.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(name.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(name.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(name.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	38	None	replace
12	[BUG]  [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString())||  namespaceName.equals( "Math "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString())||  namespaceName.equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString())||  namespaceName.equals( "Math "))  {	  if(name.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	38	None	replace
13	[BUG]  [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  READ_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  READ_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  READ_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(name.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	38	None	replace
14	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	95	None	replace
15	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	95	None	replace
16	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	95	None	replace
17	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	95	None	replace
18	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	95	None	replace
19	[BUG]  [BUGGY]  if(compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	59	None	replace
20	[BUG]  [BUGGY]  if(compiler.hasRegExpGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasRegExpGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasRegExpGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.NAME)  {	  if(compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	59	None	replace
21	[BUG]  [BUGGY]  if(compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	59	None	replace
22	[BUG]  [BUGGY]  if(compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	59	None	replace
23	[BUG]  [BUGGY]  if(compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	59	None	replace
24	[BUG]  [BUGGY]  if(nameNode.hasNext()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.hasNext()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.hasNext()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	59	None	replace
25	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	52	None	replace
26	[BUG]  [BUGGY]  if(nameNode!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	52	None	replace
27	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	52	None	replace
28	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	52	None	replace
29	[BUG]  [BUGGY]  if(nameNode  ==  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode  ==  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode  ==  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	52	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME,  namespaceName);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME,  namespaceName);  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Preconditions.checkState(nameNode.getType()  ==  Token.NAME,  namespaceName);	  Preconditions.checkState(nameNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	79	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP);  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Preconditions.checkState(nameNode.getType()  ==  Token.NAME  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP);	  Preconditions.checkState(nameNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	79	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP);  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Preconditions.checkState(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP);	  Preconditions.checkState(nameNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	79	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Preconditions.checkState(nameNode.getType()  ==  Token.NAME  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(nameNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	79	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Preconditions.checkState(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(nameNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	79	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME  ||  nameNode.getFirstChild().getType()  ==  Token.STRING);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME  ||  nameNode.getFirstChild().getType()  ==  Token.STRING);  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Preconditions.checkState(nameNode.getType()  ==  Token.NAME  ||  nameNode.getFirstChild().getType()  ==  Token.STRING);	  Preconditions.checkState(nameNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	79	None	replace
36	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	74	None	replace
37	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	74	None	replace
38	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	74	None	replace
39	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	74	None	replace
40	[BUG]  [BUGGY]  if(nameNode  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	74	None	replace
41	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	74	None	replace
42	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	27	None	replace
43	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences()  ||  nameNode.getLastChild().getString().equals( "Math "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences()  ||  nameNode.getLastChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences()  ||  nameNode.getLastChild().getString().equals( "Math "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	27	None	replace
44	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler.hasGlobalReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	27	None	replace
45	[BUG]  [BUGGY]  if(callNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(callNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(callNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	27	None	replace
46	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences()  ||  nameNode.getLastChild().getString().equals( "Object "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences()  ||  nameNode.getLastChild().getString().equals( "Object "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences()  ||  nameNode.getLastChild().getString().equals( "Object "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	27	None	replace
47	[BUG]  [BUGGY]  if(namespaceName  ==  null  &&  compiler.hasReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName  ==  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName  ==  null  &&  compiler.hasReferences())  {	  if(compiler    ==    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	11	None	replace
48	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	63	None	replace
49	[BUG]  [BUGGY]  if(nameNode!=  null  ||  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  ||  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  ||  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	63	None	replace
50	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	63	None	replace
51	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	63	None	replace
52	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	63	None	replace
53	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	93	None	replace
54	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	93	None	replace
55	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	93	None	replace
56	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	93	None	replace
57	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	94	None	replace
58	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	94	None	replace
59	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	94	None	replace
60	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	94	None	replace
61	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	94	None	replace
62	[BUG]  [BUGGY]  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	&&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()	  if(nameNode.getFirstChild()    ==    null    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString    	non-compiled	[CE]  	88	None	replace
63	[BUG]  [BUGGY]  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	&&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString	  if(nameNode.getFirstChild()    ==    null    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString    	non-compiled	[CE]  	88	None	replace
64	[BUG]  [BUGGY]  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	&&  nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString	  if(nameNode.getFirstChild()    ==    null    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString    	non-compiled	[CE]  	88	None	replace
65	[BUG]  [BUGGY]  If(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  If(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	If(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString	  if(nameNode.getFirstChild()    ==    null    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString    	non-compiled	[CE]  	88	None	replace
66	[BUG]  [BUGGY]  if(nameNode.getFirstChild()  ==  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()  ==  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()  ==  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString	  if(nameNode.getFirstChild()    ==    null    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString    	non-compiled	[CE]  	88	None	replace
67	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	53	None	replace
68	[BUG]  [BUGGY]  if(nameNode!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	53	None	replace
69	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	53	None	replace
70	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	53	None	replace
71	[BUG]  [BUGGY]  if(compiler!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	53	None	replace
72	[BUG]  [BUGGY]  if(namespaceName!=  null  ||!compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  ||!compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  ||!compiler.hasRegExpGlobalReferences())  {	  if(compiler!=    null    ||!compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	44	None	replace
73	[BUG]  [BUGGY]  if(nameNode!=  null  ||!compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  ||!compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  ||!compiler.hasRegExpGlobalReferences())  {	  if(compiler!=    null    ||!compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	44	None	replace
74	[BUG]  [BUGGY]  if(namespaceName  ==  null  ||!compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName  ==  null  ||!compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName  ==  null  ||!compiler.hasRegExpGlobalReferences())  {	  if(compiler!=    null    ||!compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	44	None	replace
75	[BUG]  [BUGGY]  if(namespaceName!=  null  &&!compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&!compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&!compiler.hasRegExpGlobalReferences())  {	  if(nameNode!=    null    &&!compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	45	None	replace
76	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&!compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&!compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&!compiler.hasRegExpGlobalReferences())  {	  if(nameNode!=    null    &&!compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	45	None	replace
77	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&!compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&!compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&!compiler.hasRegExpGlobalReferences())  {	  if(nameNode!=    null    &&!compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	45	None	replace
78	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Math "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Math "))  {	  if(nameNode!=    null    &&!compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	45	None	replace
79	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Property   "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Property   "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Property   "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    nameNode.getLastChild().getString().equals(   "Property   "))    {    	non-compiled	[CE]  	26	None	replace
80	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Property   "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Property   "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Property   "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    nameNode.getLastChild().getString().equals(   "Property   "))    {    	non-compiled	[CE]  	26	None	replace
81	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  ||  nameNode.getLastChild().getString().equals( "Property "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  ||  nameNode.getLastChild().getString().equals( "Property "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  ||  nameNode.getLastChild().getString().equals( "Property "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    nameNode.getLastChild().getString().equals(   "Property   "))    {    	non-compiled	[CE]  	26	None	replace
82	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  nameNode.getFirstChild().getString().equals( "Property   "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  nameNode.getFirstChild().getString().equals( "Property   "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  nameNode.getFirstChild().getString().equals( "Property   "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    nameNode.getLastChild().getString().equals(   "Property   "))    {    	non-compiled	[CE]  	26	None	replace
83	[BUG]  [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Property   "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Property   "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Property   "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    nameNode.getLastChild().getString().equals(   "Property   "))    {    	non-compiled	[CE]  	26	None	replace
84	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	75	None	replace
85	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	75	None	replace
86	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	75	None	replace
87	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	75	None	replace
88	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	75	None	replace
89	[BUG]  [BUGGY]  if(nameNode  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	75	None	replace
90	[BUG]  [BUGGY]  Node  nameNode  =  param.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Node  nameNode  =  param.getFirstChild();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Node  nameNode  =  param.getFirstChild();	  Node    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	1	None	replace
91	[BUG]  [BUGGY]  Node  nameNode  =  node.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Node  nameNode  =  node.getFirstChild();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Node  nameNode  =  node.getFirstChild();	  Node    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	1	None	replace
92	[BUG]  [BUGGY]  if(namespaceName  ==  null  ||  compiler.hasGlobalReferences())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName  ==  null  ||  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName  ==  null  ||  compiler.hasGlobalReferences())  {	  if(namespaceName    ==    null    ||    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	85	None	replace
93	[BUG]  [BUGGY]  if(namespaceName!=  null  ||  compiler.hasGlobalReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  ||  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  ||  compiler.hasGlobalReferences())  {	  if(namespaceName    ==    null    ||    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	85	None	replace
94	[BUG]  [BUGGY]  if(namespaceName  ==  null  ||  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName  ==  null  ||  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName  ==  null  ||  compiler.hasRegexpGlobalReferences())  {	  if(namespaceName    ==    null    ||    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	85	None	replace
95	[BUG]  [BUGGY]  if(namespaceName!=  null  ||  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  ||  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  ||  compiler.hasRegExpGlobalReferences())  {	  if(namespaceName    ==    null    ||    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	85	None	replace
96	[BUG]  [BUGGY]  String  namespaceName  =  nameNode.getLastChild().getString(),  JSC_PROPERTY_NAME_FN);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  String  namespaceName  =  nameNode.getLastChild().getString(),  JSC_PROPERTY_NAME_FN);  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	String  namespaceName  =  nameNode.getLastChild().getString(),  JSC_PROPERTY_NAME_FN);	  String    namespaceName    =    nameNode.getLastChild().getString();    	non-compiled	[CE]  	4	None	replace
97	[BUG]  [BUGGY]  String  namespaceName  =  callNode.getLastChild().getString();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  String  namespaceName  =  callNode.getLastChild().getString();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	String  namespaceName  =  callNode.getLastChild().getString();	  String    namespaceName    =    nameNode.getLastChild().getString();    	non-compiled	[CE]  	4	None	replace
98	[BUG]  [BUGGY]  Namespace  namespaceName  =  nameNode.getFirstChild().getString();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Namespace  namespaceName  =  nameNode.getFirstChild().getString();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Namespace  namespaceName  =  nameNode.getFirstChild().getString();	  String    namespaceName    =    nameNode.getLastChild().getString();    	non-compiled	[CE]  	4	None	replace
99	[BUG]  [BUGGY]  String  namespaceName  =  JSC_PROPERTY_NAME_FN.getString();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  String  namespaceName  =  JSC_PROPERTY_NAME_FN.getString();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	String  namespaceName  =  JSC_PROPERTY_NAME_FN.getString();	  String    namespaceName    =    nameNode.getLastChild().getString();    	non-compiled	[CE]  	4	None	replace
100	[BUG]  [BUGGY]  Namespace  namespaceName  =  nameNode.getLastChild().getString();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Namespace  namespaceName  =  nameNode.getLastChild().getString();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Namespace  namespaceName  =  nameNode.getLastChild().getString();	  String    namespaceName    =    nameNode.getLastChild().getString();    	non-compiled	[CE]  	4	None	replace
101	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	62	None	replace
102	[BUG]  [BUGGY]  if(nameNode!=  null  ||  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  ||  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  ||  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	62	None	replace
103	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	62	None	replace
104	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	62	None	replace
105	[BUG]  [BUGGY]  if(nameNode.getLastChild()!=  null  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild()!=  null  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild()!=  null  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString	  if(nameNode.getFirstChild()!=    null    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString    	non-compiled	[CE]  	90	None	replace
106	[BUG]  [BUGGY]  if(namespaceName!=  null  ||  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  ||  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  ||  compiler.hasRegexpGlobalReferences())  {	  if(namespaceName!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	15	None	replace
107	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(namespaceName!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	15	None	replace
108	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(namespaceName!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	15	None	replace
109	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(namespaceName!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	15	None	replace
110	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegexpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	14	None	replace
111	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getLastChild().getString().equals( "Math "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getLastChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getLastChild().getString().equals( "Math "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	14	None	replace
112	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler.hasRegexpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	14	None	replace
113	[BUG]  [BUGGY]  if(callNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(callNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(callNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegexpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	14	None	replace
114	[BUG]  [BUGGY]  Node  nameNode  =  param.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Node  nameNode  =  param.getLastChild();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Node  nameNode  =  param.getLastChild();	  Node    nameNode    =    callNode.getLastChild();    	non-compiled	[CE]  	3	None	replace
115	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	57	None	replace
116	[BUG]  [BUGGY]  if(nameNode!=  null  ||  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  ||  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  ||  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	57	None	replace
117	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	57	None	replace
118	[BUG]  [BUGGY]  if(compiler!=  null  ||  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  ||  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  ||  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	57	None	replace
119	[BUG]  [BUGGY]  if(nameNode.getLastChild()!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild()!=  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild()!=  null  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
120	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
121	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
122	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
123	[BUG]  [BUGGY]  if(nameNode.getFirstChild()  ==  null  &&  compiler.hasReferences())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()  ==  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()  ==  null  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
124	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  ||  compiler.hasReferences())  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  ||  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  ||  compiler.hasReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
125	[BUG]  [BUGGY]  if(nameNode!=  null  ||  compiler.hasGlobalReferences())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  ||  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  ||  compiler.hasGlobalReferences())  {	  if(compiler!=    null    ||    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	41	None	replace
126	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler.hasReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	8	None	replace
127	[BUG]  [BUGGY]  if(callNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(callNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(callNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	8	None	replace
128	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler.hasReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler.hasReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	8	None	replace
129	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasReferences()  ||  nameNode.getLastChild().getString().equals( "Math "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasReferences()  ||  nameNode.getLastChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasReferences()  ||  nameNode.getLastChild().getString().equals( "Math "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	8	None	replace
130	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasReferences()  ||  nameNode.getLastChild().getString().equals( "Object "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasReferences()  ||  nameNode.getLastChild().getString().equals( "Object "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasReferences()  ||  nameNode.getLastChild().getString().equals( "Object "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	8	None	replace
131	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  compiler.hasReferences())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	8	None	replace
132	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode!=  null  &&  compiler.hasGlobalReferences())  {	  if(nameNode!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	31	None	replace
133	[BUG]  [BUGGY]  NameNode  nameNode  =  nameNode.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  NameNode  nameNode  =  nameNode.getLastChild();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	NameNode  nameNode  =  nameNode.getLastChild();	  NameNode    nameNode    =    nameNode.getFirstChild();    	non-compiled	[CE]  	48	None	replace
134	[BUG]  [BUGGY]  NameNode  nameNode  =  callNode.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  NameNode  nameNode  =  callNode.getLastChild();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	NameNode  nameNode  =  callNode.getLastChild();	  NameNode    nameNode    =    nameNode.getFirstChild();    	non-compiled	[CE]  	48	None	replace
135	[BUG]  [BUGGY]  NameNode  nameNode  =  param.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  NameNode  nameNode  =  param.getFirstChild();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	NameNode  nameNode  =  param.getFirstChild();	  NameNode    nameNode    =    nameNode.getFirstChild();    	non-compiled	[CE]  	48	None	replace
136	[BUG]  [BUGGY]  NameNode  nameNode  =  nameNode.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  NameNode  nameNode  =  nameNode.getNext();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	NameNode  nameNode  =  nameNode.getNext();	  NameNode    nameNode    =    nameNode.getFirstChild();    	non-compiled	[CE]  	48	None	replace
137	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	34	None	replace
138	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	34	None	replace
139	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	34	None	replace
140	[BUG]  [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	34	None	replace
141	[BUG]  [BUGGY]  if(nameNode.getLastChild()!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild()!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild()!=  null  &&  compiler.hasRegexpGlobalReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	17	None	replace
142	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	17	None	replace
143	[BUG]  [BUGGY]  if(nameNode.getFirstChild()  ==  null  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()  ==  null  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()  ==  null  &&  compiler.hasRegexpGlobalReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	17	None	replace
144	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getLastChild().getString().equals( "Math "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getLastChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getLastChild().getString().equals( "Math "))  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	17	None	replace
145	[BUG]  [BUGGY]  if(namespaceName  ==  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName  ==  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName  ==  null  &&  compiler.hasGlobalReferences())  {	  if(namespaceName    ==    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	24	None	replace
146	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(namespaceName    ==    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	24	None	replace
147	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  ||  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  ||  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  ||  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(nameNode.getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	39	None	replace
148	[BUG]  [BUGGY]  if(REGEXP.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(REGEXP.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(REGEXP.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {	  if(REGEXP.getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	54	None	replace
149	[BUG]  [BUGGY]  if(regexP.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(regexP.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(regexP.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {	  if(REGEXP.getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	54	None	replace
150	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {	  if(nameNode.getLastChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	36	None	replace
151	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  ||  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  ||  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  ||  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(nameNode.getLastChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	36	None	replace
152	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {	  if(nameNode.getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))    {    	non-compiled	[CE]  	55	None	replace
153	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  ||  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  ||  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  ||  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {	  if(nameNode.getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))    {    	non-compiled	[CE]  	55	None	replace
154	[BUG]  [BUGGY]  if(compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	42	None	replace
155	[BUG]  [BUGGY]  if(compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	42	None	replace
156	[BUG]  [BUGGY]  if(compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	42	None	replace
157	[BUG]  [BUGGY]  if(compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Math "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Math "))  {	  if(compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	42	None	replace
158	[BUG]  [BUGGY]  if(compiler.hasGlobalReferences()  ||  compiler.hasGlobalReferences())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasGlobalReferences()  ||  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasGlobalReferences()  ||  compiler.hasGlobalReferences())  {	  if(compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	42	None	replace
159	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(namespaceName!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	32	None	replace
160	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(namespaceName!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	32	None	replace
161	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getLastChild().getString().equals( "Math "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getLastChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getLastChild().getString().equals( "Math "))  {	  if(namespaceName!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	32	None	replace
162	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(namespaceName!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	32	None	replace
163	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	50	None	replace
164	[BUG]  [BUGGY]  if(nameNode!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	50	None	replace
165	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	50	None	replace
166	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	50	None	replace
167	[BUG]  [BUGGY]  if(compiler!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	50	None	replace
168	[BUG]  [BUGGY]  Name  nameNode  =  nameNode.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Name  nameNode  =  nameNode.getLastChild();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Name  nameNode  =  nameNode.getLastChild();	  Name    nameNode    =    nameNode.getFirstChild();    	non-compiled	[CE]  	7	None	replace
169	[BUG]  [BUGGY]  Name  nameNode  =  callNode.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Name  nameNode  =  callNode.getFirstChild();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Name  nameNode  =  callNode.getFirstChild();	  Name    nameNode    =    nameNode.getFirstChild();    	non-compiled	[CE]  	7	None	replace
170	[BUG]  [BUGGY]  Name  nameNode  =  callNode.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Name  nameNode  =  callNode.getLastChild();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Name  nameNode  =  callNode.getLastChild();	  Name    nameNode    =    nameNode.getFirstChild();    	non-compiled	[CE]  	7	None	replace
171	[BUG]  [BUGGY]  Name  nameNode  =  namespaceName.getFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Name  nameNode  =  namespaceName.getFirstChild();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Name  nameNode  =  namespaceName.getFirstChild();	  Name    nameNode    =    nameNode.getFirstChild();    	non-compiled	[CE]  	7	None	replace
172	[BUG]  [BUGGY]  Name  nameNode  =  nameNode.getNext();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Name  nameNode  =  nameNode.getNext();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Name  nameNode  =  nameNode.getNext();	  Name    nameNode    =    nameNode.getFirstChild();    	non-compiled	[CE]  	7	None	replace
173	[BUG]  [BUGGY]  Name  nameNode  =  param.getFirstChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Name  nameNode  =  param.getFirstChild();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Name  nameNode  =  param.getFirstChild();	  Name    nameNode    =    nameNode.getFirstChild();    	non-compiled	[CE]  	7	None	replace
174	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName,  JSC_PROPERTY_NAME_FN);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName,  JSC_PROPERTY_NAME_FN);  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName,  JSC_PROPERTY_NAME_FN);	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName);    	non-compiled	[CE]  	47	None	replace
175	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName,  JSC_PROPERTY_NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName,  JSC_PROPERTY_NAME);  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName,  JSC_PROPERTY_NAME);	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName);    	non-compiled	[CE]  	47	None	replace
176	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName  + ": ");  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName  + ": ");  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName  + ": ");	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName);    	non-compiled	[CE]  	47	None	replace
177	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName,  nameNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName,  nameNode);  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName,  nameNode);	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName);    	non-compiled	[CE]  	47	None	replace
178	[BUG]  [BUGGY]  if(nameNode.getLastChild()!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild()!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild()!=  null  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	28	None	replace
179	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	28	None	replace
180	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	28	None	replace
181	[BUG]  [BUGGY]  if(nameNode.getFirstChild()  ==  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()  ==  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()  ==  null  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	28	None	replace
182	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	28	None	replace
183	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  ||  compiler.hasGlobalReferences())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  ||  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  ||  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	28	None	replace
184	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	66	None	replace
185	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	66	None	replace
186	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	66	None	replace
187	[BUG]  [BUGGY]  if(nameNode  ==  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode  ==  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode  ==  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	66	None	replace
188	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(namespaceName!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	21	None	replace
189	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getString().equals( "Math "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getString().equals( "Math "))  {	  if(namespaceName!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	21	None	replace
190	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(namespaceName!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	21	None	replace
191	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	37	None	replace
192	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	92	None	replace
193	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	92	None	replace
194	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	92	None	replace
195	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	56	None	replace
196	[BUG]  [BUGGY]  if(nameNode!=  null  ||  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  ||  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  ||  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	56	None	replace
197	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	56	None	replace
198	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	56	None	replace
199	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegExpReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegExpReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegExpReferences())  {	  if(compiler!=    null    &&    compiler.hasRegExpReferences())    {    	non-compiled	[CE]  	61	None	replace
200	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegExpReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegExpReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasRegExpReferences())  {	  if(compiler!=    null    &&    compiler.hasRegExpReferences())    {    	non-compiled	[CE]  	61	None	replace
201	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpReferences())  {	  if(compiler!=    null    &&    compiler.hasRegExpReferences())    {    	non-compiled	[CE]  	61	None	replace
202	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpReferences())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpReferences())  {	  if(compiler!=    null    &&    compiler.hasRegExpReferences())    {    	non-compiled	[CE]  	61	None	replace
203	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegExpReferences())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegExpReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasRegExpReferences())  {	  if(compiler!=    null    &&    compiler.hasRegExpReferences())    {    	non-compiled	[CE]  	61	None	replace
204	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getLastChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	33	None	replace
205	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {	  if(nameNode.getLastChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	33	None	replace
206	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegexpGlobalReferences())  {	  if(nameNode.getLastChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	33	None	replace
207	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	20	None	replace
208	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getLastChild().getString().equals( "Math "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getLastChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getLastChild().getString().equals( "Math "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	20	None	replace
209	[BUG]  [BUGGY]  if(callNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(callNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(callNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	20	None	replace
210	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	20	None	replace
211	[BUG]  [BUGGY]  if(namespaceName!=  null  ||  namespaceName.equals( "Math "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  ||  namespaceName.equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  ||  namespaceName.equals( "Math "))  {	  if(namespaceName    ==    null    ||    namespaceName.equals(   "Math   "))    {    	non-compiled	[CE]  	84	None	replace
212	[BUG]  [BUGGY]  if(namespaceName  ==  null  ||  namespaceName.equals(JSC_PROPERTY_NAME_FN))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName  ==  null  ||  namespaceName.equals(JSC_PROPERTY_NAME_FN))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName  ==  null  ||  namespaceName.equals(JSC_PROPERTY_NAME_FN))  {	  if(namespaceName    ==    null    ||    namespaceName.equals(   "Math   "))    {    	non-compiled	[CE]  	84	None	replace
213	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  namespaceName.equals( "Math "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  namespaceName.equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  namespaceName.equals( "Math "))  {	  if(namespaceName    ==    null    ||    namespaceName.equals(   "Math   "))    {    	non-compiled	[CE]  	84	None	replace
214	[BUG]  [BUGGY]  if(namespaceName  ==  null  &&  namespaceName.equals( "Math "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName  ==  null  &&  namespaceName.equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName  ==  null  &&  namespaceName.equals( "Math "))  {	  if(namespaceName    ==    null    ||    namespaceName.equals(   "Math   "))    {    	non-compiled	[CE]  	84	None	replace
215	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Math "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Math "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    nameNode.getLastChild().getString().equals(   "Math   "))    {    	non-compiled	[CE]  	25	None	replace
216	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  nameNode.getFirstChild().getString().equals( "Math "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  nameNode.getFirstChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  nameNode.getFirstChild().getString().equals( "Math "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    nameNode.getLastChild().getString().equals(   "Math   "))    {    	non-compiled	[CE]  	25	None	replace
217	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  ||  nameNode.getLastChild().getString().equals( "Math "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  ||  nameNode.getLastChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  ||  nameNode.getLastChild().getString().equals( "Math "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    nameNode.getLastChild().getString().equals(   "Math   "))    {    	non-compiled	[CE]  	25	None	replace
218	[BUG]  [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Math "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Math "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    nameNode.getLastChild().getString().equals(   "Math   "))    {    	non-compiled	[CE]  	25	None	replace
219	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	71	None	replace
220	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	71	None	replace
221	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	71	None	replace
222	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	71	None	replace
223	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	71	None	replace
224	[BUG]  [BUGGY]  if(namespaceName  ==  null  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName  ==  null  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName  ==  null  &&  compiler.hasRegexpGlobalReferences())  {	  if(nameNode!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	19	None	replace
225	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode!=  null  &&  compiler.hasRegexpGlobalReferences())  {	  if(nameNode!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	19	None	replace
226	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	29	None	replace
227	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	29	None	replace
228	[BUG]  [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	29	None	replace
229	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	29	None	replace
230	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	23	None	replace
231	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    namespaceName!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	80	None	replace
232	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    namespaceName!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	80	None	replace
233	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    namespaceName!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	80	None	replace
234	[BUG]  [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    namespaceName!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	80	None	replace
235	[BUG]  [BUGGY]  if(namespaceName.getType()  ==  Token.REGEXP  &&  nameNode!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName.getType()  ==  Token.REGEXP  &&  nameNode!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName.getType()  ==  Token.REGEXP  &&  nameNode!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    namespaceName!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	80	None	replace
236	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	58	None	replace
237	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {	  if(nameNode.getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	58	None	replace
238	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegexpGlobalReferences())  {	  if(nameNode.getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	58	None	replace
239	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	58	None	replace
240	[BUG]  [BUGGY]  if(compiler.getType()  ==  Token.REGEXP  &&  nameNode!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.getType()  ==  Token.REGEXP  &&  nameNode!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.getType()  ==  Token.REGEXP  &&  nameNode!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	58	None	replace
241	[BUG]  [BUGGY]  if(callNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(callNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(callNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	13	None	replace
242	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	13	None	replace
243	[BUG]  [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	13	None	replace
244	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	13	None	replace
245	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasRegexpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	18	None	replace
246	[BUG]  [BUGGY]  if(compiler.getType()  ==  Token.REGEXP  &&  nameNode!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.getType()  ==  Token.REGEXP  &&  nameNode!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.getType()  ==  Token.REGEXP  &&  nameNode!=  null  &&  compiler.hasRegexpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	18	None	replace
247	[BUG]  [BUGGY]  if(nameNode.getLastChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString	  if(nameNode.getFirstChild()!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString    	non-compiled	[CE]  	87	None	replace
248	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString	  if(nameNode.getFirstChild()!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString    	non-compiled	[CE]  	87	None	replace
249	[BUG]  [BUGGY]  NameNode  nameNode  =  callNode.getNext();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  NameNode  nameNode  =  callNode.getNext();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	NameNode  nameNode  =  callNode.getNext();	  NameNode    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	46	None	replace
250	[BUG]  [BUGGY]  if(compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	86	None	replace
251	[BUG]  [BUGGY]  if(compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	86	None	replace
252	[BUG]  [BUGGY]  if(compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Math "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Math "))  {	  if(compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	86	None	replace
253	[BUG]  [BUGGY]  if(compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	86	None	replace
254	[BUG]  [BUGGY]  if(compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString	  if(compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	86	None	replace
255	[BUG]  [BUGGY]  String  namespaceName  =  nameNode.getFirstChild().getString(),  JSC_PROPERTY_NAME_FN);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  String  namespaceName  =  nameNode.getFirstChild().getString(),  JSC_PROPERTY_NAME_FN);  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	String  namespaceName  =  nameNode.getFirstChild().getString(),  JSC_PROPERTY_NAME_FN);	  String    namespaceName    =    nameNode.getFirstChild().getString();    	non-compiled	[CE]  	5	None	replace
256	[BUG]  [BUGGY]  String  namespaceName  =  callNode.getFirstChild().getString();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  String  namespaceName  =  callNode.getFirstChild().getString();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	String  namespaceName  =  callNode.getFirstChild().getString();	  String    namespaceName    =    nameNode.getFirstChild().getString();    	non-compiled	[CE]  	5	None	replace
257	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    STRING_REGEXP_METHODS.contains(    nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	89	None	replace
258	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    STRING_REGEXP_METHODS.contains(    nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	89	None	replace
259	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  READ_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  READ_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  READ_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    STRING_REGEXP_METHODS.contains(    nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	89	None	replace
260	[BUG]  [BUGGY]  else  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  else  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	else  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    STRING_REGEXP_METHODS.contains(    nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	89	None	replace
261	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())||  namespaceName.equals( "Math "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())||  namespaceName.equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())||  namespaceName.equals( "Math "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    STRING_REGEXP_METHODS.contains(    nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	89	None	replace
262	[BUG]  [BUGGY]  if(nameNode.getLastChild()!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild()!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild()!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	22	None	replace
263	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	22	None	replace
264	[BUG]  [BUGGY]  if(nameNode.getFirstChild()  ==  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()  ==  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()  ==  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	22	None	replace
265	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getLastChild().getString().equals( "Math "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getLastChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getLastChild().getString().equals( "Math "))  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	22	None	replace
266	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.isGlobalReferences())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.isGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.isGlobalReferences())  {	  if(compiler!=    null    &&    compiler.isGlobalReferences())    {    	non-compiled	[CE]  	40	None	replace
267	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.isGlobalReferences())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.isGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.isGlobalReferences())  {	  if(compiler!=    null    &&    compiler.isGlobalReferences())    {    	non-compiled	[CE]  	40	None	replace
268	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.isGlobalReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.isGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.isGlobalReferences())  {	  if(compiler!=    null    &&    compiler.isGlobalReferences())    {    	non-compiled	[CE]  	40	None	replace
269	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.isGlobalReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.isGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.isGlobalReferences())  {	  if(compiler!=    null    &&    compiler.isGlobalReferences())    {    	non-compiled	[CE]  	40	None	replace
270	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.isGlobalReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.isGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.isGlobalReferences())  {	  if(compiler!=    null    &&    compiler.isGlobalReferences())    {    	non-compiled	[CE]  	40	None	replace
271	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.isGlobalReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.isGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.isGlobalReferences())  {	  if(compiler!=    null    &&    compiler.isGlobalReferences())    {    	non-compiled	[CE]  	40	None	replace
272	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	70	None	replace
273	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	70	None	replace
274	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	70	None	replace
275	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(namespaceName!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	81	None	replace
276	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {	  if(namespaceName!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	81	None	replace
277	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {	  if(namespaceName!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	81	None	replace
278	[BUG]  [BUGGY]  if(namespaceName  ==  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName  ==  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName  ==  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(namespaceName!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	81	None	replace
279	[BUG]  [BUGGY]  if(namespaceName!=  null  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(namespaceName!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	81	None	replace
280	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegexpGlobalReferences())  {	  if(namespaceName!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	81	None	replace
281	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	69	None	replace
282	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	69	None	replace
283	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	69	None	replace
284	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP)  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	82	None	replace
285	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName.equals( "Math "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName.equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName.equals( "Math "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	82	None	replace
286	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(namespaceName))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(namespaceName))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(namespaceName))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	82	None	replace
287	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasAllReferences())    {    	non-compiled	[CE]  	35	None	replace
288	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasAllReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasAllReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasAllReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasAllReferences())    {    	non-compiled	[CE]  	35	None	replace
289	[BUG]  [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasAllReferences())    {    	non-compiled	[CE]  	35	None	replace
290	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasAllReferences())    {    	non-compiled	[CE]  	35	None	replace
291	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasAllReferences())    {    	non-compiled	[CE]  	35	None	replace
292	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	67	None	replace
293	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	67	None	replace
294	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	67	None	replace
295	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	67	None	replace
296	[BUG]  [BUGGY]  &&  REGEXP_METHODS.contains(nameNode.getLastChild  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  &&  REGEXP_METHODS.contains(nameNode.getLastChild  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	&&  REGEXP_METHODS.contains(nameNode.getLastChild	  if(nameNode.getFirstChild()!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild    	non-compiled	[CE]  	91	None	replace
297	[BUG]  [BUGGY]  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	&&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild	  if(nameNode.getFirstChild()!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild    	non-compiled	[CE]  	91	None	replace
298	[BUG]  [BUGGY]  If(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  If(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	If(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild	  if(nameNode.getFirstChild()!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild    	non-compiled	[CE]  	91	None	replace
299	[BUG]  [BUGGY]  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	&&  nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild	  if(nameNode.getFirstChild()!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild    	non-compiled	[CE]  	91	None	replace
300	[BUG]  [BUGGY]  &&  REGEXP_METHODS.contains(nameNode.getLastChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  &&  REGEXP_METHODS.contains(nameNode.getLastChild());  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	&&  REGEXP_METHODS.contains(nameNode.getLastChild());	  if(nameNode.getFirstChild()!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild    	non-compiled	[CE]  	91	None	replace
301	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasDeclaration(callNode))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasDeclaration(callNode))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasDeclaration(callNode))  {	  if(compiler!=    null    &&    compiler.hasDeclaration(callNode))    {    	non-compiled	[CE]  	68	None	replace
302	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasDeclaration(callNode))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasDeclaration(callNode))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasDeclaration(callNode))  {	  if(compiler!=    null    &&    compiler.hasDeclaration(callNode))    {    	non-compiled	[CE]  	68	None	replace
303	[BUG]  [BUGGY]  if(callNode!=  null  &&  compiler.hasDeclaration(callNode))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(callNode!=  null  &&  compiler.hasDeclaration(callNode))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(callNode!=  null  &&  compiler.hasDeclaration(callNode))  {	  if(compiler!=    null    &&    compiler.hasDeclaration(callNode))    {    	non-compiled	[CE]  	68	None	replace
304	[BUG]  [BUGGY]  if(namespaceName  ==  null  &&  compiler.hasDeclaration(callNode))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName  ==  null  &&  compiler.hasDeclaration(callNode))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName  ==  null  &&  compiler.hasDeclaration(callNode))  {	  if(compiler!=    null    &&    compiler.hasDeclaration(callNode))    {    	non-compiled	[CE]  	68	None	replace
305	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasDeclaration(callNode))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasDeclaration(callNode))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasDeclaration(callNode))  {	  if(compiler!=    null    &&    compiler.hasDeclaration(callNode))    {    	non-compiled	[CE]  	68	None	replace
306	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasDeclaration(callNode)||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasDeclaration(callNode)||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasDeclaration(callNode)||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasDeclaration(callNode))    {    	non-compiled	[CE]  	68	None	replace
307	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	73	None	replace
308	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	73	None	replace
309	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	73	None	replace
310	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	73	None	replace
311	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	73	None	replace
312	[BUG]  [BUGGY]  if(nameNode  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	73	None	replace
313	[BUG]  [BUGGY]  if(namespaceName!=  null  ||  compiler.hasReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  ||  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  ||  compiler.hasReferences())  {	  if(namespaceName!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	10	None	replace
314	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasReferences()  ||  namespaceName.equals( "Math "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasReferences()  ||  namespaceName.equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasReferences()  ||  namespaceName.equals( "Math "))  {	  if(namespaceName!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	10	None	replace
315	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(namespaceName!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	10	None	replace
316	[BUG]  [BUGGY]  if(namespaceName  ==  null  ||  compiler.hasReferences())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName  ==  null  ||  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName  ==  null  ||  compiler.hasReferences())  {	  if(namespaceName!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	10	None	replace
317	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(namespaceName!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	10	None	replace
318	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	64	None	replace
319	[BUG]  [BUGGY]  if(nameNode!=  null  ||  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  ||  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  ||  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	64	None	replace
320	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	64	None	replace
321	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	64	None	replace
322	[BUG]  [BUGGY]  if(nameNode  ==  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode  ==  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode  ==  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	64	None	replace
323	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	51	None	replace
324	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	51	None	replace
325	[BUG]  [BUGGY]  if(nameNode!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	51	None	replace
326	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	51	None	replace
327	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	51	None	replace
328	[BUG]  [BUGGY]  if(compiler!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	51	None	replace
329	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.CALL)    {    	non-compiled	[CE]  	78	None	replace
330	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.CALL)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.CALL)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.CALL)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.CALL)    {    	non-compiled	[CE]  	78	None	replace
331	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.CALL)    {    	non-compiled	[CE]  	78	None	replace
332	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.CALL)    {    	non-compiled	[CE]  	78	None	replace
333	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.CALL)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.CALL)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.CALL)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.CALL)    {    	non-compiled	[CE]  	78	None	replace
334	[BUG]  [BUGGY]  if(nameNode  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.CALL)    {    	non-compiled	[CE]  	78	None	replace
335	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	72	None	replace
336	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	72	None	replace
337	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	72	None	replace
338	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	72	None	replace
339	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  namespaceName.equals( "Math "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  namespaceName.equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasReferences()  &&  namespaceName.equals( "Math "))  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    namespaceName.equals(   "Math   "))    {    	non-compiled	[CE]  	65	None	replace
340	[BUG]  [BUGGY]  if(namespaceName!=  null  ||  compiler.hasReferences()  ||  namespaceName.equals( "Math "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  ||  compiler.hasReferences()  ||  namespaceName.equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  ||  compiler.hasReferences()  ||  namespaceName.equals( "Math "))  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    namespaceName.equals(   "Math   "))    {    	non-compiled	[CE]  	65	None	replace
341	[BUG]  [BUGGY]  Node  nameNode  =  param.getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Node  nameNode  =  param.getNext();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Node  nameNode  =  param.getNext();	  Node    nameNode    =    callNode.getNext();    	non-compiled	[CE]  	2	None	replace
342	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getParent();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Node  nameNode  =  callNode.getParent();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Node  nameNode  =  callNode.getParent();	  Node    nameNode    =    callNode.getNext();    	non-compiled	[CE]  	2	None	replace
343	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getNext()  &&  namespaceName.equals( "Math "));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Node  nameNode  =  callNode.getNext()  &&  namespaceName.equals( "Math "));  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Node  nameNode  =  callNode.getNext()  &&  namespaceName.equals( "Math "));	  Node    nameNode    =    callNode.getNext();    	non-compiled	[CE]  	2	None	replace
344	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getString();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Node  nameNode  =  callNode.getString();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Node  nameNode  =  callNode.getString();	  Node    nameNode    =    callNode.getNext();    	non-compiled	[CE]  	2	None	replace
345	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	76	None	replace
346	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	76	None	replace
347	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	76	None	replace
348	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	76	None	replace
349	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	76	None	replace
350	[BUG]  [BUGGY]  if(nameNode  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	76	None	replace
351	[BUG]  [BUGGY]  if(nameNode!=  null  ||  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  ||  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  ||  compiler.hasRegExpGlobalReferences())  {	  if(compiler    ==    null    ||    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	83	None	replace
352	[BUG]  [BUGGY]  if(nameNode  ==  null  ||  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode  ==  null  ||  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode  ==  null  ||  compiler.hasRegExpGlobalReferences())  {	  if(compiler    ==    null    ||    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	83	None	replace
353	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  	77	None	replace
354	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.EMPTY)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.EMPTY)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getLastChild().getType()  ==  Token.EMPTY)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  	77	None	replace
355	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  	77	None	replace
356	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  	77	None	replace
357	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  	77	None	replace
358	[BUG]  [BUGGY]  if(nameNode  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode  ==  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  	77	None	replace
359	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Object "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Object "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Object "))  {	  if(nameNode!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	12	None	replace
360	[BUG]  [BUGGY]  Node  nameNode  =  nameNode.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Node  nameNode  =  nameNode.getLastChild();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Node  nameNode  =  nameNode.getLastChild();	  Node    nameNode    =    nameNode.getFirstChild();    	non-compiled	[CE]  	6	None	replace
361	[BUG]  [BUGGY]  if(namespaceName  ==  null  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName  ==  null  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName  ==  null  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	82	None	replace
362	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	82	None	replace
363	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	82	None	replace
364	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	50	None	replace
365	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.isGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	76	None	replace
366	[BUG]  [BUGGY]  if(compiler  ==  null  ||  compiler.hasGlobalReferences())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  ||  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  ||  compiler.hasGlobalReferences())  {	  if(compiler!=    null    ||    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	41	None	replace
367	[BUG]  [BUGGY]  if(compiler.hasReferences())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasReferences())  {	  if(nameNode!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	12	None	replace
368	[BUG]  [BUGGY]  if(nameNode!=  null  ||  compiler.hasReferences())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  ||  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  ||  compiler.hasReferences())  {	  if(nameNode!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	12	None	replace
369	[BUG]  [BUGGY]  if(nameNode  ==  null  &&  compiler.hasReferences())  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode  ==  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode  ==  null  &&  compiler.hasReferences())  {	  if(nameNode!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	12	None	replace
370	[BUG]  [BUGGY]  Node  nameNode  =  vars.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Node  nameNode  =  vars.getFirstChild();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Node  nameNode  =  vars.getFirstChild();	  Node    nameNode    =    nameNode.getFirstChild();    	non-compiled	[CE]  	6	None	replace
371	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReportGlobalReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReportGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReportGlobalReferences())  {	  if(namespaceName!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	81	None	replace
372	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(namespaceName!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	81	None	replace
373	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	57	None	replace
374	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.isGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	75	None	replace
375	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	94	None	replace
376	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegExpReferences())  {	  if(compiler!=    null    &&    compiler.hasRegExpReferences())    {    	non-compiled	[CE]  	61	None	replace
377	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegexpReferences())  {	  if(compiler!=    null    &&    compiler.hasRegExpReferences())    {    	non-compiled	[CE]  	61	None	replace
378	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasTypeReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasTypeReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasTypeReferences())  {	  if(compiler!=    null    &&    compiler.hasRegExpReferences())    {    	non-compiled	[CE]  	61	None	replace
379	[BUG]  [BUGGY]  if(nameNode  ==  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode  ==  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode  ==  null  &&  compiler.hasGlobalReferences())  {	  if(nameNode!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	31	None	replace
380	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(nameNode!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	31	None	replace
381	[BUG]  [BUGGY]  String  namespaceName  =  nameNode.getLastChild().getString()  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  String  namespaceName  =  nameNode.getLastChild().getString()  +  1;  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	String  namespaceName  =  nameNode.getLastChild().getString()  +  1;	  String    namespaceName    =    nameNode.getLastChild().getString();    	non-compiled	[CE]  	4	None	replace
382	[BUG]  [BUGGY]  NameNode  nameNode  =  vars.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  NameNode  nameNode  =  vars.getFirstChild();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	NameNode  nameNode  =  vars.getFirstChild();	  NameNode    nameNode    =    nameNode.getFirstChild();    	non-compiled	[CE]  	48	None	replace
383	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.FUNCTION  ||  nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.FUNCTION  ||  nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.FUNCTION  ||  nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	28	None	replace
384	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getLastChild()!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getLastChild()!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getLastChild()!=  null  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	28	None	replace
385	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	17	None	replace
386	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	17	None	replace
387	[BUG]  [BUGGY]  if(compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasRegexpGlobalReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	17	None	replace
388	[BUG]  [BUGGY]  if(nameNode!=  null  ||  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  ||  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  ||  compiler.hasRegexpGlobalReferences())  {	  if(nameNode!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	19	None	replace
389	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	27	None	replace
390	[BUG]  [BUGGY]  if(compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	27	None	replace
391	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences()  ||  nameNode.getLastChild().getType()  ==  Token.STRING)  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	27	None	replace
392	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	95	None	replace
393	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(callNode.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(callNode.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	13	None	replace
394	[BUG]  [BUGGY]  if(name.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(name.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(name.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	13	None	replace
395	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	52	None	replace
396	[BUG]  [BUGGY]  if(compiler!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	52	None	replace
397	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	69	None	replace
398	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.isGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	73	None	replace
399	[BUG]  [BUGGY]  if(REGEXP.getType()  ==  Token.STRING  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(REGEXP.getType()  ==  Token.STRING  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(REGEXP.getType()  ==  Token.STRING  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(REGEXP.getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	54	None	replace
400	[BUG]  [BUGGY]  if(REGEXP.getType()  ==  Token.STRING  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(REGEXP.getType()  ==  Token.STRING  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(REGEXP.getType()  ==  Token.STRING  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {	  if(REGEXP.getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	54	None	replace
401	[BUG]  [BUGGY]  if(REGEXP.getType()  ==  Token.NAME  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(REGEXP.getType()  ==  Token.NAME  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(REGEXP.getType()  ==  Token.NAME  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(REGEXP.getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	54	None	replace
402	[BUG]  [BUGGY]  if(REGEXP.getType()  ==  Token.NAME  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(REGEXP.getType()  ==  Token.NAME  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(REGEXP.getType()  ==  Token.NAME  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {	  if(REGEXP.getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	54	None	replace
403	[BUG]  [BUGGY]  if(REGEXP.getType()  ==  Token.ASSIGN  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(REGEXP.getType()  ==  Token.ASSIGN  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(REGEXP.getType()  ==  Token.ASSIGN  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {	  if(REGEXP.getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	54	None	replace
404	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.isGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.isGlobalReferences())    {    	non-compiled	[CE]  	40	None	replace
405	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.isGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.isGlobalReferences())    {    	non-compiled	[CE]  	40	None	replace
406	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.isGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.isGlobalReferences())    {    	non-compiled	[CE]  	40	None	replace
407	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.isGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.isGlobalReferences())    {    	non-compiled	[CE]  	40	None	replace
408	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getLastChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getLastChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getLastChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	53	None	replace
409	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	53	None	replace
410	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.put(namespaceName,  nameNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.put(namespaceName,  nameNode);  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.put(namespaceName,  nameNode);	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName);    	non-compiled	[CE]  	47	None	replace
411	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(namespaceName!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	32	None	replace
412	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(namespaceName!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	32	None	replace
413	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasDeclaration(callNode)||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasDeclaration(callNode)||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasDeclaration(callNode)||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasDeclaration(callNode))    {    	non-compiled	[CE]  	68	None	replace
414	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasDeclaration(callNode)||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasDeclaration(callNode)||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasDeclaration(callNode)||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasDeclaration(callNode))    {    	non-compiled	[CE]  	68	None	replace
415	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasDeclaration(callNode)||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasDeclaration(callNode)||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasDeclaration(callNode)||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasDeclaration(callNode))    {    	non-compiled	[CE]  	68	None	replace
416	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	22	None	replace
417	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  &&  nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	22	None	replace
418	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	63	None	replace
419	[BUG]  [BUGGY]  if(compiler!=  null  ||  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  ||  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  ||  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	63	None	replace
420	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  nameNode.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  nameNode.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  nameNode.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	58	None	replace
421	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  compiler.hasReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	8	None	replace
422	[BUG]  [BUGGY]  if(compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	8	None	replace
423	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(namespaceName!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	15	None	replace
424	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(namespaceName!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	15	None	replace
425	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasOverridenGlobalReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasOverridenGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasOverridenGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	18	None	replace
426	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getNext()  &&  namespaceName.equals( "Math ")||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Node  nameNode  =  callNode.getNext()  &&  namespaceName.equals( "Math ")||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Node  nameNode  =  callNode.getNext()  &&  namespaceName.equals( "Math ")||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION;	  Node    nameNode    =    callNode.getNext();    	non-compiled	[CE]  	2	None	replace
427	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getNext()  &&  namespaceName.equals( "Math ")||  nameNode.getFirstChild().getType()  ==  Token.REGEXP;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Node  nameNode  =  callNode.getNext()  &&  namespaceName.equals( "Math ")||  nameNode.getFirstChild().getType()  ==  Token.REGEXP;  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Node  nameNode  =  callNode.getNext()  &&  namespaceName.equals( "Math ")||  nameNode.getFirstChild().getType()  ==  Token.REGEXP;	  Node    nameNode    =    callNode.getNext();    	non-compiled	[CE]  	2	None	replace
428	[BUG]  [BUGGY]  if(compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	60	None	replace
429	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	56	None	replace
430	[BUG]  [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {	  if(name.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	38	None	replace
431	[BUG]  [BUGGY]  if(name.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(name.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(name.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {	  if(name.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	38	None	replace
432	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    STRING_REGEXP_METHODS.contains(    nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	89	None	replace
433	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    STRING_REGEXP_METHODS.contains(    nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	89	None	replace
434	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    STRING_REGEXP_METHODS.contains(    nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	89	None	replace
435	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  	77	None	replace
436	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.isGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  	77	None	replace
437	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.FUNCTION  ||  nameNode.getFirstChild()!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.FUNCTION  ||  nameNode.getFirstChild()!=  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.FUNCTION  ||  nameNode.getFirstChild()!=  null  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
438	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getLastChild()!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getLastChild()!=  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.NAME  &&  nameNode.getLastChild()!=  null  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
439	[BUG]  [BUGGY]  if(compiler  ==  null  ||  compiler.hasReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  ||  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  ||  compiler.hasReferences())  {	  if(compiler    ==    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	11	None	replace
440	[BUG]  [BUGGY]  if(compiler!=  null  ||  compiler.hasReferences())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  ||  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  ||  compiler.hasReferences())  {	  if(compiler    ==    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	11	None	replace
441	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.isGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	74	None	replace
442	[BUG]  [BUGGY]  if(compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {	  if(compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	42	None	replace
443	[BUG]  [BUGGY]  if(compiler  ==  null  ||  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  ||  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  ||  compiler.hasRegexpGlobalReferences())  {	  if(compiler    ==    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	16	None	replace
444	[BUG]  [BUGGY]  String  namespaceName  =  nameNode.getFirstChild().getQualifiedName();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  String  namespaceName  =  nameNode.getFirstChild().getQualifiedName();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	String  namespaceName  =  nameNode.getFirstChild().getQualifiedName();	  String    namespaceName    =    nameNode.getFirstChild().getString();    	non-compiled	[CE]  	5	None	replace
445	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getLastChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	33	None	replace
446	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReportGlobalReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReportGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReportGlobalReferences())  {	  if(nameNode.getLastChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	33	None	replace
447	[BUG]  [BUGGY]  if(regexP.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(regexP.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(regexP.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	37	None	replace
448	[BUG]  [BUGGY]  if(REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	37	None	replace
449	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME  &&  JSC_PROPERTY_NAME.equals(namespaceName));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME  &&  JSC_PROPERTY_NAME.equals(namespaceName));  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Preconditions.checkState(nameNode.getType()  ==  Token.NAME  &&  JSC_PROPERTY_NAME.equals(namespaceName));	  Preconditions.checkState(nameNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	79	None	replace
450	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME,  JSC_PROPERTY_NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME,  JSC_PROPERTY_NAME);  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Preconditions.checkState(nameNode.getType()  ==  Token.NAME,  JSC_PROPERTY_NAME);	  Preconditions.checkState(nameNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	79	None	replace
451	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	62	None	replace
452	[BUG]  [BUGGY]  if(compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	20	None	replace
453	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	20	None	replace
454	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	51	None	replace
455	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	51	None	replace
456	[BUG]  [BUGGY]  if(nameNode.getLastChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasAllReferences())    {    	non-compiled	[CE]  	35	None	replace
457	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasAllReferences())    {    	non-compiled	[CE]  	35	None	replace
458	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getStr  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getStr  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getStr	  if(nameNode.getFirstChild()!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString    	non-compiled	[CE]  	87	None	replace
459	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.CALL)    {    	non-compiled	[CE]  	78	None	replace
460	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.isGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.CALL)    {    	non-compiled	[CE]  	78	None	replace
461	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	64	None	replace
462	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.STRING  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.STRING  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.STRING  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {	  if(nameNode.getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))    {    	non-compiled	[CE]  	55	None	replace
463	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(callNode.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(callNode.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {	  if(nameNode.getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))    {    	non-compiled	[CE]  	55	None	replace
464	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasErrors())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasErrors())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasErrors())  {	  if(namespaceName!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	10	None	replace
465	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.STRING  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.STRING  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.STRING  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(nameNode.getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	39	None	replace
466	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  &&  compiler.hasRegexpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	14	None	replace
467	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Math "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Math "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    nameNode.getLastChild().getString().equals(   "Math   "))    {    	non-compiled	[CE]  	25	None	replace
468	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences()  &&  nameNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences()  &&  nameNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasReferences()  &&  nameNode.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	66	None	replace
469	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	93	None	replace
470	[BUG]  [BUGGY]  if(nameNode.getLastChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	29	None	replace
471	[BUG]  [BUGGY]  if(compiler!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	29	None	replace
472	[BUG]  [BUGGY]  if(compiler!=  null  ||  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  ||  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  ||  compiler.hasRegExpGlobalReferences())  {	  if(compiler    ==    null    ||    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	83	None	replace
473	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  callNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  callNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasReferences()  &&  callNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	67	None	replace
474	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasReferences()  &&  nameNode.getLastChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	67	None	replace
475	[BUG]  [BUGGY]  &&  REGEXP_METHODS.contains(nameNode.getLastChild())  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  &&  REGEXP_METHODS.contains(nameNode.getLastChild())  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	&&  REGEXP_METHODS.contains(nameNode.getLastChild())	  if(nameNode.getFirstChild()!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild    	non-compiled	[CE]  	91	None	replace
476	[BUG]  [BUGGY]  &&  REGEXP_METHODS.contains(nameNode.getLastChild()  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  &&  REGEXP_METHODS.contains(nameNode.getLastChild()  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	&&  REGEXP_METHODS.contains(nameNode.getLastChild()	  if(nameNode.getFirstChild()!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild    	non-compiled	[CE]  	91	None	replace
477	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild()))  {	  if(nameNode.getFirstChild()!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild    	non-compiled	[CE]  	91	None	replace
478	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  REGEXP_METHODS.contains(nameNode.getLastChild  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  REGEXP_METHODS.contains(nameNode.getLastChild  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  REGEXP_METHODS.contains(nameNode.getLastChild	  if(nameNode.getFirstChild()!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild    	non-compiled	[CE]  	91	None	replace
479	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Property   "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Property   "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Property   "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    nameNode.getLastChild().getString().equals(   "Property   "))    {    	non-compiled	[CE]  	26	None	replace
480	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	71	None	replace
481	[BUG]  [BUGGY]  if(callNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(callNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(callNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(nameNode.getLastChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	36	None	replace
482	[BUG]  [BUGGY]  &&  nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  &&  nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	&&  nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild	  if(nameNode.getFirstChild()!=    null    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString    	non-compiled	[CE]  	90	None	replace
483	[BUG]  [BUGGY]  &&  nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getStr  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  &&  nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getStr  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	&&  nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getStr	  if(nameNode.getFirstChild()!=    null    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString    	non-compiled	[CE]  	90	None	replace
484	[BUG]  [BUGGY]  &&  nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild()  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  &&  nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild()  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	&&  nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild()	  if(nameNode.getFirstChild()!=    null    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString    	non-compiled	[CE]  	90	None	replace
485	[BUG]  [BUGGY]  &&  nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  &&  nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	&&  nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString	  if(nameNode.getFirstChild()!=    null    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString    	non-compiled	[CE]  	90	None	replace
486	[BUG]  [BUGGY]  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	&&  REGEXP_METHODS.contains(nameNode.getLastChild().getString	  if(nameNode.getFirstChild()    ==    null    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString    	non-compiled	[CE]  	88	None	replace
487	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	72	None	replace
488	[BUG]  [BUGGY]  if(compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	59	None	replace
489	[BUG]  [BUGGY]  if(namespaceName  ==  null  ||  namespaceName.equals( "Property "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName  ==  null  ||  namespaceName.equals( "Property "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName  ==  null  ||  namespaceName.equals( "Property "))  {	  if(namespaceName    ==    null    ||    namespaceName.equals(   "Math   "))    {    	non-compiled	[CE]  	84	None	replace
490	[BUG]  [BUGGY]  if(namespaceName  ==  null  ||  namespaceName.equals( "Object "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName  ==  null  ||  namespaceName.equals( "Object "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName  ==  null  ||  namespaceName.equals( "Object "))  {	  if(namespaceName    ==    null    ||    namespaceName.equals(   "Math   "))    {    	non-compiled	[CE]  	84	None	replace
491	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences()  ||  namespaceName.equals( "Math "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences()  ||  namespaceName.equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasReferences()  ||  namespaceName.equals( "Math "))  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    namespaceName.equals(   "Math   "))    {    	non-compiled	[CE]  	65	None	replace
492	[BUG]  [BUGGY]  if(compiler!=  null  ||  compiler.hasReferences()  ||  namespaceName.equals( "Math "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  ||  compiler.hasReferences()  ||  namespaceName.equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  ||  compiler.hasReferences()  ||  namespaceName.equals( "Math "))  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    namespaceName.equals(   "Math   "))    {    	non-compiled	[CE]  	65	None	replace
493	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasReferences()  &&  namespaceName.equals( "Math "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasReferences()  &&  namespaceName.equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasReferences()  &&  namespaceName.equals( "Math "))  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    namespaceName.equals(   "Math   "))    {    	non-compiled	[CE]  	65	None	replace
494	[BUG]  [BUGGY]  if(compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	42	None	replace
495	[BUG]  [BUGGY]  if(compiler  ==  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	52	None	replace
496	[BUG]  [BUGGY]  if(nameNode!=  null  &&  nameNode.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  nameNode.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  nameNode.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	52	None	replace
497	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasDeclarations()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasDeclarations()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasDeclarations()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	66	None	replace
498	[BUG]  [BUGGY]  if(compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	66	None	replace
499	[BUG]  [BUGGY]  if(nameNode.getFirstChild()  ==  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()  ==  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()  ==  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild	  if(nameNode.getFirstChild()!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild    	non-compiled	[CE]  	91	None	replace
500	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  return  false;  }  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  return  false;  }	  if(nameNode.getFirstChild()!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild    	non-compiled	[CE]  	91	None	replace
501	[BUG]  [BUGGY]  if(compiler.isGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.isGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.isGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler.hasRegExpGlobalReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	60	None	replace
502	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasErrors())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasErrors())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasErrors())  {	  if(compiler!=    null    &&    compiler.hasRegExpReferences())    {    	non-compiled	[CE]  	61	None	replace
503	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegExpReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegExpReferences())    {    	non-compiled	[CE]  	61	None	replace
504	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegExpReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasRegExpReferences())    {    	non-compiled	[CE]  	61	None	replace
505	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName  + "Math ");  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName  + "Math ");  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName  + "Math ");	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName);    	non-compiled	[CE]  	47	None	replace
506	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add( "Math ");  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add( "Math ");  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add( "Math ");	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName);    	non-compiled	[CE]  	47	None	replace
507	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    STRING_REGEXP_METHODS.contains(    nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	89	None	replace
508	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
509	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getLastChild().getString().equals( "Math "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getLastChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  nameNode.getLastChild().getString().equals( "Math "))  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
510	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
511	[BUG]  [BUGGY]  if(REGEXP.getType()  ==  Token.ASSIGN  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(REGEXP.getType()  ==  Token.ASSIGN  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(REGEXP.getType()  ==  Token.ASSIGN  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(REGEXP.getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	54	None	replace
512	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	13	None	replace
513	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	13	None	replace
514	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	13	None	replace
515	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	29	None	replace
516	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	29	None	replace
517	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(new  Name(namespaceName));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(new  Name(namespaceName));  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(new  Name(namespaceName));	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(namespaceName);    	non-compiled	[CE]  	49	None	replace
518	[BUG]  [BUGGY]  Node  nameNode  =  namespaceName.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Node  nameNode  =  namespaceName.getFirstChild();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Node  nameNode  =  namespaceName.getFirstChild();	  Node    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	1	None	replace
519	[BUG]  [BUGGY]  Node  nameNode  =  this.callNode.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Node  nameNode  =  this.callNode.getFirstChild();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Node  nameNode  =  this.callNode.getFirstChild();	  Node    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	1	None	replace
520	[BUG]  [BUGGY]  Name  nameNode  =  nameNode.cloneTree();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Name  nameNode  =  nameNode.cloneTree();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Name  nameNode  =  nameNode.cloneTree();	  Name    nameNode    =    nameNode.getFirstChild();    	non-compiled	[CE]  	7	None	replace
521	[BUG]  [BUGGY]  if(compiler.hasRegExpGlobalReferences()  ||  namespaceName.equals( "Math "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasRegExpGlobalReferences()  ||  namespaceName.equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasRegExpGlobalReferences()  ||  namespaceName.equals( "Math "))  {	  if(compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	86	None	replace
522	[BUG]  [BUGGY]  if(compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	86	None	replace
523	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	20	None	replace
524	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	20	None	replace
525	[BUG]  [BUGGY]  if(namespaceName.equals( "Math "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName.equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName.equals( "Math "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	20	None	replace
526	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP_METHODS)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP_METHODS)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP_METHODS)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	76	None	replace
527	[BUG]  [BUGGY]  String  namespaceName  =  JSC_PROPERTY_NAME_FN.getValue();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  String  namespaceName  =  JSC_PROPERTY_NAME_FN.getValue();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	String  namespaceName  =  JSC_PROPERTY_NAME_FN.getValue();	  String    namespaceName    =    nameNode.getFirstChild().getString();    	non-compiled	[CE]  	5	None	replace
528	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  nameNode.hasChildren())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  nameNode.hasChildren())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  nameNode.hasChildren())  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	17	None	replace
529	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Property "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Property "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Property "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    nameNode.getLastChild().getString().equals(   "Property   "))    {    	non-compiled	[CE]  	26	None	replace
530	[BUG]  [BUGGY]  if(namespaceName  ==  null  ||  namespaceName.equals( "Math ")&&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName  ==  null  ||  namespaceName.equals( "Math ")&&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName  ==  null  ||  namespaceName.equals( "Math ")&&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(namespaceName    ==    null    ||    namespaceName.equals(   "Math   "))    {    	non-compiled	[CE]  	84	None	replace
531	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(namespaceName!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	81	None	replace
532	[BUG]  [BUGGY]  if(namespaceName  ==  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName  ==  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName  ==  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {	  if(namespaceName!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	81	None	replace
533	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	53	None	replace
534	[BUG]  [BUGGY]  if(compiler  ==  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	53	None	replace
535	[BUG]  [BUGGY]  if(compiler!=  null  &&  nameNode.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  nameNode.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  nameNode.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	53	None	replace
536	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	82	None	replace
537	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.NAME  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.NAME  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.NAME  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	82	None	replace
538	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getFirstChild().getString().equals( "Math "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getFirstChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  nameNode.getFirstChild().getString().equals( "Math "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	82	None	replace
539	[BUG]  [BUGGY]  Node  nameNode  =  parent.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Node  nameNode  =  parent.getFirstChild();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Node  nameNode  =  parent.getFirstChild();	  Node    nameNode    =    callNode.getLastChild();    	non-compiled	[CE]  	3	None	replace
540	[BUG]  [BUGGY]  Node  nameNode  =  vars.get(callNode.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Node  nameNode  =  vars.get(callNode.getFirstChild());  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Node  nameNode  =  vars.get(callNode.getFirstChild());	  Node    nameNode    =    callNode.getLastChild();    	non-compiled	[CE]  	3	None	replace
541	[BUG]  [BUGGY]  NameNode  nameNode  =  var.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  NameNode  nameNode  =  var.getFirstChild();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	NameNode  nameNode  =  var.getFirstChild();	  NameNode    nameNode    =    nameNode.getFirstChild();    	non-compiled	[CE]  	48	None	replace
542	[BUG]  [BUGGY]  NameNode  nameNode  =  namespaceName.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  NameNode  nameNode  =  namespaceName.getFirstChild();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	NameNode  nameNode  =  namespaceName.getFirstChild();	  NameNode    nameNode    =    nameNode.getFirstChild();    	non-compiled	[CE]  	48	None	replace
543	[BUG]  [BUGGY]  NameNode  nameNode  =  JSC_PROPERTY_NAME_FN;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  NameNode  nameNode  =  JSC_PROPERTY_NAME_FN;  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	NameNode  nameNode  =  JSC_PROPERTY_NAME_FN;	  NameNode    nameNode    =    nameNode.getFirstChild();    	non-compiled	[CE]  	48	None	replace
544	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getString().equals( "Math "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getString().equals( "Math "))  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	74	None	replace
545	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getLastChild().getString().equals( "Math "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getLastChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences()  ||  nameNode.getLastChild().getString().equals( "Math "))  {	  if(nameNode.getFirstChild()!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	28	None	replace
546	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    namespaceName!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	80	None	replace
547	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    namespaceName!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	80	None	replace
548	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    namespaceName!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	80	None	replace
549	[BUG]  [BUGGY]  if(namespaceName  ==  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName  ==  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName  ==  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    namespaceName!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	80	None	replace
550	[BUG]  [BUGGY]  Node  nameNode  =  var.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Node  nameNode  =  var.getFirstChild();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Node  nameNode  =  var.getFirstChild();	  Node    nameNode    =    nameNode.getFirstChild();    	non-compiled	[CE]  	6	None	replace
551	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	58	None	replace
552	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasDeclaration(callNode)&&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasDeclaration(callNode)&&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasDeclaration(callNode)&&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasDeclaration(callNode))    {    	non-compiled	[CE]  	68	None	replace
553	[BUG]  [BUGGY]  if(compiler  ==  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	50	None	replace
554	[BUG]  [BUGGY]  if(compiler!=  null  &&  nameNode.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  nameNode.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  nameNode.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	50	None	replace
555	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	34	None	replace
556	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	34	None	replace
557	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalStatement())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalStatement())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.isGlobalStatement())  {	  if(compiler!=    null    &&    compiler.isGlobalReferences())    {    	non-compiled	[CE]  	40	None	replace
558	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.isGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.VAR)  {	  if(compiler!=    null    &&    compiler.isGlobalReferences())    {    	non-compiled	[CE]  	40	None	replace
559	[BUG]  [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {	  if(name.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	38	None	replace
560	[BUG]  [BUGGY]  if(name.getFirstChild()!=  null  &&  name.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(name.getFirstChild()!=  null  &&  name.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(name.getFirstChild()!=  null  &&  name.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(name.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	38	None	replace
561	[BUG]  [BUGGY]  if(name.getFirstChild().getType()  ==  Token.STRING  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(name.getFirstChild().getType()  ==  Token.STRING  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(name.getFirstChild().getType()  ==  Token.STRING  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(name.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	38	None	replace
562	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	18	None	replace
563	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  REGEXP_METHODS.contains(nameNode.getLastChild().getString	  if(nameNode.getFirstChild()!=    null    &&    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString    	non-compiled	[CE]  	87	None	replace
564	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasOverridenNonGlobalReferences())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasOverridenNonGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasOverridenNonGlobalReferences())  {	  if(namespaceName    ==    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	24	None	replace
565	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL  &&  nameNode.getFirstChild().getString().equals( "Math "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL  &&  nameNode.getFirstChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL  &&  nameNode.getFirstChild().getString().equals( "Math "))  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.CALL)    {    	non-compiled	[CE]  	78	None	replace
566	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  namespaceName.equals( "Math "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  namespaceName.equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  namespaceName.equals( "Math "))  {	  if(nameNode!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	23	None	replace
567	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasDeclaredProperty( "JSC_PROPERTY_NAME "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasDeclaredProperty( "JSC_PROPERTY_NAME "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasDeclaredProperty( "JSC_PROPERTY_NAME "))  {	  if(namespaceName!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	10	None	replace
568	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasDeclaredProperty( "Math "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasDeclaredProperty( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasDeclaredProperty( "Math "))  {	  if(namespaceName!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	10	None	replace
569	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild()  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild()  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild()	  if(nameNode.getFirstChild()!=    null    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString    	non-compiled	[CE]  	90	None	replace
570	[BUG]  [BUGGY]  Node  nameNode  =  nameNode.getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Node  nameNode  =  nameNode.getNext();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Node  nameNode  =  nameNode.getNext();	  Node    nameNode    =    callNode.getNext();    	non-compiled	[CE]  	2	None	replace
571	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Math "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()!=  Token.REGEXP  &&  nameNode.getLastChild().getString().equals( "Math "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    nameNode.getLastChild().getString().equals(   "Math   "))    {    	non-compiled	[CE]  	25	None	replace
572	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	8	None	replace
573	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	8	None	replace
574	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getLastChild().getString().equals( "Math "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getLastChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getLastChild().getString().equals( "Math "))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	8	None	replace
575	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	8	None	replace
576	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {	  if(nameNode.getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))    {    	non-compiled	[CE]  	55	None	replace
577	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  ||  namespaceName.equals( "Math "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  ||  namespaceName.equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  ||  namespaceName.equals( "Math "))  {	  if(namespaceName!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	32	None	replace
578	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {	  if(namespaceName!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	32	None	replace
579	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  ||  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  ||  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.STRING  ||  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    ||    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	37	None	replace
580	[BUG]  [BUGGY]  if(nameNode!=  null  &&!compiler.hasRegExpGlobalReferences()  &&  namespaceName.equals( "Math "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&!compiler.hasRegExpGlobalReferences()  &&  namespaceName.equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&!compiler.hasRegExpGlobalReferences()  &&  namespaceName.equals( "Math "))  {	  if(nameNode!=    null    &&!compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	45	None	replace
581	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasDeclarations()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasDeclarations()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasDeclarations()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	67	None	replace
582	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getString().equals( "Math "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getString().equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getString().equals( "Math "))  {	  if(compiler!=    null    &&    compiler.hasReferences()    &&    nameNode.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	67	None	replace
583	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	27	None	replace
584	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	27	None	replace
585	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild	  if(nameNode.getLastChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	36	None	replace
586	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if(nameNode.getLastChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	36	None	replace
587	[BUG]  [BUGGY]  NameNode  nameNode  =  this.callNode.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  NameNode  nameNode  =  this.callNode.getFirstChild();  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	NameNode  nameNode  =  this.callNode.getFirstChild();	  NameNode    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	46	None	replace
588	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME  &&  namespaceName.equals( "Math "));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME  &&  namespaceName.equals( "Math "));  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Preconditions.checkState(nameNode.getType()  ==  Token.NAME  &&  namespaceName.equals( "Math "));	  Preconditions.checkState(nameNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	79	None	replace
589	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegexpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	14	None	replace
590	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegexpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	14	None	replace
591	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasAllReferences())    {    	non-compiled	[CE]  	35	None	replace
592	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.STRING  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasAllReferences())    {    	non-compiled	[CE]  	35	None	replace
593	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasAllReferences())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasAllReferences())  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasAllReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasAllReferences())    {    	non-compiled	[CE]  	35	None	replace
594	[BUG]  [BUGGY]  if(compiler  ==  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler  ==  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  ||  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	51	None	replace
595	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(nameNode!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	51	None	replace
596	[BUG]  [BUGGY]  if(compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasReferences()    ||    nameNode.getFirstChild().getType()    ==    Token.REGEXP)    {    	non-compiled	[CE]  	51	None	replace
597	[BUG]  [BUGGY]  if(compiler.hasRegexpGlobalReferences()  ||  namespaceName.equals( "Math "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }      [BUGGY]  if(compiler.hasRegexpGlobalReferences()  ||  namespaceName.equals( "Math "))  {  [BUGGY]      if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasRegexpGlobalReferences()  ||  namespaceName.equals( "Math "))  {	  if(compiler    ==    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	16	None	replace
