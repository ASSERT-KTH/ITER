bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getFirstChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  Node  nameNode  =  callNode.getFirstChild();  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Node  nameNode  =  callNode.getFirstChild();	      	non-compiled	[CE]  	4	None	replace
2	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getNext();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  Node  nameNode  =  callNode.getNext();  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Node  nameNode  =  callNode.getNext();	      	non-compiled	[CE]  	4	None	replace
3	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getLastChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  Node  nameNode  =  callNode.getLastChild();  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Node  nameNode  =  callNode.getLastChild();	      	non-compiled	[CE]  	4	None	replace
4	[BUG]  [BUGGY]  String  namespaceName  =  nameNode.getLastChild().getString();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  String  namespaceName  =  nameNode.getLastChild().getString();  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	String  namespaceName  =  nameNode.getLastChild().getString();	      	non-compiled	[CE]  	4	None	replace
5	[BUG]  [BUGGY]  String  namespaceName  =  nameNode.getFirstChild().getString();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  String  namespaceName  =  nameNode.getFirstChild().getString();  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	String  namespaceName  =  nameNode.getFirstChild().getString();	      	non-compiled	[CE]  	4	None	replace
6	[BUG]  [BUGGY]  Node  nameNode  =  nameNode.getFirstChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  Node  nameNode  =  nameNode.getFirstChild();  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Node  nameNode  =  nameNode.getFirstChild();	      	non-compiled	[CE]  	4	None	replace
7	[BUG]  [BUGGY]  Name  nameNode  =  nameNode.getFirstChild();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  Name  nameNode  =  nameNode.getFirstChild();  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Name  nameNode  =  nameNode.getFirstChild();	      	non-compiled	[CE]  	4	None	replace
8	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasReferences())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasReferences())  {	  if(compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
9	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasReferences())  {	  if(compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
10	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(namespaceName!=  null  &&  compiler.hasReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasReferences())  {	  if(compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
11	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences())  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler  ==  null  &&  compiler.hasReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasReferences())  {	  if(compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
12	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode!=  null  &&  compiler.hasReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasReferences())  {	  if(compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
13	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasReferences())  {	  if(compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
14	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegexpGlobalReferences())  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	8	None	replace
15	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasRegexpGlobalReferences())  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	8	None	replace
16	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler  ==  null  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasRegexpGlobalReferences())  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	8	None	replace
17	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegexpGlobalReferences())  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	8	None	replace
18	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegexpGlobalReferences())  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	8	None	replace
19	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegexpGlobalReferences())  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	8	None	replace
20	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasRegExpGlobalReferences())  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	3	None	replace
21	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	3	None	replace
22	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	3	None	replace
23	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	3	None	replace
24	[BUG]  [BUGGY]  if(namespaceName  ==  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(namespaceName  ==  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName  ==  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(compiler    ==    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	6	None	replace
25	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  nameNode.getLastChild().getString().equals( "Math "))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  nameNode.getLastChild().getString().equals( "Math "))  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  nameNode.getLastChild().getString().equals( "Math "))  {	  if(compiler    ==    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  nameNode.getLastChild().getString().equals( "Property "))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  nameNode.getLastChild().getString().equals( "Property "))  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  nameNode.getLastChild().getString().equals( "Property "))  {	  if(compiler    ==    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	6	None	replace
27	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler.hasGlobalReferences())  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	7	None	replace
28	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  compiler.hasGlobalReferences())  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	7	None	replace
29	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasGlobalReferences())  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	7	None	replace
30	[BUG]  [BUGGY]  if(compiler  ==  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler  ==  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  &&  compiler.hasGlobalReferences())  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	7	None	replace
31	[BUG]  [BUGGY]  if(nameNode!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&  compiler.hasGlobalReferences())  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	7	None	replace
32	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  compiler.hasGlobalReferences())  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(namespaceName!=  null  &&  compiler.hasGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  compiler.hasGlobalReferences())  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	7	None	replace
33	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	2	None	replace
34	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	2	None	replace
35	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasAllReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	2	None	replace
36	[BUG]  [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getLastChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if    (nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	1	None	replace
37	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  ||  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if    (nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	1	None	replace
38	[BUG]  [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(name.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if    (nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	1	None	replace
39	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if    (nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	1	None	replace
40	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences())  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.isGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.isGlobalReferences())  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	7	None	replace
41	[BUG]  [BUGGY]  if(compiler!=  null  ||  compiler.hasGlobalReferences())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  ||  compiler.hasGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  ||  compiler.hasGlobalReferences())  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	7	None	replace
42	[BUG]  [BUGGY]  if(compiler.hasGlobalReferences())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler.hasGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasGlobalReferences())  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	7	None	replace
43	[BUG]  [BUGGY]  if(compiler  ==  null  ||!compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler  ==  null  ||!compiler.hasRegExpGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  ||!compiler.hasRegExpGlobalReferences())  {	  if(compiler    ==    null    &&!compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	5	None	replace
44	[BUG]  [BUGGY]  if(compiler!=  null  ||!compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  ||!compiler.hasRegExpGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  ||!compiler.hasRegExpGlobalReferences())  {	  if(compiler    ==    null    &&!compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	5	None	replace
45	[BUG]  [BUGGY]  if(nameNode!=  null  &&!compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode!=  null  &&!compiler.hasRegExpGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode!=  null  &&!compiler.hasRegExpGlobalReferences())  {	  if(compiler    ==    null    &&!compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	5	None	replace
46	[BUG]  [BUGGY]  NameNode  nameNode  =  callNode.getFirstChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  NameNode  nameNode  =  callNode.getFirstChild();  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	NameNode  nameNode  =  callNode.getFirstChild();	      	non-compiled	[CE]  	4	None	replace
47	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName);  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(namespaceName);	      	non-compiled	[CE]  	4	None	replace
48	[BUG]  [BUGGY]  NameNode  nameNode  =  nameNode.getFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  NameNode  nameNode  =  nameNode.getFirstChild();  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	NameNode  nameNode  =  nameNode.getFirstChild();	      	non-compiled	[CE]  	4	None	replace
49	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(namespaceName);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(namespaceName);  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(namespaceName);	      	non-compiled	[CE]  	4	None	replace
50	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
51	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
52	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
53	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
54	[BUG]  [BUGGY]  if(REGEXP.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(REGEXP.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(REGEXP.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {	  if    (nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	1	None	replace
55	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()))  {	  if    (nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	1	None	replace
56	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	8	None	replace
57	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	8	None	replace
58	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	2	None	replace
59	[BUG]  [BUGGY]  if(compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler    ==    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	6	None	replace
60	[BUG]  [BUGGY]  if(compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler    ==    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	6	None	replace
61	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpReferences())  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegExpReferences())  {	  if(compiler    ==    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	6	None	replace
62	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	3	None	replace
63	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	3	None	replace
64	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  ||  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	3	None	replace
65	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  ||  namespaceName.equals( "Math "))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  ||  namespaceName.equals( "Math "))  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasReferences()  ||  namespaceName.equals( "Math "))  {	  if(compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
66	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
67	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
68	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasDeclaration(callNode))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasDeclaration(callNode))  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasDeclaration(callNode))  {	  if(compiler!=    null    &&    compiler.hasReferences())    {    	non-compiled	[CE]  	9	None	replace
69	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	8	None	replace
70	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	8	None	replace
71	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	8	None	replace
72	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegexpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasRegexpGlobalReferences())    {    	non-compiled	[CE]  	8	None	replace
73	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	7	None	replace
74	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	7	None	replace
75	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	7	None	replace
76	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	7	None	replace
77	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.EMPTY)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	7	None	replace
78	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.CALL)  {	  if(compiler!=    null    &&    compiler.hasGlobalReferences())    {    	non-compiled	[CE]  	7	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME);  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	Preconditions.checkState(nameNode.getType()  ==  Token.NAME);	      	non-compiled	[CE]  	4	None	replace
80	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  namespaceName!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	2	None	replace
81	[BUG]  [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  compiler!=  null  &&  compiler.hasRegExpGlobalReferences())  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	2	None	replace
82	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	2	None	replace
83	[BUG]  [BUGGY]  if(compiler  ==  null  ||  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler  ==  null  ||  compiler.hasRegExpGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler  ==  null  ||  compiler.hasRegExpGlobalReferences())  {	  if(compiler    ==    null    &&!compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	5	None	replace
84	[BUG]  [BUGGY]  if(namespaceName  ==  null  ||  namespaceName.equals( "Math "))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(namespaceName  ==  null  ||  namespaceName.equals( "Math "))  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName  ==  null  ||  namespaceName.equals( "Math "))  {	  if(compiler    ==    null    &&!compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	5	None	replace
85	[BUG]  [BUGGY]  if(namespaceName  ==  null  ||  compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(namespaceName  ==  null  ||  compiler.hasRegExpGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(namespaceName  ==  null  ||  compiler.hasRegExpGlobalReferences())  {	  if(compiler    ==    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	6	None	replace
86	[BUG]  [BUGGY]  if(compiler.hasRegExpGlobalReferences())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler.hasRegExpGlobalReferences())  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler.hasRegExpGlobalReferences())  {	  if(compiler    ==    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	6	None	replace
87	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString	  if    (nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	1	None	replace
88	[BUG]  [BUGGY]  if(nameNode.getFirstChild()  ==  null  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild()  ==  null  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()  ==  null  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString	  if    (nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	1	None	replace
89	[BUG]  [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {	  if    (nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	1	None	replace
90	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild()!=  null  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  ||  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString	  if    (nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	1	None	replace
91	[BUG]  [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(nameNode.getFirstChild()!=  null  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild	  if    (nameNode.getFirstChild().getType()    ==    Token.REGEXP    &&    REGEXP_METHODS.contains(nameNode.getLastChild().getString()))    {    	non-compiled	[CE]  	1	None	replace
92	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	3	None	replace
93	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	3	None	replace
94	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	3	None	replace
95	[BUG]  [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(   "Math   "))  {  return  false;  }  }    [BUGGY]  if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {  [BUGGY]    if  (nameNode.getFirstChild().getType()  ==  Token.REGEXP  &&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()))  {  return  false;  }  else  if  (nameNode.getFirstChild().getType()  ==  Token.STRING  &&  STRING_REGEXP_METHODS.contains(  nameNode.getLastChild().getString()))  {  Node  param  =  nameNode.getNext();  if  (param  !=  null  &&  (param.getType()  ==  Token.STRING  ||  param.getType()  ==  Token.REGEXP))  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2253744679276044	773	773	7	replace	if(compiler!=  null  &&  compiler.hasRegExpGlobalReferences()  &&  nameNode.getFirstChild().getType()  ==  Token.REGEXP)  {	  if(compiler!=    null    &&    compiler.hasRegExpGlobalReferences())    {    	non-compiled	[CE]  	3	None	replace
