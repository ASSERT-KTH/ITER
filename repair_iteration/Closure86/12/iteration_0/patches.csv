bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!callNode.isNoSideEffectsCall())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  [BUGGY]  if(!callNode.isNoSideEffectsCall())  {  [BUGGY]  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffectsCall())  {	if  (callNode.isNoSideEffectsCall())  {  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
2	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&  callNode.isNoSideEffectsCall())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&  callNode.isNoSideEffectsCall())  {  [BUGGY]  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.CALL  &&  callNode.isNoSideEffectsCall())  {	if  (callNode.isNoSideEffectsCall())  {  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
3	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.NAME  &&  callNode.isNoSideEffectsCall())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  [BUGGY]  if(callNode.getType()  ==  Token.NAME  &&  callNode.isNoSideEffectsCall())  {  [BUGGY]  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.NAME  &&  callNode.isNoSideEffectsCall())  {	if  (callNode.isNoSideEffectsCall())  {  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
4	[BUG]  [BUGGY]  if(callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  [BUGGY]  if(callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION)  {	if  (callNode.isNoSideEffectsCall())  {  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
5	[BUG]  [BUGGY]  if(callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  [BUGGY]  if(callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  [BUGGY]  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {	if  (callNode.isNoSideEffectsCall())  {  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
6	[BUG]  [BUGGY]  if(callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  [BUGGY]  if(callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {  [BUGGY]  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {	if  (callNode.isNoSideEffectsCall())  {  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  [BUGGY]    [BUGGY]  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	  	if  (callNode.isNoSideEffectsCall())  {  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
8	[BUG]  [BUGGY]  if(!constructCallHasSideEffects(callNode,  compiler))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  [BUGGY]  if(!constructCallHasSideEffects(callNode,  compiler))  {  [BUGGY]  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!constructCallHasSideEffects(callNode,  compiler))  {	if  (callNode.isNoSideEffectsCall())  {  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
9	[BUG]  [BUGGY]  if(!callNode.isNoSideEffects())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  [BUGGY]  if(!callNode.isNoSideEffects())  {  [BUGGY]  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffects())  {	if  (callNode.isNoSideEffectsCall())  {  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
10	[BUG]  [BUGGY]  if(!constructCallHasSideEffects(callNode))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  [BUGGY]  if(!constructCallHasSideEffects(callNode))  {  [BUGGY]  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!constructCallHasSideEffects(callNode))  {	if  (callNode.isNoSideEffectsCall())  {  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
11	[BUG]  [BUGGY]  if(callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  [BUGGY]  if(callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.NAME)  {  [BUGGY]  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.NAME)  {	if  (callNode.isNoSideEffectsCall())  {  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
12	[BUG]  [BUGGY]  if(callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  [BUGGY]  if(callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.FUNCTION)  {  [BUGGY]  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.FUNCTION)  {	if  (callNode.isNoSideEffectsCall())  {  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
13	[BUG]  [BUGGY]  if(callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  [BUGGY]  if(callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.STRING)  {  [BUGGY]  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.STRING)  {	if  (callNode.isNoSideEffectsCall())  {  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
