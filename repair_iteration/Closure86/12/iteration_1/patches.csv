bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.NAME  &&!callNode.isNoSideEffectsCall())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.NAME  &&!callNode.isNoSideEffectsCall())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.NAME  &&!callNode.isNoSideEffectsCall())  {	  if(!callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
2	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&!callNode.isNoSideEffectsCall())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&!callNode.isNoSideEffectsCall())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.CALL  &&!callNode.isNoSideEffectsCall())  {	  if(!callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
3	[BUG]  [BUGGY]  if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION)  {	  if(!callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
4	[BUG]  [BUGGY]  if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {	  if(!callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
5	[BUG]  [BUGGY]  if(!callNode.isNoSideEffectsCall()  &&  callNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!callNode.isNoSideEffectsCall()  &&  callNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffectsCall()  &&  callNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(!callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
6	[BUG]  [BUGGY]  if(!callNode.isNoSideEffectsCall()  ||  callNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!callNode.isNoSideEffectsCall()  ||  callNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffectsCall()  ||  callNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(!callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
7	[BUG]  [BUGGY]  if(!callNode.isNoSideEffectsCall()  ||  callNode.getFirstChild().getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!callNode.isNoSideEffectsCall()  ||  callNode.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffectsCall()  ||  callNode.getFirstChild().getType()!=  Token.FUNCTION)  {	  if(!callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
8	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.NAME  &&!callNode.isNoSideEffects())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.NAME  &&!callNode.isNoSideEffects())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.NAME  &&!callNode.isNoSideEffects())  {	  if(!callNode.isNoSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
9	[BUG]  [BUGGY]  if(!callNode.isNoSideEffects()  &&  callNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!callNode.isNoSideEffects()  &&  callNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffects()  &&  callNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(!callNode.isNoSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
10	[BUG]  [BUGGY]  if(!callNode.isNoSideEffects()  ||  callNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!callNode.isNoSideEffects()  ||  callNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffects()  ||  callNode.getType()  ==  Token.FUNCTION)  {	  if(!callNode.isNoSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
11	[BUG]  [BUGGY]  if(!callNode.isNoSideEffects()  ||  callNode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!callNode.isNoSideEffects()  ||  callNode.getType()  ==  Token.NAME)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffects()  ||  callNode.getType()  ==  Token.NAME)  {	  if(!callNode.isNoSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
12	[BUG]  [BUGGY]  if(!callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.NAME)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.NAME)  {	  if(!callNode.isNoSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
13	[BUG]  [BUGGY]  if(!callNode.isNoSideEffects()  &&  callNode.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!callNode.isNoSideEffects()  &&  callNode.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffects()  &&  callNode.getFirstChild().getType()  ==  Token.NAME)  {	  if(!callNode.isNoSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
14	[BUG]  [BUGGY]  if(!callNode.isNoSideEffects()  ||  callNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!callNode.isNoSideEffects()  ||  callNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffects()  ||  callNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(!callNode.isNoSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
15	[BUG]  [BUGGY]  if(callNode.isNoSideEffects()  ||  callNode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.isNoSideEffects()  ||  callNode.getType()  ==  Token.NAME)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.isNoSideEffects()  ||  callNode.getType()  ==  Token.NAME)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
16	[BUG]  [BUGGY]  if(callNode.isNoSideEffects()  &&  callNode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.isNoSideEffects()  &&  callNode.getType()!=  Token.NAME)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.isNoSideEffects()  &&  callNode.getType()!=  Token.NAME)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
17	[BUG]  [BUGGY]  if(nameNode.isNoSideEffects()  ||  callNode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(nameNode.isNoSideEffects()  ||  callNode.getType()!=  Token.NAME)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(nameNode.isNoSideEffects()  ||  callNode.getType()!=  Token.NAME)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
18	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.NAME  ||  callNode.getType()!=  Token.SEMI)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.NAME  ||  callNode.getType()!=  Token.SEMI)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.NAME  ||  callNode.getType()!=  Token.SEMI)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
19	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.NAME  ||  callNode.getType()!=  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.NAME  ||  callNode.getType()!=  Token.CALL)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.NAME  ||  callNode.getType()!=  Token.CALL)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
20	[BUG]  [BUGGY]  if(compiler.constructCallHasSideEffects(callNode,  compiler))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(compiler.constructCallHasSideEffects(callNode,  compiler))  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(compiler.constructCallHasSideEffects(callNode,  compiler))  {	  if(!constructCallHasSideEffects(callNode,    compiler))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
21	[BUG]  [BUGGY]  if(!compiler.constructCallHasSideEffects(callNode,  compiler))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!compiler.constructCallHasSideEffects(callNode,  compiler))  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!compiler.constructCallHasSideEffects(callNode,  compiler))  {	  if(!constructCallHasSideEffects(callNode,    compiler))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
22	[BUG]  [BUGGY]  if(compiler.constructCallHasSideEffects(callNode))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(compiler.constructCallHasSideEffects(callNode))  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(compiler.constructCallHasSideEffects(callNode))  {	  if(!constructCallHasSideEffects(callNode,    compiler))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
23	[BUG]  [BUGGY]  if(!constructCallHasSideEffects(callNode,  compiler)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!constructCallHasSideEffects(callNode,  compiler)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!constructCallHasSideEffects(callNode,  compiler)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {	  if(!constructCallHasSideEffects(callNode,    compiler))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
24	[BUG]  [BUGGY]  if(constructCallHasSideEffects(callNode,  compiler))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(constructCallHasSideEffects(callNode,  compiler))  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(constructCallHasSideEffects(callNode,  compiler))  {	  if(!constructCallHasSideEffects(callNode,    compiler))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
25	[BUG]  [BUGGY]  if(!constructor.constructCallHasSideEffects(callNode,  compiler))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!constructor.constructCallHasSideEffects(callNode,  compiler))  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!constructor.constructCallHasSideEffects(callNode,  compiler))  {	  if(!constructCallHasSideEffects(callNode,    compiler))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
26	[BUG]  [BUGGY]  if(callNode.isNoSideEffects()  ||  callNode.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.isNoSideEffects()  ||  callNode.getType()  ==  Token.STRING)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.isNoSideEffects()  ||  callNode.getType()  ==  Token.STRING)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
27	[BUG]  [BUGGY]  if(!callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.STRING)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.STRING)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
28	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.STRING  ||  callNode.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.STRING  ||  callNode.getType()!=  Token.STRING)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.STRING  ||  callNode.getType()!=  Token.STRING)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
29	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.STRING  ||  callNode.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.STRING  ||  callNode.getType()!=  Token.STRING)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.STRING  ||  callNode.getType()!=  Token.STRING)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
30	[BUG]  [BUGGY]  if(nameNode.isNoSideEffects()  ||  callNode.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(nameNode.isNoSideEffects()  ||  callNode.getType()!=  Token.STRING)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(nameNode.isNoSideEffects()  ||  callNode.getType()!=  Token.STRING)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
31	[BUG]  [BUGGY]  if(callNode.isNoSideEffects()  &&  callNode.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.isNoSideEffects()  &&  callNode.getType()!=  Token.STRING)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.isNoSideEffects()  &&  callNode.getType()!=  Token.STRING)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
32	[BUG]  [BUGGY]  if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
33	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.FUNCTION  ||  callNode.getType()!=  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.FUNCTION  ||  callNode.getType()!=  Token.CALL)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.FUNCTION  ||  callNode.getType()!=  Token.CALL)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
34	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.FUNCTION  ||  callNode.getType()!=  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.FUNCTION  ||  callNode.getType()!=  Token.CALL)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.FUNCTION  ||  callNode.getType()!=  Token.CALL)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
35	[BUG]  [BUGGY]  if(callNode.isNoSideEffectsCall()  &&  callNode.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.isNoSideEffectsCall()  &&  callNode.getType()!=  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.isNoSideEffectsCall()  &&  callNode.getType()!=  Token.FUNCTION)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
36	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.CALL  ||  callNode.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.CALL  ||  callNode.getType()!=  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.CALL  ||  callNode.getType()!=  Token.FUNCTION)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
37	[BUG]  [BUGGY]  if(callNode.isNoSideEffects()  ||  callNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.isNoSideEffects()  ||  callNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.isNoSideEffects()  ||  callNode.getType()  ==  Token.FUNCTION)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
38	[BUG]  [BUGGY]  if(!callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.FUNCTION)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
39	[BUG]  [BUGGY]  if(callNode.isNoSideEffects()  &&  callNode.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.isNoSideEffects()  &&  callNode.getType()!=  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.isNoSideEffects()  &&  callNode.getType()!=  Token.FUNCTION)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
40	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.NAME  ||  callNode.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.NAME  ||  callNode.getType()!=  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.NAME  ||  callNode.getType()!=  Token.FUNCTION)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
41	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.FUNCTION  ||  callNode.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.FUNCTION  ||  callNode.getType()!=  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.FUNCTION  ||  callNode.getType()!=  Token.FUNCTION)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  compiler);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  compiler);  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	NodeTraversal.traverse(compiler,  callNode,  compiler);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
43	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  Node  nameNode  =  callNode.getFirstChild();  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	Node  nameNode  =  callNode.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
45	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getLastChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  Node  nameNode  =  callNode.getLastChild();  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	Node  nameNode  =  callNode.getLastChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
46	[BUG]  [BUGGY]  Node  vars  =  callNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  Node  vars  =  callNode.getFirstChild();  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	Node  vars  =  callNode.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
47	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(compiler));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(compiler));  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(compiler));	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
48	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  this);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  this);  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	NodeTraversal.traverse(compiler,  callNode,  this);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
49	[BUG]  [BUGGY]  if(!compiler.constructCallHasSideEffects(callNode))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!compiler.constructCallHasSideEffects(callNode))  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!compiler.constructCallHasSideEffects(callNode))  {	  if(!constructCallHasSideEffects(callNode))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
50	[BUG]  [BUGGY]  if(!constructCallHasSideEffects(callNode.getFirstChild()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!constructCallHasSideEffects(callNode.getFirstChild()))  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!constructCallHasSideEffects(callNode.getFirstChild()))  {	  if(!constructCallHasSideEffects(callNode))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
51	[BUG]  [BUGGY]  if(!constructCallHasSideEffects(callNode.getString()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!constructCallHasSideEffects(callNode.getString()))  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!constructCallHasSideEffects(callNode.getString()))  {	  if(!constructCallHasSideEffects(callNode))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
52	[BUG]  [BUGGY]  if(!constructorCallHasSideEffects(callNode))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!constructorCallHasSideEffects(callNode))  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!constructorCallHasSideEffects(callNode))  {	  if(!constructCallHasSideEffects(callNode))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
53	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.FUNCTION  ||  callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.FUNCTION  ||  callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.FUNCTION  ||  callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
54	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.FUNCTION  ||  callNode.getType()  ==  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.FUNCTION  ||  callNode.getType()  ==  Token.CALL)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.FUNCTION  ||  callNode.getType()  ==  Token.CALL)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
55	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.CALL  ||  callNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.CALL  ||  callNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.CALL  ||  callNode.getType()  ==  Token.FUNCTION)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
56	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.FUNCTION  ||  callNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.FUNCTION  ||  callNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.FUNCTION  ||  callNode.getType()  ==  Token.EXPR_RESULT)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
57	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.NAME  ||  callNode.isNoSideEffectsCall())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.NAME  ||  callNode.isNoSideEffectsCall())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.NAME  ||  callNode.isNoSideEffectsCall())  {	  if(callNode.getType()    ==    Token.NAME    &&    callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
58	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  callNode.isNoSideEffectsCall())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  callNode.isNoSideEffectsCall())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(nameNode.getType()  ==  Token.NAME  &&  callNode.isNoSideEffectsCall())  {	  if(callNode.getType()    ==    Token.NAME    &&    callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
59	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.NAME  ||  callNode.isNoSideEffectsCall())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.NAME  ||  callNode.isNoSideEffectsCall())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.NAME  ||  callNode.isNoSideEffectsCall())  {	  if(callNode.getType()    ==    Token.NAME    &&    callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
60	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.NAME  &&  callNode.isSideEffectsCall())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.NAME  &&  callNode.isSideEffectsCall())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.NAME  &&  callNode.isSideEffectsCall())  {	  if(callNode.getType()    ==    Token.NAME    &&    callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
61	[BUG]  [BUGGY]  if(type  ==  Token.NAME  &&  callNode.isNoSideEffectsCall())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(type  ==  Token.NAME  &&  callNode.isNoSideEffectsCall())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(type  ==  Token.NAME  &&  callNode.isNoSideEffectsCall())  {	  if(callNode.getType()    ==    Token.NAME    &&    callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
62	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.NAME  &&  callNode.isFunctionCall())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.NAME  &&  callNode.isFunctionCall())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.NAME  &&  callNode.isFunctionCall())  {	  if(callNode.getType()    ==    Token.NAME    &&    callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
63	[BUG]  [BUGGY]  if(callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.NAME)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.NAME)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
64	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.CALL  ||  callNode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.CALL  ||  callNode.getType()  ==  Token.NAME)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.CALL  ||  callNode.getType()  ==  Token.NAME)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
65	[BUG]  [BUGGY]  if(callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.NAME)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.NAME)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
66	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.NAME  ||  callNode.getType()  ==  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.NAME  ||  callNode.getType()  ==  Token.CALL)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.NAME  ||  callNode.getType()  ==  Token.CALL)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
67	[BUG]  [BUGGY]  if(nameNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(nameNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(nameNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
68	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.CALL  ||  callNode.isNoSideEffectsCall())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.CALL  ||  callNode.isNoSideEffectsCall())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.CALL  ||  callNode.isNoSideEffectsCall())  {	  if(callNode.getType()    ==    Token.CALL    &&    callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
69	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&  callNode.isSideEffectsCall())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&  callNode.isSideEffectsCall())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.CALL  &&  callNode.isSideEffectsCall())  {	  if(callNode.getType()    ==    Token.CALL    &&    callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
70	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.CALL  &&  callNode.isNoSideEffectsCall())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(nameNode.getType()  ==  Token.CALL  &&  callNode.isNoSideEffectsCall())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(nameNode.getType()  ==  Token.CALL  &&  callNode.isNoSideEffectsCall())  {	  if(callNode.getType()    ==    Token.CALL    &&    callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
71	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&  callNode.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&  callNode.isEmpty())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.CALL  &&  callNode.isEmpty())  {	  if(callNode.getType()    ==    Token.CALL    &&    callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
72	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&  callNode.isFunctionCall())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&  callNode.isFunctionCall())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.CALL  &&  callNode.isFunctionCall())  {	  if(callNode.getType()    ==    Token.CALL    &&    callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
73	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&  callNode.isFunctionDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&  callNode.isFunctionDeclaration())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.CALL  &&  callNode.isFunctionDeclaration())  {	  if(callNode.getType()    ==    Token.CALL    &&    callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
74	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.STRING  ||  callNode.isNoSideEffects())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.STRING  ||  callNode.isNoSideEffects())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.STRING  ||  callNode.isNoSideEffects())  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
75	[BUG]  [BUGGY]  if(node.isNoSideEffects()  ||  callNode.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(node.isNoSideEffects()  ||  callNode.getType()!=  Token.STRING)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(node.isNoSideEffects()  ||  callNode.getType()!=  Token.STRING)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
76	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.STRING)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.STRING)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
77	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&  callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&  callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.CALL  &&  callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
78	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.NAME  ||  callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.NAME  ||  callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.NAME  ||  callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
79	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.NAME  ||  callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.NAME  ||  callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.NAME  ||  callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
80	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.NAME  ||  callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.NAME  ||  callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.NAME)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.NAME  ||  callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.NAME)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
81	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.NAME  ||  callNode.isNoSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.NAME  ||  callNode.isNoSideEffects())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.NAME  ||  callNode.isNoSideEffects())  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
82	[BUG]  [BUGGY]  if(!callNode.isNoSideEffects()  &&  callNode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!callNode.isNoSideEffects()  &&  callNode.getType()!=  Token.NAME)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffects()  &&  callNode.getType()!=  Token.NAME)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
83	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.CALL  ||  callNode.isNoSideEffectsCall())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.CALL  ||  callNode.isNoSideEffectsCall())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.CALL  ||  callNode.isNoSideEffectsCall())  {	  if(callNode.getType()    ==    Token.CALL    &&    callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
84	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&  callNode.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&  callNode.hasChildren())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.CALL  &&  callNode.hasChildren())  {	  if(callNode.getType()    ==    Token.CALL    &&    callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
85	[BUG]  [BUGGY]  if(type  ==  Token.CALL  &&  callNode.isNoSideEffectsCall())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(type  ==  Token.CALL  &&  callNode.isNoSideEffectsCall())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(type  ==  Token.CALL  &&  callNode.isNoSideEffectsCall())  {	  if(callNode.getType()    ==    Token.CALL    &&    callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
86	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&  callNode.isConstructorCall())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&  callNode.isConstructorCall())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.CALL  &&  callNode.isConstructorCall())  {	  if(callNode.getType()    ==    Token.CALL    &&    callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
87	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()));  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()));	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
88	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement());  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement());	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
90	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString());  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString());	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
91	[BUG]  [BUGGY]  if(!constructCallHasSideEffects(callNode,  compiler)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!constructCallHasSideEffects(callNode,  compiler)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!constructCallHasSideEffects(callNode,  compiler)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {	  if(!constructCallHasSideEffects(callNode,    compiler))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
92	[BUG]  [BUGGY]  if(!node.isNoSideEffects())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!node.isNoSideEffects())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!node.isNoSideEffects())  {	  if(!callNode.isNoSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
93	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.FUNCTION  ||  callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.FUNCTION  ||  callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.FUNCTION  ||  callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
94	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.CALL  &&  callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.CALL  &&  callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.CALL  &&  callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
95	[BUG]  [BUGGY]  if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()!=  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()!=  Token.FUNCTION)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
96	[BUG]  [BUGGY]  if(!constructCallHasSideEffects(node))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!constructCallHasSideEffects(node))  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!constructCallHasSideEffects(node))  {	  if(!constructCallHasSideEffects(callNode))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
97	[BUG]  [BUGGY]  if(constructCallHasSideEffects(callNode)||  compiler.isDeclaration(callNode))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(constructCallHasSideEffects(callNode)||  compiler.isDeclaration(callNode))  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(constructCallHasSideEffects(callNode)||  compiler.isDeclaration(callNode))  {	  if(!constructCallHasSideEffects(callNode))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
98	[BUG]  [BUGGY]  if(!constructCallHasSideEffects(callNode)||  compiler.isDeclaration(callNode))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!constructCallHasSideEffects(callNode)||  compiler.isDeclaration(callNode))  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!constructCallHasSideEffects(callNode)||  compiler.isDeclaration(callNode))  {	  if(!constructCallHasSideEffects(callNode))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
99	[BUG]  [BUGGY]  if(!callNode.isNoSideEffects()  ||  callNode.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!callNode.isNoSideEffects()  ||  callNode.getType()  ==  Token.STRING)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffects()  ||  callNode.getType()  ==  Token.STRING)  {	  if(!callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
100	[BUG]  [BUGGY]  if(!node.isNoSideEffectsCall())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!node.isNoSideEffectsCall())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!node.isNoSideEffectsCall())  {	  if(!callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
101	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.FUNCTION  ||  callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.FUNCTION  ||  callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.FUNCTION  ||  callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.FUNCTION)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
102	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.FUNCTION  ||  callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.FUNCTION  ||  callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.FUNCTION  ||  callNode.isNoSideEffects()  ||  callNode.getType()!=  Token.FUNCTION)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
103	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.FUNCTION  ||  callNode.isNoSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.FUNCTION  ||  callNode.isNoSideEffects())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.FUNCTION  ||  callNode.isNoSideEffects())  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
104	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.FUNCTION)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
105	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&  callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&  callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.CALL  &&  callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
106	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.FUNCTION  ||  callNode.isNoSideEffectsCall())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()  ==  Token.FUNCTION  ||  callNode.isNoSideEffectsCall())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()  ==  Token.FUNCTION  ||  callNode.isNoSideEffectsCall())  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
107	[BUG]  [BUGGY]  if(callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.FUNCTION)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
108	[BUG]  [BUGGY]  if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.FUNCTION)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
109	[BUG]  [BUGGY]  if(constructorCallHasSideEffects(callNode,  compiler))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(constructorCallHasSideEffects(callNode,  compiler))  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(constructorCallHasSideEffects(callNode,  compiler))  {	  if(callNode.getType()    ==    Token.NAME    &&    callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
110	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.NAME  &&  callNode.isNoSideEffectsCall())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.NAME  &&  callNode.isNoSideEffectsCall())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.NAME  &&  callNode.isNoSideEffectsCall())  {	  if(callNode.getType()    ==    Token.NAME    &&    callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
111	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
112	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
113	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.FUNCTION  ||  callNode.getType()  ==  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.FUNCTION  ||  callNode.getType()  ==  Token.CALL)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.FUNCTION  ||  callNode.getType()  ==  Token.CALL)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
114	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.CALL  &&  callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.CALL  &&  callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.CALL  &&  callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
115	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.NAME  ||  callNode.getType()  ==  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.NAME  ||  callNode.getType()  ==  Token.CALL)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.NAME  ||  callNode.getType()  ==  Token.CALL)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
116	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.STRING  &&  callNode.isNoSideEffects())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.STRING  &&  callNode.isNoSideEffects())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.STRING  &&  callNode.isNoSideEffects())  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
117	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.STRING  ||  callNode.getType()!=  Token.EMPTY)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.STRING  ||  callNode.getType()!=  Token.EMPTY)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.STRING  ||  callNode.getType()!=  Token.EMPTY)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
118	[BUG]  [BUGGY]  if(!constructCallHasSideEffects(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!constructCallHasSideEffects(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!constructCallHasSideEffects(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {	  if(!constructCallHasSideEffects(callNode))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
119	[BUG]  [BUGGY]  if(!constructCallHasSideEffects(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!constructCallHasSideEffects(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!constructCallHasSideEffects(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {	  if(!constructCallHasSideEffects(callNode))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
120	[BUG]  [BUGGY]  if(!constructCallHasSideEffects(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!constructCallHasSideEffects(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!constructCallHasSideEffects(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {	  if(!constructCallHasSideEffects(callNode))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
121	[BUG]  [BUGGY]  if(!constructCallHasSideEffects(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!constructCallHasSideEffects(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!constructCallHasSideEffects(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {	  if(!constructCallHasSideEffects(callNode))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
122	[BUG]  [BUGGY]  if(!callNode.isNoSideEffects()  ||  callNode.getFirstChild().getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!callNode.isNoSideEffects()  ||  callNode.getFirstChild().getType()!=  Token.STRING)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffects()  ||  callNode.getFirstChild().getType()!=  Token.STRING)  {	  if(!callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
123	[BUG]  [BUGGY]  if(!callNode.isNoSideEffects()  ||  callNode.getFirstChild().getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!callNode.isNoSideEffects()  ||  callNode.getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffects()  ||  callNode.getFirstChild().getType()!=  Token.FUNCTION)  {	  if(!callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
124	[BUG]  [BUGGY]  if(!callNode.isNoSideEffects()  ||  callNode.getFirstChild().getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!callNode.isNoSideEffects()  ||  callNode.getFirstChild().getType()!=  Token.NAME)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffects()  ||  callNode.getFirstChild().getType()!=  Token.NAME)  {	  if(!callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
125	[BUG]  [BUGGY]  if(callNode.getType()!=  Token.CALL  &&  callNode.isNoSideEffectsCall())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.getType()!=  Token.CALL  &&  callNode.isNoSideEffectsCall())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.getType()!=  Token.CALL  &&  callNode.isNoSideEffectsCall())  {	  if(callNode.getType()    ==    Token.CALL    &&    callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
126	[BUG]  [BUGGY]  if(!constructCallHasSideEffects(callNode,  compiler)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!constructCallHasSideEffects(callNode,  compiler)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!constructCallHasSideEffects(callNode,  compiler)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {	  if(!constructCallHasSideEffects(callNode,    compiler))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
127	[BUG]  [BUGGY]  if(!constructorCallHasSideEffects(callNode,  compiler))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!constructorCallHasSideEffects(callNode,  compiler))  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!constructorCallHasSideEffects(callNode,  compiler))  {	  if(!constructCallHasSideEffects(callNode,    compiler))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
128	[BUG]  [BUGGY]  if(node.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(node.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(node.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
129	[BUG]  [BUGGY]  if(callNode.isNoSideEffectsCall()  ||  callNode.getFirstChild()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(callNode.isNoSideEffectsCall()  ||  callNode.getFirstChild()!=  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(callNode.isNoSideEffectsCall()  ||  callNode.getFirstChild()!=  Token.FUNCTION)  {	  if(callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
130	[BUG]  [BUGGY]  if(!callNode.isNoSideEffects()  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(!callNode.isNoSideEffects()  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(!callNode.isNoSideEffects()  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS)  {	  if(!callNode.isNoSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
131	[BUG]  [BUGGY]  if(node.isNoSideEffects()  ||  callNode.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(node.isNoSideEffects()  ||  callNode.getType()!=  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(node.isNoSideEffects()  ||  callNode.getType()!=  Token.FUNCTION)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
132	[BUG]  [BUGGY]  if(nameNode.isNoSideEffects()  ||  callNode.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(nameNode.isNoSideEffects()  ||  callNode.getType()!=  Token.FUNCTION)  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(nameNode.isNoSideEffects()  ||  callNode.getType()!=  Token.FUNCTION)  {	  if(callNode.isNoSideEffects()    ||    callNode.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
133	[BUG]  [BUGGY]  if(type!=  Token.NAME  &&  callNode.isNoSideEffectsCall())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }    [BUGGY]  if(type!=  Token.NAME  &&  callNode.isNoSideEffectsCall())  {  [BUGGY]    return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	691	691	7	replace	if(type!=  Token.NAME  &&  callNode.isNoSideEffectsCall())  {	  if(callNode.getType()    ==    Token.NAME    &&    callNode.isNoSideEffectsCall())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
