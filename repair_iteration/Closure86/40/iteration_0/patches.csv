bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getLastChild();  [CE]  [FE]    AssertionFailedError  [CONTEXT]  Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(   "Expected  CALL  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]  Node  nameNode  =  callNode.getLastChild();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getLastChild();	Node  nameNode  =  callNode.getFirstChild();  	non-compiled	[CE]  	79	None	replace
2	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getNext();  [CE]  [FE]      AssertionFailedError  [CONTEXT]  Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(   "Expected  CALL  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]  Node  nameNode  =  callNode.getNext();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getNext();	Node  nameNode  =  callNode.getFirstChild();  	non-compiled	[CE]  	79	None	replace
3	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getType();  [CE]  [FE]        AssertionFailedError  [CONTEXT]  Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(   "Expected  CALL  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]  Node  nameNode  =  callNode.getType();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getType();	Node  nameNode  =  callNode.getFirstChild();  	non-compiled	[CE]  	79	None	replace
4	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getString();  [CE]  [FE]          AssertionFailedError  [CONTEXT]  Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(   "Expected  CALL  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]  Node  nameNode  =  callNode.getString();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getString();	Node  nameNode  =  callNode.getFirstChild();  	non-compiled	[CE]  	79	None	replace
5	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getLocalName();  [CE]  [FE]            AssertionFailedError  [CONTEXT]  Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(   "Expected  CALL  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]  Node  nameNode  =  callNode.getLocalName();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getLocalName();	Node  nameNode  =  callNode.getFirstChild();  	non-compiled	[CE]  	79	None	replace
6	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAncestor(1);  [CE]  [FE]              AssertionFailedError  [CONTEXT]  Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(   "Expected  CALL  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]  Node  nameNode  =  callNode.getAncestor(1);  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getAncestor(1);	Node  nameNode  =  callNode.getFirstChild();  	non-compiled	[CE]  	79	None	replace
7	[BUG]  [BUGGY]    [CE]  [FE]                AssertionFailedError  [CONTEXT]  Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(   "Expected  CALL  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]    [BUGGY]    if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	  	Node  nameNode  =  callNode.getFirstChild();  	non-compiled	[CE]  	79	None	replace
8	[BUG]  [BUGGY]  Node  nameNode  =  callNode.removeFirstChild();  [CE]  [FE]    AssertionFailedError  [CONTEXT]  Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(   "Expected  CALL  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]  Node  nameNode  =  callNode.removeFirstChild();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.removeFirstChild();	Node  nameNode  =  callNode.getFirstChild();  	non-compiled	[CE]  	79	None	replace
9	[BUG]  [BUGGY]  Node  nameNode  =  callNode.cloneTree();  [CE]  [FE]      AssertionFailedError  [CONTEXT]  Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(   "Expected  CALL  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]  Node  nameNode  =  callNode.cloneTree();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.cloneTree();	Node  nameNode  =  callNode.getFirstChild();  	non-compiled	[CE]  	79	None	replace
10	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getParent();  [CE]  [FE]        AssertionFailedError  [CONTEXT]  Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(   "Expected  CALL  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]  Node  nameNode  =  callNode.getParent();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getParent();	Node  nameNode  =  callNode.getFirstChild();  	non-compiled	[CE]  	79	None	replace
11	[BUG]  [BUGGY]  Node  nameNode  =  param.getFirstChild();  [CE]  [FE]    AssertionFailedError  [CONTEXT]  Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(   "Expected  CALL  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]  Node  nameNode  =  param.getFirstChild();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  param.getFirstChild();	Node  nameNode  =  callNode.getFirstChild();  	non-compiled	[CE]  	79	None	replace
12	[BUG]  [BUGGY]  Node  nameNode  =  node.getFirstChild();  [CE]  [FE]      AssertionFailedError  [CONTEXT]  Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(   "Expected  CALL  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]  Node  nameNode  =  node.getFirstChild();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  node.getFirstChild();	Node  nameNode  =  callNode.getFirstChild();  	non-compiled	[CE]  	79	None	replace
