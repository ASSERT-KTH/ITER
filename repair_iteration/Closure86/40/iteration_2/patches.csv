bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getFirstChild(),  JSC_PROPERTY_NAME;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getFirstChild(),  JSC_PROPERTY_NAME;  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getFirstChild(),  JSC_PROPERTY_NAME;	  Node    nameNode    =    callNode.getString(),    JSC_PROPERTY_NAME;    	non-compiled	[CE]  	9	None	replace
2	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getString(),  JSC_PROPERTY_NAME_FN;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getString(),  JSC_PROPERTY_NAME_FN;  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getString(),  JSC_PROPERTY_NAME_FN;	  Node    nameNode    =    callNode.getString(),    JSC_PROPERTY_NAME;    	non-compiled	[CE]  	9	None	replace
3	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getNext(),  JSC_PROPERTY_NAME;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getNext(),  JSC_PROPERTY_NAME;  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getNext(),  JSC_PROPERTY_NAME;	  Node    nameNode    =    callNode.getString(),    JSC_PROPERTY_NAME;    	non-compiled	[CE]  	9	None	replace
4	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getLastChild(),  JSC_PROPERTY_NAME;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getLastChild(),  JSC_PROPERTY_NAME;  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getLastChild(),  JSC_PROPERTY_NAME;	  Node    nameNode    =    callNode.getString(),    JSC_PROPERTY_NAME;    	non-compiled	[CE]  	9	None	replace
5	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getFirstChild().getString(),  JSC_PROPERTY_NAME;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getFirstChild().getString(),  JSC_PROPERTY_NAME;  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getFirstChild().getString(),  JSC_PROPERTY_NAME;	  Node    nameNode    =    callNode.getString(),    JSC_PROPERTY_NAME;    	non-compiled	[CE]  	9	None	replace
6	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getType(),  JSC_PROPERTY_NAME;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getType(),  JSC_PROPERTY_NAME;  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getType(),  JSC_PROPERTY_NAME;	  Node    nameNode    =    callNode.getString(),    JSC_PROPERTY_NAME;    	non-compiled	[CE]  	9	None	replace
7	[BUG]  [BUGGY]  Node  nameNode  =  compiler.getAstRoot(Compiler.STRING_REGEXP_METHODS);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  compiler.getAstRoot(Compiler.STRING_REGEXP_METHODS);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  compiler.getAstRoot(Compiler.STRING_REGEXP_METHODS);	  Node    nameNode    =    callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS);    	non-compiled	[CE]  	17	None	replace
8	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  param);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  param);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  param);	  Node    nameNode    =    callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS);    	non-compiled	[CE]  	17	None	replace
9	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);	  Node    nameNode    =    callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS);    	non-compiled	[CE]  	17	None	replace
10	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  JSC_PROPERTY_NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  JSC_PROPERTY_NAME);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  JSC_PROPERTY_NAME);	  Node    nameNode    =    callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS);    	non-compiled	[CE]  	17	None	replace
11	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  compiler);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  compiler);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  compiler);	  Node    nameNode    =    callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS);    	non-compiled	[CE]  	17	None	replace
12	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  names);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  names);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  names);	  Node    nameNode    =    callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS);    	non-compiled	[CE]  	17	None	replace
13	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAncestor(0);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getAncestor(0);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getAncestor(0);	  Node    nameNode    =    callNode.getAncestor(3);    	non-compiled	[CE]  	18	None	replace
14	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAncestor(4);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getAncestor(4);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getAncestor(4);	  Node    nameNode    =    callNode.getAncestor(3);    	non-compiled	[CE]  	18	None	replace
15	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getName();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getName();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getName();	  Node    nameNode    =    callNode.getPrevious();    	non-compiled	[CE]  	16	None	replace
16	[BUG]  [BUGGY]  Name  name  =  callNode.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Name  name  =  callNode.getFirstChild();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Name  name  =  callNode.getFirstChild();	  Name    name    =    callNode.getString();    	non-compiled	[CE]  	3	None	replace
17	[BUG]  [BUGGY]  Name  name  =  callNode.getName();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Name  name  =  callNode.getName();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Name  name  =  callNode.getName();	  Name    name    =    callNode.getString();    	non-compiled	[CE]  	3	None	replace
18	[BUG]  [BUGGY]  Name  name  =  callNode.getQualifiedName();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Name  name  =  callNode.getQualifiedName();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Name  name  =  callNode.getQualifiedName();	  Name    name    =    callNode.getString();    	non-compiled	[CE]  	3	None	replace
19	[BUG]  [BUGGY]  Name  name  =  callNode.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Name  name  =  callNode.getLastChild();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Name  name  =  callNode.getLastChild();	  Name    name    =    callNode.getString();    	non-compiled	[CE]  	3	None	replace
20	[BUG]  [BUGGY]  Name  name  =  callNode.getLocalName();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Name  name  =  callNode.getLocalName();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Name  name  =  callNode.getLocalName();	  Name    name    =    callNode.getString();    	non-compiled	[CE]  	3	None	replace
21	[BUG]  [BUGGY]  Name  name  =  callNode.getSimpleName();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Name  name  =  callNode.getSimpleName();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Name  name  =  callNode.getSimpleName();	  Name    name    =    callNode.getString();    	non-compiled	[CE]  	3	None	replace
22	[BUG]  [BUGGY]  NameNode  nameNode  =  node.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  NameNode  nameNode  =  node.getFirstChild();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	NameNode  nameNode  =  node.getFirstChild();	  NameNode    nameNode    =    callNode.getLastChild();    	non-compiled	[CE]  	19	None	replace
23	[BUG]  [BUGGY]  NameNode  nameNode  =  callNode.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  NameNode  nameNode  =  callNode.getNext();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	NameNode  nameNode  =  callNode.getNext();	  NameNode    nameNode    =    callNode.getLastChild();    	non-compiled	[CE]  	19	None	replace
24	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getQualifiedName()  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getQualifiedName()  +  1;  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getQualifiedName()  +  1;	  Node    nameNode    =    callNode.getQualifiedName();    	non-compiled	[CE]  	8	None	replace
25	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getFunctionName();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getFunctionName();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getFunctionName();	  Node    nameNode    =    callNode.getSimpleName();    	non-compiled	[CE]  	5	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.NAME);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Preconditions.checkState(callNode.getType()  ==  Token.NAME);	  Preconditions.checkState(nameNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	20	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME,  callNode.getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME,  callNode.getString());  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Preconditions.checkState(nameNode.getType()  ==  Token.NAME,  callNode.getString());	  Preconditions.checkState(nameNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	20	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.getType()!=  Token.NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Preconditions.checkState(nameNode.getType()!=  Token.NAME);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Preconditions.checkState(nameNode.getType()!=  Token.NAME);	  Preconditions.checkState(nameNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	20	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME,  callNode.getFirstChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME,  callNode.getFirstChild());  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Preconditions.checkState(nameNode.getType()  ==  Token.NAME,  callNode.getFirstChild());	  Preconditions.checkState(nameNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	20	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME  ||  nameNode.getType()  ==  Token.GETPROP);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME  ||  nameNode.getType()  ==  Token.GETPROP);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Preconditions.checkState(nameNode.getType()  ==  Token.NAME  ||  nameNode.getType()  ==  Token.GETPROP);	  Preconditions.checkState(nameNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	20	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME  ||  nameNode.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME  ||  nameNode.getType()  ==  Token.FUNCTION);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Preconditions.checkState(nameNode.getType()  ==  Token.NAME  ||  nameNode.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(nameNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	20	None	replace
32	[BUG]  [BUGGY]  NameNode  nameNode  =  callNode.cloneTree();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  NameNode  nameNode  =  callNode.cloneTree();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	NameNode  nameNode  =  callNode.cloneTree();	  Node    nameNode    =    param.cloneTree();    	non-compiled	[CE]  	21	None	replace
33	[BUG]  [BUGGY]  Node  nameNode  =  node.cloneTree();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  node.cloneTree();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  node.cloneTree();	  Node    nameNode    =    param.cloneTree();    	non-compiled	[CE]  	21	None	replace
34	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getFirstChild().getLocalName();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getFirstChild().getLocalName();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getFirstChild().getLocalName();	  Node    nameNode    =    param.getLocalName();    	non-compiled	[CE]  	24	None	replace
35	[BUG]  [BUGGY]  String  name  =  callNode.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  String  name  =  callNode.getFirstChild();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	String  name  =  callNode.getFirstChild();	  String    name    =    callNode.getString();    	non-compiled	[CE]  	4	None	replace
36	[BUG]  [BUGGY]  String  name  =  callNode.getQualifiedName();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  String  name  =  callNode.getQualifiedName();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	String  name  =  callNode.getQualifiedName();	  String    name    =    callNode.getString();    	non-compiled	[CE]  	4	None	replace
37	[BUG]  [BUGGY]  String  name  =  callNode.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  String  name  =  callNode.getLastChild();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	String  name  =  callNode.getLastChild();	  String    name    =    callNode.getString();    	non-compiled	[CE]  	4	None	replace
38	[BUG]  [BUGGY]  String  name  =  callNode.getName();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  String  name  =  callNode.getName();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	String  name  =  callNode.getName();	  String    name    =    callNode.getString();    	non-compiled	[CE]  	4	None	replace
39	[BUG]  [BUGGY]  String  name  =  callNode.getString(),  JSC_PROPERTY_NAME_FN);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  String  name  =  callNode.getString(),  JSC_PROPERTY_NAME_FN);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	String  name  =  callNode.getString(),  JSC_PROPERTY_NAME_FN);	  String    name    =    callNode.getString();    	non-compiled	[CE]  	4	None	replace
40	[BUG]  [BUGGY]  String  name  =  callNode.getLocalName();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  String  name  =  callNode.getLocalName();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	String  name  =  callNode.getLocalName();	  String    name    =    callNode.getString();    	non-compiled	[CE]  	4	None	replace
41	[BUG]  [BUGGY]  Node  nameNode  =  node.removeChild(callNode);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  node.removeChild(callNode);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  node.removeChild(callNode);	  Node    nameNode    =    callNode.removeChild(node);    	non-compiled	[CE]  	22	None	replace
42	[BUG]  [BUGGY]  Node  nameNode  =  callNode.removeChild(callNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.removeChild(callNode);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.removeChild(callNode);	  Node    nameNode    =    callNode.removeChild(node);    	non-compiled	[CE]  	22	None	replace
43	[BUG]  [BUGGY]  Node  nameNode  =  callNode.removeChild(name);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.removeChild(name);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.removeChild(name);	  Node    nameNode    =    callNode.removeChild(node);    	non-compiled	[CE]  	22	None	replace
44	[BUG]  [BUGGY]  NameNode  nameNode  =  callNode.getString();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  NameNode  nameNode  =  callNode.getString();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	NameNode  nameNode  =  callNode.getString();	  Node    nameNode    =    param.getString();    	non-compiled	[CE]  	25	None	replace
45	[BUG]  [BUGGY]  Node  nameNode  =  node.getString();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  node.getString();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  node.getString();	  Node    nameNode    =    param.getString();    	non-compiled	[CE]  	25	None	replace
46	[BUG]  [BUGGY]  Node  name  =  callNode.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  name  =  callNode.getLastChild();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  name  =  callNode.getLastChild();	  Node    name    =    callNode.getFirstChild();    	non-compiled	[CE]  	1	None	replace
47	[BUG]  [BUGGY]  Node  name  =  callNode.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  name  =  callNode.getNext();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  name  =  callNode.getNext();	  Node    name    =    callNode.getFirstChild();    	non-compiled	[CE]  	1	None	replace
48	[BUG]  [BUGGY]  Node  name  =  callNode.getType();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  name  =  callNode.getType();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  name  =  callNode.getType();	  Node    name    =    callNode.getFirstChild();    	non-compiled	[CE]  	1	None	replace
49	[BUG]  [BUGGY]  Node  name  =  callNode.getString();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  name  =  callNode.getString();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  name  =  callNode.getString();	  Node    name    =    callNode.getFirstChild();    	non-compiled	[CE]  	1	None	replace
50	[BUG]  [BUGGY]  Node  name  =  callNode.getLocalName();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  name  =  callNode.getLocalName();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  name  =  callNode.getLocalName();	  Node    name    =    callNode.getFirstChild();    	non-compiled	[CE]  	1	None	replace
51	[BUG]  [BUGGY]  Node  name  =  callNode.getQualifiedName();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  name  =  callNode.getQualifiedName();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  name  =  callNode.getQualifiedName();	  Node    name    =    callNode.getFirstChild();    	non-compiled	[CE]  	1	None	replace
52	[BUG]  [BUGGY]  Object  nameNode  =  callNode.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Object  nameNode  =  callNode.getLastChild();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Object  nameNode  =  callNode.getLastChild();	  Object    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	23	None	replace
53	[BUG]  [BUGGY]  Object  nameNode  =  callNode.getType();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Object  nameNode  =  callNode.getType();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Object  nameNode  =  callNode.getType();	  Object    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	23	None	replace
54	[BUG]  [BUGGY]  Object  nameNode  =  callNode.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Object  nameNode  =  callNode.getNext();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Object  nameNode  =  callNode.getNext();	  Object    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	23	None	replace
55	[BUG]  [BUGGY]  Object  nameNode  =  callNode.getAncestor(1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Object  nameNode  =  callNode.getAncestor(1);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Object  nameNode  =  callNode.getAncestor(1);	  Object    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	23	None	replace
56	[BUG]  [BUGGY]  NameNode  nameNode  =  callNode.getType();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  NameNode  nameNode  =  callNode.getType();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	NameNode  nameNode  =  callNode.getType();	  NameNode    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	2	None	replace
57	[BUG]  [BUGGY]  NameNode  nameNode  =  callNode.getLocalName();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  NameNode  nameNode  =  callNode.getLocalName();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	NameNode  nameNode  =  callNode.getLocalName();	  NameNode    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	2	None	replace
58	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAstRoot(JSC_PROPERTY_NAME,  JSC_PROPERTY_NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getAstRoot(JSC_PROPERTY_NAME,  JSC_PROPERTY_NAME);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getAstRoot(JSC_PROPERTY_NAME,  JSC_PROPERTY_NAME);	  Node    nameNode    =    callNode.getAstRoot(JSC_PROPERTY_NAME);    	non-compiled	[CE]  	11	None	replace
59	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Token.NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Token.NAME);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getAstRoot(Token.NAME);	  Node    nameNode    =    callNode.getAstRoot(JSC_PROPERTY_NAME);    	non-compiled	[CE]  	11	None	replace
60	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAstRoot(JSC_PROPERTY_NAME,  namespaceName);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getAstRoot(JSC_PROPERTY_NAME,  namespaceName);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getAstRoot(JSC_PROPERTY_NAME,  namespaceName);	  Node    nameNode    =    callNode.getAstRoot(JSC_PROPERTY_NAME);    	non-compiled	[CE]  	11	None	replace
61	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAstRoot(JS_PROPERTY_NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getAstRoot(JS_PROPERTY_NAME);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getAstRoot(JS_PROPERTY_NAME);	  Node    nameNode    =    callNode.getAstRoot(JSC_PROPERTY_NAME);    	non-compiled	[CE]  	11	None	replace
62	[BUG]  [BUGGY]  Node  nameNode  =  node.getLocalName();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  node.getLocalName();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  node.getLocalName();	  Node    nameNode    =    param.getLocalName();    	non-compiled	[CE]  	24	None	replace
63	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getParameterType(0);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getParameterType(0);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getParameterType(0);	  Node    nameNode    =    param.getLocalName();    	non-compiled	[CE]  	24	None	replace
64	[BUG]  [BUGGY]  Node  nameNode  =  param.getNext();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  param.getNext();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  param.getNext();	  Node    nameNode    =    param.cloneTree();    	non-compiled	[CE]  	21	None	replace
65	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getChildCount();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getChildCount();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getChildCount();	  Node    nameNode    =    callNode.removeChild(node);    	non-compiled	[CE]  	22	None	replace
66	[BUG]  [BUGGY]  Node  name  =  node.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  name  =  node.getLastChild();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  name  =  node.getLastChild();	  Node    name    =    callNode.getFirstChild();    	non-compiled	[CE]  	1	None	replace
67	[BUG]  [BUGGY]  Node  name  =  node.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  name  =  node.getFirstChild();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  name  =  node.getFirstChild();	  Node    name    =    callNode.getFirstChild();    	non-compiled	[CE]  	1	None	replace
68	[BUG]  [BUGGY]  String  name  =  node.getString();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  String  name  =  node.getString();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	String  name  =  node.getString();	  String    name    =    callNode.getString();    	non-compiled	[CE]  	4	None	replace
69	[BUG]  [BUGGY]  String  name  =  nameNode.getString();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  String  name  =  nameNode.getString();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	String  name  =  nameNode.getString();	  String    name    =    callNode.getString();    	non-compiled	[CE]  	4	None	replace
70	[BUG]  [BUGGY]  String  name  =  callNode.getString()  +  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  String  name  =  callNode.getString()  +  1;  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	String  name  =  callNode.getString()  +  1;	  String    name    =    callNode.getString();    	non-compiled	[CE]  	4	None	replace
71	[BUG]  [BUGGY]  Name  name  =  nameNode.getString();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Name  name  =  nameNode.getString();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Name  name  =  nameNode.getString();	  Name    name    =    callNode.getString();    	non-compiled	[CE]  	3	None	replace
72	[BUG]  [BUGGY]  Name  name  =  node.getString();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Name  name  =  node.getString();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Name  name  =  node.getString();	  Name    name    =    callNode.getString();    	non-compiled	[CE]  	3	None	replace
73	[BUG]  [BUGGY]  Name  name  =  callNode.getString()  +  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Name  name  =  callNode.getString()  +  1;  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Name  name  =  callNode.getString()  +  1;	  Name    name    =    callNode.getString();    	non-compiled	[CE]  	3	None	replace
74	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  STRING_REGEXP_METHODS);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  STRING_REGEXP_METHODS);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  STRING_REGEXP_METHODS);	  Node    nameNode    =    callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS);    	non-compiled	[CE]  	17	None	replace
75	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  REGEXP_METHODS);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  REGEXP_METHODS);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  REGEXP_METHODS);	  Node    nameNode    =    callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS);    	non-compiled	[CE]  	17	None	replace
76	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS  +  1);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS  +  1);	  Node    nameNode    =    callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS);    	non-compiled	[CE]  	17	None	replace
77	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS)+  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS)+  1;  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS)+  1;	  Node    nameNode    =    callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS);    	non-compiled	[CE]  	17	None	replace
78	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAssignedValue();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getAssignedValue();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getAssignedValue();	  Node    nameNode    =    callNode.getSimpleName();    	non-compiled	[CE]  	5	None	replace
79	[BUG]  [BUGGY]  Node  nameNode  =  callNode.nextChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.nextChild();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.nextChild();	  Node    nameNode    =    callNode.removeLastChild();    	non-compiled	[CE]  	12	None	replace
80	[BUG]  [BUGGY]  NameNode  nameNode  =  callNode.removeFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  NameNode  nameNode  =  callNode.removeFirstChild();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	NameNode  nameNode  =  callNode.removeFirstChild();	  NameNode    nameNode    =    callNode.getLastChild();    	non-compiled	[CE]  	19	None	replace
81	[BUG]  [BUGGY]  NameNode  nameNode  =  callNode.getfirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  NameNode  nameNode  =  callNode.getfirstChild();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	NameNode  nameNode  =  callNode.getfirstChild();	  NameNode    nameNode    =    callNode.getLastChild();    	non-compiled	[CE]  	19	None	replace
82	[BUG]  [BUGGY]  NameNode  nameNode  =  callNode.getQualifiedName();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  NameNode  nameNode  =  callNode.getQualifiedName();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	NameNode  nameNode  =  callNode.getQualifiedName();	  NameNode    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	2	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME,  callNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME,  callNode);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Preconditions.checkState(nameNode.getType()  ==  Token.NAME,  callNode);	  Preconditions.checkState(nameNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	20	None	replace
84	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild()!=  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild()!=  null);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Preconditions.checkState(nameNode.getType()  ==  Token.NAME  &&  nameNode.getFirstChild()!=  null);	  Preconditions.checkState(nameNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	20	None	replace
85	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME,  nameNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME,  nameNode);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Preconditions.checkState(nameNode.getType()  ==  Token.NAME,  nameNode);	  Preconditions.checkState(nameNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	20	None	replace
86	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAstRoot(JSC_PROPERTY_NAME)+  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getAstRoot(JSC_PROPERTY_NAME)+  1;  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getAstRoot(JSC_PROPERTY_NAME)+  1;	  Node    nameNode    =    callNode.getAstRoot(JSC_PROPERTY_NAME);    	non-compiled	[CE]  	11	None	replace
87	[BUG]  [BUGGY]  Node  nameNode  =  node.getAstRoot(JSC_PROPERTY_NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  node.getAstRoot(JSC_PROPERTY_NAME);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  node.getAstRoot(JSC_PROPERTY_NAME);	  Node    nameNode    =    callNode.getAstRoot(JSC_PROPERTY_NAME);    	non-compiled	[CE]  	11	None	replace
88	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getlastChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getlastChild();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getlastChild();	  Node    nameNode    =    param.getLastChild();    	non-compiled	[CE]  	6	None	replace
89	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAncestor(2)  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getAncestor(2)  +  1;  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getAncestor(2)  +  1;	  Node    nameNode    =    callNode.getAncestor(2);    	non-compiled	[CE]  	14	None	replace
90	[BUG]  [BUGGY]  Object  nameNode  =  callNode.getProp(Node.SOURCENAME_PROP);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Object  nameNode  =  callNode.getProp(Node.SOURCENAME_PROP);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Object  nameNode  =  callNode.getProp(Node.SOURCENAME_PROP);	  Object    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	23	None	replace
91	[BUG]  [BUGGY]  Object  nameNode  =  callNode.getProp(Node.NAME_PROP);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Object  nameNode  =  callNode.getProp(Node.NAME_PROP);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Object  nameNode  =  callNode.getProp(Node.NAME_PROP);	  Object    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	23	None	replace
92	[BUG]  [BUGGY]  Name  name  =  param.getString();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Name  name  =  param.getString();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Name  name  =  param.getString();	  Name    name    =    callNode.getString();    	non-compiled	[CE]  	3	None	replace
93	[BUG]  [BUGGY]  NameNode  nameNode  =  param.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  NameNode  nameNode  =  param.getFirstChild();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	NameNode  nameNode  =  param.getFirstChild();	  NameNode    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	2	None	replace
94	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getValue();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getValue();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getValue();	  Node    nameNode    =    param.getString();    	non-compiled	[CE]  	25	None	replace
95	[BUG]  [BUGGY]  Node  nameNode  =  param.getSimpleName();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  param.getSimpleName();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  param.getSimpleName();	  Node    nameNode    =    callNode.getSimpleName();    	non-compiled	[CE]  	5	None	replace
96	[BUG]  [BUGGY]  Node  nameNode  =  JSC_PROPERTY_NAME.getAstRoot(callNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  JSC_PROPERTY_NAME.getAstRoot(callNode);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  JSC_PROPERTY_NAME.getAstRoot(callNode);	  Node    nameNode    =    callNode.getAstRoot(JSC_PROPERTY_NAME);    	non-compiled	[CE]  	11	None	replace
97	[BUG]  [BUGGY]  Node  nameNode  =  param.getAstRoot(JSC_PROPERTY_NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  param.getAstRoot(JSC_PROPERTY_NAME);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  param.getAstRoot(JSC_PROPERTY_NAME);	  Node    nameNode    =    callNode.getAstRoot(JSC_PROPERTY_NAME);    	non-compiled	[CE]  	11	None	replace
98	[BUG]  [BUGGY]  Node  name  =  callNode.removeFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  name  =  callNode.removeFirstChild();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  name  =  callNode.removeFirstChild();	  Node    name    =    callNode.getFirstChild();    	non-compiled	[CE]  	1	None	replace
99	[BUG]  [BUGGY]  Node  name  =  param.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  name  =  param.getFirstChild();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  name  =  param.getFirstChild();	  Node    name    =    callNode.getFirstChild();    	non-compiled	[CE]  	1	None	replace
100	[BUG]  [BUGGY]  Node  nameNode  =  node.removeChild(name);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  node.removeChild(name);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  node.removeChild(name);	  Node    nameNode    =    callNode.removeChild(node);    	non-compiled	[CE]  	22	None	replace
101	[BUG]  [BUGGY]  Node  nameNode  =  node.getChildCount();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  node.getChildCount();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  node.getChildCount();	  Node    nameNode    =    callNode.removeChild(node);    	non-compiled	[CE]  	22	None	replace
102	[BUG]  [BUGGY]  String  name  =  param.getString();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  String  name  =  param.getString();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	String  name  =  param.getString();	  String    name    =    callNode.getString();    	non-compiled	[CE]  	4	None	replace
103	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  name);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  name);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  name);	  Node    nameNode    =    callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS);    	non-compiled	[CE]  	17	None	replace
104	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  namespaceName);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  namespaceName);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS,  namespaceName);	  Node    nameNode    =    callNode.getAstRoot(Compiler.STRING_REGEXP_METHODS);    	non-compiled	[CE]  	17	None	replace
105	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getLastChild().getString(),  JSC_PROPERTY_NAME;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getLastChild().getString(),  JSC_PROPERTY_NAME;  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getLastChild().getString(),  JSC_PROPERTY_NAME;	  Node    nameNode    =    callNode.getString(),    JSC_PROPERTY_NAME;    	non-compiled	[CE]  	9	None	replace
106	[BUG]  [BUGGY]  Object  nameNode  =  callNode.cloneTree();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Object  nameNode  =  callNode.cloneTree();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Object  nameNode  =  callNode.cloneTree();	  Object    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	23	None	replace
107	[BUG]  [BUGGY]  Object  nameNode  =  callNode.removeFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Object  nameNode  =  callNode.removeFirstChild();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Object  nameNode  =  callNode.removeFirstChild();	  Object    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	23	None	replace
108	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getNext().cloneTree();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Node  nameNode  =  callNode.getNext().cloneTree();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Node  nameNode  =  callNode.getNext().cloneTree();	  Node    nameNode    =    param.cloneTree();    	non-compiled	[CE]  	21	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkArgument(nameNode.getType()  ==  Token.NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Preconditions.checkArgument(nameNode.getType()  ==  Token.NAME);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Preconditions.checkArgument(nameNode.getType()  ==  Token.NAME);	  Preconditions.checkState(nameNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	20	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME,  JSC_PROPERTY_NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME,  JSC_PROPERTY_NAME);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Preconditions.checkState(nameNode.getType()  ==  Token.NAME,  JSC_PROPERTY_NAME);	  Preconditions.checkState(nameNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	20	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME  ||  nameNode.getFirstChild()!=  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME  ||  nameNode.getFirstChild()!=  null);  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	Preconditions.checkState(nameNode.getType()  ==  Token.NAME  ||  nameNode.getFirstChild()!=  null);	  Preconditions.checkState(nameNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	20	None	replace
112	[BUG]  [BUGGY]  NameNode  nameNode  =  this.callNode.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  callNode,  @Nullable  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.CALL)  {  throw  new  IllegalStateException(       "Expected  CALL  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }      [BUGGY]  NameNode  nameNode  =  this.callNode.getFirstChild();  [BUGGY]        if  (nameNode.getType()  ==  Token.NAME)  {  String  name  =  nameNode.getString();  if  (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))  {  return  false;  }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.2234516768171576	745	745	7	replace	NameNode  nameNode  =  this.callNode.getFirstChild();	  NameNode    nameNode    =    callNode.getLastChild();    	non-compiled	[CE]  	19	None	replace
