bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Namespace  namespaceName  =  namespaceName.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Math   "))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Namespace  namespaceName  =  namespaceName.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Math   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Namespace  namespaceName  =  namespaceName.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Math   "))  {  return  false;  }	  if(namespaceName.equals(   "Property       ")||    JSC_PROPERTY_NAME.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  	122	None	replace
2	[BUG]  [BUGGY]  If(namespaceName.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Math   "))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  If(namespaceName.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Math   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	If(namespaceName.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Math   "))  {  return  false;  }	  if(namespaceName.equals(   "Property       ")||    JSC_PROPERTY_NAME.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  	122	None	replace
3	[BUG]  [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  	71	None	replace
4	[BUG]  [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  	71	None	replace
5	[BUG]  [BUGGY]  Context.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()));  [CE]  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()));	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  	71	None	replace
6	[BUG]  [BUGGY]  Node  callNode  =  nameNode.getFirstChild();  [CE]  [FE]                      junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  nameNode.getFirstChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  nameNode.getFirstChild();	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  	71	None	replace
7	[BUG]  [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()));  [CE]  [FE]                        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()));	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  	71	None	replace
8	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Property ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Property ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Property ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "Property       ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()    	non-compiled	[CE]  	119	None	replace
9	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Property   ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Property   ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Property   ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "Property       ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()    	non-compiled	[CE]  	119	None	replace
10	[BUG]  [BUGGY]  parent.replaceChild(callNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent.replaceChild(callNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent.replaceChild(callNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  	30	None	replace
11	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode.getFirstChild(),  callNode.getLastChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode.getFirstChild(),  callNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingCall(callNode.getFirstChild(),  callNode.getLastChild());	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  	30	None	replace
12	[BUG]  [BUGGY]  parent.replaceChild(callNode.getFirstChild(),  callNode.getLastChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent.replaceChild(callNode.getFirstChild(),  callNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent.replaceChild(callNode.getFirstChild(),  callNode.getLastChild());	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  	30	None	replace
13	[BUG]  [BUGGY]  parent.addChildToBack(callNode.getLastChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent.addChildToBack(callNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent.addChildToBack(callNode.getLastChild());	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  	30	None	replace
14	[BUG]  [BUGGY]  parent.replaceChild(callNode.getFirstChild(),  callNode.getLastChild())  {  return  false;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent.replaceChild(callNode.getFirstChild(),  callNode.getLastChild())  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent.replaceChild(callNode.getFirstChild(),  callNode.getLastChild())  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  	30	None	replace
15	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode.getFirstChild(),  callNode.getLastChild()));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode.getFirstChild(),  callNode.getLastChild()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingCall(callNode.getFirstChild(),  callNode.getLastChild()));	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  	30	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  	147	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  	147	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  	147	None	replace
19	[BUG]  [BUGGY]  if(!callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  [CE]  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()))    {    return    true;    	non-compiled	[CE]  	114	None	replace
20	[BUG]  [BUGGY]  if(callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  [CE]  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()))    {    return    true;    	non-compiled	[CE]  	114	None	replace
21	[BUG]  [BUGGY]  if(!callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  true;  }  [CE]  [FE]                      junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  true;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  true;  }	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()))    {    return    true;    	non-compiled	[CE]  	114	None	replace
22	[BUG]  [BUGGY]  if(callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  true;  }  [CE]  [FE]                        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  true;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  true;  }	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()))    {    return    true;    	non-compiled	[CE]  	114	None	replace
23	[BUG]  [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()))    {    return    true;    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
24	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "String ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "String ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "String ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild	  return    JSC_PROPERTY_NAME_FN.equals(   "String   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  	169	None	replace
25	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()	  return    JSC_PROPERTY_NAME_FN.equals(   "String   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  	169	None	replace
26	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "String   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  	169	None	replace
27	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild())  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild())  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild())	  return    JSC_PROPERTY_NAME_FN.equals(   "String   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  	169	None	replace
28	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "String   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  	169	None	replace
29	[BUG]  [BUGGY]  Node  callNode  =  nameNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  nameNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  nameNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(callNode.hasOneChild()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  	139	None	replace
30	[BUG]  [BUGGY]  Node  callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(callNode.hasOneChild()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  	139	None	replace
31	[BUG]  [BUGGY]  if(nameNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(nameNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(nameNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(callNode.hasOneChild()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  	139	None	replace
32	[BUG]  [BUGGY]  Node  callNode  =  nameNode.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  nameNode.getLastChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  nameNode.getLastChild();	  if(callNode.hasOneChild()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  	139	None	replace
33	[BUG]  [BUGGY]  ||  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
34	[BUG]  [BUGGY]  ||  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
35	[BUG]  [BUGGY]  Node  param  =  callNode.getFirstChild();  if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(param.getFirstChild()))  {  return  false;  }  [CE]  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  param  =  callNode.getFirstChild();  if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(param.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  param  =  callNode.getFirstChild();  if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(param.getFirstChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	75	None	replace
36	[BUG]  [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
37	[BUG]  [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
38	[BUG]  [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()));	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  	82	None	replace
39	[BUG]  [BUGGY]  while(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  while(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	while(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  orphaned  case	85	None	replace
40	[BUG]  [BUGGY]  while(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  while(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	while(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  orphaned  case	85	None	replace
41	[BUG]  [BUGGY]  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	85	None	replace
42	[BUG]  [BUGGY]  callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
43	[BUG]  [BUGGY]  callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
44	[BUG]  [BUGGY]  while(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  while(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	while(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
45	[BUG]  [BUGGY]  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
46	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
47	[BUG]  [BUGGY]  Parchet.IS_PROPERTY_NAME.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Parchet.IS_PROPERTY_NAME.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Parchet.IS_PROPERTY_NAME.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
48	[BUG]  [BUGGY]  |  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  |  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	|  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
49	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getFirstChild().getString());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getFirstChild().getString());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getFirstChild().getString());	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getFirstChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
50	[BUG]  [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getNextChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
51	[BUG]  [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getNextChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
52	[BUG]  [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getNextChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
53	[BUG]  [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getNextChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
54	[BUG]  [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()));	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getNextChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
55	[BUG]  [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall(),  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall(),  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.isOnlyModifiesThisCall(),  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getNextChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
56	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Property   ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Property   ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Property   ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(   "Math   ")||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
57	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Object ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(   "Math   ")||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
58	[BUG]  [BUGGY]  Node  callNode  =  evaluatesToLocalValue(nameNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  evaluatesToLocalValue(nameNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  evaluatesToLocalValue(nameNode.getFirstChild());	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
59	[BUG]  [BUGGY]  Node  callNode  =  findThisCall(nameNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  findThisCall(nameNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  findThisCall(nameNode.getLastChild());	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
60	[BUG]  [BUGGY]  Node  callNode  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  node.getFirstChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  node.getFirstChild();	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
61	[BUG]  [BUGGY]  Node  callNode  =  findThisCall(nameNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  findThisCall(nameNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  findThisCall(nameNode.getFirstChild());	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
62	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Property ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Property ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Property ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "Property       ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
63	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Property   ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild()  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Property   ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Property   ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "Property       ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
64	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Math ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Math ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Math ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "Math   ")||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
65	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Math ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Math ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Math ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "Math   ")||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
66	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Property   ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Property   ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Property   ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild	  return    JSC_PROPERTY_NAME_FN.equals(   "Math   ")||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
67	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Object ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild	  return    JSC_PROPERTY_NAME_FN.equals(   "Math   ")||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
68	[BUG]  [BUGGY]  Node  callNode  =  callNode.getFirstChild();  Preconditions.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  callNode.getFirstChild();  Preconditions.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  callNode.getFirstChild();  Preconditions.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;	  NodeTraversal.traverse(compiler,    callNode,    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  NodeTraversal.traverse(compiler,    callNode,    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  NodeTraversal.traverse(compiler,    callNode,    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  NodeTraversal.traverse(compiler,    callNode,    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  NodeTraversal.traverse(compiler,    callNode,    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;	  NodeTraversal.traverse(compiler,    callNode,    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  validatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  validatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  validatesToLocalValue(callNode.getFirstChild()))  {  return  false;	  NodeTraversal.traverse(compiler,    callNode,    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
78	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(  nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(  nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(  nameNode.getLastChild()))  {  return  false;	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
79	[BUG]  [BUGGY]  luate(nameNode.getFirstChild(),  callNode.getOnlyModifiesThisCall()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  luate(nameNode.getFirstChild(),  callNode.getOnlyModifiesThisCall()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	luate(nameNode.getFirstChild(),  callNode.getOnlyModifiesThisCall()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.getOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
80	[BUG]  [BUGGY]  parent.replaceChild(nameNode,  callNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent.replaceChild(nameNode,  callNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent.replaceChild(nameNode,  callNode.getFirstChild());	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.getOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
81	[BUG]  [BUGGY]  luate(nameNode.getFirstChild(),  callNode.getOnlyModifiesThisCall()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  luate(nameNode.getFirstChild(),  callNode.getOnlyModifiesThisCall()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	luate(nameNode.getFirstChild(),  callNode.getOnlyModifiesThisCall()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.getOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
82	[BUG]  [BUGGY]  luate(nameNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  luate(nameNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	luate(nameNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.getOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
83	[BUG]  [BUGGY]  luate(nameNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  luate(nameNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	luate(nameNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.getOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
84	[BUG]  [BUGGY]  parent.replaceChild(nameNode,  callNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent.replaceChild(nameNode,  callNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent.replaceChild(nameNode,  callNode.getFirstChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.getOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
85	[BUG]  [BUGGY]  luate(nameNode.getFirstChild(),  callNode))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  luate(nameNode.getFirstChild(),  callNode))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	luate(nameNode.getFirstChild(),  callNode))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.getOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
86	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingCall(nameNode.getFirstChild(),  callNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingCall(nameNode.getFirstChild(),  callNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingCall(nameNode.getFirstChild(),  callNode.getLastChild());	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
87	[BUG]  [BUGGY]  luate(nameNode.getFirstChild(),  callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  luate(nameNode.getFirstChild(),  callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	luate(nameNode.getFirstChild(),  callNode.getFirstChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
88	[BUG]  [BUGGY]  luate(nameNode.getFirstChild(),  callNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  luate(nameNode.getFirstChild(),  callNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	luate(nameNode.getFirstChild(),  callNode.getFirstChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
89	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatcher(nameNode,  callNode.getFirstChild(),  nameNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatcher(nameNode,  callNode.getFirstChild(),  nameNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatcher(nameNode,  callNode.getFirstChild(),  nameNode.getLastChild());	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
90	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
91	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
92	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
93	[BUG]  [BUGGY]  return  nameNode.getType()  ==  Token.NAME  &&  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  nameNode.getType()  ==  Token.NAME  &&  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  nameNode.getType()  ==  Token.NAME  &&  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
94	[BUG]  [BUGGY]  return  nameNode.getString().equals(JSC_PROPERTY_NAME_FN)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  nameNode.getString().equals(JSC_PROPERTY_NAME_FN)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  nameNode.getString().equals(JSC_PROPERTY_NAME_FN)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
95	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString())  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString())  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString())	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
96	[BUG]  [BUGGY]  NodeUtil.copyCall(callNode,  REGEXP_METHODS_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeUtil.copyCall(callNode,  REGEXP_METHODS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeUtil.copyCall(callNode,  REGEXP_METHODS_WITHOUT_SIDEEFFECTS);	  return    true;    NodeUtil.copyCall(callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
97	[BUG]  [BUGGY]  NodeUtil.copyCall(callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeUtil.copyCall(callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeUtil.copyCall(callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);	  return    true;    NodeUtil.copyCall(callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
98	[BUG]  [BUGGY]  NodeUtil.copyCall(callNode,  CONSTRUCTORS_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeUtil.copyCall(callNode,  CONSTRUCTORS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeUtil.copyCall(callNode,  CONSTRUCTORS_WITHOUT_SIDEEFFECTS);	  return    true;    NodeUtil.copyCall(callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
99	[BUG]  [BUGGY]  NodeUtil.copyCall(callNode,  DEFAULT_METHODS_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeUtil.copyCall(callNode,  DEFAULT_METHODS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeUtil.copyCall(callNode,  DEFAULT_METHODS_WITHOUT_SIDEEFFECTS);	  return    true;    NodeUtil.copyCall(callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
100	[BUG]  [BUGGY]  Node  param  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.getParent();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  param  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.getParent();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  param  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.getParent();	  return    true;    NodeUtil.copyCall(callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
101	[BUG]  [BUGGY]  if(callNode.hasOneChild()  &&!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(callNode.hasOneChild()  &&!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(callNode.hasOneChild()  &&!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  return    true;    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
102	[BUG]  [BUGGY]  if(callNode.hasOneChild()  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(callNode.hasOneChild()  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(callNode.hasOneChild()  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  return    true;    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
103	[BUG]  [BUGGY]  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  return    true;    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
104	[BUG]  [BUGGY]  Node  callNode  =  evaluatesToLocalValue(callNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  evaluatesToLocalValue(callNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  evaluatesToLocalValue(callNode.getLastChild());	  Node    callNode    =    evaluatesToLocalValue(nameNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
105	[BUG]  [BUGGY]  Node  callNode  =  evaluatesToLocalValue(callNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  evaluatesToLocalValue(callNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  evaluatesToLocalValue(callNode.getFirstChild());	  Node    callNode    =    evaluatesToLocalValue(nameNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
106	[BUG]  [BUGGY]  Node  callNode  =  evaluatesToLocalValue(nameNode.getLastChild(),  callNode);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  evaluatesToLocalValue(nameNode.getLastChild(),  callNode);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  evaluatesToLocalValue(nameNode.getLastChild(),  callNode);	  Node    callNode    =    evaluatesToLocalValue(nameNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
107	[BUG]  [BUGGY]  Node  callNode  =  evaluateToLocalValue(nameNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  evaluateToLocalValue(nameNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  evaluateToLocalValue(nameNode.getFirstChild());	  Node    callNode    =    evaluatesToLocalValue(nameNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
108	[BUG]  [BUGGY]  Node  callNode  =  evaluatesFromLocalValue(nameNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  evaluatesFromLocalValue(nameNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  evaluatesFromLocalValue(nameNode.getLastChild());	  Node    callNode    =    evaluatesToLocalValue(nameNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
109	[BUG]  [BUGGY]  ||  namespaceName.equals( "Name   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  namespaceName.equals( "Name   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  namespaceName.equals( "Name   "))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(   "Name       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
110	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals( "JSC_PROPERTY_NAME "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals( "JSC_PROPERTY_NAME "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  JSC_PROPERTY_NAME.equals( "JSC_PROPERTY_NAME "))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(   "Name       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
111	[BUG]  [BUGGY]  ||  name.equals( "Name   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  name.equals( "Name   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  name.equals( "Name   "))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(   "Name       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
112	[BUG]  [BUGGY]  ||  name.equals( "Property "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  name.equals( "Property "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  name.equals( "Property "))  {  return  false;  }	  if(name.equals(   "Math       ")||    name.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
113	[BUG]  [BUGGY]  Name.valueOf(name.equals( "Math ")||  name.equals( "Property "))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Name.valueOf(name.equals( "Math ")||  name.equals( "Property "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Name.valueOf(name.equals( "Math ")||  name.equals( "Property "))  {  return  false;  }	  if(name.equals(   "Math       ")||    name.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  	32	None	replace
114	[BUG]  [BUGGY]  Name.valueOf(name.equals( "Math "))  ||  name.equals( "Property "))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Name.valueOf(name.equals( "Math "))  ||  name.equals( "Property "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Name.valueOf(name.equals( "Math "))  ||  name.equals( "Property "))  {  return  false;  }	  if(name.equals(   "Math       ")||    name.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  	32	None	replace
115	[BUG]  [BUGGY]  parent!=  null  &&  parent.equals(name)||  name.equals( "Property   "))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  null  &&  parent.equals(name)||  name.equals( "Property   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  null  &&  parent.equals(name)||  name.equals( "Property   "))  {  return  false;  }	  if(name.equals(   "Math       ")||    name.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  	32	None	replace
116	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Math ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Math ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Math ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "Math   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()    	non-compiled	[CE]  	2	None	replace
117	[BUG]  [BUGGY]  Context.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  Context.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  	55	None	replace
118	[BUG]  [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;	  Context.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  	55	None	replace
119	[BUG]  [BUGGY]  Context.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  Context.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  	55	None	replace
120	[BUG]  [BUGGY]  Context.checkState(callNode.getOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.getOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.getOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  Context.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  	55	None	replace
121	[BUG]  [BUGGY]  Context.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  Context.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  	55	None	replace
122	[BUG]  [BUGGY]  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }	  ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
123	[BUG]  [BUGGY]  |  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  |  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	|  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }	  ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
124	[BUG]  [BUGGY]  |  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  |  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	|  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
125	[BUG]  [BUGGY]  |  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  |  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	|  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
126	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "prototype   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
127	[BUG]  [BUGGY]  Parchet.IS_PROPERTY_NAME.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "prototype   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Parchet.IS_PROPERTY_NAME.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "prototype   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Parchet.IS_PROPERTY_NAME.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "prototype   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "prototype   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
128	[BUG]  [BUGGY]  |  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  |  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	|  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "prototype   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
129	[BUG]  [BUGGY]  firmThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  firmThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	firmThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(callNode.hasThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
130	[BUG]  [BUGGY]  NodeUtil.checkState(nameNode.getFirstChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeUtil.checkState(nameNode.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeUtil.checkState(nameNode.getFirstChild().getType()  ==  Token.NAME);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
131	[BUG]  [BUGGY]  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.NAME);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
132	[BUG]  [BUGGY]  return  true;  NodeUtil.checkState(nameNode.getFirstChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  true;  NodeUtil.checkState(nameNode.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  true;  NodeUtil.checkState(nameNode.getFirstChild().getType()  ==  Token.NAME);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
133	[BUG]  [BUGGY]  return  false;  NodeUtil.checkState(nameNode.getFirstChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  false;  NodeUtil.checkState(nameNode.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  false;  NodeUtil.checkState(nameNode.getFirstChild().getType()  ==  Token.NAME);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
134	[BUG]  [BUGGY]  result  =  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  result  =  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	result  =  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.NAME);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
135	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
136	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
137	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
138	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
139	[BUG]  [BUGGY]  Preconditions.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
140	[BUG]  [BUGGY]  Preconditions.checkState(callNode.hasOneChild()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.hasOneChild()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.hasOneChild()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
141	[BUG]  [BUGGY]  Preconditions.checkState(callNode.hasThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.hasThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.hasThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
142	[BUG]  [BUGGY]  if(namespaceName.equals( "Math   ")||  namespaceName.equals( "name   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(namespaceName.equals( "Math   ")||  namespaceName.equals( "name   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(namespaceName.equals( "Math   ")||  namespaceName.equals( "name   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Math   ")||    JSC_PROPERTY_NAME.equals(   "name   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
143	[BUG]  [BUGGY]  if(name.equals( "Math   ")||  name.equals( "name   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(name.equals( "Math   ")||  name.equals( "name   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(name.equals( "Math   ")||  name.equals( "name   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Math   ")||    JSC_PROPERTY_NAME.equals(   "name   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
144	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals( "name   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals( "name   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  JSC_PROPERTY_NAME.equals( "name   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Math   ")||    JSC_PROPERTY_NAME.equals(   "name   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
145	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals( "Math   ")||  JSC_PROPERTY_NAME.equals( "name "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  JSC_PROPERTY_NAME.equals( "Math   ")||  JSC_PROPERTY_NAME.equals( "name "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	JSC_PROPERTY_NAME.equals( "Math   ")||  JSC_PROPERTY_NAME.equals( "name "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Math   ")||    JSC_PROPERTY_NAME.equals(   "name   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
146	[BUG]  [BUGGY]  return  namespaceName.equals(JSC_PROPERTY_NAME_FN)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  namespaceName.equals(JSC_PROPERTY_NAME_FN)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  namespaceName.equals(JSC_PROPERTY_NAME_FN)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
147	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
148	[BUG]  [BUGGY]  return  name.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  name.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  name.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
149	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
150	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
151	[BUG]  [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  <  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  <  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  <  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
152	[BUG]  [BUGGY]  taskNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  taskNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	taskNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.getOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
153	[BUG]  [BUGGY]  node.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  node.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	node.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.getOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
154	[BUG]  [BUGGY]  Node  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.getOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
155	[BUG]  [BUGGY]  taskNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  taskNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	taskNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.getOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
156	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Object ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil	  return    JSC_PROPERTY_NAME_FN.equals(   "Object   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
157	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object   ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object   ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Object   ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()	  return    JSC_PROPERTY_NAME_FN.equals(   "Object   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
158	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object   ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object   ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Object   ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "Object   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
159	[BUG]  [BUGGY]  return  true;  NodeUtil.checkState(nameNode.getFirstChild().getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  true;  NodeUtil.checkState(nameNode.getFirstChild().getType()  ==  Token.GETPROP);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  true;  NodeUtil.checkState(nameNode.getFirstChild().getType()  ==  Token.GETPROP);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
160	[BUG]  [BUGGY]  NodeUtil.checkState(nameNode.getFirstChild().getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeUtil.checkState(nameNode.getFirstChild().getType()  ==  Token.GETPROP);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeUtil.checkState(nameNode.getFirstChild().getType()  ==  Token.GETPROP);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
161	[BUG]  [BUGGY]  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.GETPROP);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.GETPROP);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
162	[BUG]  [BUGGY]  return  false;  NodeUtil.checkState(nameNode.getFirstChild().getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  false;  NodeUtil.checkState(nameNode.getFirstChild().getType()  ==  Token.GETPROP);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  false;  NodeUtil.checkState(nameNode.getFirstChild().getType()  ==  Token.GETPROP);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
163	[BUG]  [BUGGY]  return  false;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  false;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.GETPROP);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  false;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.GETPROP);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
164	[BUG]  [BUGGY]  Context.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
165	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
166	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
167	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
168	[BUG]  [BUGGY]  return  nameNode.getType()  ==  Token.NAME  &&  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  nameNode.getType()  ==  Token.NAME  &&  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  nameNode.getType()  ==  Token.NAME  &&  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
169	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild())&&  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  JSC_PROPERTY_NAME  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild())&&  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  JSC_PROPERTY_NAME  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild())&&  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  JSC_PROPERTY_NAME	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
170	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Math ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Math ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Math ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()	  return    JSC_PROPERTY_NAME_FN.equals(   "Math   ")||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
171	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil	  return    JSC_PROPERTY_NAME_FN.equals(   "Math   ")||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
172	[BUG]  [BUGGY]  Namespace  namespaceName  =  namespaceName.equals( "Property   ")||  namespaceName.equals( "Math   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Namespace  namespaceName  =  namespaceName.equals( "Property   ")||  namespaceName.equals( "Math   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Namespace  namespaceName  =  namespaceName.equals( "Property   ")||  namespaceName.equals( "Math   "))  {  return  false;  }	  If(namespaceName.equals(   "Property       ")||    namespaceName.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
173	[BUG]  [BUGGY]  If(namespaceName.equals(JSC_PROPERTY_NAME_FN)||  namespaceName.equals( "Math   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  If(namespaceName.equals(JSC_PROPERTY_NAME_FN)||  namespaceName.equals( "Math   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	If(namespaceName.equals(JSC_PROPERTY_NAME_FN)||  namespaceName.equals( "Math   "))  {  return  false;  }	  If(namespaceName.equals(   "Property       ")||    namespaceName.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
174	[BUG]  [BUGGY]  Node  callNode  =  callNode.getLastChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  callNode.getLastChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  callNode.getLastChild();	  Node    callNode    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
175	[BUG]  [BUGGY]  Node  callNode  =  param.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  param.getFirstChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  param.getFirstChild();	  Node    callNode    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
176	[BUG]  [BUGGY]  Node  callNode  =  nameNode.getNext();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  nameNode.getNext();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  nameNode.getNext();	  Node    callNode    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
177	[BUG]  [BUGGY]  Node  callNode  =  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  node.getLastChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  node.getLastChild();	  Node    callNode    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
178	[BUG]  [BUGGY]  AssertionFailedError  callNode  =  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError  callNode  =  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError  callNode  =  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild());	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
179	[BUG]  [BUGGY]  AssertionFailedError  callNode  =  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError  callNode  =  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError  callNode  =  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()));	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
180	[BUG]  [BUGGY]  AssertionFailedError  callNode  =  callNode.isOnlyModifiesThisCall()?  callNode.getLastChild()  :  callNode.getLastChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError  callNode  =  callNode.isOnlyModifiesThisCall()?  callNode.getLastChild()  :  callNode.getLastChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError  callNode  =  callNode.isOnlyModifiesThisCall()?  callNode.getLastChild()  :  callNode.getLastChild();	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
181	[BUG]  [BUGGY]  AssertionFailedError  callNode  =  callNode.isOnlyModifiesThisCall()?  callNode.getFirstChild()  :  callNode.getLastChild();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError  callNode  =  callNode.isOnlyModifiesThisCall()?  callNode.getFirstChild()  :  callNode.getLastChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError  callNode  =  callNode.isOnlyModifiesThisCall()?  callNode.getFirstChild()  :  callNode.getLastChild();	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
182	[BUG]  [BUGGY]  AssertionFailedError  callNode  =  callNode.getCall();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError  callNode  =  callNode.getCall();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError  callNode  =  callNode.getCall();	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
183	[BUG]  [BUGGY]  AssertionFailedError  callNode  =  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError  callNode  =  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError  callNode  =  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
184	[BUG]  [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()));	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.hasThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
185	[BUG]  [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.hasThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
186	[BUG]  [BUGGY]  Node  param  =  nameNode.getLastChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  param  =  nameNode.getLastChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  param  =  nameNode.getLastChild();	  Node    param    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
187	[BUG]  [BUGGY]  Node  param  =  nameNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  param  =  nameNode.getFirstChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  param  =  nameNode.getFirstChild();	  Node    param    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
188	[BUG]  [BUGGY]  Node  param  =  callNode.getLastChild();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  param  =  callNode.getLastChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  param  =  callNode.getLastChild();	  Node    param    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
189	[BUG]  [BUGGY]  Node  param  =  callNode.getNext();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  param  =  callNode.getNext();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  param  =  callNode.getNext();	  Node    param    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
190	[BUG]  [BUGGY]  Node  param  =  nameNode.getNext();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  param  =  nameNode.getNext();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  param  =  nameNode.getNext();	  Node    param    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
191	[BUG]  [BUGGY]  Node  param  =  callNode.getParent();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  param  =  callNode.getParent();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  param  =  callNode.getParent();	  Node    param    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
196	[BUG]  [BUGGY]  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;	  ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
197	[BUG]  [BUGGY]  |  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  |  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	|  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;	  ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
198	[BUG]  [BUGGY]  |  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  |  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	|  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
199	[BUG]  [BUGGY]  |  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  |  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	|  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
200	[BUG]  [BUGGY]  ';'  expected  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ';'  expected  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	';'  expected	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
201	[BUG]  [BUGGY]  ';'  expected  ||  callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ';'  expected  ||  callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	';'  expected  ||  callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
202	[BUG]  [BUGGY]  ';'  expected  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ';'  expected  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	';'  expected  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
203	[BUG]  [BUGGY]  ';'  expected  =  NodeUtil.isFunctionDeclaration(callNode)&&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ';'  expected  =  NodeUtil.isFunctionDeclaration(callNode)&&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	';'  expected  =  NodeUtil.isFunctionDeclaration(callNode)&&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
204	[BUG]  [BUGGY]  ';'  expected  ||  callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ';'  expected  ||  callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	';'  expected  ||  callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
205	[BUG]  [BUGGY]  ';'  expected  =  NodeUtil.isFunctionDeclaration(callNode)&&  evaluatesToLocalValue(nameNode.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ';'  expected  =  NodeUtil.isFunctionDeclaration(callNode)&&  evaluatesToLocalValue(nameNode.getLastChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	';'  expected  =  NodeUtil.isFunctionDeclaration(callNode)&&  evaluatesToLocalValue(nameNode.getLastChild()))  {	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
206	[BUG]  [BUGGY]  AssertionFailedError.make(nameNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.make(nameNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.make(nameNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
207	[BUG]  [BUGGY]  AssertionFailedError.make(callNode.getFirstChild(),  nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.make(callNode.getFirstChild(),  nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.make(callNode.getFirstChild(),  nameNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
208	[BUG]  [BUGGY]  AssertionFailedError.make(nameNode.getLastChild(),  callNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.make(nameNode.getLastChild(),  callNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.make(nameNode.getLastChild(),  callNode.getFirstChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
209	[BUG]  [BUGGY]  AssertionFailedError  callNode  =  callNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError  callNode  =  callNode.getFirstChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError  callNode  =  callNode.getFirstChild();	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
210	[BUG]  [BUGGY]  AssertionFailedError.make(nameNode.getFirstChild(),  callNode.getLastChild())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.make(nameNode.getFirstChild(),  callNode.getLastChild())  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.make(nameNode.getFirstChild(),  callNode.getLastChild())  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
211	[BUG]  [BUGGY]  AssertionFailedError.make(nameNode.getFirstChild(),  callNode.getLastChild())  {  return  false;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.make(nameNode.getFirstChild(),  callNode.getLastChild())  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.make(nameNode.getFirstChild(),  callNode.getLastChild())  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
212	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
213	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
214	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild().getString()));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
215	[BUG]  [BUGGY]  return  nameNode.getType()  ==  Token.NAME  &&  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  nameNode.getType()  ==  Token.NAME  &&  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  nameNode.getType()  ==  Token.NAME  &&  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
216	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Object ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(   "Object   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
217	[BUG]  [BUGGY]  if(namespaceName.equals( "Object   ")||  namespaceName.equals( "Math   "))  {  return  false;  }  [CE]  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(namespaceName.equals( "Object   ")||  namespaceName.equals( "Math   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(namespaceName.equals( "Object   ")||  namespaceName.equals( "Math   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Object   ")||    JSC_PROPERTY_NAME.equals(   "Math   "))    {    return    false;    }    	non-compiled	[CE]  	131	None	replace
218	[BUG]  [BUGGY]  if(name.equals( "Object   ")||  name.equals( "Math   "))  {  return  false;  }  [CE]  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(name.equals( "Object   ")||  name.equals( "Math   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(name.equals( "Object   ")||  name.equals( "Math   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Object   ")||    JSC_PROPERTY_NAME.equals(   "Math   "))    {    return    false;    }    	non-compiled	[CE]  	131	None	replace
219	[BUG]  [BUGGY]  if(nameNode.equals( "Object   ")||  nameNode.equals( "Math   "))  {  return  false;  }  [CE]  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(nameNode.equals( "Object   ")||  nameNode.equals( "Math   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(nameNode.equals( "Object   ")||  nameNode.equals( "Math   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Object   ")||    JSC_PROPERTY_NAME.equals(   "Math   "))    {    return    false;    }    	non-compiled	[CE]  	131	None	replace
220	[BUG]  [BUGGY]  AssertionFailedError  callNode  =  callNode.getOnlyModifiesThisCall();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError  callNode  =  callNode.getOnlyModifiesThisCall();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError  callNode  =  callNode.getOnlyModifiesThisCall();	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  	129	None	replace
221	[BUG]  [BUGGY]  AssertionFailedError  callNode  =  callNode.getCallType();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError  callNode  =  callNode.getCallType();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError  callNode  =  callNode.getCallType();	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  	129	None	replace
222	[BUG]  [BUGGY]  AssertionFailedError.make(callNode.getFirstChild(),  nameNode.getLastChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.make(callNode.getFirstChild(),  nameNode.getLastChild())  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.make(callNode.getFirstChild(),  nameNode.getLastChild())  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  	129	None	replace
223	[BUG]  [BUGGY]  Namespace  namespaceName  =  namespaceName.equals( "Math   ")||  namespaceName.equals( "Name "))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Namespace  namespaceName  =  namespaceName.equals( "Math   ")||  namespaceName.equals( "Name "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Namespace  namespaceName  =  namespaceName.equals( "Math   ")||  namespaceName.equals( "Name "))  {  return  false;  }	  If(namespaceName.equals(   "Math       ")||    namespaceName.equals(   "Name       "))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
224	[BUG]  [BUGGY]  NamespaceName.equals(namespaceName)||  namespaceName.equals( "Name "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NamespaceName.equals(namespaceName)||  namespaceName.equals( "Name "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NamespaceName.equals(namespaceName)||  namespaceName.equals( "Name "))  {  return  false;  }	  If(namespaceName.equals(   "Math       ")||    namespaceName.equals(   "Name       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
225	[BUG]  [BUGGY]  NamespaceName.equals( "Math   ")||  namespaceName.equals( "Name "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NamespaceName.equals( "Math   ")||  namespaceName.equals( "Name "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NamespaceName.equals( "Math   ")||  namespaceName.equals( "Name "))  {  return  false;  }	  If(namespaceName.equals(   "Math       ")||    namespaceName.equals(   "Name       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
226	[BUG]  [BUGGY]  If(name.equals( "Property ")||  namespaceName.equals( "Math "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  If(name.equals( "Property ")||  namespaceName.equals( "Math "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	If(name.equals( "Property ")||  namespaceName.equals( "Math "))  {  return  false;  }	  If(name.equals(   "Property       ")||    name.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
227	[BUG]  [BUGGY]  If(name.equals( "Property   ")||  name.equals( "Object "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  If(name.equals( "Property   ")||  name.equals( "Object "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	If(name.equals( "Property   ")||  name.equals( "Object "))  {  return  false;  }	  If(name.equals(   "Property       ")||    name.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  NodeTraversal.traverse(compiler,    callNode,    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
229	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }	  NodeTraversal.traverse(compiler,    callNode,    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
230	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  NodeTraversal.traverse(compiler,    callNode,    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
231	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }	  NodeTraversal.traverse(compiler,    callNode,    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
232	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  NodeTraversal.traverse(compiler,    callNode,    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
233	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  NodeTraversal.traverse(compiler,    callNode,    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
234	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  validatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  validatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  validatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }	  NodeTraversal.traverse(compiler,    callNode,    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
235	[BUG]  [BUGGY]  Parchet.IS_PROPERTY_NAME.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Property   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Parchet.IS_PROPERTY_NAME.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Property   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Parchet.IS_PROPERTY_NAME.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Property   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "Property   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
236	[BUG]  [BUGGY]  |  JSC_PROPERTY_NAME.equals( "Property   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  |  JSC_PROPERTY_NAME.equals( "Property   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	|  JSC_PROPERTY_NAME.equals( "Property   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "Property   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
237	[BUG]  [BUGGY]  if(name.equals( "Object   ")||  name.equals( "name   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(name.equals( "Object   ")||  name.equals( "name   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(name.equals( "Object   ")||  name.equals( "name   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Object   ")||    JSC_PROPERTY_NAME.equals(   "name   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
238	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals( "Object   ")||  JSC_PROPERTY_NAME.equals( "name "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  JSC_PROPERTY_NAME.equals( "Object   ")||  JSC_PROPERTY_NAME.equals( "name "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	JSC_PROPERTY_NAME.equals( "Object   ")||  JSC_PROPERTY_NAME.equals( "name "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Object   ")||    JSC_PROPERTY_NAME.equals(   "name   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
239	[BUG]  [BUGGY]  if(nameNode.equals( "Object   ")||  nameNode.equals( "name   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(nameNode.equals( "Object   ")||  nameNode.equals( "name   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(nameNode.equals( "Object   ")||  nameNode.equals( "name   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Object   ")||    JSC_PROPERTY_NAME.equals(   "name   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
240	[BUG]  [BUGGY]  if(namespaceName.equals( "Object   ")||  namespaceName.equals( "name   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(namespaceName.equals( "Object   ")||  namespaceName.equals( "name   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(namespaceName.equals( "Object   ")||  namespaceName.equals( "name   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Object   ")||    JSC_PROPERTY_NAME.equals(   "name   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
241	[BUG]  [BUGGY]  If(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  If(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	If(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
242	[BUG]  [BUGGY]  while(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  while(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	while(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
243	[BUG]  [BUGGY]  While(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  While(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	While(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
244	[BUG]  [BUGGY]  while(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  while(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	while(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
245	[BUG]  [BUGGY]  While(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  While(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	While(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
246	[BUG]  [BUGGY]  while(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  while(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	while(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
247	[BUG]  [BUGGY]  While(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  While(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	While(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
248	[BUG]  [BUGGY]  if(!callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getFirstChild().getString()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getFirstChild().getString()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getFirstChild().getString()))  {  return  false;  }	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
249	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getFirstChild();  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getFirstChild().getString()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  nameNode  =  callNode.getFirstChild();  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getFirstChild().getString()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  nameNode  =  callNode.getFirstChild();  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getFirstChild().getString()))  {  return  false;	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
250	[BUG]  [BUGGY]  if(callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getFirstChild().getString()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getFirstChild().getString()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getFirstChild().getString()))  {  return  false;  }	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
251	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
252	[BUG]  [BUGGY]  Preconditions.checkState(callNode.hasOneChild()  ||  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.hasOneChild()  ||  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.hasOneChild()  ||  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
253	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString());	          OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
254	[BUG]  [BUGGY]  callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
255	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
256	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
257	[BUG]  [BUGGY]  if(name.equals( "Math   ")||  namespaceName.equals( "Name   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(name.equals( "Math   ")||  namespaceName.equals( "Name   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(name.equals( "Math   ")||  namespaceName.equals( "Name   "))  {  return  false;  }	  if(name.equals(   "Math       ")||    name.equals(   "Name       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
258	[BUG]  [BUGGY]  if(namespaceName.equals( "Math   ")||  JSC_PROPERTY_NAME.equals( "Property   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(namespaceName.equals( "Math   ")||  JSC_PROPERTY_NAME.equals( "Property   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(namespaceName.equals( "Math   ")||  JSC_PROPERTY_NAME.equals( "Property   "))  {  return  false;  }	  if(name.equals(   "Math   ")||    JSC_PROPERTY_NAME.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
259	[BUG]  [BUGGY]  ||  evaluatesToLocalValue(nameNode.getString()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  evaluatesToLocalValue(nameNode.getString()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  evaluatesToLocalValue(nameNode.getString()))  {  return  false;  }	  ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
260	[BUG]  [BUGGY]  Context.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
261	[BUG]  [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
262	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
263	[BUG]  [BUGGY]  Preconditions.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
264	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode,  JSC_PROPERTY_NAME);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode,  JSC_PROPERTY_NAME);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingCall(callNode,  JSC_PROPERTY_NAME);	  aughtExceptionHandler.handleMissingCall(callNode);    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
265	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode,  compiler);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode,  compiler);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingCall(callNode,  compiler);	  aughtExceptionHandler.handleMissingCall(callNode);    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
266	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode,  param);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode,  param);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingCall(callNode,  param);	  aughtExceptionHandler.handleMissingCall(callNode);    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
267	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode,  JSC_PROPERTY_NAME_FN);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode,  JSC_PROPERTY_NAME_FN);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingCall(callNode,  JSC_PROPERTY_NAME_FN);	  aughtExceptionHandler.handleMissingCall(callNode);    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
268	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Text ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Text ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Text ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "Text   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
269	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Text ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Text ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Text ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "Text   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
270	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Text ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Text ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Text ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "Text   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
271	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals( "Object ")||  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals( "Object ")||  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(JSC_PROPERTY_NAME.equals( "Object ")||  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Math   ")||    JSC_PROPERTY_NAME.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
272	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString()))  {  return  false;	          OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild().getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
273	[BUG]  [BUGGY]  ||  namespaceName.equals( "Property "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  namespaceName.equals( "Property "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  namespaceName.equals( "Property "))  {  return  false;  }	  if(namespaceName.equals(   "Math       ")||    namespaceName.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
274	[BUG]  [BUGGY]  Namespace  namespaceName  =  namespaceName.equals( "Math   ")||  namespaceName.equals( "Property   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Namespace  namespaceName  =  namespaceName.equals( "Math   ")||  namespaceName.equals( "Property   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Namespace  namespaceName  =  namespaceName.equals( "Math   ")||  namespaceName.equals( "Property   "))  {  return  false;  }	  if(namespaceName.equals(   "Math       ")||    namespaceName.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
275	[BUG]  [BUGGY]  NamespaceName  namespaceName  =  namespaceName.equals( "Math   ")||  namespaceName.equals( "Property   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NamespaceName  namespaceName  =  namespaceName.equals( "Math   ")||  namespaceName.equals( "Property   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NamespaceName  namespaceName  =  namespaceName.equals( "Math   ")||  namespaceName.equals( "Property   "))  {  return  false;  }	  if(namespaceName.equals(   "Math       ")||    namespaceName.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
276	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
277	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
278	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
279	[BUG]  [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
280	[BUG]  [BUGGY]  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
281	[BUG]  [BUGGY]  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	&&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
282	[BUG]  [BUGGY]  if(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
283	[BUG]  [BUGGY]  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
284	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  }	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
285	[BUG]  [BUGGY]  return  false;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  false;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  false;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
286	[BUG]  [BUGGY]  if(!callNode.hasOneChild())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.hasOneChild())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.hasOneChild())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  }	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
287	[BUG]  [BUGGY]  result  =  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  result  =  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	result  =  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
288	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
289	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  }  else  {  throw  new  JSC_PROPERTY_NAME  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  }  else  {  throw  new  JSC_PROPERTY_NAME  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  }  else  {  throw  new  JSC_PROPERTY_NAME	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
290	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
291	[BUG]  [BUGGY]  Preconditions.checkState(callNode.hasOneChild()  ||  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.hasOneChild()  ||  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.hasOneChild()  ||  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
292	[BUG]  [BUGGY]  parent!=  callNode.getFirstChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  callNode.getFirstChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  callNode.getFirstChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
293	[BUG]  [BUGGY]  parent!=  callNode.getFirstChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  callNode.getFirstChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  callNode.getFirstChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
294	[BUG]  [BUGGY]  parent!=  callNode.getFirstChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  callNode.getFirstChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  callNode.getFirstChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
295	[BUG]  [BUGGY]  parent!=  callNode.getFirstChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  callNode.getFirstChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  callNode.getFirstChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
296	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsStatement( "msg.bad.call ",  callNode.getFirstChild(),  callNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.throwAsStatement( "msg.bad.call ",  callNode.getFirstChild(),  callNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.throwAsStatement( "msg.bad.call ",  callNode.getFirstChild(),  callNode.getLastChild());	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
297	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(  nameNode.getFirstChild().getString()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(  nameNode.getFirstChild().getString()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(  nameNode.getFirstChild().getString()))  {  return  false;	          OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
298	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  null);  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  null);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  null);	  NodeTraversal.traverse(compiler,    callNode,    this);    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
299	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  this,  define);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  this,  define);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  this,  define);	  NodeTraversal.traverse(compiler,    callNode,    this);    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
300	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME_FN);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME_FN);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME_FN);	  NodeTraversal.traverse(compiler,    callNode,    this);    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
301	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  this,  definitions);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  this,  definitions);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  this,  definitions);	  NodeTraversal.traverse(compiler,    callNode,    this);    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
302	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  this,  parameters);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  this,  parameters);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  this,  parameters);	  NodeTraversal.traverse(compiler,    callNode,    this);    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
303	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME);	  NodeTraversal.traverse(compiler,    callNode,    this);    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
304	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  this,  defines);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  this,  defines);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  this,  defines);	  NodeTraversal.traverse(compiler,    callNode,    this);    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
305	[BUG]  [BUGGY]  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getString()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getString()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getString()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getString()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
306	[BUG]  [BUGGY]  Node  callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getString()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getString()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getString()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getString()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
307	[BUG]  [BUGGY]  AssertionFailedError.was(callNode.getFirstChild(),  callNode.getLastChild(),  JSC_PROPERTY_NAME);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.was(callNode.getFirstChild(),  callNode.getLastChild(),  JSC_PROPERTY_NAME);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.was(callNode.getFirstChild(),  callNode.getLastChild(),  JSC_PROPERTY_NAME);	  AssertionFailedError.was(callNode.getFirstChild(),    callNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
308	[BUG]  [BUGGY]  AssertionFailedError.was(nameNode.getFirstChild(),  callNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.was(nameNode.getFirstChild(),  callNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.was(nameNode.getFirstChild(),  callNode.getLastChild());	  AssertionFailedError.was(callNode.getFirstChild(),    callNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
309	[BUG]  [BUGGY]  AssertionFailedError.was(callNode.getLastChild(),  callNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.was(callNode.getLastChild(),  callNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.was(callNode.getLastChild(),  callNode.getFirstChild());	  AssertionFailedError.was(callNode.getFirstChild(),    callNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
310	[BUG]  [BUGGY]  AssertionFailedError.was(callNode.getFirstChild(),  callNode.getLastChild(),  null);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.was(callNode.getFirstChild(),  callNode.getLastChild(),  null);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.was(callNode.getFirstChild(),  callNode.getLastChild(),  null);	  AssertionFailedError.was(callNode.getFirstChild(),    callNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
311	[BUG]  [BUGGY]  AssertionFailedError.was(callNode.getFirstChild(),  callNode.getLastChild(),  MISSING_REGEXP_METHODS);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.was(callNode.getFirstChild(),  callNode.getLastChild(),  MISSING_REGEXP_METHODS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.was(callNode.getFirstChild(),  callNode.getLastChild(),  MISSING_REGEXP_METHODS);	  AssertionFailedError.was(callNode.getFirstChild(),    callNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
312	[BUG]  [BUGGY]  AssertionFailedError.was(callNode.getFirstChild(),  callNode.getLastChild(),  false);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.was(callNode.getFirstChild(),  callNode.getLastChild(),  false);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.was(callNode.getFirstChild(),  callNode.getLastChild(),  false);	  AssertionFailedError.was(callNode.getFirstChild(),    callNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
313	[BUG]  [BUGGY]  Context.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  Context.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
314	[BUG]  [BUGGY]  Context.checkState(callNode.hasThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.hasThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.hasThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  Context.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
315	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatcher(nameNode,  callNode.getFirstChild(),  callNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatcher(nameNode,  callNode.getFirstChild(),  callNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatcher(nameNode,  callNode.getFirstChild(),  callNode.getLastChild());	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    If(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
316	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingCall(nameNode,  callNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingCall(nameNode,  callNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingCall(nameNode,  callNode.getLastChild());	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    If(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
317	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatcher(nameNode,  callNode.getFirstChild(),  callNode.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatcher(nameNode,  callNode.getFirstChild(),  callNode.getLastChild()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatcher(nameNode,  callNode.getFirstChild(),  callNode.getLastChild()));	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    If(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
318	[BUG]  [BUGGY]  parent.replaceChild(callNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent.replaceChild(callNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent.replaceChild(callNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    If(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
319	[BUG]  [BUGGY]  Preconditions.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
320	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
321	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
322	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
323	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString())  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString())  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString())	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
324	[BUG]  [BUGGY]  return  namespaceName.equals(JSC_PROPERTY_NAME_FN)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  namespaceName.equals(JSC_PROPERTY_NAME_FN)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  namespaceName.equals(JSC_PROPERTY_NAME_FN)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
325	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
326	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChil  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChil  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChil	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
327	[BUG]  [BUGGY]  parent!=  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.hasThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
328	[BUG]  [BUGGY]  parent!=  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.hasThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
329	[BUG]  [BUGGY]  parent  ==  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.hasThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
330	[BUG]  [BUGGY]  parent  ==  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.hasThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
331	[BUG]  [BUGGY]  safelyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  safelyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	safelyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.hasThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
332	[BUG]  [BUGGY]  parent!=  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.hasThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
333	[BUG]  [BUGGY]  parent  ==  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.hasThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
334	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString());  return  false;  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString());  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString());  return  false;	          OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());    return    false;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
335	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getFirstChild().getString());  return  false;  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getFirstChild().getString());  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getFirstChild().getString());  return  false;	          OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());    return    false;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
336	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());  return  true;  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());  return  true;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());  return  true;	          OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());    return    false;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
337	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString()));  return  false;  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString()));  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString()));  return  false;	          OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());    return    false;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
338	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingCall(nameNode.getFirstChild(),  callNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingCall(nameNode.getFirstChild(),  callNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingCall(nameNode.getFirstChild(),  callNode.getFirstChild());	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
339	[BUG]  [BUGGY]  return  true;  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString());  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  true;  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  true;  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString());	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
340	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getLastChild();  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  nameNode  =  callNode.getLastChild();  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  nameNode  =  callNode.getLastChild();  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
341	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getLastChild().getString();  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  nameNode  =  callNode.getLastChild().getString();  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  nameNode  =  callNode.getLastChild().getString();  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
342	[BUG]  [BUGGY]  result  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString());  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  result  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	result  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString());	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
343	[BUG]  [BUGGY]  return  true;  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild().getString());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  true;  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild().getString());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  true;  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild().getString());	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
344	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
345	[BUG]  [BUGGY]  ||  namespaceName.equals( "Math "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  namespaceName.equals( "Math "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  namespaceName.equals( "Math "))  {  return  false;  }	  if(namespaceName.equals(   "Property       ")||    namespaceName.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
346	[BUG]  [BUGGY]  NamespaceName  namespaceName  =  namespaceName.equals( "Property   ")||  namespaceName.equals( "Math   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NamespaceName  namespaceName  =  namespaceName.equals( "Property   ")||  namespaceName.equals( "Math   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NamespaceName  namespaceName  =  namespaceName.equals( "Property   ")||  namespaceName.equals( "Math   "))  {  return  false;  }	  if(namespaceName.equals(   "Property       ")||    namespaceName.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
347	[BUG]  [BUGGY]  NamespaceName.equals( "Property   ")||  namespaceName.equals( "Math "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NamespaceName.equals( "Property   ")||  namespaceName.equals( "Math "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NamespaceName.equals( "Property   ")||  namespaceName.equals( "Math "))  {  return  false;  }	  if(namespaceName.equals(   "Property       ")||    namespaceName.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
348	[BUG]  [BUGGY]  Namespace  namespaceName  =  namespaceName.equals( "Property   ")&&  namespaceName.equals( "Math   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Namespace  namespaceName  =  namespaceName.equals( "Property   ")&&  namespaceName.equals( "Math   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Namespace  namespaceName  =  namespaceName.equals( "Property   ")&&  namespaceName.equals( "Math   "))  {  return  false;  }	  if(namespaceName.equals(   "Property       ")||    namespaceName.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
349	[BUG]  [BUGGY]  if(name.equals( "Object   ")||  name.equals( "Property   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(name.equals( "Object   ")||  name.equals( "Property   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(name.equals( "Object   ")||  name.equals( "Property   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Object   ")||    JSC_PROPERTY_NAME.equals(   "Property   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
350	[BUG]  [BUGGY]  if(nameNode.equals( "Object   ")||  nameNode.equals( "Property   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(nameNode.equals( "Object   ")||  nameNode.equals( "Property   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(nameNode.equals( "Object   ")||  nameNode.equals( "Property   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Object   ")||    JSC_PROPERTY_NAME.equals(   "Property   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
351	[BUG]  [BUGGY]  if(namespaceName.equals( "Object   ")||  namespaceName.equals( "Property   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(namespaceName.equals( "Object   ")||  namespaceName.equals( "Property   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(namespaceName.equals( "Object   ")||  namespaceName.equals( "Property   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Object   ")||    JSC_PROPERTY_NAME.equals(   "Property   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
352	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(namespaceName)||  JSC_PROPERTY_NAME.equals( "Math   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  JSC_PROPERTY_NAME.equals(namespaceName)||  JSC_PROPERTY_NAME.equals( "Math   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	JSC_PROPERTY_NAME.equals(namespaceName)||  JSC_PROPERTY_NAME.equals( "Math   "))  {  return  false;  }	  JSC_PROPERTY_NAME.equals(   "Property       ")||    JSC_PROPERTY_NAME.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
353	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  JSC_PROPERTY_NAME.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	JSC_PROPERTY_NAME.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }	  JSC_PROPERTY_NAME.equals(   "Property       ")||    JSC_PROPERTY_NAME.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
354	[BUG]  [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }	  Context.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
355	[BUG]  [BUGGY]  Context.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  Context.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
356	[BUG]  [BUGGY]  Context.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  Context.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
357	[BUG]  [BUGGY]  result.add(JSC_PROPERTY_NAME_FN);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  result.add(JSC_PROPERTY_NAME_FN);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	result.add(JSC_PROPERTY_NAME_FN);	  return    true;    if(!callNode.isOnlyModifiesThisCall())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
358	[BUG]  [BUGGY]  aughtExceptionHandler.throwAssertionFailedError( "msg.bad.call ",  callNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.throwAssertionFailedError( "msg.bad.call ",  callNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.throwAssertionFailedError( "msg.bad.call ",  callNode.getFirstChild());	  return    true;    if(!callNode.isOnlyModifiesThisCall())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
359	[BUG]  [BUGGY]  result.add(JSC_PROPERTY_NAME);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  result.add(JSC_PROPERTY_NAME);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	result.add(JSC_PROPERTY_NAME);	  return    true;    if(!callNode.isOnlyModifiesThisCall())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
360	[BUG]  [BUGGY]  aughtExceptionHandler.throwAssertionFailedError( "msg.bad.match.method ",  callNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.throwAssertionFailedError( "msg.bad.match.method ",  callNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.throwAssertionFailedError( "msg.bad.match.method ",  callNode.getFirstChild());	  return    true;    if(!callNode.isOnlyModifiesThisCall())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
361	[BUG]  [BUGGY]  aughtExceptionHandler.throwAssertionFailedError( "msg.no.call ",  callNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.throwAssertionFailedError( "msg.no.call ",  callNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.throwAssertionFailedError( "msg.no.call ",  callNode.getFirstChild());	  return    true;    if(!callNode.isOnlyModifiesThisCall())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
362	[BUG]  [BUGGY]  aughtExceptionHandler.throwAssertionFailedError( "msg.js.no.call ",  callNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.throwAssertionFailedError( "msg.js.no.call ",  callNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.throwAssertionFailedError( "msg.js.no.call ",  callNode.getFirstChild());	  return    true;    if(!callNode.isOnlyModifiesThisCall())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
363	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Object ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "Object   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
364	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild()  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Object ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "Object   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
365	[BUG]  [BUGGY]  parent.replaceChild(nameNode,  callNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent.replaceChild(nameNode,  callNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent.replaceChild(nameNode,  callNode.getLastChild());	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(callNode.getOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
366	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode.getLastChild(),  callNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode.getLastChild(),  callNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingCall(callNode.getLastChild(),  callNode.getLastChild());	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
367	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingCall(nameNode,  callNode.getLastChild(),  callNode.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingCall(nameNode,  callNode.getLastChild(),  callNode.getLastChild()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingCall(nameNode,  callNode.getLastChild(),  callNode.getLastChild()));	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
368	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingCall(nameNode,  callNode.getLastChild(),  callNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingCall(nameNode,  callNode.getLastChild(),  callNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingCall(nameNode,  callNode.getLastChild(),  callNode.getLastChild());	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
369	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingCall(nameNode,  callNode.getFirstChild(),  callNode.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingCall(nameNode,  callNode.getFirstChild(),  callNode.getLastChild()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingCall(nameNode,  callNode.getFirstChild(),  callNode.getLastChild()));	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
370	[BUG]  [BUGGY]  ||  evaluatesToLocalValue(nameNode.getString()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  evaluatesToLocalValue(nameNode.getString()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  evaluatesToLocalValue(nameNode.getString()))  {  return  false;	  ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
371	[BUG]  [BUGGY]  Node  <  K,  V>  callNode  =  evaluatesToLocalValue(callNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  <  K,  V>  callNode  =  evaluatesToLocalValue(callNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  <  K,  V>  callNode  =  evaluatesToLocalValue(callNode.getLastChild());	  Node    <    K,    V>    callNode    =    evaluatesToLocalValue(nameNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
372	[BUG]  [BUGGY]  Node  <  K,  V>  callNode  =  evaluatesToLocalValue(nameNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  <  K,  V>  callNode  =  evaluatesToLocalValue(nameNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  <  K,  V>  callNode  =  evaluatesToLocalValue(nameNode.getFirstChild());	  Node    <    K,    V>    callNode    =    evaluatesToLocalValue(nameNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
373	[BUG]  [BUGGY]  Node  <  K,  V>  callNode  =  evaluatesToLocalValue(callNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  <  K,  V>  callNode  =  evaluatesToLocalValue(callNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  <  K,  V>  callNode  =  evaluatesToLocalValue(callNode.getFirstChild());	  Node    <    K,    V>    callNode    =    evaluatesToLocalValue(nameNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
374	[BUG]  [BUGGY]  Node  <  K,  V>  callNode  =  evaluatesToLocalValue(nameNode.getLastChild(),  callNode);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  <  K,  V>  callNode  =  evaluatesToLocalValue(nameNode.getLastChild(),  callNode);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  <  K,  V>  callNode  =  evaluatesToLocalValue(nameNode.getLastChild(),  callNode);	  Node    <    K,    V>    callNode    =    evaluatesToLocalValue(nameNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
375	[BUG]  [BUGGY]  Node  <  K,  V>  callNode  =  evaluateToLocalValue(callNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  <  K,  V>  callNode  =  evaluateToLocalValue(callNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  <  K,  V>  callNode  =  evaluateToLocalValue(callNode.getLastChild());	  Node    <    K,    V>    callNode    =    evaluatesToLocalValue(nameNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
376	[BUG]  [BUGGY]  Node  <  K,  V>  callNode  =  evaluateToLocalValue(nameNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  <  K,  V>  callNode  =  evaluateToLocalValue(nameNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  <  K,  V>  callNode  =  evaluateToLocalValue(nameNode.getFirstChild());	  Node    <    K,    V>    callNode    =    evaluatesToLocalValue(nameNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
377	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(namespaceName))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(namespaceName))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  JSC_PROPERTY_NAME.equals(namespaceName))  {  return  false;  }	  if(namespaceName.equals(   "Math   ")||    JSC_PROPERTY_NAME.equals(   "Name   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
378	[BUG]  [BUGGY]  NamespaceName.equals(namespaceName)||  JSC_PROPERTY_NAME.equals( "Name "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NamespaceName.equals(namespaceName)||  JSC_PROPERTY_NAME.equals( "Name "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NamespaceName.equals(namespaceName)||  JSC_PROPERTY_NAME.equals( "Name "))  {  return  false;  }	  if(namespaceName.equals(   "Math   ")||    JSC_PROPERTY_NAME.equals(   "Name   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
379	[BUG]  [BUGGY]  Namespace  namespaceName  =  namespaceName.equals( "Math   ")||  JSC_PROPERTY_NAME.equals( "Name ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Namespace  namespaceName  =  namespaceName.equals( "Math   ")||  JSC_PROPERTY_NAME.equals( "Name ");  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Namespace  namespaceName  =  namespaceName.equals( "Math   ")||  JSC_PROPERTY_NAME.equals( "Name ");	  if(namespaceName.equals(   "Math   ")||    JSC_PROPERTY_NAME.equals(   "Name   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
380	[BUG]  [BUGGY]  Namespace  namespaceName  =  namespaceName.equals( "Math ")||  JSC_PROPERTY_NAME.equals( "Name   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Namespace  namespaceName  =  namespaceName.equals( "Math ")||  JSC_PROPERTY_NAME.equals( "Name   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Namespace  namespaceName  =  namespaceName.equals( "Math ")||  JSC_PROPERTY_NAME.equals( "Name   "))  {  return  false;  }	  if(namespaceName.equals(   "Math   ")||    JSC_PROPERTY_NAME.equals(   "Name   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
381	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "String ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "String ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "String ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(   "String   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
382	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(   "String   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
383	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "String ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "String ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "String ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(   "String   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
384	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingCall(nameNode.getLastChild(),  callNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingCall(nameNode.getLastChild(),  callNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingCall(nameNode.getLastChild(),  callNode.getLastChild());	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
385	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingCall(nameNode.getLastChild(),  callNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingCall(nameNode.getLastChild(),  callNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingCall(nameNode.getLastChild(),  callNode.getFirstChild());	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
386	[BUG]  [BUGGY]  Node  define  =  callNode.getFirstChild();  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  define  =  callNode.getFirstChild();  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  define  =  callNode.getFirstChild();  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()))  {  return  false;	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
387	[BUG]  [BUGGY]  result.add(OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  result.add(OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	result.add(OBJECT_METHODS_WITHOUT_SIDEEFFECTS);	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
388	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME_FN.equals( "Object   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  JSC_PROPERTY_NAME_FN.equals( "Object   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  JSC_PROPERTY_NAME_FN.equals( "Object   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME_FN.equals(   "Math   ")||    JSC_PROPERTY_NAME_FN.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
389	[BUG]  [BUGGY]  |  JSC_PROPERTY_NAME_FN.equals( "Object   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  |  JSC_PROPERTY_NAME_FN.equals( "Object   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	|  JSC_PROPERTY_NAME_FN.equals( "Object   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME_FN.equals(   "Math   ")||    JSC_PROPERTY_NAME_FN.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
390	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME_FN.equals( "Object ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(JSC_PROPERTY_NAME_FN.equals( "Object ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(JSC_PROPERTY_NAME_FN.equals( "Object ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }	  if(JSC_PROPERTY_NAME_FN.equals(   "Math   ")||    JSC_PROPERTY_NAME_FN.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
391	[BUG]  [BUGGY]  If(namespaceName.equals(JSC_PROPERTY_NAME_FN)||  namespaceName.equals( "Property   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  If(namespaceName.equals(JSC_PROPERTY_NAME_FN)||  namespaceName.equals( "Property   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	If(namespaceName.equals(JSC_PROPERTY_NAME_FN)||  namespaceName.equals( "Property   "))  {  return  false;  }	  If(namespaceName.equals(   "Math       ")||    namespaceName.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
392	[BUG]  [BUGGY]  If(namespaceName.equals( "Property   ")||  namespaceName.equals( "Property   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  If(namespaceName.equals( "Property   ")||  namespaceName.equals( "Property   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	If(namespaceName.equals( "Property   ")||  namespaceName.equals( "Property   "))  {  return  false;  }	  If(namespaceName.equals(   "Math       ")||    namespaceName.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
393	[BUG]  [BUGGY]  If(namespaceName.equals( "Object ")||  namespaceName.equals( "Property   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  If(namespaceName.equals( "Object ")||  namespaceName.equals( "Property   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	If(namespaceName.equals( "Object ")||  namespaceName.equals( "Property   "))  {  return  false;  }	  If(namespaceName.equals(   "Math       ")||    namespaceName.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
394	[BUG]  [BUGGY]  ||  name.equals( "Math "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  name.equals( "Math "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  name.equals( "Math "))  {  return  false;  }	  if(name.equals(   "Property       ")||    name.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
395	[BUG]  [BUGGY]  parent!=  null  &&  name.equals( "Property   ")||  name.equals( "Math   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  null  &&  name.equals( "Property   ")||  name.equals( "Math   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  null  &&  name.equals( "Property   ")||  name.equals( "Math   "))  {  return  false;  }	  if(name.equals(   "Property       ")||    name.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
396	[BUG]  [BUGGY]  parent  ==  null  &&  name.equals( "Property   ")||  name.equals( "Math   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  name.equals( "Property   ")||  name.equals( "Math   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  name.equals( "Property   ")||  name.equals( "Math   "))  {  return  false;  }	  if(name.equals(   "Property       ")||    name.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
397	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
398	[BUG]  [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
399	[BUG]  [BUGGY]  Node  callNode  =  callNode.getFirstChild();  Preconditions.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  callNode.getFirstChild();  Preconditions.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  callNode.getFirstChild();  Preconditions.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
400	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
401	[BUG]  [BUGGY]  return  nameNode.equals(JSC_PROPERTY_NAME_FN)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  nameNode.equals(JSC_PROPERTY_NAME_FN)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  nameNode.equals(JSC_PROPERTY_NAME_FN)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
402	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
403	[BUG]  [BUGGY]  return  namespaceName.equals(JSC_PROPERTY_NAME_FN)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  namespaceName.equals(JSC_PROPERTY_NAME_FN)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  namespaceName.equals(JSC_PROPERTY_NAME_FN)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
404	[BUG]  [BUGGY]  return  nameNode.equals(namespaceName)&&  JSC_PROPERTY_NAME_FN.contains(nameNode.getLastChild()  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  nameNode.equals(namespaceName)&&  JSC_PROPERTY_NAME_FN.contains(nameNode.getLastChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  nameNode.equals(namespaceName)&&  JSC_PROPERTY_NAME_FN.contains(nameNode.getLastChild()	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
405	[BUG]  [BUGGY]  return  nameNode.equals(JSC_PROPERTY_NAME_FN)&&  JSC_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  nameNode.equals(JSC_PROPERTY_NAME_FN)&&  JSC_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  nameNode.equals(JSC_PROPERTY_NAME_FN)&&  JSC_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
406	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(nameNode.getLastChild().getString()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(nameNode.getLastChild().getString()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(nameNode.getLastChild().getString()))  {  return  false;	          OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
407	[BUG]  [BUGGY]  while(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  while(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	while(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
408	[BUG]  [BUGGY]  while(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  while(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	while(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
409	[BUG]  [BUGGY]  While(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  While(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	While(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
410	[BUG]  [BUGGY]  While(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  While(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	While(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
411	[BUG]  [BUGGY]  while(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  while(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	while(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
412	[BUG]  [BUGGY]  while(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  while(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	while(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
413	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
414	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
415	[BUG]  [BUGGY]  Preconditions.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
416	[BUG]  [BUGGY]  if(callNode.hasOneChild()  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(callNode.hasOneChild()  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(callNode.hasOneChild()  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  return    true;    Node    param    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
417	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
418	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild().getString()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
419	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
420	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode,  nameNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode,  nameNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingCall(callNode,  nameNode.getFirstChild());	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    If(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
421	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatcher(nameNode,  callNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatcher(nameNode,  callNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatcher(nameNode,  callNode.getFirstChild());	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    If(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
422	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatcher(new  MatchNodeType(nameNode.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatcher(new  MatchNodeType(nameNode.getFirstChild()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatcher(new  MatchNodeType(nameNode.getFirstChild()));	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    If(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
423	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.throwInternal();	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    If(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
424	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatcher(callNode,  nameNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatcher(callNode,  nameNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatcher(callNode,  nameNode.getFirstChild());	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    If(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
425	[BUG]  [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
426	[BUG]  [BUGGY]  parent.replaceChild(nameNode,  callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent.replaceChild(nameNode,  callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent.replaceChild(nameNode,  callNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
427	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatcher(new  MatchNodeType(nameNode.getFirstChild(),  callNode.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatcher(new  MatchNodeType(nameNode.getFirstChild(),  callNode.getLastChild()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatcher(new  MatchNodeType(nameNode.getFirstChild(),  callNode.getLastChild()));	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
428	[BUG]  [BUGGY]  if(!callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild()))  {  return  false;  }	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
429	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getFirstChild();  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  nameNode  =  callNode.getFirstChild();  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  nameNode  =  callNode.getFirstChild();  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild()))  {  return  false;	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
430	[BUG]  [BUGGY]  if(callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild()))  {  return  false;  }	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
431	[BUG]  [BUGGY]  Node  param  =  callNode.getFirstChild();  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  param  =  callNode.getFirstChild();  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  param  =  callNode.getFirstChild();  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild()))  {  return  false;	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
432	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Property   ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Property   ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Property   ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(   "Property       ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
433	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  new  MatchShallowStatement());  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  new  MatchShallowStatement());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  nameNode,  new  MatchShallowStatement());	  NodeTraversal.traverse(compiler,    callNode,    new    MatchShallowStatement());    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
434	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  new  MatchShallowStatement());  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  new  MatchShallowStatement());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  new  MatchShallowStatement());	  NodeTraversal.traverse(compiler,    callNode,    new    MatchShallowStatement());    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
435	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  param,  new  MatchShallowStatement());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  param,  new  MatchShallowStatement());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  param,  new  MatchShallowStatement());	  NodeTraversal.traverse(compiler,    callNode,    new    MatchShallowStatement());    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
436	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  JSC_PROPERTY_NAME);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  JSC_PROPERTY_NAME);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  JSC_PROPERTY_NAME);	  NodeTraversal.traverse(compiler,    callNode,    new    MatchShallowStatement());    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
437	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  REGEXP_METHODS);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  REGEXP_METHODS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  REGEXP_METHODS);	  NodeTraversal.traverse(compiler,    callNode,    new    MatchShallowStatement());    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
438	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootNode,  new  MatchShallowStatement());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootNode,  new  MatchShallowStatement());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  rootNode,  new  MatchShallowStatement());	  NodeTraversal.traverse(compiler,    callNode,    new    MatchShallowStatement());    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
439	[BUG]  [BUGGY]  Node  callNode  =  nameNode.getFirstChild();  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  nameNode.getFirstChild();  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  nameNode.getFirstChild();  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  Node    callNode    =    callNode.getFirstChild();    if(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
440	[BUG]  [BUGGY]  Node  callNode  =  param.getFirstChild();  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  param.getFirstChild();  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  param.getFirstChild();  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  Node    callNode    =    callNode.getFirstChild();    if(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
441	[BUG]  [BUGGY]  Node  callNode  =  nameNode.getFirstChild();  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  nameNode.getFirstChild();  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  nameNode.getFirstChild();  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  Node    callNode    =    callNode.getFirstChild();    if(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
442	[BUG]  [BUGGY]  Node  callNode  =  callNode.getLastChild();  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  callNode.getLastChild();  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  callNode.getLastChild();  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  Node    callNode    =    callNode.getFirstChild();    if(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
443	[BUG]  [BUGGY]  Node  callNode  =  nameNode.getFirstChild();  if(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  nameNode.getFirstChild();  if(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  nameNode.getFirstChild();  if(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  Node    callNode    =    callNode.getFirstChild();    if(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
444	[BUG]  [BUGGY]  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	&&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;	  &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
445	[BUG]  [BUGGY]  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	&&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
446	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getLastChild()!=  JSC_PROPERTY_NAME);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getLastChild()!=  JSC_PROPERTY_NAME);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getLastChild()!=  JSC_PROPERTY_NAME);	  &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
447	[BUG]  [BUGGY]  if(callNode.hasOneChild()  &&!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(callNode.hasOneChild()  &&!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(callNode.hasOneChild()  &&!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  return    true;    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
448	[BUG]  [BUGGY]  if(callNode.hasOneChild()  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(callNode.hasOneChild()  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(callNode.hasOneChild()  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  return    true;    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
449	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  throw  new  IllegalArgumentException( " ");  }	  return    true;    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
450	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals( "Property "))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals( "Property "))  {  return  true;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  JSC_PROPERTY_NAME.equals( "Property "))  {  return  true;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "Property   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
451	[BUG]  [BUGGY]  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.THIS);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.THIS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.THIS);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
452	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.THIS);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.THIS);  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.THIS);  }	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
453	[BUG]  [BUGGY]  return  false;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.THIS);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  false;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.THIS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  false;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.THIS);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
454	[BUG]  [BUGGY]  result  =  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.THIS);  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  result  =  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.THIS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	result  =  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.THIS);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
455	[BUG]  [BUGGY]  if(!callNode.hasOneChild()  &&  callNode.getFirstChild().getType()  ==  Token.THIS)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.hasOneChild()  &&  callNode.getFirstChild().getType()  ==  Token.THIS)  {  return  true;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.hasOneChild()  &&  callNode.getFirstChild().getType()  ==  Token.THIS)  {  return  true;  }	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
456	[BUG]  [BUGGY]  if(!callNode.hasOneChild()  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild().getString()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.hasOneChild()  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild().getString()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.hasOneChild()  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild().getString()))  {  return  false;  }	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
457	[BUG]  [BUGGY]  if(!callNode.hasOneChild()  &&  callNode.getFirstChild().getType()  ==  Token.THIS)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.hasOneChild()  &&  callNode.getFirstChild().getType()  ==  Token.THIS)  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.hasOneChild()  &&  callNode.getFirstChild().getType()  ==  Token.THIS)  {  return  false;  }	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
458	[BUG]  [BUGGY]  If(name.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Math   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  If(name.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Math   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	If(name.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Math   "))  {  return  false;  }	  if(name.equals(   "Property       ")||    JSC_PROPERTY_NAME.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
459	[BUG]  [BUGGY]  return  namespaceName.equals(JSC_PROPERTY_NAME_FN)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  namespaceName.equals(JSC_PROPERTY_NAME_FN)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  namespaceName.equals(JSC_PROPERTY_NAME_FN)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
460	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
461	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
462	[BUG]  [BUGGY]  Parchet.IS_PROPERTY_NAME_FN.equals( "Property   ")||  JSC_PROPERTY_NAME_FN.equals( "Object   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Parchet.IS_PROPERTY_NAME_FN.equals( "Property   ")||  JSC_PROPERTY_NAME_FN.equals( "Object   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Parchet.IS_PROPERTY_NAME_FN.equals( "Property   ")||  JSC_PROPERTY_NAME_FN.equals( "Object   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME_FN.equals(   "Property   ")||    JSC_PROPERTY_NAME_FN.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
463	[BUG]  [BUGGY]  If(name.equals( "Object ")||  name.equals( "Property   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  If(name.equals( "Object ")||  name.equals( "Property   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	If(name.equals( "Object ")||  name.equals( "Property   "))  {  return  false;  }	  If(name.equals(   "Math       ")||    name.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
464	[BUG]  [BUGGY]  If(name.equals( "Property   ")||  name.equals( "Property   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  If(name.equals( "Property   ")||  name.equals( "Property   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	If(name.equals( "Property   ")||  name.equals( "Property   "))  {  return  false;  }	  If(name.equals(   "Math       ")||    name.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
465	[BUG]  [BUGGY]  AssertionFailedError.make(nameNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.make(nameNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.make(nameNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
466	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
467	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
468	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  nameNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);	  NodeTraversal.traverse(compiler,    callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
469	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  nameNode);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  nameNode);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  nameNode);	  NodeTraversal.traverse(compiler,    callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
470	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  param,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  param,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  param,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);	  NodeTraversal.traverse(compiler,    callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
471	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  rootNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);	  NodeTraversal.traverse(compiler,    callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
472	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  CONSTRUCTORS_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  CONSTRUCTORS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  CONSTRUCTORS_WITHOUT_SIDEEFFECTS);	  NodeTraversal.traverse(compiler,    callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
473	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  REGEXP_METHODS_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  REGEXP_METHODS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  REGEXP_METHODS_WITHOUT_SIDEEFFECTS);	  NodeTraversal.traverse(compiler,    callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
474	[BUG]  [BUGGY]  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.FUNCTION);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
475	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.FUNCTION);  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.FUNCTION);  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.FUNCTION);  }	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
476	[BUG]  [BUGGY]  return  false;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  false;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  false;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.FUNCTION);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
477	[BUG]  [BUGGY]  result  =  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  result  =  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	result  =  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.FUNCTION);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
478	[BUG]  [BUGGY]  if(!callNode.hasChildren())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.FUNCTION);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.hasChildren())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.FUNCTION);  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.hasChildren())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.FUNCTION);  }	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
479	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Math ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Math ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Math ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()	  return    JSC_PROPERTY_NAME_FN.equals(   "Math   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
480	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Property   ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Property   ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Property   ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()	  return    JSC_PROPERTY_NAME_FN.equals(   "Math   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
481	[BUG]  [BUGGY]  Context.checkState(callNode.getType()  ==  Token.CALL  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.getType()  ==  Token.CALL  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.getType()  ==  Token.CALL  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  if(callNode.getType()    ==    Token.CALL    &&!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
482	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  if(callNode.getType()    ==    Token.CALL    &&!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
483	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }	  if(callNode.getType()    ==    Token.CALL    &&!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
484	[BUG]  [BUGGY]  Context.checkState(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  if(callNode.getType()    ==    Token.CALL    &&!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
485	[BUG]  [BUGGY]  Context.checkState(callNode.getType()  ==  Token.CALL  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.getType()  ==  Token.CALL  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.getType()  ==  Token.CALL  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  if(callNode.getType()    ==    Token.CALL    &&!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
486	[BUG]  [BUGGY]  NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP);	  return    true;    NodeUtil.checkState(callNode.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
487	[BUG]  [BUGGY]  return  false;  NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  false;  NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  false;  NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP);	  return    true;    NodeUtil.checkState(callNode.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
488	[BUG]  [BUGGY]  if(!callNode.hasOneChild())  {  return  true;  NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.hasOneChild())  {  return  true;  NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP);  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.hasOneChild())  {  return  true;  NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP);  }	  return    true;    NodeUtil.checkState(callNode.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
489	[BUG]  [BUGGY]  if(!callNode.hasOneChild()  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.hasOneChild()  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  true;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.hasOneChild()  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  true;  }	  return    true;    NodeUtil.checkState(callNode.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
490	[BUG]  [BUGGY]  if(!callNode.hasOneChild()  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.hasOneChild()  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.hasOneChild()  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  return    true;    NodeUtil.checkState(callNode.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
491	[BUG]  [BUGGY]  if(!callNode.hasOneChild()  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.hasOneChild()  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  true;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.hasOneChild()  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  true;  }	  return    true;    NodeUtil.checkState(callNode.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
492	[BUG]  [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;	  Context.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
493	[BUG]  [BUGGY]  Context.checkState(callNode.getOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.getOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.getOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  Context.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
494	[BUG]  [BUGGY]  Context.checkState(callNode.hasThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.hasThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.hasThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  Context.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
495	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getLastChild();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  nameNode  =  callNode.getLastChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  nameNode  =  callNode.getLastChild();	  Node    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
496	[BUG]  [BUGGY]  Node  nameNode  =  param.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  nameNode  =  param.getFirstChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  nameNode  =  param.getFirstChild();	  Node    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
497	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getNext();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  nameNode  =  callNode.getNext();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  nameNode  =  callNode.getNext();	  Node    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
498	[BUG]  [BUGGY]  Node  nameNode  =  this.callNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  nameNode  =  this.callNode.getFirstChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  nameNode  =  this.callNode.getFirstChild();	  Node    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
499	[BUG]  [BUGGY]  Node  nameNode  =  callNode.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  nameNode  =  callNode.removeFirstChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  nameNode  =  callNode.removeFirstChild();	  Node    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
500	[BUG]  [BUGGY]  Node  nameNode  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  nameNode  =  node.getFirstChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  nameNode  =  node.getFirstChild();	  Node    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
501	[BUG]  [BUGGY]  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
502	[BUG]  [BUGGY]  namespaceName.equals( "Math   ")||  namespaceName.equals( "Name   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  namespaceName.equals( "Math   ")||  namespaceName.equals( "Name   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	namespaceName.equals( "Math   ")||  namespaceName.equals( "Name   "))  {  return  false;  }	  if(namespaceName.equals(   "Math       ")||    namespaceName.equals(   "Name       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
503	[BUG]  [BUGGY]  Context.checkState(callNode.hasOneChild()  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.hasOneChild()  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.hasOneChild()  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
504	[BUG]  [BUGGY]  callNode.hasChildren()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  callNode.hasChildren()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	callNode.hasChildren()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
505	[BUG]  [BUGGY]  callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
506	[BUG]  [BUGGY]  if(!callNode.hasChildren())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.hasChildren())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.hasChildren())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  }	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
507	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  }  else  {  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  }  else  {  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall())  {  return  true;  }  else  {  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  }	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
508	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  false;  }  else  {  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  false;  }  else  {  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall())  {  return  false;  }  else  {  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL);  }	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
509	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME.equals( "Text ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME.equals( "Text ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME.equals( "Text ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "Text   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
510	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME.equals( "Text ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME.equals( "Text ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME.equals( "Text ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "Text   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
511	[BUG]  [BUGGY]  node.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  node.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	node.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(callNode.hasOneChild()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
512	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  if(callNode.getType()    ==    Token.CALL    &&!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
513	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getType()  ==  Token.CALL  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  if(callNode.getType()    ==    Token.CALL    &&!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
514	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getType()  ==  Token.CALL  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  if(callNode.getType()    ==    Token.CALL    &&!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
515	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }	  if(callNode.getType()    ==    Token.CALL    &&!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
516	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    If(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
517	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    If(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
518	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    If(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
519	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    If(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
520	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    If(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
521	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    If(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
522	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
523	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
524	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
525	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall(),  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall(),  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(!callNode.isOnlyModifiesThisCall(),  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
526	[BUG]  [BUGGY]  NameNode.hasChildren()  &&  name.equals( "Property "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NameNode.hasChildren()  &&  name.equals( "Property "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NameNode.hasChildren()  &&  name.equals( "Property "))  {  return  false;  }	  if(name.equals(   "Math       ")||    name.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
527	[BUG]  [BUGGY]  NameNode.hasChildren()  &&  name.equals( "Math ")||  name.equals( "Property "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NameNode.hasChildren()  &&  name.equals( "Math ")||  name.equals( "Property "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NameNode.hasChildren()  &&  name.equals( "Math ")||  name.equals( "Property "))  {  return  false;  }	  if(name.equals(   "Math       ")||    name.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
528	[BUG]  [BUGGY]  NameNode.hasChildren()  &&  name.equals( "Property ")||  name.equals( "Property "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NameNode.hasChildren()  &&  name.equals( "Property ")||  name.equals( "Property "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NameNode.hasChildren()  &&  name.equals( "Property ")||  name.equals( "Property "))  {  return  false;  }	  if(name.equals(   "Math       ")||    name.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
529	[BUG]  [BUGGY]  NameNode.hasChildren()  &&  name.equals( "Math "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NameNode.hasChildren()  &&  name.equals( "Math "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NameNode.hasChildren()  &&  name.equals( "Math "))  {  return  false;  }	  if(name.equals(   "Math       ")||    name.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
530	[BUG]  [BUGGY]  Preconditions.checkState(callNode.hasChildren()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.hasChildren()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.hasChildren()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
531	[BUG]  [BUGGY]  JSC_PROPERTY_NAME_FN.equals( "Property ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  JSC_PROPERTY_NAME_FN.equals( "Property ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	JSC_PROPERTY_NAME_FN.equals( "Property ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }	  if(JSC_PROPERTY_NAME_FN.equals(   "Property   ")||    JSC_PROPERTY_NAME_FN.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
532	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(JSC_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }	  if(JSC_PROPERTY_NAME_FN.equals(   "Property   ")||    JSC_PROPERTY_NAME_FN.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
533	[BUG]  [BUGGY]  result  =  true;  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString());  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  result  =  true;  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	result  =  true;  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString());	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
534	[BUG]  [BUGGY]  case  STRING_REGEXP_METHODS:  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  case  STRING_REGEXP_METHODS:  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	case  STRING_REGEXP_METHODS:  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString());	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
535	[BUG]  [BUGGY]  result.add(OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getLastChild().getString()));  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  result.add(OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getLastChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	result.add(OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getLastChild().getString()));	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
536	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(   "String   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
537	[BUG]  [BUGGY]  parent!=  null  &&!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  null  &&!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  null  &&!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
538	[BUG]  [BUGGY]  parent!=  null  &&!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  null  &&!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  null  &&!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
539	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
540	[BUG]  [BUGGY]  return  false;  Node  param  =  callNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  false;  Node  param  =  callNode.getFirstChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  false;  Node  param  =  callNode.getFirstChild();	  return    true;    Node    param    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
541	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall())  {  return  true;  }	  return    true;    Node    param    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
542	[BUG]  [BUGGY]  return  false;  Node  param  =  nameNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  false;  Node  param  =  nameNode.getFirstChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  false;  Node  param  =  nameNode.getFirstChild();	  return    true;    Node    param    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
543	[BUG]  [BUGGY]  Node  nameNode  =  nameNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  nameNode  =  nameNode.getFirstChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  nameNode  =  nameNode.getFirstChild();	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
544	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getType()  ==  Token.CALL);	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
545	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.NAME);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getType()  ==  Token.NAME);	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
546	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals( "Property  name   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals( "Property  name   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  JSC_PROPERTY_NAME.equals( "Property  name   "))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
547	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals( ".Property "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals( ".Property "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  JSC_PROPERTY_NAME.equals( ".Property "))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
548	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
549	[BUG]  [BUGGY]  if(JS_PROPERTY_NAME_FN.equals( "Object ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(JS_PROPERTY_NAME_FN.equals( "Object ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(JS_PROPERTY_NAME_FN.equals( "Object ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }	  if(JSC_PROPERTY_NAME_FN.equals(   "Math   ")||    JSC_PROPERTY_NAME_FN.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
550	[BUG]  [BUGGY]  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }	  if(JSC_PROPERTY_NAME_FN.equals(   "Math   ")||    JSC_PROPERTY_NAME_FN.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
551	[BUG]  [BUGGY]  |  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  |  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	|  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
552	[BUG]  [BUGGY]  ||  evaluatesToLocalValue(nameNode.getNext()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  evaluatesToLocalValue(nameNode.getNext()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  evaluatesToLocalValue(nameNode.getNext()))  {  return  false;	  ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
553	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals( "String "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals( "String "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  JSC_PROPERTY_NAME.equals( "String "))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
554	[BUG]  [BUGGY]  NameNode.hasChildren()  &&  JSC_PROPERTY_NAME.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NameNode.hasChildren()  &&  JSC_PROPERTY_NAME.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NameNode.hasChildren()  &&  JSC_PROPERTY_NAME.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
555	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Object ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "Math   ")||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
556	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil	  return    JSC_PROPERTY_NAME_FN.equals(   "Math   ")||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
557	[BUG]  [BUGGY]  Preconditions.checkState(callNode.hasChildren()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.hasChildren()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.hasChildren()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
558	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild());	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
559	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(nameNode.getLastChild().getString());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(nameNode.getLastChild().getString());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(nameNode.getLastChild().getString());	          OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
560	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME.equals( "Property   ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME.equals( "Property   ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME.equals( "Property   ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "Property       ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
561	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
562	[BUG]  [BUGGY]  ';'  expected  =  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ';'  expected  =  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	';'  expected  =  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
563	[BUG]  [BUGGY]  ';'  expected  =  true;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ';'  expected  =  true;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	';'  expected  =  true;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
564	[BUG]  [BUGGY]  if(!callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
565	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  REGEXP_METHODS.contains(nameNode.getLastChild().getString())  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  REGEXP_METHODS.contains(nameNode.getLastChild().getString())  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  REGEXP_METHODS.contains(nameNode.getLastChild().getString())	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
566	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString())  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString())  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString())	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
567	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild())  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild())  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild())	  return    JSC_PROPERTY_NAME_FN.equals(   "String   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
568	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "String ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild());	  return    JSC_PROPERTY_NAME_FN.equals(   "String   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
569	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "String ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "String ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "String ")||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "String   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
570	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME.equals( "Property   ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME.equals( "Property   ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME.equals( "Property   ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(   "Property       ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
571	[BUG]  [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall();  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall();  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.isOnlyModifiesThisCall();  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
572	[BUG]  [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall(),  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall(),  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.isOnlyModifiesThisCall(),  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
573	[BUG]  [BUGGY]  luate(nameNode.getFirstChild(),  callNode))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  luate(nameNode.getFirstChild(),  callNode))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	luate(nameNode.getFirstChild(),  callNode))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
574	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatcher(new  MatchNameNode(nameNode.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatcher(new  MatchNameNode(nameNode.getFirstChild()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatcher(new  MatchNameNode(nameNode.getFirstChild()));	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
575	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatcher(new  MatchNameNodeType(nameNode.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatcher(new  MatchNameNodeType(nameNode.getFirstChild()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatcher(new  MatchNameNodeType(nameNode.getFirstChild()));	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
576	[BUG]  [BUGGY]  luate(nameNode.getLastChild(),  callNode))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  luate(nameNode.getLastChild(),  callNode))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	luate(nameNode.getLastChild(),  callNode))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
577	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatcher(new  MatchNodeType(nameNode.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatcher(new  MatchNodeType(nameNode.getLastChild()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatcher(new  MatchNodeType(nameNode.getLastChild()));	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
578	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
579	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingThisCall(callNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingThisCall(callNode);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingThisCall(callNode);	  aughtExceptionHandler.handleMissingCall(callNode);    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
580	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode,  nameNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode,  nameNode);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingCall(callNode,  nameNode);	  aughtExceptionHandler.handleMissingCall(callNode);    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
581	[BUG]  [BUGGY]  result  |=  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  result  |=  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	result  |=  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()))  {  return  false;  }	  return    true;    if(!callNode.isOnlyModifiesThisCall())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
582	[BUG]  [BUGGY]  result  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  result  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	result  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild());	  return    true;    if(!callNode.isOnlyModifiesThisCall())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
583	[BUG]  [BUGGY]  result  |=  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  result  |=  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	result  |=  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()))  {  return  false;	  return    true;    if(!callNode.isOnlyModifiesThisCall())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
584	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  JSC_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	JSC_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "prototype   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
585	[BUG]  [BUGGY]  NameNode.hasProperty( "prototype ")||  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NameNode.hasProperty( "prototype ")||  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NameNode.hasProperty( "prototype ")||  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "prototype   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
586	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild().getString());  return  false;  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild().getString());  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild().getString());  return  false;	          OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());    return    false;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
587	[BUG]  [BUGGY]  parent!=  null  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  null  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  null  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
588	[BUG]  [BUGGY]  parent!=  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.getOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
589	[BUG]  [BUGGY]  parent!=  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.getOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
590	[BUG]  [BUGGY]  parent!=  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.getOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
591	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  junitNode,  new  MatchShallowStatement());  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  junitNode,  new  MatchShallowStatement());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  junitNode,  new  MatchShallowStatement());	  NodeTraversal.traverse(compiler,    callNode,    new    MatchShallowStatement());    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
592	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this.callNode,  new  MatchShallowStatement());  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  this.callNode,  new  MatchShallowStatement());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  this.callNode,  new  MatchShallowStatement());	  NodeTraversal.traverse(compiler,    callNode,    new    MatchShallowStatement());    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
593	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  MatchShallowStatement());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  MatchShallowStatement());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  n,  new  MatchShallowStatement());	  NodeTraversal.traverse(compiler,    callNode,    new    MatchShallowStatement());    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
594	[BUG]  [BUGGY]  if(namespaceName.equals( "Property   ")&&  JSC_PROPERTY_NAME.equals( "Math   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(namespaceName.equals( "Property   ")&&  JSC_PROPERTY_NAME.equals( "Math   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(namespaceName.equals( "Property   ")&&  JSC_PROPERTY_NAME.equals( "Math   "))  {  return  false;  }	  if(namespaceName.equals(   "Property       ")||    JSC_PROPERTY_NAME.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
595	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
596	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
597	[BUG]  [BUGGY]  while(callNode.hasChildren()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  while(callNode.hasChildren()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	while(callNode.hasChildren()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
598	[BUG]  [BUGGY]  while(callNode.hasChildren()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  while(callNode.hasChildren()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	while(callNode.hasChildren()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
599	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild());	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
600	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild(),  orphaned  default  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild(),  orphaned  default  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild(),  orphaned  default	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
601	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.contains(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.contains(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.contains(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
602	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  REGEXP_METHODS.contains(nameNode.getFirstChild(),  orphaned  default  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  REGEXP_METHODS.contains(nameNode.getFirstChild(),  orphaned  default  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  REGEXP_METHODS.contains(nameNode.getFirstChild(),  orphaned  default	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
603	[BUG]  [BUGGY]  Context.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  Context.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
604	[BUG]  [BUGGY]  Context.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  Context.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
605	[BUG]  [BUGGY]  Context.checkState(callNode.getOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.getOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.getOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  Context.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
606	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  }  else  {  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.FUNCTION);  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  }  else  {  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.FUNCTION);  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall())  {  return  true;  }  else  {  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.FUNCTION);  }	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
607	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  false;  }  else  {  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.FUNCTION);  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  false;  }  else  {  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.FUNCTION);  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall())  {  return  false;  }  else  {  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.FUNCTION);  }	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
608	[BUG]  [BUGGY]  Node  param  =  nameNode.getParent();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  param  =  nameNode.getParent();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  param  =  nameNode.getParent();	  Node    param    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
609	[BUG]  [BUGGY]  if(!nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
610	[BUG]  [BUGGY]  if(!param.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!param.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!param.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
611	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Math   ")||    JSC_PROPERTY_NAME.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
612	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "Object   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
613	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
614	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME_WITHOUT_SIDEEFFECTS);	  NodeTraversal.traverse(compiler,    callNode,    this);    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
615	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME_FACTOR);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME_FACTOR);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME_FACTOR);	  NodeTraversal.traverse(compiler,    callNode,    this);    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
616	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME_FIELD_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME_FIELD_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME_FIELD_WITHOUT_SIDEEFFECTS);	  NodeTraversal.traverse(compiler,    callNode,    this);    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
617	[BUG]  [BUGGY]  result  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  result  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	result  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()))  {  return  false;	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
618	[BUG]  [BUGGY]  result  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  result  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	result  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()))  {  return  false;	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
619	[BUG]  [BUGGY]  result  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  result  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	result  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()))  {  return  false;	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
620	[BUG]  [BUGGY]  Context.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
621	[BUG]  [BUGGY]  Context.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
622	[BUG]  [BUGGY]  Context.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
623	[BUG]  [BUGGY]  Context.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
624	[BUG]  [BUGGY]  Context.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  Context.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
625	[BUG]  [BUGGY]  Context.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  Context.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
626	[BUG]  [BUGGY]  Context.checkState(callNode.hasChildren()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.hasChildren()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.hasChildren()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  Context.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
627	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.FUNCTION  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.FUNCTION  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getType()  ==  Token.FUNCTION  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getNextChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
628	[BUG]  [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall(),  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall(),  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.isOnlyModifiesThisCall(),  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getNextChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
629	[BUG]  [BUGGY]  If(namespaceName.equals( "Property   ")||  name.equals( "Math   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  If(namespaceName.equals( "Property   ")||  name.equals( "Math   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	If(namespaceName.equals( "Property   ")||  name.equals( "Math   "))  {  return  false;  }	  If(name.equals(   "Property       ")||    name.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
630	[BUG]  [BUGGY]  AssertionFailedError  callNode  =  callNode.getInitializingCall();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError  callNode  =  callNode.getInitializingCall();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError  callNode  =  callNode.getInitializingCall();	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
631	[BUG]  [BUGGY]  AssertionFailedError  callNode  =  callNode.getAsStatement();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError  callNode  =  callNode.getAsStatement();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError  callNode  =  callNode.getAsStatement();	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
632	[BUG]  [BUGGY]  AssertionFailedError  callNode  =  callNode.getInitializingChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError  callNode  =  callNode.getInitializingChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError  callNode  =  callNode.getInitializingChild();	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
633	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
634	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
635	[BUG]  [BUGGY]  if(!callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
636	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getLastChild()  ==  JSC_PROPERTY_NAME);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getLastChild()  ==  JSC_PROPERTY_NAME);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getLastChild()  ==  JSC_PROPERTY_NAME);	  &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
637	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(nameNode.getFirstChild().getString());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(nameNode.getFirstChild().getString());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(nameNode.getFirstChild().getString());	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getFirstChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
638	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);	  NodeTraversal.traverse(compiler,    callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
639	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  callNode);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  callNode);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  callNode);	  NodeTraversal.traverse(compiler,    callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
640	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  junitNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  junitNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  junitNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);	  NodeTraversal.traverse(compiler,    callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
641	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(callNode.getOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
642	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    If(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
643	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    If(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
644	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    If(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
645	[BUG]  [BUGGY]  Node  callNode  =  evaluateToLocalValue(callNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  evaluateToLocalValue(callNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  evaluateToLocalValue(callNode.getLastChild());	  Node    callNode    =    evaluatesToLocalValue(nameNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
646	[BUG]  [BUGGY]  Node  callNode  =  evaluatesToLocalValue(node.getLastChild());  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  evaluatesToLocalValue(node.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  evaluatesToLocalValue(node.getLastChild());	  Node    callNode    =    evaluatesToLocalValue(nameNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
647	[BUG]  [BUGGY]  If(namespaceName.equals( "Property   ")&&  namespaceName.equals( "Math   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  If(namespaceName.equals( "Property   ")&&  namespaceName.equals( "Math   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	If(namespaceName.equals( "Property   ")&&  namespaceName.equals( "Math   "))  {  return  false;  }	  If(namespaceName.equals(   "Property       ")||    namespaceName.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
648	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild())  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild())  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Object ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild())	  return    JSC_PROPERTY_NAME_FN.equals(   "Object   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
649	[BUG]  [BUGGY]  NamespaceName  namespaceName  =  namespaceName.equals( "Property   ")||  namespaceName.equals( "Property   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NamespaceName  namespaceName  =  namespaceName.equals( "Property   ")||  namespaceName.equals( "Property   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NamespaceName  namespaceName  =  namespaceName.equals( "Property   ")||  namespaceName.equals( "Property   "))  {  return  false;  }	  if(namespaceName.equals(   "Math       ")||    namespaceName.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
650	[BUG]  [BUGGY]  Namespace  namespaceName  =  namespaceName.equals( "Property   ")||  namespaceName.equals( "Property   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Namespace  namespaceName  =  namespaceName.equals( "Property   ")||  namespaceName.equals( "Property   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Namespace  namespaceName  =  namespaceName.equals( "Property   ")||  namespaceName.equals( "Property   "))  {  return  false;  }	  if(namespaceName.equals(   "Math       ")||    namespaceName.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
651	[BUG]  [BUGGY]  NamespaceName  namespaceName  =  namespaceName.equals( "Math   ")&&  namespaceName.equals( "Property   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NamespaceName  namespaceName  =  namespaceName.equals( "Math   ")&&  namespaceName.equals( "Property   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NamespaceName  namespaceName  =  namespaceName.equals( "Math   ")&&  namespaceName.equals( "Property   "))  {  return  false;  }	  if(namespaceName.equals(   "Math       ")||    namespaceName.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
652	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
653	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()));  [CE]  unclosed  character  literal  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));    	non-compiled	[CE]  unclosed  character  literal	20	None	replace
654	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()));  [CE]  unclosed  character  literal  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));    	non-compiled	[CE]  unclosed  character  literal	20	None	replace
655	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getFirstChild()))  {  return  false;  [CE]  unclosed  character  literal  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getFirstChild()))  {  return  false;	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  unclosed  character  literal	105	None	replace
656	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME);  [CE]  unclosed  character  literal  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(nameNode.getType()  ==  Token.NAME);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(nameNode.getType()  ==  Token.NAME);	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  unclosed  character  literal	92	None	replace
657	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.FUNCTION);  [CE]  unclosed  character  literal  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.FUNCTION);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getType()  ==  Token.FUNCTION);	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  unclosed  character  literal	92	None	replace
658	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatches(nameNode,  callNode.getFirstChild());  [CE]  unclosed  character  literal  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatches(nameNode,  callNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatches(nameNode,  callNode.getFirstChild());	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  unclosed  character  literal	92	None	replace
659	[BUG]  [BUGGY]  NamespaceName  namespaceName  =  namespaceName.equals( "Math   ")||  namespaceName.equals( "Name "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NamespaceName  namespaceName  =  namespaceName.equals( "Math   ")||  namespaceName.equals( "Name "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NamespaceName  namespaceName  =  namespaceName.equals( "Math   ")||  namespaceName.equals( "Name "))  {  return  false;  }	  If(namespaceName.equals(   "Math       ")||    namespaceName.equals(   "Name       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
660	[BUG]  [BUGGY]  Context.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  Context.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
661	[BUG]  [BUGGY]  Context.checkState(callNode.hasThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.hasThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.hasThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  Context.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
662	[BUG]  [BUGGY]  namespaceName.equals( "Property   ")||  namespaceName.equals( "Math "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  namespaceName.equals( "Property   ")||  namespaceName.equals( "Math "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	namespaceName.equals( "Property   ")||  namespaceName.equals( "Math "))  {  return  false;  }	  if(namespaceName.equals(   "Property       ")||    namespaceName.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
663	[BUG]  [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall();  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall();  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.isOnlyModifiesThisCall();  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
664	[BUG]  [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall(),  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall(),  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.isOnlyModifiesThisCall(),  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
665	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  REGEXP_METHODS.contains(nameNode.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  REGEXP_METHODS.contains(nameNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  REGEXP_METHODS.contains(nameNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
666	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
667	[BUG]  [BUGGY]  Preconditions.checkState(callNode.hasChildren()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.hasChildren()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.hasChildren()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
668	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  REGEXP_METHODS.contains(nameNode.getLastChild()  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  REGEXP_METHODS.contains(nameNode.getLastChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  REGEXP_METHODS.contains(nameNode.getLastChild()	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
669	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
670	[BUG]  [BUGGY]  Preconditions.checkState(callNode.hasChildren()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.hasChildren()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.hasChildren()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
671	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  REGEXP_METHODS.contains(nameNode.getFirstChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
672	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  REGEXP_METHODS.contains(nameNode.getLastChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
673	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
674	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild(),  nameNode.getLastChil  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild(),  nameNode.getLastChil  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild(),  nameNode.getLastChil	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
675	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild(),  ')'  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild(),  ')'  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild(),  ')'	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
676	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals( "Property   ")&&  JSC_PROPERTY_NAME.equals( "Math   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  JSC_PROPERTY_NAME.equals( "Property   ")&&  JSC_PROPERTY_NAME.equals( "Math   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	JSC_PROPERTY_NAME.equals( "Property   ")&&  JSC_PROPERTY_NAME.equals( "Math   "))  {  return  false;  }	  JSC_PROPERTY_NAME.equals(   "Property       ")||    JSC_PROPERTY_NAME.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
677	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Name "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  JSC_PROPERTY_NAME.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Name "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	JSC_PROPERTY_NAME.equals( "Property   ")||  JSC_PROPERTY_NAME.equals( "Name "))  {  return  false;  }	  JSC_PROPERTY_NAME.equals(   "Property       ")||    JSC_PROPERTY_NAME.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
678	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatches(nameNode,  callNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatches(nameNode,  callNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatches(nameNode,  callNode.getLastChild());	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
679	[BUG]  [BUGGY]  if(name.equals( "Object   ")||  JSC_PROPERTY_NAME.equals( "name   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(name.equals( "Object   ")||  JSC_PROPERTY_NAME.equals( "name   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(name.equals( "Object   ")||  JSC_PROPERTY_NAME.equals( "name   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Object   ")||    JSC_PROPERTY_NAME.equals(   "name   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
680	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
681	[BUG]  [BUGGY]  Node  <  K,  V>  callNode  =  evaluatesToLocalValue(node.getLastChild());  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  <  K,  V>  callNode  =  evaluatesToLocalValue(node.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  <  K,  V>  callNode  =  evaluatesToLocalValue(node.getLastChild());	  Node    <    K,    V>    callNode    =    evaluatesToLocalValue(nameNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
682	[BUG]  [BUGGY]  Node  nameNode  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  nameNode  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  nameNode  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getFirstChild());	  Node    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
683	[BUG]  [BUGGY]  Node  nameNode  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  nameNode  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.getFirstChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  nameNode  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.getFirstChild();	  Node    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
684	[BUG]  [BUGGY]  Node  nameNode  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  nameNode  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  nameNode  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getLastChild());	  Node    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
685	[BUG]  [BUGGY]  Node  nameNode  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(nameNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  nameNode  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(nameNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  nameNode  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(nameNode.getFirstChild());	  Node    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
686	[BUG]  [BUGGY]  if(!callNode.hasChildren())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.THIS);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.hasChildren())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.THIS);  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.hasChildren())  {  return  true;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.THIS);  }	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
687	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  }  else  {  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.THIS);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  }  else  {  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.THIS);  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall())  {  return  true;  }  else  {  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.THIS);  }	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
688	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  false;  }  else  {  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.THIS);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  false;  }  else  {  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.THIS);  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall())  {  return  false;  }  else  {  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.THIS);  }	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
689	[BUG]  [BUGGY]  AssertionFailedError.warning(callNode.getFirstChild(),  callNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.warning(callNode.getFirstChild(),  callNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.warning(callNode.getFirstChild(),  callNode.getLastChild());	  AssertionFailedError.was(callNode.getFirstChild(),    callNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
690	[BUG]  [BUGGY]  AssertionFailedError.was(callNode.getFirstChild(),  nameNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.was(callNode.getFirstChild(),  nameNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.was(callNode.getFirstChild(),  nameNode.getLastChild());	  AssertionFailedError.was(callNode.getFirstChild(),    callNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
691	[BUG]  [BUGGY]  AssertionFailedError.warning(callNode.getFirstChild(),  nameNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.warning(callNode.getFirstChild(),  nameNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.warning(callNode.getFirstChild(),  nameNode.getLastChild());	  AssertionFailedError.was(callNode.getFirstChild(),    callNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
692	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
693	[BUG]  [BUGGY]  while(callNode.hasChildren()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  while(callNode.hasChildren()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	while(callNode.hasChildren()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
694	[BUG]  [BUGGY]  While(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  While(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	While(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
695	[BUG]  [BUGGY]  while(callNode.hasChildren()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  while(callNode.hasChildren()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	while(callNode.hasChildren()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
696	[BUG]  [BUGGY]  if(JS_PROPERTY_NAME.equals( "Object   ")||  JSC_PROPERTY_NAME.equals( "Property   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(JS_PROPERTY_NAME.equals( "Object   ")||  JSC_PROPERTY_NAME.equals( "Property   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(JS_PROPERTY_NAME.equals( "Object   ")||  JSC_PROPERTY_NAME.equals( "Property   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Object   ")||    JSC_PROPERTY_NAME.equals(   "Property   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
697	[BUG]  [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
698	[BUG]  [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
699	[BUG]  [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
700	[BUG]  [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
701	[BUG]  [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()));	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
702	[BUG]  [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
703	[BUG]  [BUGGY]  return  true;  NodeUtil.checkState(parent.getFirstChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  true;  NodeUtil.checkState(parent.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  true;  NodeUtil.checkState(parent.getFirstChild().getType()  ==  Token.NAME);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
704	[BUG]  [BUGGY]  return  false;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  false;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  false;  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.NAME);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
705	[BUG]  [BUGGY]  return  true;  NodeUtil.checkState(parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  true;  NodeUtil.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  true;  NodeUtil.checkState(parent.getType()  ==  Token.NAME);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
706	[BUG]  [BUGGY]  return  true;  NodeUtil.checkState(callNode.getLastChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  true;  NodeUtil.checkState(callNode.getLastChild().getType()  ==  Token.NAME);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  true;  NodeUtil.checkState(callNode.getLastChild().getType()  ==  Token.NAME);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
707	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  NodeTraversal.traverse(compiler,    callNode,    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
708	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  NodeTraversal.traverse(compiler,    callNode,    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
709	[BUG]  [BUGGY]  Namespace  namespaceName  =  namespaceName.equals( "Math ")&&  JSC_PROPERTY_NAME.equals( "Name "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Namespace  namespaceName  =  namespaceName.equals( "Math ")&&  JSC_PROPERTY_NAME.equals( "Name "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Namespace  namespaceName  =  namespaceName.equals( "Math ")&&  JSC_PROPERTY_NAME.equals( "Name "))  {  return  false;  }	  if(namespaceName.equals(   "Math   ")||    JSC_PROPERTY_NAME.equals(   "Name   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
710	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP);  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall())  {  return  true;  NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP);  }	  return    true;    NodeUtil.checkState(callNode.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
711	[BUG]  [BUGGY]  if(!callNode.hasChildren())  {  return  true;  NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.hasChildren())  {  return  true;  NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP);  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.hasChildren())  {  return  true;  NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP);  }	  return    true;    NodeUtil.checkState(callNode.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
712	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  }  else  {  NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  }  else  {  NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP);  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall())  {  return  true;  }  else  {  NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP);  }	  return    true;    NodeUtil.checkState(callNode.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
713	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP);  }  else  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  true;  NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP);  }  else  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall())  {  return  true;  NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP);  }  else  {  return  false;  }	  return    true;    NodeUtil.checkState(callNode.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
714	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatches(nameNode,  callNode.getFirstChild(),  callNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatches(nameNode,  callNode.getFirstChild(),  callNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatches(nameNode,  callNode.getFirstChild(),  callNode.getLastChild());	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
715	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatcher(new  MatchNameNode(nameNode,  callNode.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatcher(new  MatchNameNode(nameNode,  callNode.getFirstChild()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatcher(new  MatchNameNode(nameNode,  callNode.getFirstChild()));	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
716	[BUG]  [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
717	[BUG]  [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
718	[BUG]  [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
719	[BUG]  [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
720	[BUG]  [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()));	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
721	[BUG]  [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.checkState(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
722	[BUG]  [BUGGY]  result  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  result  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	result  =  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString());	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()))    {    return    true;    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
723	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getString()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getString()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getString()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
724	[BUG]  [BUGGY]  safelyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  safelyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	safelyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.hasThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
725	[BUG]  [BUGGY]  parent!=  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.hasThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
726	[BUG]  [BUGGY]  safelyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  safelyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	safelyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.hasThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
727	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "Property "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  JSC_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "Property "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	JSC_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "Property "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "Property   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
728	[BUG]  [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall();  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall();  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.isOnlyModifiesThisCall();  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
729	[BUG]  [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall(),  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall(),  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.isOnlyModifiesThisCall(),  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
730	[BUG]  [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
731	[BUG]  [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()));  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()));	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
732	[BUG]  [BUGGY]  &&  evaluatesToLocalValue(nameNode.getString()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  &&  evaluatesToLocalValue(nameNode.getString()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	&&  evaluatesToLocalValue(nameNode.getString()))  {  return  false;	  &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
733	[BUG]  [BUGGY]  &&  evaluatesToLocalValue(nameNode.getLastChild())||  callNode.isOnlyModifiesThisCall())  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  &&  evaluatesToLocalValue(nameNode.getLastChild())||  callNode.isOnlyModifiesThisCall())  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	&&  evaluatesToLocalValue(nameNode.getLastChild())||  callNode.isOnlyModifiesThisCall())  {  return  false;	  &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
734	[BUG]  [BUGGY]  return  true;  NodeUtil.checkState(parent.getFirstChild().getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  true;  NodeUtil.checkState(parent.getFirstChild().getType()  ==  Token.GETPROP);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  true;  NodeUtil.checkState(parent.getFirstChild().getType()  ==  Token.GETPROP);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
735	[BUG]  [BUGGY]  return  true;  NodeUtil.checkState(node.getFirstChild().getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  true;  NodeUtil.checkState(node.getFirstChild().getType()  ==  Token.GETPROP);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  true;  NodeUtil.checkState(node.getFirstChild().getType()  ==  Token.GETPROP);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
736	[BUG]  [BUGGY]  return  true;  NodeUtil.checkState(parent.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  true;  NodeUtil.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  true;  NodeUtil.checkState(parent.getType()  ==  Token.GETPROP);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
737	[BUG]  [BUGGY]  AssertionFailedError.show(nameNode,  callNode.getFirstChild(),  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.show(nameNode,  callNode.getFirstChild(),  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.show(nameNode,  callNode.getFirstChild(),  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.getOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
738	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatcher(new  MatchNameNode(nameNode.getFirstChild(),  callNode.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatcher(new  MatchNameNode(nameNode.getFirstChild(),  callNode.getLastChild()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatcher(new  MatchNameNode(nameNode.getFirstChild(),  callNode.getLastChild()));	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.getOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
739	[BUG]  [BUGGY]  Context.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(nameNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  Context.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
740	[BUG]  [BUGGY]  Context.checkState(callNode.hasChildren()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.hasChildren()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.hasChildren()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  Context.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
741	[BUG]  [BUGGY]  Context.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  Context.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
742	[BUG]  [BUGGY]  Preconditions.checkState(callNode.hasChildren()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.hasChildren()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.hasChildren()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
743	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
744	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild(),  nameNode.get  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild(),  nameNode.get  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild(),  nameNode.get	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
745	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild(),  nameNode.getLastCh  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild(),  nameNode.getLastCh  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild(),  nameNode.getLastCh	  return    JSC_PROPERTY_NAME_FN.equals(nameNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
746	[BUG]  [BUGGY]  AssertionFailedError  callNode  =  callNode.getInitialValue();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError  callNode  =  callNode.getInitialValue();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError  callNode  =  callNode.getInitialValue();	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
747	[BUG]  [BUGGY]  node.setOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  node.setOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	node.setOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.getOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
748	[BUG]  [BUGGY]  return  false;  NodeUtil.copyCall(callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  false;  NodeUtil.copyCall(callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  false;  NodeUtil.copyCall(callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);	  return    true;    NodeUtil.copyCall(callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
749	[BUG]  [BUGGY]  default:  NodeUtil.copyCall(callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  default:  NodeUtil.copyCall(callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	default:  NodeUtil.copyCall(callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);	  return    true;    NodeUtil.copyCall(callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
750	[BUG]  [BUGGY]  result  =  NodeUtil.copyCall(callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  result  =  NodeUtil.copyCall(callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	result  =  NodeUtil.copyCall(callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);	  return    true;    NodeUtil.copyCall(callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
751	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  NodeTraversal.traverse(compiler,    callNode,    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
752	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  nameNode,  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  NodeTraversal.traverse(compiler,    callNode,    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
753	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchResult());  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchResult());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  new  MatchResult());	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
754	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchDeclaration());  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchDeclaration());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  new  MatchDeclaration());	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
755	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  false);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  false);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  false);	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
756	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchNotFunction());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchNotFunction());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  new  MatchNotFunction());	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
757	[BUG]  [BUGGY]  Node  callNode  =  parent.getFirstChild();  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  parent.getFirstChild();  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  parent.getFirstChild();  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  Node    callNode    =    callNode.getFirstChild();    if(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
758	[BUG]  [BUGGY]  if(JSSC_PROPERTY_NAME.equals( "Object   ")||  JSC_PROPERTY_NAME.equals( "Math "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(JSSC_PROPERTY_NAME.equals( "Object   ")||  JSC_PROPERTY_NAME.equals( "Math "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(JSSC_PROPERTY_NAME.equals( "Object   ")||  JSC_PROPERTY_NAME.equals( "Math "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Object   ")||    JSC_PROPERTY_NAME.equals(   "Math   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
759	[BUG]  [BUGGY]  if(namespaceName.equals( ".Property ")||  JSC_PROPERTY_NAME.equals( "Math "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(namespaceName.equals( ".Property ")||  JSC_PROPERTY_NAME.equals( "Math "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(namespaceName.equals( ".Property ")||  JSC_PROPERTY_NAME.equals( "Math "))  {  return  false;  }	  if(namespaceName.equals(   "Property       ")||    JSC_PROPERTY_NAME.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
760	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
761	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
762	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
763	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
764	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingCall();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingCall();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingCall();	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
765	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall())  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall())  {  return  false;  }	  return    true;    Node    param    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
766	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
767	[BUG]  [BUGGY]  if(!callNode.hasOneChild()  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.hasOneChild()  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.hasOneChild()  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()))    {    return    true;    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
768	[BUG]  [BUGGY]  AssertionFailedError  call  =  callNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError  call  =  callNode.getFirstChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError  call  =  callNode.getFirstChild();	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
769	[BUG]  [BUGGY]  AssertionFailedError  callNode  =  callNode.getAncestor(2);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError  callNode  =  callNode.getAncestor(2);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError  callNode  =  callNode.getAncestor(2);	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
770	[BUG]  [BUGGY]  If(name.equals( "Property ")&&  name.equals( "Math "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  If(name.equals( "Property ")&&  name.equals( "Math "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	If(name.equals( "Property ")&&  name.equals( "Math "))  {  return  false;  }	  If(name.equals(   "Property       ")||    name.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
771	[BUG]  [BUGGY]  If(JSC_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "Property "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  If(JSC_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "Property "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	If(JSC_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "Property "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "Property   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
772	[BUG]  [BUGGY]  Name.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "Property "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Name.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "Property "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Name.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "Property "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "Property   "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
773	[BUG]  [BUGGY]  if(name.equals( "Object ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(name.equals( "Object ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(name.equals( "Object ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }	  if(JSC_PROPERTY_NAME_FN.equals(   "Math   ")||    JSC_PROPERTY_NAME_FN.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
774	[BUG]  [BUGGY]  if(name.equals( "Math ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(name.equals( "Math ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(name.equals( "Math ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }	  if(JSC_PROPERTY_NAME_FN.equals(   "Math   ")||    JSC_PROPERTY_NAME_FN.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
775	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME_FN.equals( "Math ")||  JSC_PROPERTY_NAME_FN.equals( "Object))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(JSC_PROPERTY_NAME_FN.equals( "Math ")||  JSC_PROPERTY_NAME_FN.equals( "Object))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(JSC_PROPERTY_NAME_FN.equals( "Math ")||  JSC_PROPERTY_NAME_FN.equals( "Object))  {  return  false;  }	  if(JSC_PROPERTY_NAME_FN.equals(   "Math   ")||    JSC_PROPERTY_NAME_FN.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
776	[BUG]  [BUGGY]  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  true;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  true;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  true;	  ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
777	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  REGEXP_METHODS);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  REGEXP_METHODS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  REGEXP_METHODS);	  NodeTraversal.traverse(compiler,    callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
778	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS);	  NodeTraversal.traverse(compiler,    callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
779	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  REGEXP_METHODS);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  REGEXP_METHODS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  REGEXP_METHODS);	  NodeTraversal.traverse(compiler,    callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
780	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  CONSTRUCTORS_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  CONSTRUCTORS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  CONSTRUCTORS_WITHOUT_SIDEEFFECTS);	  NodeTraversal.traverse(compiler,    callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
781	[BUG]  [BUGGY]  Node  callNode  =  nameNode.getFirstChild();  if(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  nameNode.getFirstChild();  if(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  nameNode.getFirstChild();  if(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  if(callNode.hasOneChild()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
782	[BUG]  [BUGGY]  Node  param  =  nameNode.getFirstChild();  if(param.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  param  =  nameNode.getFirstChild();  if(param.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  param  =  nameNode.getFirstChild();  if(param.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(callNode.hasOneChild()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
783	[BUG]  [BUGGY]  Node  param  =  callNode.getFirstChild();  if(param.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  param  =  callNode.getFirstChild();  if(param.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  param  =  callNode.getFirstChild();  if(param.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(callNode.hasOneChild()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
784	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild())  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild())  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Object ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild())	  return    JSC_PROPERTY_NAME_FN.equals(   "Object   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
785	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals( "Object ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals( "Object ")&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild());	  return    JSC_PROPERTY_NAME_FN.equals(   "Object   ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
786	[BUG]  [BUGGY]  parent  ==  null  &&  namespaceName.equals( "Property ")||  namespaceName.equals( "Math "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  namespaceName.equals( "Property ")||  namespaceName.equals( "Math "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  namespaceName.equals( "Property ")||  namespaceName.equals( "Math "))  {  return  false;  }	  if(namespaceName.equals(   "Property       ")||    namespaceName.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
787	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  valuesToLocalValue(callNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  valuesToLocalValue(callNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  valuesToLocalValue(callNode.getFirstChild()))  {  return  false;	  NodeTraversal.traverse(compiler,    callNode,    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
788	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(callNode.hasThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
789	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(callNode.hasThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
790	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(callNode.hasThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
791	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(callNode.hasThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
792	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent.replaceChild(callNode,  new  Node(Token.EMPTY));	  if(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
793	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.CALL));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.CALL));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent.replaceChild(callNode,  new  Node(Token.CALL));	  if(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
794	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.FUNCTION));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.FUNCTION));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent.replaceChild(callNode,  new  Node(Token.FUNCTION));	  if(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
795	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.CALL  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(callNode.getType()  ==  Token.CALL  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(callNode.getType()  ==  Token.CALL  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  if(callNode.getType()    ==    Token.CALL    &&!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
796	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }	  if(callNode.getType()    ==    Token.CALL    &&!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
797	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(callNode.getType()  ==  Token.CALL  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(callNode.getType()  ==  Token.CALL  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }	  if(callNode.getType()    ==    Token.CALL    &&!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
798	[BUG]  [BUGGY]  parent  ==  null  ||  name.equals( "Property ")||  name.equals( "Math "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  ||  name.equals( "Property ")||  name.equals( "Math "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  ||  name.equals( "Property ")||  name.equals( "Math "))  {  return  false;  }	  if(name.equals(   "Property       ")||    name.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
799	[BUG]  [BUGGY]  if(name.equals( "Property ")||  name.equals( "Object "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(name.equals( "Property ")||  name.equals( "Object "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(name.equals( "Property ")||  name.equals( "Object "))  {  return  false;  }	  if(name.equals(   "Property       ")||    name.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
800	[BUG]  [BUGGY]  if(name.equals( "Property ")||  name.equals( "Name "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(name.equals( "Property ")||  name.equals( "Name "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(name.equals( "Property ")||  name.equals( "Name "))  {  return  false;  }	  if(name.equals(   "Property       ")||    name.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
801	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(nameNode.getString(),  callNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingName(nameNode.getString(),  callNode);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingName(nameNode.getString(),  callNode);	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getString()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
802	[BUG]  [BUGGY]  Preconditions.checkArgument(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkArgument(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkArgument(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
803	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatcher(new  ExternObjSEThis());  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatcher(new  ExternObjSEThis());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatcher(new  ExternObjSEThis());	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
804	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild().getString()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild().getString()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild().getString()))  {  return  false;	          OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
805	[BUG]  [BUGGY]  Node  callNode  =  this.callNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  this.callNode.getFirstChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  this.callNode.getFirstChild();	  Node    callNode    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
806	[BUG]  [BUGGY]  Node  callNode  =  nameNode.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  nameNode.removeFirstChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  nameNode.removeFirstChild();	  Node    callNode    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
807	[BUG]  [BUGGY]  Node  <  K,  V>  callNode  =  evaluatesToLocalValue(callNode.getString());  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  <  K,  V>  callNode  =  evaluatesToLocalValue(callNode.getString());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  <  K,  V>  callNode  =  evaluatesToLocalValue(callNode.getString());	  Node    <    K,    V>    callNode    =    evaluatesToLocalValue(nameNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
808	[BUG]  [BUGGY]  Node  <  K,  V>  callNode  =  evaluateToLocalValue(callNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  <  K,  V>  callNode  =  evaluateToLocalValue(callNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  <  K,  V>  callNode  =  evaluateToLocalValue(callNode.getFirstChild());	  Node    <    K,    V>    callNode    =    evaluatesToLocalValue(nameNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
809	[BUG]  [BUGGY]  Node  <  K,  V>  callNode  =  evaluatesToLocalValue(callNode.getChildCount());  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  <  K,  V>  callNode  =  evaluatesToLocalValue(callNode.getChildCount());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  <  K,  V>  callNode  =  evaluatesToLocalValue(callNode.getChildCount());	  Node    <    K,    V>    callNode    =    evaluatesToLocalValue(nameNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
810	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals( "Text "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals( "Text "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  JSC_PROPERTY_NAME.equals( "Text "))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(   "Math       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
811	[BUG]  [BUGGY]  parent.addChildToFront(callNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent.addChildToFront(callNode);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent.addChildToFront(callNode);	  if(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
812	[BUG]  [BUGGY]  parent  ==  null  ||!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  ||!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  ||!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    If(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
813	[BUG]  [BUGGY]  parent  ==  null  ||!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  ||!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  ||!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    If(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
814	[BUG]  [BUGGY]  parent  ==  null  ||!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  ||!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  ||!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    If(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
815	[BUG]  [BUGGY]  parent  ==  null  ||!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  ||!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  ||!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    If(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
816	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    If(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
817	[BUG]  [BUGGY]  ALL_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ALL_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	ALL_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "prototype   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
818	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals( "Property ")&&  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals( "Property ")&&  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(JSC_PROPERTY_NAME.equals( "Property ")&&  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "prototype   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
819	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "property "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "property "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(JSC_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "property "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "prototype   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
820	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatcher(nameNode,  callNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatcher(nameNode,  callNode);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatcher(nameNode,  callNode);	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    If(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
821	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatches(nameNode,  callNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatches(nameNode,  callNode);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatches(nameNode,  callNode);	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    If(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
822	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingCall(nameNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingCall(nameNode);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingCall(nameNode);	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    If(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
823	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(nameNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingClass(nameNode);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingClass(nameNode);	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    If(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
824	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild())  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild())  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild())	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
825	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(node.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(node.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(node.getFirstChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
826	[BUG]  [BUGGY]  if(!isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
827	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }	          OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
828	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
829	[BUG]  [BUGGY]  if(namespaceName.equals( ".Math ")||  namespaceName.equals( "Name   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(namespaceName.equals( ".Math ")||  namespaceName.equals( "Name   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(namespaceName.equals( ".Math ")||  namespaceName.equals( "Name   "))  {  return  false;  }	  if(name.equals(   "Math       ")||    name.equals(   "Name       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
830	[BUG]  [BUGGY]  if(name.equals( "Property ")||  name.equals( "Property "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(name.equals( "Property ")||  name.equals( "Property "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(name.equals( "Property ")||  name.equals( "Property "))  {  return  false;  }	  if(name.equals(   "Math       ")||    name.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
831	[BUG]  [BUGGY]  if(namespaceName.equals( "Math ")||  name.equals( "Property "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(namespaceName.equals( "Math ")||  name.equals( "Property "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(namespaceName.equals( "Math ")||  name.equals( "Property "))  {  return  false;  }	  if(name.equals(   "Math       ")||    name.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
832	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingName(callNode);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingName(callNode);	  if(name.equals(   "Math       ")||    name.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
833	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.getOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
834	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.getOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
835	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.getOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
836	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    if(callNode.getOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
837	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode,  JSC_PROPERTY_NAME_FACTOR);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode,  JSC_PROPERTY_NAME_FACTOR);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingCall(callNode,  JSC_PROPERTY_NAME_FACTOR);	  aughtExceptionHandler.handleMissingCall(callNode);    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
838	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
839	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
840	[BUG]  [BUGGY]  Node  orphaned  =  callNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  orphaned  =  callNode.getFirstChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  orphaned  =  callNode.getFirstChild();	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
841	[BUG]  [BUGGY]  return  false;  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString());  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  false;  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  false;  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild().getString());	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
842	[BUG]  [BUGGY]  return  true;  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  true;  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  true;  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString());	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
843	[BUG]  [BUGGY]  return  false;  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  false;  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  false;  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
844	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  false);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  false);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  false);	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
845	[BUG]  [BUGGY]  NodeUtil.checkState(nameNode.getFirstChild().getType()  ==  Token.THIS);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeUtil.checkState(nameNode.getFirstChild().getType()  ==  Token.THIS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeUtil.checkState(nameNode.getFirstChild().getType()  ==  Token.THIS);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
846	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME_FN.equals(nameNode.getString()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(JSC_PROPERTY_NAME_FN.equals(nameNode.getString()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(JSC_PROPERTY_NAME_FN.equals(nameNode.getString()))  {  return  false;  }	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
847	[BUG]  [BUGGY]  if(!callNode.hasChildren())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.hasChildren())  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.hasChildren())  {  return  false;  }	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
848	[BUG]  [BUGGY]  if(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(callNode.hasOneChild()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
849	[BUG]  [BUGGY]  if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(node.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(node.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(node.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.getOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
850	[BUG]  [BUGGY]  Node  callNode  =  evaluatesToLocalValue(callNode.getString());  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  evaluatesToLocalValue(callNode.getString());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  evaluatesToLocalValue(callNode.getString());	  Node    callNode    =    evaluatesToLocalValue(nameNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
851	[BUG]  [BUGGY]  Node  callNode  =  evaluateToLocalValue(callNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  evaluateToLocalValue(callNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  evaluateToLocalValue(callNode.getFirstChild());	  Node    callNode    =    evaluatesToLocalValue(nameNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
852	[BUG]  [BUGGY]  Node  callNode  =  evaluatesToLocalValue(callNode.getNext());  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  callNode  =  evaluatesToLocalValue(callNode.getNext());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  callNode  =  evaluatesToLocalValue(callNode.getNext());	  Node    callNode    =    evaluatesToLocalValue(nameNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
853	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
854	[BUG]  [BUGGY]  Node  param  =  callNode.getFirstChild();  Preconditions.checkState(param.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  param  =  callNode.getFirstChild();  Preconditions.checkState(param.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  param  =  callNode.getFirstChild();  Preconditions.checkState(param.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
855	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals( "Object   ")||  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals( "Object   ")||  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(JSC_PROPERTY_NAME.equals( "Object   ")||  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Object   ")||    JSC_PROPERTY_NAME.equals(   "name   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
856	[BUG]  [BUGGY]  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild())||  callNode.hasOneChild())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild())||  callNode.hasOneChild())  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild())||  callNode.hasOneChild())  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
857	[BUG]  [BUGGY]  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild())||  callNode.hasChildren())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild())||  callNode.hasChildren())  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild())||  callNode.hasChildren())  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
858	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  validatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  validatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  validatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  NodeTraversal.traverse(compiler,    callNode,    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
859	[BUG]  [BUGGY]  Node  nameNode  =  callNode.cloneTree();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  nameNode  =  callNode.cloneTree();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  nameNode  =  callNode.cloneTree();	  Node    nameNode    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
860	[BUG]  [BUGGY]  while(callNode.hasNext()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  while(callNode.hasNext()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	while(callNode.hasNext()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
861	[BUG]  [BUGGY]  while(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  while(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	while(callNode.hasOneChild()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
862	[BUG]  [BUGGY]  while(callNode.hasNext()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  while(callNode.hasNext()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	while(callNode.hasNext()  &&  evaluatesToLocalValue(callNode.getFirstChild()))  {	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
863	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  READ_REGEXP_METHODS);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  READ_REGEXP_METHODS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  READ_REGEXP_METHODS);	  NodeTraversal.traverse(compiler,    callNode,    new    MatchShallowStatement());    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
864	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  this);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  this);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  this);	  NodeTraversal.traverse(compiler,    callNode,    new    MatchShallowStatement());    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
865	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  MISSING_REGEXP_METHODS);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  MISSING_REGEXP_METHODS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  MISSING_REGEXP_METHODS);	  NodeTraversal.traverse(compiler,    callNode,    new    MatchShallowStatement());    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
866	[BUG]  [BUGGY]  while(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  while(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	while(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
867	[BUG]  [BUGGY]  while(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  while(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	while(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
868	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
869	[BUG]  [BUGGY]  Preconditions.checkArgument(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkArgument(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkArgument(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
870	[BUG]  [BUGGY]  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL  ||  callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL  ||  callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL  ||  callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
871	[BUG]  [BUGGY]  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL  ||  callNode.getFirstChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL  ||  callNode.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeUtil.checkState(callNode.getFirstChild().getType()  ==  Token.CALL  ||  callNode.getFirstChild().getType()  ==  Token.NAME);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
872	[BUG]  [BUGGY]  NodeUtil.checkState(callNode.getFirstChild().getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeUtil.checkState(callNode.getFirstChild().getType()!=  Token.FUNCTION);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeUtil.checkState(callNode.getFirstChild().getType()!=  Token.FUNCTION);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
873	[BUG]  [BUGGY]  if(!callNode.hasChildren())  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.hasChildren())  {  return  true;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.hasChildren())  {  return  true;  }	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
874	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME_FN.equals( "Property ")&&  JSC_PROPERTY_NAME_FN.equals( "Object   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(JSC_PROPERTY_NAME_FN.equals( "Property ")&&  JSC_PROPERTY_NAME_FN.equals( "Object   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(JSC_PROPERTY_NAME_FN.equals( "Property ")&&  JSC_PROPERTY_NAME_FN.equals( "Object   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME_FN.equals(   "Property   ")||    JSC_PROPERTY_NAME_FN.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
875	[BUG]  [BUGGY]  ALL_PROPERTY_NAME_FN.equals( "Property ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ALL_PROPERTY_NAME_FN.equals( "Property ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	ALL_PROPERTY_NAME_FN.equals( "Property ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }	  if(JSC_PROPERTY_NAME_FN.equals(   "Property   ")||    JSC_PROPERTY_NAME_FN.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
876	[BUG]  [BUGGY]  if(JS_PROPERTY_NAME_FN.equals( "Property ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(JS_PROPERTY_NAME_FN.equals( "Property ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(JS_PROPERTY_NAME_FN.equals( "Property ")||  JSC_PROPERTY_NAME_FN.equals( "Object "))  {  return  false;  }	  if(JSC_PROPERTY_NAME_FN.equals(   "Property   ")||    JSC_PROPERTY_NAME_FN.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
877	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME_FN.equals( "Property ")||  JSC_PROPERTY_NAME_FN.equals( "Object))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(JSC_PROPERTY_NAME_FN.equals( "Property ")||  JSC_PROPERTY_NAME_FN.equals( "Object))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(JSC_PROPERTY_NAME_FN.equals( "Property ")||  JSC_PROPERTY_NAME_FN.equals( "Object))  {  return  false;  }	  if(JSC_PROPERTY_NAME_FN.equals(   "Property   ")||    JSC_PROPERTY_NAME_FN.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
878	[BUG]  [BUGGY]  lastChild  =  nameNode.getLastChild();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  lastChild  =  nameNode.getLastChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	lastChild  =  nameNode.getLastChild();	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
879	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatches(nameNode,  callNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatches(nameNode,  callNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatches(nameNode,  callNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.hasThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
880	[BUG]  [BUGGY]  ||  evaluatesToLocalValue(nameNode.getChildCount()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ||  evaluatesToLocalValue(nameNode.getChildCount()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	||  evaluatesToLocalValue(nameNode.getChildCount()))  {  return  false;	  ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
881	[BUG]  [BUGGY]  Context.checkState(callNode.hasThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Context.checkState(callNode.hasThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Context.checkState(callNode.hasThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  Context.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
882	[BUG]  [BUGGY]  NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP,  callNode);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP,  callNode);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeUtil.checkState(callNode.getType()  ==  Token.GETPROP,  callNode);	  return    true;    NodeUtil.checkState(callNode.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
883	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME_FN.equals( "Math "))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(JSC_PROPERTY_NAME_FN.equals( "Math "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(JSC_PROPERTY_NAME_FN.equals( "Math "))  {  return  false;  }	  return    true;    NodeUtil.checkState(callNode.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
884	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME_FN.equals( "Property "))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(JSC_PROPERTY_NAME_FN.equals( "Property "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(JSC_PROPERTY_NAME_FN.equals( "Property "))  {  return  false;  }	  return    true;    NodeUtil.checkState(callNode.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
885	[BUG]  [BUGGY]  parent!=  else  if(callNode.getType()  ==  Token.CALL)  {  if(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  else  if(callNode.getType()  ==  Token.CALL)  {  if(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  else  if(callNode.getType()  ==  Token.CALL)  {  if(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
886	[BUG]  [BUGGY]  parent!=  else  if(callNode.getType()  ==  Token.NAME)  {  if(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  else  if(callNode.getType()  ==  Token.NAME)  {  if(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  else  if(callNode.getType()  ==  Token.NAME)  {  if(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
887	[BUG]  [BUGGY]  parent!=  else  if(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  else  if(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  else  if(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
888	[BUG]  [BUGGY]  parent!=  else  if(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  else  if(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  else  if(callNode.getType()  ==  Token.CALL  &&!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
889	[BUG]  [BUGGY]  parent  ==  null  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
890	[BUG]  [BUGGY]  parent!=  else  if(callNode.getType()  ==  Token.NAME)  {  if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  else  if(callNode.getType()  ==  Token.NAME)  {  if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  else  if(callNode.getType()  ==  Token.NAME)  {  if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
891	[BUG]  [BUGGY]  parent  ==  null  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
892	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatches(callNode,  callNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatches(callNode,  callNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatches(callNode,  callNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    If(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
893	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatches(callNode,  callNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatches(callNode,  callNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatches(callNode,  callNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    If(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
894	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatches(callNode,  callNode.getFirstChild(),  callNode.getLastChild());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatches(callNode,  callNode.getFirstChild(),  callNode.getLastChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatches(callNode,  callNode.getFirstChild(),  callNode.getLastChild());	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    If(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
895	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.getFirstChild().getType()  ==  Token.CALL)  {  return  false;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.getFirstChild().getType()  ==  Token.CALL)  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.getFirstChild().getType()  ==  Token.CALL)  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    If(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
896	[BUG]  [BUGGY]  If(name.equals( "Math ")||  namespaceName.equals( "Property "))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  If(name.equals( "Math ")||  namespaceName.equals( "Property "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	If(name.equals( "Math ")||  namespaceName.equals( "Property "))  {  return  false;  }	  If(name.equals(   "Math       ")||    name.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
897	[BUG]  [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(nameNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getFirstChild()))  {  return  false;  }	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
898	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals( "Property ")&&  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals( "Property ")&&  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(JSC_PROPERTY_NAME.equals( "Property ")&&  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
899	[BUG]  [BUGGY]  ALL_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "Object "))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ALL_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "Object "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	ALL_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "Object "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
900	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getFirstChild()  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
901	[BUG]  [BUGGY]  return  true;  NodeUtil.checkState(this.callNode.getFirstChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  true;  NodeUtil.checkState(this.callNode.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  true;  NodeUtil.checkState(this.callNode.getFirstChild().getType()  ==  Token.NAME);	  return    true;    NodeUtil.checkState(callNode.getFirstChild().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
902	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getFirstChild().getString()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getFirstChild().getString()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(namespaceName)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getFirstChild().getString()));	  return    JSC_PROPERTY_NAME_FN.equals(namespaceName)&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild().getString()));    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
903	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getLastChild().getString().equals( "Math "))  {  return  false;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getLastChild().getString().equals( "Math "))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getLastChild().getString().equals( "Math "))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
904	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getLastChild().getString().equals( "Math "))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getLastChild().getString().equals( "Math "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getLastChild().getString().equals( "Math "))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
905	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getLastChild().getString().equals( " "))  {  return  false;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getLastChild().getString().equals( " "))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getLastChild().getString().equals( " "))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
906	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getLastChild().getString().equals( "Object "))  {  return  false;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getLastChild().getString().equals( "Object "))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getLastChild().getString().equals( "Object "))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
907	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getLastChild().getType()  ==  Token.FUNCTION)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getLastChild().getType()  ==  Token.FUNCTION)  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getLastChild().getType()  ==  Token.FUNCTION)  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
908	[BUG]  [BUGGY]  parent!=  else  if(callNode.getType()  ==  Token.CALL)  {  if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  else  if(callNode.getType()  ==  Token.CALL)  {  if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  else  if(callNode.getType()  ==  Token.CALL)  {  if(!callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
909	[BUG]  [BUGGY]  parent!=  else  if(callNode.getType()  ==  Token.CALL)  {  if(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  else  if(callNode.getType()  ==  Token.CALL)  {  if(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  else  if(callNode.getType()  ==  Token.CALL)  {  if(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
910	[BUG]  [BUGGY]  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	&&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
911	[BUG]  [BUGGY]  parent  ==  null  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
912	[BUG]  [BUGGY]  parent  ==  null  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  ||  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
913	[BUG]  [BUGGY]  parent  ==  null  ||  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  ||  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  ||  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
914	[BUG]  [BUGGY]  parent  ==  null  ||  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  ||  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  ||  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.hasThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
915	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callNode,  JSC_PROPERTY_NAME_FN,  namespaceName);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingName(callNode,  JSC_PROPERTY_NAME_FN,  namespaceName);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingName(callNode,  JSC_PROPERTY_NAME_FN,  namespaceName);	  if(namespaceName.equals(   "Math       ")||    namespaceName.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
916	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingChild(callNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingChild(callNode);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingChild(callNode);	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
917	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.hasChildren();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.hasChildren();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.hasChildren();	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
918	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingReturnValue(callNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingReturnValue(callNode);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingReturnValue(callNode);	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
919	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode,  false);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode,  false);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingCall(callNode,  false);	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
920	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode,  callNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMissingCall(callNode,  callNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMissingCall(callNode,  callNode.getFirstChild());	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
921	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "Property       ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
922	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "Property       ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
923	[BUG]  [BUGGY]  Preconditions.checkState(callNode.hasOneChild()  ||  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.hasOneChild()  ||  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.hasOneChild()  ||  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
924	[BUG]  [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.getType()  ==  Token.CALL  &&  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
925	[BUG]  [BUGGY]  Node  param  =  callNode.getFirstChild();  Preconditions.checkState(param.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  param  =  callNode.getFirstChild();  Preconditions.checkState(param.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  param  =  callNode.getFirstChild();  Preconditions.checkState(param.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(callNode.getLastChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
926	[BUG]  [BUGGY]  AssertionFailedError  callee  =  callNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError  callee  =  callNode.getFirstChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError  callee  =  callNode.getFirstChild();	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
927	[BUG]  [BUGGY]  AssertionFailedError  callNode  =  callNode.getAncestor(1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError  callNode  =  callNode.getAncestor(1);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError  callNode  =  callNode.getAncestor(1);	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
928	[BUG]  [BUGGY]  if(name.equals( "Math ")||  JSC_PROPERTY_NAME.equals( "name "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(name.equals( "Math ")||  JSC_PROPERTY_NAME.equals( "name "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(name.equals( "Math ")||  JSC_PROPERTY_NAME.equals( "name "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Math   ")||    JSC_PROPERTY_NAME.equals(   "name   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
929	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals( "Math ")||  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals( "Math ")||  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(JSC_PROPERTY_NAME.equals( "Math ")||  JSC_PROPERTY_NAME.equals( "prototype "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Math   ")||    JSC_PROPERTY_NAME.equals(   "name   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
930	[BUG]  [BUGGY]  if(callNode.hasOneChild())  {  if(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(callNode.hasOneChild())  {  if(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(callNode.hasOneChild())  {  if(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
931	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.NAME)  {  if(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(callNode.getType()  ==  Token.NAME)  {  if(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(callNode.getType()  ==  Token.NAME)  {  if(!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
932	[BUG]  [BUGGY]  NodeUtil.copyCall(callNode,  JSC_PROPERTY_NAME_WITHOUT_SIDEEFFECTS);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeUtil.copyCall(callNode,  JSC_PROPERTY_NAME_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeUtil.copyCall(callNode,  JSC_PROPERTY_NAME_WITHOUT_SIDEEFFECTS);	  return    true;    NodeUtil.copyCall(callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
933	[BUG]  [BUGGY]  NodeUtil.copyCall(callNode,  REGEXP_METHODS);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeUtil.copyCall(callNode,  REGEXP_METHODS);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeUtil.copyCall(callNode,  REGEXP_METHODS);	  return    true;    NodeUtil.copyCall(callNode,    OBJECT_METHODS_WITHOUT_SIDEEFFECTS);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
934	[BUG]  [BUGGY]  ALL_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "Property "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ALL_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "Property "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	ALL_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "Property "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "Property   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
935	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals( "Property ")&&  JSC_PROPERTY_NAME.equals( "Property "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals( "Property ")&&  JSC_PROPERTY_NAME.equals( "Property "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(JSC_PROPERTY_NAME.equals( "Property ")&&  JSC_PROPERTY_NAME.equals( "Property "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "Property   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
936	[BUG]  [BUGGY]  if(jsProperty.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "Property "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(jsProperty.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "Property "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(jsProperty.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "Property "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "Property   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
937	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "PropertyName "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "PropertyName "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(JSC_PROPERTY_NAME.equals( "Property ")||  JSC_PROPERTY_NAME.equals( "PropertyName "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Property   ")||    JSC_PROPERTY_NAME.equals(   "Property   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
938	[BUG]  [BUGGY]  parent  ==  null  ||!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  ||!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  ||!callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
939	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatches(nameNode,  callNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatches(nameNode,  callNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatches(nameNode,  callNode.getFirstChild(),  callNode.getLastChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(callNode.getOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
940	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.equals(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	return  JSC_PROPERTY_NAME_FN.equals(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()	  return    JSC_PROPERTY_NAME_FN.equals(   "Property       ")&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
941	[BUG]  [BUGGY]  AssertionFailedError.was(callNode.getFirstChild(),  callNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.was(callNode.getFirstChild(),  callNode.getFirstChild());  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.was(callNode.getFirstChild(),  callNode.getFirstChild());	  AssertionFailedError.was(callNode.getFirstChild(),    callNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
942	[BUG]  [BUGGY]  AssertionFailedError.was(callNode.getFirstChild(),  callNode.getLastChild(),  JSC_PROPERTY_NAME_FN);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError.was(callNode.getFirstChild(),  callNode.getLastChild(),  JSC_PROPERTY_NAME_FN);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError.was(callNode.getFirstChild(),  callNode.getLastChild(),  JSC_PROPERTY_NAME_FN);	  AssertionFailedError.was(callNode.getFirstChild(),    callNode.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
943	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatcher(new  MatchNodeType(Token.NAME,  nameNode.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  aughtExceptionHandler.handleMatcher(new  MatchNodeType(Token.NAME,  nameNode.getFirstChild()));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	aughtExceptionHandler.handleMatcher(new  MatchNodeType(Token.NAME,  nameNode.getFirstChild()));	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    If(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
944	[BUG]  [BUGGY]  If(name.equals( "Math ")||  JSC_PROPERTY_NAME.equals( "Property "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  If(name.equals( "Math ")||  JSC_PROPERTY_NAME.equals( "Property "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	If(name.equals( "Math ")||  JSC_PROPERTY_NAME.equals( "Property "))  {  return  false;  }	  if(name.equals(   "Math   ")||    JSC_PROPERTY_NAME.equals(   "Property       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
945	[BUG]  [BUGGY]  AssertionFailedError  callNode  =  callNode.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError  callNode  =  callNode.removeFirstChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError  callNode  =  callNode.removeFirstChild();	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
946	[BUG]  [BUGGY]  ALL_PROPERTY_NAME.equals( "Math ")||  JSC_PROPERTY_NAME.equals( "Object "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  ALL_PROPERTY_NAME.equals( "Math ")||  JSC_PROPERTY_NAME.equals( "Object "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	ALL_PROPERTY_NAME.equals( "Math ")||  JSC_PROPERTY_NAME.equals( "Object "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Math   ")||    JSC_PROPERTY_NAME.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
947	[BUG]  [BUGGY]  &&  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  &&  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	&&  JSC_PROPERTY_NAME.equals( "Object   "))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Math   ")||    JSC_PROPERTY_NAME.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
948	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals( "Object ")||  JSC_PROPERTY_NAME.equals( "Object))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals( "Object ")||  JSC_PROPERTY_NAME.equals( "Object))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(JSC_PROPERTY_NAME.equals( "Object ")||  JSC_PROPERTY_NAME.equals( "Object))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(   "Math   ")||    JSC_PROPERTY_NAME.equals(   "Object   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
949	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
950	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getFirstChild().getType()  ==  Token.THIS)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getFirstChild().getType()  ==  Token.THIS)  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getFirstChild().getType()  ==  Token.THIS)  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
951	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getFirstChild().getType()  ==  Token.CALL)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getFirstChild().getType()  ==  Token.CALL)  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getFirstChild().getType()  ==  Token.CALL)  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
952	[BUG]  [BUGGY]  parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getFirstChild().getType()  ==  Token.STRING)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getFirstChild().getType()  ==  Token.STRING)  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent  ==  null  &&  callNode.getFirstChild()!=  null  &&  callNode.getFirstChild().getType()  ==  Token.STRING)  {  return  false;	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(callNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
953	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  this,  values);  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  this,  values);  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	NodeTraversal.traverse(compiler,  callNode,  this,  values);	  NodeTraversal.traverse(compiler,    callNode,    this);    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
954	[BUG]  [BUGGY]  if(!callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  if(!callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	if(!callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getFirstChild()))  {  return  false;  }	  return    true;    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
955	[BUG]  [BUGGY]  while(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  while(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	while(callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    while(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
956	[BUG]  [BUGGY]  Preconditions.checkArgument(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkArgument(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkArgument(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
957	[BUG]  [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getString()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Preconditions.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getString()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Preconditions.checkState(callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getString()))  {  return  false;	  Preconditions.checkState(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getFirstChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
958	[BUG]  [BUGGY]  parent.replaceChild(nameNode,  new  Node(Token.EMPTY));  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  expected:<[externObjSEThis]>  but  was:<[externObjSEThis      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent.replaceChild(nameNode,  new  Node(Token.EMPTY));  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent.replaceChild(nameNode,  new  Node(Token.EMPTY));	  if(!callNode.isOnlyModifiesThisCall()    &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
959	[BUG]  [BUGGY]  Node  param  =  nameNode.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  param  =  nameNode.removeFirstChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  param  =  nameNode.removeFirstChild();	  Node    param    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
960	[BUG]  [BUGGY]  Node  param  =  this.callNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  Node  param  =  this.callNode.getFirstChild();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	Node  param  =  this.callNode.getFirstChild();	  Node    param    =    callNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
961	[BUG]  [BUGGY]  parent!=  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
962	[BUG]  [BUGGY]  parent!=  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
963	[BUG]  [BUGGY]  parent!=  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  null  &&  callNode.isOnlyModifiesThisCall()  ||  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
964	[BUG]  [BUGGY]  parent!=  null  &&  callNode.isOnlyModifiesThisCall();  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  null  &&  callNode.isOnlyModifiesThisCall();  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  null  &&  callNode.isOnlyModifiesThisCall();  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
965	[BUG]  [BUGGY]  parent!=  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  parent!=  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	parent!=  null  &&  callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getLastChild()))  {  return  false;  }	  if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    if(callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
966	[BUG]  [BUGGY]  AssertionFailedError  callNode  =  callNode.getParent();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  AssertionFailedError  callNode  =  callNode.getParent();  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	AssertionFailedError  callNode  =  callNode.getParent();	  if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    AssertionFailedError    if(!callNode.isOnlyModifiesThisCall()    ||    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
967	[BUG]  [BUGGY]  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  else  if  (nameNode.getType()  ==  Token.GETPROP)  {  if  (callNode.hasOneChild()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(  nameNode.getLastChild().getString()))  {  return  false;  }  if  (callNode.isOnlyModifiesThisCall()  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {      [BUGGY]  &&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  if  (nameNode.getFirstChild().getType()  ==  Token.NAME)  {  String  namespaceName  =  nameNode.getFirstChild().getString();  if  (namespaceName.equals(     "Math     "))  {  return  false;  }  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  functionCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  param  String  JSC_PROPERTY_NAME_FN  name  namespaceName  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.7559289460184544	762	762	7	replace	&&  evaluatesToLocalValue(nameNode.getFirstChild()))  {  return  false;  }	  &&    evaluatesToLocalValue(nameNode.getLastChild()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
