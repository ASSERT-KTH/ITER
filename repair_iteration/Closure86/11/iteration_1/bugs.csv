bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (callNode.getType()  ==  Token.NEW)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  [BUGGY]  if  (callNode.getType()  ==  Token.NEW)  {  [BUGGY]  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	686	686	7	replace	if  (callNode.getType()  ==  Token.NEW)  {	if  (callNode.getType()  !=  Token.NEW)  {  	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
2	[BUG]  [BUGGY]  if  (callNode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  [BUGGY]  if  (callNode.getType()  ==  Token.NAME)  {  [BUGGY]  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	686	686	7	replace	if  (callNode.getType()  ==  Token.NAME)  {	if  (callNode.getType()  !=  Token.NEW)  {  	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
3	[BUG]  [BUGGY]  if  (callNode.getType()  ==  Token.NEW  ||  callNode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  [BUGGY]  if  (callNode.getType()  ==  Token.NEW  ||  callNode.getType()!=  Token.NAME)  {  [BUGGY]  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	686	686	7	replace	if  (callNode.getType()  ==  Token.NEW  ||  callNode.getType()!=  Token.NAME)  {	if  (callNode.getType()  !=  Token.NEW)  {  	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
4	[BUG]  [BUGGY]  if  (callNode.getType()  ==  Token.NEW  ||  callNode.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  [BUGGY]  if  (callNode.getType()  ==  Token.NEW  ||  callNode.getType()!=  Token.FUNCTION)  {  [BUGGY]  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	686	686	7	replace	if  (callNode.getType()  ==  Token.NEW  ||  callNode.getType()!=  Token.FUNCTION)  {	if  (callNode.getType()  !=  Token.NEW)  {  	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  [BUGGY]    [BUGGY]  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	686	686	7	replace	  	if  (callNode.getType()  !=  Token.NEW)  {  	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
6	[BUG]  [BUGGY]  if  (callNode.getType()  ==  Token.FUNCTION  ||  callNode.getType()!=  Token.NEW)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  [BUGGY]  if  (callNode.getType()  ==  Token.FUNCTION  ||  callNode.getType()!=  Token.NEW)  {  [BUGGY]  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	686	686	7	replace	if  (callNode.getType()  ==  Token.FUNCTION  ||  callNode.getType()!=  Token.NEW)  {	if  (callNode.getType()  !=  Token.NEW)  {  	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
7	[BUG]  [BUGGY]  if  ((  callNode.getType()  ==  Token.NEW)||(callNode.getType()!=  Token.FUNCTION))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  [BUGGY]  if  ((  callNode.getType()  ==  Token.NEW)||(callNode.getType()!=  Token.FUNCTION))  {  [BUGGY]  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	686	686	7	replace	if  ((  callNode.getType()  ==  Token.NEW)||(callNode.getType()!=  Token.FUNCTION))  {	if  (callNode.getType()  !=  Token.NEW)  {  	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
8	[BUG]  [BUGGY]  if  ((  callNode.getType()  ==  Token.NEW)||(callNode.getType()!=  Token.GETPROP))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  [BUGGY]  if  ((  callNode.getType()  ==  Token.NEW)||(callNode.getType()!=  Token.GETPROP))  {  [BUGGY]  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	686	686	7	replace	if  ((  callNode.getType()  ==  Token.NEW)||(callNode.getType()!=  Token.GETPROP))  {	if  (callNode.getType()  !=  Token.NEW)  {  	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
9	[BUG]  [BUGGY]  if  ((  callNode.getType()  ==  Token.NEW)&&(callNode.getFirstChild()!=  null  ||  callNode.getFirstChild().getType()!=  Token.FUNCTION))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  [BUGGY]  if  ((  callNode.getType()  ==  Token.NEW)&&(callNode.getFirstChild()!=  null  ||  callNode.getFirstChild().getType()!=  Token.FUNCTION))  {  [BUGGY]  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	686	686	7	replace	if  ((  callNode.getType()  ==  Token.NEW)&&(callNode.getFirstChild()!=  null  ||  callNode.getFirstChild().getType()!=  Token.FUNCTION))  {	if  (callNode.getType()  !=  Token.NEW)  {  	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
10	[BUG]  [BUGGY]  if  ((  callNode.getType()  ==  Token.NEW)||(callNode.getType()!=  Token.CALL))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  [BUGGY]  if  ((  callNode.getType()  ==  Token.NEW)||(callNode.getType()!=  Token.CALL))  {  [BUGGY]  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	686	686	7	replace	if  ((  callNode.getType()  ==  Token.NEW)||(callNode.getType()!=  Token.CALL))  {	if  (callNode.getType()  !=  Token.NEW)  {  	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
11	[BUG]  [BUGGY]  if  ((  callNode.getType()  ==  Token.NEW)&&(callNode.getFirstChild()!=  null  ||  callNode.getFirstChild().getType()!=  Token.THIS))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  [BUGGY]  if  ((  callNode.getType()  ==  Token.NEW)&&(callNode.getFirstChild()!=  null  ||  callNode.getFirstChild().getType()!=  Token.THIS))  {  [BUGGY]  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	686	686	7	replace	if  ((  callNode.getType()  ==  Token.NEW)&&(callNode.getFirstChild()!=  null  ||  callNode.getFirstChild().getType()!=  Token.THIS))  {	if  (callNode.getType()  !=  Token.NEW)  {  	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
12	[BUG]  [BUGGY]  if  ((  callNode.getType()  ==  Token.NEW)&&(callNode.getFirstChild()!=  null  ||  callNode.getFirstChild().getType()!=  Token.BLOCK))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  [BUGGY]  if  ((  callNode.getType()  ==  Token.NEW)&&(callNode.getFirstChild()!=  null  ||  callNode.getFirstChild().getType()!=  Token.BLOCK))  {  [BUGGY]  throw  new  IllegalStateException(   "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	686	686	7	replace	if  ((  callNode.getType()  ==  Token.NEW)&&(callNode.getFirstChild()!=  null  ||  callNode.getFirstChild().getType()!=  Token.BLOCK))  {	if  (callNode.getType()  !=  Token.NEW)  {  	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
