bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  &&  NodeUtil.isSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  &&    NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	152	None	replace
2	[BUG]  [BUGGY]  &&  NodeUtil.isFunction(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isFunction(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isFunction(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  &&    NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	152	None	replace
3	[BUG]  [BUGGY]  &&  NodeUtil.isName(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isName(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isName(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  &&    NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	152	None	replace
4	[BUG]  [BUGGY]  &&  NodeUtil.isCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  &&    NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	152	None	replace
5	[BUG]  [BUGGY]  &&  NodeUtil.isImmutableCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isImmutableCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isImmutableCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  &&    NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	152	None	replace
6	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())    	non-compiled	[CE]  	93	None	replace
7	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())    	non-compiled	[CE]  	93	None	replace
8	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));    	non-compiled	[CE]  	123	None	replace
9	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));    	non-compiled	[CE]  	123	None	replace
10	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));    	non-compiled	[CE]  	123	None	replace
11	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));    	non-compiled	[CE]  	123	None	replace
12	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.isNoSideEffectsCall());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.isNoSideEffectsCall());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.isNoSideEffectsCall());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));    	non-compiled	[CE]  	123	None	replace
13	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getType()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getType()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));    	non-compiled	[CE]  	123	None	replace
14	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getString()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getString()))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
15	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
16	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
17	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode.getFirstChild()))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
18	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getLocalName()))    {    return    false;    }    	non-compiled	[CE]  	18	None	replace
19	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getLocalName()))    {    return    false;    }    	non-compiled	[CE]  	18	None	replace
20	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getLocalName()))    {    return    false;    }    	non-compiled	[CE]  	18	None	replace
21	[BUG]  [BUGGY]  |  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  |  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	|  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getLocalName()))    {    return    false;    }    	non-compiled	[CE]  	18	None	replace
22	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getLocalName()))    {    return    false;    }    	non-compiled	[CE]  	18	None	replace
23	[BUG]  [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getLocalName()))    {    return    false;    }    	non-compiled	[CE]  	18	None	replace
24	[BUG]  [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	181	None	replace
25	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	181	None	replace
26	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	181	None	replace
27	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	181	None	replace
28	[BUG]  [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS);	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	181	None	replace
29	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	53	None	replace
30	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	53	None	replace
31	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isForIn(callNode))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isForIn(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isForIn(callNode))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	53	None	replace
32	[BUG]  [BUGGY]  &&  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }	  &&    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	171	None	replace
33	[BUG]  [BUGGY]  &&  NodeUtil.isCallNode(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isCallNode(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isCallNode(callNode))  {  return  false;  }	  &&    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	171	None	replace
34	[BUG]  [BUGGY]  &&  NodeUtil.isName(callNode))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isName(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isName(callNode))  {  return  false;  }	  &&    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	171	None	replace
35	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	26	None	replace
36	[BUG]  [BUGGY]  |  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  |  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	|  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	26	None	replace
37	[BUG]  [BUGGY]  ||  callNode.getType().equals(JSC_PROPERTY_NAME_FN))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.getType().equals(JSC_PROPERTY_NAME_FN))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.getType().equals(JSC_PROPERTY_NAME_FN))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	26	None	replace
38	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getJSType()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getJSType()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getJSType()))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	26	None	replace
39	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString	  return    callNode.getType()    ==    Token.NAME    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	107	None	replace
40	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString	  return    callNode.getType()    ==    Token.NAME    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	107	None	replace
41	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString	  return    callNode.getType()    ==    Token.NAME    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	107	None	replace
42	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString())  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString())	  return    callNode.getType()    ==    Token.NAME    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	107	None	replace
43	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));	  return    callNode.getType()    ==    Token.NAME    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	107	None	replace
44	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.get  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.get  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.get	  return    callNode.getType()    ==    Token.NAME    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	107	None	replace
45	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString())  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString())	  return    callNode.getType()    ==    Token.NAME    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	107	None	replace
46	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.add(callNode.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.add(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.add(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.add(callNode.getString()));    	non-compiled	[CE]  	160	None	replace
47	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.add(callNode.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.add(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.add(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.add(callNode.getString()));    	non-compiled	[CE]  	160	None	replace
48	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.add(callNode.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.add(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.add(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.add(callNode.getString()));    	non-compiled	[CE]  	160	None	replace
49	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.add(callNode.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.add(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.add(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.add(callNode.getString()));    	non-compiled	[CE]  	160	None	replace
50	[BUG]  [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.add(callNode.getString()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.add(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.add(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.add(callNode.getString()));    	non-compiled	[CE]  	160	None	replace
51	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.add(callNode.getString()));    	non-compiled	[CE]  	160	None	replace
52	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getType())||  callNode.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getType())||  callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getType())||  callNode.isNoSideEffectsCall())  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	131	None	replace
53	[BUG]  [BUGGY]  ||  callNode.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.isNoSideEffectsCall())  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	131	None	replace
54	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  callNode.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  callNode.isNoSideEffectsCall())  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	131	None	replace
55	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getType())&&  callNode.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getType())&&  callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getType())&&  callNode.isNoSideEffectsCall())  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	131	None	replace
56	[BUG]  [BUGGY]  Constructor  <  N,  V>  constructorCallHasSideEffects(callNode.getType())||  callNode.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  N,  V>  constructorCallHasSideEffects(callNode.getType())||  callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  N,  V>  constructorCallHasSideEffects(callNode.getType())||  callNode.isNoSideEffectsCall())  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	131	None	replace
57	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getType())||  callNode.isNoSideEffectsCall())  {  return  false;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getType())||  callNode.isNoSideEffectsCall())  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getType())||  callNode.isNoSideEffectsCall())  {  return  false;	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	131	None	replace
58	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(node.getString());    	non-compiled	[CE]  	120	None	replace
59	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(callNode.getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(callNode.getString());	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(node.getString());    	non-compiled	[CE]  	120	None	replace
60	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(constructorCallHasSideEffects(callNode.getString()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(constructorCallHasSideEffects(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(constructorCallHasSideEffects(callNode.getString()));	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(node.getString());    	non-compiled	[CE]  	120	None	replace
61	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }	  NodeUtil.mayHaveSideEffects(callNode)&&    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	124	None	replace
62	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }	  NodeUtil.mayHaveSideEffects(callNode)&&    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	124	None	replace
63	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }	  NodeUtil.mayHaveSideEffects(callNode)&&    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	124	None	replace
64	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isName(callNode.getString()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isName(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isName(callNode.getString()))  {  return  false;  }	  NodeUtil.mayHaveSideEffects(callNode)&&    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	124	None	replace
65	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isAssignmentOp(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isAssignmentOp(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isAssignmentOp(callNode.getFirstChild()))  {  return  false;  }	  NodeUtil.mayHaveSideEffects(callNode)&&    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	124	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.getType()  ==  Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!callNode.getType()  ==  Token.NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!callNode.getType()  ==  Token.NAME);	  Preconditions.checkState(!callNode.isNoSideEffectsCall());    	non-compiled	[CE]  	142	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!callNode.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!callNode.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(!callNode.isNoSideEffectsCall());    	non-compiled	[CE]  	142	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  &&  callNode.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  &&  callNode.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!callNode.isNoSideEffectsCall()  &&  callNode.getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(!callNode.isNoSideEffectsCall());    	non-compiled	[CE]  	142	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.getType()  ==  Token.CALL);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!callNode.getType()  ==  Token.CALL);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!callNode.getType()  ==  Token.CALL);	  Preconditions.checkState(!callNode.isNoSideEffectsCall());    	non-compiled	[CE]  	142	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  &&  callNode.getFirstChild().getType()  ==  Token.NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  &&  callNode.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!callNode.isNoSideEffectsCall()  &&  callNode.getFirstChild().getType()  ==  Token.NAME);	  Preconditions.checkState(!callNode.isNoSideEffectsCall());    	non-compiled	[CE]  	142	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(!callNode.isNoSideEffectsCall());    	non-compiled	[CE]  	142	None	replace
72	[BUG]  [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	112	None	replace
73	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Node  nameNode  =  callNode.getFirstChild();  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Node  nameNode  =  callNode.getFirstChild();	  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	112	None	replace
74	[BUG]  [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;	  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	112	None	replace
75	[BUG]  [BUGGY]  AssertionError.make(callNode.getString(),  JSC_PROPERTY_NAME,  name))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  AssertionError.make(callNode.getString(),  JSC_PROPERTY_NAME,  name))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	AssertionError.make(callNode.getString(),  JSC_PROPERTY_NAME,  name))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	112	None	replace
76	[BUG]  [BUGGY]  String  name  =  callNode.getString();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  String  name  =  callNode.getString();  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	String  name  =  callNode.getString();	  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	112	None	replace
77	[BUG]  [BUGGY]  ||  callNode.getType()!=  Token.NAME)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.getType()!=  Token.NAME)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  	200	None	replace
78	[BUG]  [BUGGY]  &&  callNode.getType()!=  Token.NAME)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  callNode.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  callNode.getType()!=  Token.NAME)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  	200	None	replace
79	[BUG]  [BUGGY]  if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()!=  Token.NAME)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()!=  Token.NAME)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  	200	None	replace
80	[BUG]  [BUGGY]  ||  callNode.getType()!=  Token.NAME)  {  return  false;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.getType()!=  Token.NAME)  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.getType()!=  Token.NAME)  {  return  false;	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  	200	None	replace
81	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY,  JSC_PROPERTY_NAME));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY,  JSC_PROPERTY_NAME));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.EMPTY,  JSC_PROPERTY_NAME));	  parent.replaceChild(callNode,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	187	None	replace
82	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY),  callNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY),  callNode);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.EMPTY),  callNode);	  parent.replaceChild(callNode,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	187	None	replace
83	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY,  getName()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY,  getName()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.EMPTY,  getName()));	  parent.replaceChild(callNode,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	187	None	replace
84	[BUG]  [BUGGY]  parent.replaceChild(node,  new  Node(Token.EMPTY));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(node,  new  Node(Token.EMPTY));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(node,  new  Node(Token.EMPTY));	  parent.replaceChild(callNode,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	187	None	replace
85	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY,  nameNode));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY,  nameNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.EMPTY,  nameNode));	  parent.replaceChild(callNode,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	187	None	replace
86	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY),  compiler);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY),  compiler);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.EMPTY),  compiler);	  parent.replaceChild(callNode,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	187	None	replace
87	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    JSC_PROPERTY_NAME.equals(callNode.getLocalName()))    {    return    false;    }    	non-compiled	[CE]  	31	None	replace
88	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.add(callNode.getString()))  {  return  false;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.add(callNode.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME_FN.add(callNode.getString()))  {  return  false;	  Constructor    <    Node,    JSC_PROPERTY_NAME_FN.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	190	None	replace
89	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getString()))  {  return  true;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getString()))  {  return  true;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getString()))  {  return  true;	  Constructor    <    Node,    JSC_PROPERTY_NAME_FN.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	190	None	replace
90	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;	  Constructor    <    Node,    JSC_PROPERTY_NAME_FN.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	190	None	replace
91	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()))  {  return  false;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()))  {  return  false;	  Constructor    <    Node,    JSC_PROPERTY_NAME_FN.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	190	None	replace
92	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getType()))  {  return  false;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getType()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getType()))  {  return  false;	  Constructor    <    Node,    JSC_PROPERTY_NAME_FN.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	190	None	replace
93	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()))  {  return  false;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()))  {  return  false;	  Constructor    <    Node,    JSC_PROPERTY_NAME_FN.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	190	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  this);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  this);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  this);	  NodeTraversal.traverse(compiler,    callNode,    compiler);    	non-compiled	[CE]  	81	None	replace
95	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  CONSTRUCTORS_WITHOUT_SIDEEFFECTS);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  CONSTRUCTORS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  CONSTRUCTORS_WITHOUT_SIDEEFFECTS);	  NodeTraversal.traverse(compiler,    callNode,    compiler);    	non-compiled	[CE]  	81	None	replace
96	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME_FN);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME_FN);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME_FN);	  NodeTraversal.traverse(compiler,    callNode,    compiler);    	non-compiled	[CE]  	81	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  REGEXP_METHODS);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  REGEXP_METHODS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  REGEXP_METHODS);	  NodeTraversal.traverse(compiler,    callNode,    compiler);    	non-compiled	[CE]  	81	None	replace
98	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS);	  NodeTraversal.traverse(compiler,    callNode,    compiler);    	non-compiled	[CE]  	81	None	replace
99	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME);  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME);	  NodeTraversal.traverse(compiler,    callNode,    compiler);    	non-compiled	[CE]  	81	None	replace
100	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(compiler));  [CE]  [FE]                                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(compiler));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(compiler));	  NodeTraversal.traverse(compiler,    callNode,    compiler);    	non-compiled	[CE]  	81	None	replace
101	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.FUNCTION  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	63	None	replace
102	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	63	None	replace
103	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getLastChild().getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	63	None	replace
104	[BUG]  [BUGGY]  return  callNode.getString().equals(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().equals(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().equals(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	63	None	replace
105	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  return  false;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  return  false;	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	76	None	replace
106	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	76	None	replace
107	[BUG]  [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	76	None	replace
108	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getLastChild().getType()  ==  Token.FUNCTION;	  return    callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	67	None	replace
109	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()!=  Token.FUNCTION;	  return    callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	67	None	replace
110	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)&&    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	179	None	replace
111	[BUG]  [BUGGY]  ||  NodeUtil.isSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)&&    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	179	None	replace
112	[BUG]  [BUGGY]  &&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)&&    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	179	None	replace
113	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	91	None	replace
114	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	91	None	replace
115	[BUG]  [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	91	None	replace
116	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	91	None	replace
117	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionCall(callNode)||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionCall(callNode)||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isFunctionCall(callNode)||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	127	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunctionCall(callNode))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunctionCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunctionCall(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	127	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableCall(callNode)||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableCall(callNode)||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isImmutableCall(callNode)||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	127	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(callNode)||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(callNode)||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isGet(callNode)||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	127	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isImmutableCall(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isImmutableCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isImmutableCall(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	127	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isGetProp(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isGetProp(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isGetProp(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	127	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	12	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isFunction(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	12	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	12	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isGet(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	12	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	12	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	12	None	replace
129	[BUG]  [BUGGY]  NodeUtil.isName(callNode.getFirstChild())||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isName(callNode.getFirstChild())||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isName(callNode.getFirstChild())||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
130	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
131	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	92	None	replace
132	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	92	None	replace
133	[BUG]  [BUGGY]  return  callNode.getLastChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getLastChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getLastChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	92	None	replace
134	[BUG]  [BUGGY]  return  callNode.getString().equals(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().equals(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().equals(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	92	None	replace
135	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild().getType()!=  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	188	None	replace
136	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getFirstChild().getType()!=  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	188	None	replace
137	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()!=  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	188	None	replace
138	[BUG]  [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getFirstChild().getType()!=  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	188	None	replace
139	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.FUNCTION  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()!=  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	188	None	replace
140	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Throwables.throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));	  throw    new    IllegalStateException(   "Expected    NEW    node,    got   "    +    Token.name(callNode.getType()));    	non-compiled	[CE]  	153	None	replace
141	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Throwables.wrap(new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Throwables.wrap(new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));	  throw    new    IllegalStateException(   "Expected    NEW    node,    got   "    +    Token.name(callNode.getType()));    	non-compiled	[CE]  	153	None	replace
142	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node,  got  ' "  +  Token.name(callNode.getType()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node,  got  ' "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	throw  new  IllegalStateException( "Expected  NEW  node,  got  ' "  +  Token.name(callNode.getType()));	  throw    new    IllegalStateException(   "Expected    NEW    node,    got   "    +    Token.name(callNode.getType()));    	non-compiled	[CE]  	153	None	replace
143	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	59	None	replace
144	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	59	None	replace
145	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  REGEXP_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  REGEXP_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  REGEXP_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	59	None	replace
146	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	59	None	replace
147	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	59	None	replace
148	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLocalName());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLocalName());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLocalName());	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	59	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkArgument(!callNode.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkArgument(!callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkArgument(!callNode.isNoSideEffectsCall())  {  return  false;  }	  Preconditions.checkState(!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	141	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  return  false;  }	  Preconditions.checkState(!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	141	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.NAME)  {  return  false;  }	  Preconditions.checkState(!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	141	None	replace
152	[BUG]  [BUGGY]  Constructor.checkState(!callNode.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor.checkState(!callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor.checkState(!callNode.isNoSideEffectsCall())  {  return  false;  }	  Preconditions.checkState(!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	141	None	replace
153	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()	  return    callNode.getType()    ==    Token.NAME    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString())    	non-compiled	[CE]  	138	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	170	None	replace
155	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));  return  true;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));  return  true;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));  return  true;	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    return    false;    	non-compiled	[CE]  	192	None	replace
156	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  return  false;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  return  false;	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    return    false;    	non-compiled	[CE]  	192	None	replace
157	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));  return  false;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));  return  false;	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    return    false;    	non-compiled	[CE]  	192	None	replace
158	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  +  1);  return  false;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  +  1);  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  +  1);  return  false;	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    return    false;    	non-compiled	[CE]  	192	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isFunctionCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	52	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isGet(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	52	None	replace
161	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isExpressionNode(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	52	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isName(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isName(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isName(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	52	None	replace
163	[BUG]  [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }	  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	193	None	replace
164	[BUG]  [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getString()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getString()))  {  return  false;  }	  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	193	None	replace
165	[BUG]  [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode.getFirstChild()))  {  return  false;  }	  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	193	None	replace
166	[BUG]  [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }	  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	193	None	replace
167	[BUG]  [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVar(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVar(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVar(callNode.getFirstChild()))  {  return  false;  }	  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	193	None	replace
168	[BUG]  [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }	  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	193	None	replace
169	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode,  compiler))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode,  compiler))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode,  compiler))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	44	None	replace
170	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	44	None	replace
171	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode))  {  return  true;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode))  {  return  true;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode))  {  return  true;  }	  ConstructorUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	44	None	replace
172	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  callNode.getFirstChild().getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  callNode.getFirstChild().getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)&&  callNode.getFirstChild().getType()!=  Token.FUNCTION)  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	44	None	replace
173	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  callNode.getFirstChild().getType()  ==  Token.NAME)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  callNode.getFirstChild().getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)&&  callNode.getFirstChild().getType()  ==  Token.NAME)  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	44	None	replace
174	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(node))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(node))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(node))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	44	None	replace
175	[BUG]  [BUGGY]  |  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  |  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	|  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	34	None	replace
176	[BUG]  [BUGGY]  AssertionFailedToCall.add(JSC_PROPERTY_NAME,  callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  AssertionFailedToCall.add(JSC_PROPERTY_NAME,  callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	AssertionFailedToCall.add(JSC_PROPERTY_NAME,  callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	34	None	replace
177	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.mayHaveSideEffects(callNode))    {    return    false;    }    	non-compiled	[CE]  	126	None	replace
178	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.mayHaveSideEffects(callNode))    {    return    false;    }    	non-compiled	[CE]  	126	None	replace
179	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.mayHaveSideEffects(callNode))    {    return    false;    }    	non-compiled	[CE]  	126	None	replace
180	[BUG]  [BUGGY]  NodeUtil.isSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.mayHaveSideEffects(callNode))    {    return    false;    }    	non-compiled	[CE]  	126	None	replace
181	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  return  true;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  return  true;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  return  true;	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    return    true;    	non-compiled	[CE]  	191	None	replace
182	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(callNode.getString());  return  false;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(callNode.getString());  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(callNode.getString());  return  false;	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    return    true;    	non-compiled	[CE]  	191	None	replace
183	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	145	None	replace
184	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	145	None	replace
185	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	145	None	replace
186	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  REGEXP_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  REGEXP_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  REGEXP_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	145	None	replace
187	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	145	None	replace
188	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node:  got   "  +  Token.name(callNode.getFirstChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node:  got   "  +  Token.name(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	throw  new  IllegalStateException( "Expected  NEW  node:  got   "  +  Token.name(callNode.getFirstChild()));	  throw    new    IllegalStateException(   "Expected    NEW    node:   "    +    Token.name(callNode.getFirstChild()));    	non-compiled	[CE]  	156	None	replace
189	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  NEW  node:   "  +  Token.name(callNode.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  NEW  node:   "  +  Token.name(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Throwables.throw  new  IllegalStateException( "Expected  NEW  node:   "  +  Token.name(callNode.getFirstChild()));	  throw    new    IllegalStateException(   "Expected    NEW    node:   "    +    Token.name(callNode.getFirstChild()));    	non-compiled	[CE]  	156	None	replace
190	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getFirstChild()));	  throw    new    IllegalStateException(   "Expected    NEW    node:   "    +    Token.name(callNode.getFirstChild()));    	non-compiled	[CE]  	156	None	replace
191	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node:  got   "  +  Token.name(callNode.getType()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node:  got   "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	throw  new  IllegalStateException( "Expected  NEW  node:  got   "  +  Token.name(callNode.getType()));	  throw    new    IllegalStateException(   "Expected    NEW    node:   "    +    Token.name(callNode.getFirstChild()));    	non-compiled	[CE]  	156	None	replace
192	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	83	None	replace
193	[BUG]  [BUGGY]  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	83	None	replace
194	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	83	None	replace
195	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	83	None	replace
196	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	83	None	replace
197	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    JSC_PROPERTY_NAME.equals(callNode.getName()))    {    return    false;    }    	non-compiled	[CE]  	30	None	replace
198	[BUG]  [BUGGY]  |  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  |  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	|  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    JSC_PROPERTY_NAME.equals(callNode.getName()))    {    return    false;    }    	non-compiled	[CE]  	30	None	replace
199	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    JSC_PROPERTY_NAME.equals(callNode.getName()))    {    return    false;    }    	non-compiled	[CE]  	30	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(callNode));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(callNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isGet(callNode));	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode));    	non-compiled	[CE]  	45	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionCall(callNode));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionCall(callNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isFunctionCall(callNode));	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode));    	non-compiled	[CE]  	45	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isCallHasSideEffects(callNode));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isCallHasSideEffects(callNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isCallHasSideEffects(callNode));	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode));    	non-compiled	[CE]  	45	None	replace
203	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableCall(callNode));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableCall(callNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isImmutableCall(callNode));	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode));    	non-compiled	[CE]  	45	None	replace
204	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(callNode));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(callNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isVarDeclaration(callNode));	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode));    	non-compiled	[CE]  	45	None	replace
205	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(callNode));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(callNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(callNode));	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode));    	non-compiled	[CE]  	45	None	replace
206	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	106	None	replace
207	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	106	None	replace
208	[BUG]  [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	106	None	replace
209	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString())  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	106	None	replace
210	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  NodeUtil.mayHaveSideEffects(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	147	None	replace
211	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }	  NodeUtil.mayHaveSideEffects(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	147	None	replace
212	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  NodeUtil.mayHaveSideEffects(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	147	None	replace
213	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }	  NodeUtil.mayHaveSideEffects(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	147	None	replace
214	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isFunctionCall(callNode))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isFunctionCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isFunctionCall(callNode))  {  return  false;  }	  NodeUtil.mayHaveSideEffects(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	147	None	replace
215	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Throwables.throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getFirstChild()));	  throw    new    IllegalStateException(   "Expected    NEW    node,    got:   "    +    Token.name(callNode.getFirstChild()));    	non-compiled	[CE]  	157	None	replace
216	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getLastChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getLastChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getLastChild()));	  throw    new    IllegalStateException(   "Expected    NEW    node,    got:   "    +    Token.name(callNode.getFirstChild()));    	non-compiled	[CE]  	157	None	replace
217	[BUG]  [BUGGY]  NodeUtil.isSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	10	None	replace
218	[BUG]  [BUGGY]  NodeUtil.isFunction(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isFunction(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isFunction(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	10	None	replace
219	[BUG]  [BUGGY]  NodeUtil.isConstructorCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isConstructorCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isConstructorCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	10	None	replace
220	[BUG]  [BUGGY]  NodeUtil.isName(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isName(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isName(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	10	None	replace
221	[BUG]  [BUGGY]  ||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()    	non-compiled	[CE]  	146	None	replace
222	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()    	non-compiled	[CE]  	146	None	replace
223	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()    	non-compiled	[CE]  	146	None	replace
224	[BUG]  [BUGGY]  ||  callNode.getString().equals(JSC_PROPERTY_NAME_FN))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.getString().equals(JSC_PROPERTY_NAME_FN))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.getString().equals(JSC_PROPERTY_NAME_FN))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	33	None	replace
225	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	33	None	replace
226	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(nameNode.getString()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(nameNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(nameNode.getString()))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	33	None	replace
227	[BUG]  [BUGGY]  ||  NodeUtil.isName(callNode.getString()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isName(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isName(callNode.getString()))  {  return  false;  }	  ||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	1	None	replace
228	[BUG]  [BUGGY]  ||  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }	  ||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	1	None	replace
229	[BUG]  [BUGGY]  ||  NodeUtil.isAssignmentOp(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isAssignmentOp(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isAssignmentOp(callNode.getFirstChild()))  {  return  false;  }	  ||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	1	None	replace
230	[BUG]  [BUGGY]  ||  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }	  ||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	1	None	replace
231	[BUG]  [BUGGY]  ||  NodeUtil.isCall(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isCall(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isCall(callNode.getFirstChild()))  {  return  false;  }	  ||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	1	None	replace
232	[BUG]  [BUGGY]  ||  NodeUtil.isVar(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isVar(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isVar(callNode.getFirstChild()))  {  return  false;  }	  ||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	1	None	replace
233	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;	  ||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	113	None	replace
234	[BUG]  [BUGGY]  ||  callNode.getString().equals(JSC_PROPERTY_NAME_FN))  {  return  false;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.getString().equals(JSC_PROPERTY_NAME_FN))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.getString().equals(JSC_PROPERTY_NAME_FN))  {  return  false;	  ||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	113	None	replace
235	[BUG]  [BUGGY]  |  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  |  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	|  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;	  ||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	113	None	replace
236	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;	  ||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	113	None	replace
237	[BUG]  [BUGGY]  |  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  |  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	|  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	102	None	replace
238	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;	  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	102	None	replace
239	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getJSPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getJSPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode.getJSPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	102	None	replace
240	[BUG]  [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	102	None	replace
241	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	72	None	replace
242	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isGet(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	72	None	replace
243	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	72	None	replace
244	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	72	None	replace
245	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isImmutableCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	72	None	replace
246	[BUG]  [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	169	None	replace
247	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	169	None	replace
248	[BUG]  [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	169	None	replace
249	[BUG]  [BUGGY]  NodeUtil.isSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
250	[BUG]  [BUGGY]  NodeUtil.isName(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isName(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isName(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
251	[BUG]  [BUGGY]  NodeUtil.isSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	95	None	replace
252	[BUG]  [BUGGY]  NodeUtil.isFunctionCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isFunctionCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isFunctionCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	95	None	replace
253	[BUG]  [BUGGY]  ||  callNode.getJSPropertyName().equals(JSC_PROPERTY_NAME_NAME))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.getJSPropertyName().equals(JSC_PROPERTY_NAME_NAME))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.getJSPropertyName().equals(JSC_PROPERTY_NAME_NAME))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	101	None	replace
254	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getJSName()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getJSName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getJSName()))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	101	None	replace
255	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getJSString()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getJSString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getJSString()))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	101	None	replace
256	[BUG]  [BUGGY]  return  callNode.getLastChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getLastChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getLastChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	66	None	replace
257	[BUG]  [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getLastChild().getType()  ==  Token.FUNCTION;	  return    callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	66	None	replace
258	[BUG]  [BUGGY]  return  callNode.getLastChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getLastChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getLastChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	66	None	replace
259	[BUG]  [BUGGY]  ||  CallNodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  CallNodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  CallNodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ||    CallNodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	100	None	replace
260	[BUG]  [BUGGY]  ||  CallNodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  CallNodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  CallNodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  ||    CallNodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	100	None	replace
261	[BUG]  [BUGGY]  ||  CallNodeUtil.isSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  CallNodeUtil.isSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  CallNodeUtil.isSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ||    CallNodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	100	None	replace
262	[BUG]  [BUGGY]  ||  CallNodeUtil.isFunctionCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  CallNodeUtil.isFunctionCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  CallNodeUtil.isFunctionCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ||    CallNodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	100	None	replace
263	[BUG]  [BUGGY]  ||  CallNodeUtil.isImmutableCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  CallNodeUtil.isImmutableCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  CallNodeUtil.isImmutableCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ||    CallNodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	100	None	replace
264	[BUG]  [BUGGY]  ||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }	  ||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	69	None	replace
265	[BUG]  [BUGGY]  ||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }	  ||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	69	None	replace
266	[BUG]  [BUGGY]  ||  NodeUtil.isName(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isName(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isName(callNode))  {  return  false;  }	  ||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	69	None	replace
267	[BUG]  [BUGGY]  ||  NodeUtil.isStatementCall(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isStatementCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isStatementCall(callNode))  {  return  false;  }	  ||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	69	None	replace
268	[BUG]  [BUGGY]  ||  NodeUtil.isStatementBlock(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isStatementBlock(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isStatementBlock(callNode))  {  return  false;  }	  ||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	69	None	replace
269	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.CALL  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString	  return    callNode.getType()    ==    Token.CALL    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	110	None	replace
270	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString	  return    callNode.getType()    ==    Token.CALL    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	110	None	replace
271	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString	  return    callNode.getType()    ==    Token.CALL    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	110	None	replace
272	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString())  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString())	  return    callNode.getType()    ==    Token.CALL    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	110	None	replace
273	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.get  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.get  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.get	  return    callNode.getType()    ==    Token.CALL    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	110	None	replace
274	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));	  return    callNode.getType()    ==    Token.CALL    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	110	None	replace
275	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString())  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString())	  return    callNode.getType()    ==    Token.CALL    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	110	None	replace
276	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()    	non-compiled	[CE]  	199	None	replace
277	[BUG]  [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()    	non-compiled	[CE]  	199	None	replace
278	[BUG]  [BUGGY]  Node  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Node  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Node  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()    	non-compiled	[CE]  	199	None	replace
279	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()    	non-compiled	[CE]  	199	None	replace
280	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()    	non-compiled	[CE]  	199	None	replace
281	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getType()  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getType()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getType()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()    	non-compiled	[CE]  	199	None	replace
282	[BUG]  [BUGGY]  ||  NodeUtil.isSideEffectsCall(callNode))  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isSideEffectsCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isSideEffectsCall(callNode))  {  return  false;  }	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	43	None	replace
283	[BUG]  [BUGGY]  ||  NodeUtil.isFunctionCall(callNode))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isFunctionCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isFunctionCall(callNode))  {  return  false;  }	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	43	None	replace
284	[BUG]  [BUGGY]  ||  NodeUtil.isImmutableCall(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isImmutableCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isImmutableCall(callNode))  {  return  false;  }	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	43	None	replace
285	[BUG]  [BUGGY]  ||  NodeUtil.isCallHasSideEffects(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isCallHasSideEffects(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isCallHasSideEffects(callNode))  {  return  false;  }	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	43	None	replace
286	[BUG]  [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode,  compiler))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode,  compiler))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isNoSideEffectsCall(callNode,  compiler))  {  return  false;  }	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	43	None	replace
287	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	60	None	replace
288	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	60	None	replace
289	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	60	None	replace
290	[BUG]  [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	60	None	replace
291	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	27	None	replace
292	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild    	non-compiled	[CE]  	195	None	replace
293	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChil  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChil  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChil	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild    	non-compiled	[CE]  	195	None	replace
294	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild    	non-compiled	[CE]  	195	None	replace
295	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild    	non-compiled	[CE]  	195	None	replace
296	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild    	non-compiled	[CE]  	195	None	replace
297	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild    	non-compiled	[CE]  	195	None	replace
298	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	38	None	replace
299	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	38	None	replace
300	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	38	None	replace
301	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	38	None	replace
302	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString())    	non-compiled	[CE]  	140	None	replace
303	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString())  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString())    	non-compiled	[CE]  	140	None	replace
304	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString())    	non-compiled	[CE]  	140	None	replace
305	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString())    	non-compiled	[CE]  	140	None	replace
306	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getType()  ==  Token.FUNCTION;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString())    	non-compiled	[CE]  	140	None	replace
307	[BUG]  [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	150	None	replace
308	[BUG]  [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	150	None	replace
309	[BUG]  [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	150	None	replace
310	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.isNoSideEffectsCall());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.isNoSideEffectsCall());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.isNoSideEffectsCall());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	121	None	replace
311	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	121	None	replace
312	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()    	non-compiled	[CE]  	86	None	replace
313	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()    	non-compiled	[CE]  	86	None	replace
314	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()    	non-compiled	[CE]  	86	None	replace
315	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getPropertyName(),  JSC_PROPERTY_NAME,  name);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getPropertyName(),  JSC_PROPERTY_NAME,  name);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleMissingName(callNode.getPropertyName(),  JSC_PROPERTY_NAME,  name);	  aughtExceptionHandler.handleMissingName(callNode.getPropertyName(),    JSC_PROPERTY_NAME);    	non-compiled	[CE]  	175	None	replace
316	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getPropertyName(),  JSC_PROPERTY_NAME_FN);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getPropertyName(),  JSC_PROPERTY_NAME_FN);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleMissingName(callNode.getPropertyName(),  JSC_PROPERTY_NAME_FN);	  aughtExceptionHandler.handleMissingName(callNode.getPropertyName(),    JSC_PROPERTY_NAME);    	non-compiled	[CE]  	175	None	replace
317	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getSourceName(),  JSC_PROPERTY_NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getSourceName(),  JSC_PROPERTY_NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleMissingName(callNode.getSourceName(),  JSC_PROPERTY_NAME);	  aughtExceptionHandler.handleMissingName(callNode.getPropertyName(),    JSC_PROPERTY_NAME);    	non-compiled	[CE]  	175	None	replace
318	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    +    1));    	non-compiled	[CE]  	42	None	replace
319	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getString()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    +    1));    	non-compiled	[CE]  	42	None	replace
320	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    +    1));    	non-compiled	[CE]  	42	None	replace
321	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	136	None	replace
322	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	136	None	replace
323	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	136	None	replace
324	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isGet(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	136	None	replace
325	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isFunctionCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	136	None	replace
326	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.put(nameNode.getString(),  callNode);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.put(nameNode.getString(),  callNode);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.put(nameNode.getString(),  callNode);	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString());    	non-compiled	[CE]  	80	None	replace
327	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString()  +  1);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString()  +  1);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString()  +  1);	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString());    	non-compiled	[CE]  	80	None	replace
328	[BUG]  [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  true;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  true;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  true;	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    	non-compiled	[CE]  	49	None	replace
329	[BUG]  [BUGGY]  ||  NodeUtil.isSideEffectsCall(callNode))  {  return  false;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isSideEffectsCall(callNode))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isSideEffectsCall(callNode))  {  return  false;	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    	non-compiled	[CE]  	49	None	replace
330	[BUG]  [BUGGY]  ||  NodeUtil.isImmutableCall(callNode))  {  return  false;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isImmutableCall(callNode))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isImmutableCall(callNode))  {  return  false;	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    	non-compiled	[CE]  	49	None	replace
331	[BUG]  [BUGGY]  ||  NodeUtil.isFunctionCall(callNode))  {  return  false;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isFunctionCall(callNode))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isFunctionCall(callNode))  {  return  false;	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    	non-compiled	[CE]  	49	None	replace
332	[BUG]  [BUGGY]  ||  NodeUtil.isCallHasSideEffects(callNode))  {  return  false;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isCallHasSideEffects(callNode))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isCallHasSideEffects(callNode))  {  return  false;	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    	non-compiled	[CE]  	49	None	replace
333	[BUG]  [BUGGY]  ||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isVarDeclaration(callNode))  {  return  false;	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    	non-compiled	[CE]  	49	None	replace
334	[BUG]  [BUGGY]  ||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	201	None	replace
335	[BUG]  [BUGGY]  &&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	201	None	replace
336	[BUG]  [BUGGY]  ||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.getType()!=  Token.FUNCTION)  {  return  false;	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	201	None	replace
337	[BUG]  [BUGGY]  &&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	201	None	replace
338	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	158	None	replace
339	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	158	None	replace
340	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstCh  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstCh  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstCh	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	158	None	replace
341	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChil  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChil  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChil	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	158	None	replace
342	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	158	None	replace
343	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	158	None	replace
344	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	24	None	replace
345	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	24	None	replace
346	[BUG]  [BUGGY]  |  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  |  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	|  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	24	None	replace
347	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	24	None	replace
348	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	24	None	replace
349	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()!=  Token.FUNCTION)  {  return  false;	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	24	None	replace
350	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	23	None	replace
351	[BUG]  [BUGGY]  |  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  |  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	|  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	23	None	replace
352	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	23	None	replace
353	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	88	None	replace
354	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	88	None	replace
355	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.FUNCTION,  JSC_PROPERTY_NAME));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.FUNCTION,  JSC_PROPERTY_NAME));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.FUNCTION,  JSC_PROPERTY_NAME));	  parent.replaceChild(callNode,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	186	None	replace
356	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.FUNCTION),  callNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.FUNCTION),  callNode);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.FUNCTION),  callNode);	  parent.replaceChild(callNode,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	186	None	replace
357	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.FUNCTION),  compiler);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.FUNCTION),  compiler);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.FUNCTION),  compiler);	  parent.replaceChild(callNode,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	186	None	replace
358	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.FUNCTION),  nameNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.FUNCTION),  nameNode);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.FUNCTION),  nameNode);	  parent.replaceChild(callNode,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	186	None	replace
359	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.FUNCTION,  nameNode));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.FUNCTION,  nameNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.FUNCTION,  nameNode));	  parent.replaceChild(callNode,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	186	None	replace
360	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.CALL));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.CALL));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.CALL));	  parent.replaceChild(callNode,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	186	None	replace
361	[BUG]  [BUGGY]  aughtException.from(callNode,  JSC_PROPERTY_NAME.getType()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtException.from(callNode,  JSC_PROPERTY_NAME.getType()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtException.from(callNode,  JSC_PROPERTY_NAME.getType()))  {  return  false;  }	  aughtException.from(JSC_PROPERTY_NAME,    callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	167	None	replace
362	[BUG]  [BUGGY]  aughtException.from(JSC_PROPERTY_NAME,  nameNode.getType()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtException.from(JSC_PROPERTY_NAME,  nameNode.getType()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtException.from(JSC_PROPERTY_NAME,  nameNode.getType()))  {  return  false;  }	  aughtException.from(JSC_PROPERTY_NAME,    callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	167	None	replace
363	[BUG]  [BUGGY]  aughtException.from(nameNode,  callNode.getType()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtException.from(nameNode,  callNode.getType()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtException.from(nameNode,  callNode.getType()))  {  return  false;  }	  aughtException.from(JSC_PROPERTY_NAME,    callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	167	None	replace
364	[BUG]  [BUGGY]  aughtException.from(JS_PROPERTY_NAME,  callNode.getType()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtException.from(JS_PROPERTY_NAME,  callNode.getType()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtException.from(JS_PROPERTY_NAME,  callNode.getType()))  {  return  false;  }	  aughtException.from(JSC_PROPERTY_NAME,    callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	167	None	replace
365	[BUG]  [BUGGY]  aughtException.from(JS_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtException.from(JS_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtException.from(JS_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }	  aughtException.from(JSC_PROPERTY_NAME,    callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	167	None	replace
366	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	84	None	replace
367	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	84	None	replace
368	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	84	None	replace
369	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	84	None	replace
370	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	3	None	replace
371	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getString()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getString()))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	3	None	replace
372	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode.getFirstChild()))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	3	None	replace
373	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	3	None	replace
374	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isGet(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	3	None	replace
375	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionCall(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionCall(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isFunctionCall(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	3	None	replace
376	[BUG]  [BUGGY]  ||  callNode.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.getType()  ==  Token.NAME)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  	144	None	replace
377	[BUG]  [BUGGY]  &&  callNode.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  callNode.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  callNode.getType()  ==  Token.NAME)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  	144	None	replace
378	[BUG]  [BUGGY]  if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.NAME)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  	144	None	replace
379	[BUG]  [BUGGY]  aughtExceptionHandler.handleCallHasSideEffects(callNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleCallHasSideEffects(callNode);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleCallHasSideEffects(callNode);	  aughtExceptionHandler.handleNoSideEffects(callNode);    	non-compiled	[CE]  	185	None	replace
380	[BUG]  [BUGGY]  aughtExceptionHandler.handleNoSideEffects(node,  callNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleNoSideEffects(node,  callNode);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleNoSideEffects(node,  callNode);	  aughtExceptionHandler.handleNoSideEffects(callNode);    	non-compiled	[CE]  	185	None	replace
381	[BUG]  [BUGGY]  aughtExceptionHandler.handleNoSideEffectsCall(callNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleNoSideEffectsCall(callNode);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleNoSideEffectsCall(callNode);	  aughtExceptionHandler.handleNoSideEffects(callNode);    	non-compiled	[CE]  	185	None	replace
382	[BUG]  [BUGGY]  allowSideEffects(callNode.getString(),  compiler))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  allowSideEffects(callNode.getString(),  compiler))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode.getString(),  compiler))  {  return  false;  }	  allowSideEffects(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	176	None	replace
383	[BUG]  [BUGGY]  allowSideEffects(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  allowSideEffects(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode.getFirstChild()))  {  return  false;  }	  allowSideEffects(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	176	None	replace
384	[BUG]  [BUGGY]  enableSideEffects(callNode.getString()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  enableSideEffects(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	enableSideEffects(callNode.getString()))  {  return  false;  }	  allowSideEffects(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	176	None	replace
385	[BUG]  [BUGGY]  &&  NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  &&    NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	134	None	replace
386	[BUG]  [BUGGY]  &&  NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  &&    NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	134	None	replace
387	[BUG]  [BUGGY]  &&  NodeUtil.isSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  &&    NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	134	None	replace
388	[BUG]  [BUGGY]  &&  NodeUtil.isFunctionCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isFunctionCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isFunctionCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  &&    NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	134	None	replace
389	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	7	None	replace
390	[BUG]  [BUGGY]  NodeUtil.isFunction(callNode)&&  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isFunction(callNode)&&  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isFunction(callNode)&&  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	7	None	replace
391	[BUG]  [BUGGY]  NodeUtil.isSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	7	None	replace
392	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode.getLastChild()))  {  return  false;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode.getLastChild()))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	7	None	replace
393	[BUG]  [BUGGY]  NodeUtil.isSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	7	None	replace
394	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	105	None	replace
395	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;	  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	105	None	replace
396	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	22	None	replace
397	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.isNoSideEffectsCall())  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	22	None	replace
398	[BUG]  [BUGGY]  Constructor  <  N,  V>  constructorCallHasSideEffects(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  N,  V>  constructorCallHasSideEffects(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  N,  V>  constructorCallHasSideEffects(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	22	None	replace
399	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	22	None	replace
400	[BUG]  [BUGGY]  &&  callNode.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  callNode.isNoSideEffectsCall())  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	22	None	replace
401	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  true;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  true;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  true;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	22	None	replace
402	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	71	None	replace
403	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	71	None	replace
404	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getLastChild().getType()  ==  Token.FUNCTION;	  return    callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	65	None	replace
405	[BUG]  [BUGGY]  return  callNode.getString().indexOf(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().indexOf(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().indexOf(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	65	None	replace
406	[BUG]  [BUGGY]  ||  NodeUtil.isSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ||    NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	99	None	replace
407	[BUG]  [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  ||    NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	99	None	replace
408	[BUG]  [BUGGY]  ||  NodeUtil.isName(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isName(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isName(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ||    NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	99	None	replace
409	[BUG]  [BUGGY]  ||  NodeUtil.isFunctionCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isFunctionCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isFunctionCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ||    NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	99	None	replace
410	[BUG]  [BUGGY]  ||  NodeUtil.isImmutableCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isImmutableCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isImmutableCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ||    NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	99	None	replace
411	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	17	None	replace
412	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	17	None	replace
413	[BUG]  [BUGGY]  AssertionError.make(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  AssertionError.make(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	AssertionError.make(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	17	None	replace
414	[BUG]  [BUGGY]  enableSideEffects(callNode.getType()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  enableSideEffects(callNode.getType()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	enableSideEffects(callNode.getType()))  {  return  false;  }	  allowSideEffects(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	166	None	replace
415	[BUG]  [BUGGY]  allowSideEffects(callNode.getType())||  callNode.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  allowSideEffects(callNode.getType())||  callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode.getType())||  callNode.isNoSideEffectsCall())  {  return  false;  }	  allowSideEffects(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	166	None	replace
416	[BUG]  [BUGGY]  allowSideEffects(callNode.getType(),  compiler))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  allowSideEffects(callNode.getType(),  compiler))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode.getType(),  compiler))  {  return  false;  }	  allowSideEffects(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	166	None	replace
417	[BUG]  [BUGGY]  return  REGEXP_METHODS.contains(callNode.getString())&&  OBJECT_METHODS.contains(callNode.getString()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  REGEXP_METHODS.contains(callNode.getString())&&  OBJECT_METHODS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  REGEXP_METHODS.contains(callNode.getString())&&  OBJECT_METHODS.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    REGEXP_METHODS.contains(callNode.getString()));    	non-compiled	[CE]  	41	None	replace
418	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  REGEXP_METHODS.contains(callNode.getString()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  REGEXP_METHODS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  REGEXP_METHODS.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    REGEXP_METHODS.contains(callNode.getString()));    	non-compiled	[CE]  	41	None	replace
419	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getString()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    REGEXP_METHODS.contains(callNode.getString()));    	non-compiled	[CE]  	41	None	replace
420	[BUG]  [BUGGY]  return  REGEXP_METHODS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  REGEXP_METHODS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  REGEXP_METHODS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    REGEXP_METHODS.contains(callNode.getString()));    	non-compiled	[CE]  	41	None	replace
421	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  STRING_REGEXP_METHODS.contains(callNode.getString()));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  STRING_REGEXP_METHODS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  STRING_REGEXP_METHODS.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    REGEXP_METHODS.contains(callNode.getString()));    	non-compiled	[CE]  	41	None	replace
422	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get    	non-compiled	[CE]  	198	None	replace
423	[BUG]  [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get    	non-compiled	[CE]  	198	None	replace
424	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.get  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.get  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.get	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get    	non-compiled	[CE]  	198	None	replace
425	[BUG]  [BUGGY]  Node  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Node  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Node  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get    	non-compiled	[CE]  	198	None	replace
426	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.get  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.get  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.get	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get    	non-compiled	[CE]  	198	None	replace
427	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get    	non-compiled	[CE]  	198	None	replace
428	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isVarDeclaration(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isVarDeclaration(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	70	None	replace
429	[BUG]  [BUGGY]  NodeUtil.isName(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isName(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isName(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	70	None	replace
430	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isFunctionDeclaration(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isFunctionDeclaration(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	70	None	replace
431	[BUG]  [BUGGY]  NodeUtil.isCall(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isCall(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isCall(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	70	None	replace
432	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChil    	non-compiled	[CE]  	196	None	replace
433	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChil  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChil  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChil	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChil    	non-compiled	[CE]  	196	None	replace
434	[BUG]  [BUGGY]  NodeUtil.isName(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isName(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isName(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  NodeUtil.isFunctionDeclaration(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	73	None	replace
435	[BUG]  [BUGGY]  NodeUtil.isCallDeclaration(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isCallDeclaration(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isCallDeclaration(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  NodeUtil.isFunctionDeclaration(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	73	None	replace
436	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }	  NodeUtil.isFunctionDeclaration(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	73	None	replace
437	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(callNode)||  NodeUtil.isStatementCall(callNode))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isFunctionDeclaration(callNode)||  NodeUtil.isStatementCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isFunctionDeclaration(callNode)||  NodeUtil.isStatementCall(callNode))  {  return  false;  }	  NodeUtil.isFunctionDeclaration(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	73	None	replace
438	[BUG]  [BUGGY]  aughtExceptionHandler.handleNoSideEffects(callNode,  compiler,  callNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleNoSideEffects(callNode,  compiler,  callNode);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleNoSideEffects(callNode,  compiler,  callNode);	  aughtExceptionHandler.handleNoSideEffects(callNode,    compiler);    	non-compiled	[CE]  	184	None	replace
439	[BUG]  [BUGGY]  aughtExceptionHandler.handleCallHasSideEffects(callNode,  compiler);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleCallHasSideEffects(callNode,  compiler);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleCallHasSideEffects(callNode,  compiler);	  aughtExceptionHandler.handleNoSideEffects(callNode,    compiler);    	non-compiled	[CE]  	184	None	replace
440	[BUG]  [BUGGY]  aughtExceptionHandler.handleNoSideEffects(callNode,  compiler,  nameNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleNoSideEffects(callNode,  compiler,  nameNode);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleNoSideEffects(callNode,  compiler,  nameNode);	  aughtExceptionHandler.handleNoSideEffects(callNode,    compiler);    	non-compiled	[CE]  	184	None	replace
441	[BUG]  [BUGGY]  aughtExceptionHandler.handleNoSideEffects(callNode,  compiler,  node);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleNoSideEffects(callNode,  compiler,  node);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleNoSideEffects(callNode,  compiler,  node);	  aughtExceptionHandler.handleNoSideEffects(callNode,    compiler);    	non-compiled	[CE]  	184	None	replace
442	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())    	non-compiled	[CE]  	168	None	replace
443	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())    	non-compiled	[CE]  	168	None	replace
444	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())    	non-compiled	[CE]  	168	None	replace
445	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())    	non-compiled	[CE]  	168	None	replace
446	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getType())  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getType())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getType())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())    	non-compiled	[CE]  	168	None	replace
447	[BUG]  [BUGGY]  return  REGEXP_METHODS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  REGEXP_METHODS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  REGEXP_METHODS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())    	non-compiled	[CE]  	168	None	replace
448	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	122	None	replace
449	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	122	None	replace
450	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild().contains(callNode.getFirstChild()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild().contains(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild().contains(callNode.getFirstChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	122	None	replace
451	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	122	None	replace
452	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	122	None	replace
453	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	122	None	replace
454	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	57	None	replace
455	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	57	None	replace
456	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	57	None	replace
457	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	57	None	replace
458	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	128	None	replace
459	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	128	None	replace
460	[BUG]  [BUGGY]  ConstructorUtil.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	128	None	replace
461	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  REGEXP_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  REGEXP_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  REGEXP_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	128	None	replace
462	[BUG]  [BUGGY]  NodeUtil.checkState(OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.checkState(OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.checkState(OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	128	None	replace
463	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	128	None	replace
464	[BUG]  [BUGGY]  NodeUtil.isCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  NodeUtil.isFunction(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	13	None	replace
465	[BUG]  [BUGGY]  NodeUtil.isGet(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isGet(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isGet(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  NodeUtil.isFunction(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	13	None	replace
466	[BUG]  [BUGGY]  NodeUtil.isFunction(callNode)||  NodeUtil.isCall(callNode))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isFunction(callNode)||  NodeUtil.isCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isFunction(callNode)||  NodeUtil.isCall(callNode))  {  return  false;  }	  NodeUtil.isFunction(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	13	None	replace
467	[BUG]  [BUGGY]  &&  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }	  &&    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	172	None	replace
468	[BUG]  [BUGGY]  &&  NodeUtil.isFunctionDeclaration(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isFunctionDeclaration(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isFunctionDeclaration(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  &&    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	172	None	replace
469	[BUG]  [BUGGY]  &&  NodeUtil.isFunctionDeclaration(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isFunctionDeclaration(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isFunctionDeclaration(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  &&    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	172	None	replace
470	[BUG]  [BUGGY]  &&  NodeUtil.isFunctionDeclaration(callNode)||  callNode.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isFunctionDeclaration(callNode)||  callNode.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isFunctionDeclaration(callNode)||  callNode.getType()  ==  Token.NAME)  {  return  false;  }	  &&    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	172	None	replace
471	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  NEW  node:   "  +  Token.name(callNode.getType()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  NEW  node:   "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Throwables.throw  new  IllegalStateException( "Expected  NEW  node:   "  +  Token.name(callNode.getType()));	  throw    new    IllegalStateException(   "Expected    NEW    node:   "    +    Token.name(callNode.getType()));    	non-compiled	[CE]  	155	None	replace
472	[BUG]  [BUGGY]  Throwables.warning( "Expected  NEW  node: "  +  Token.name(callNode.getType()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Throwables.warning( "Expected  NEW  node: "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Throwables.warning( "Expected  NEW  node: "  +  Token.name(callNode.getType()));	  throw    new    IllegalStateException(   "Expected    NEW    node:   "    +    Token.name(callNode.getType()));    	non-compiled	[CE]  	155	None	replace
473	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException( "Expected  NEW  node:   "  +  Token.name(callNode.getType()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Throwables.wrap(new  IllegalStateException( "Expected  NEW  node:   "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Throwables.wrap(new  IllegalStateException( "Expected  NEW  node:   "  +  Token.name(callNode.getType()));	  throw    new    IllegalStateException(   "Expected    NEW    node:   "    +    Token.name(callNode.getType()));    	non-compiled	[CE]  	155	None	replace
474	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isGet(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	129	None	replace
475	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	129	None	replace
476	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionCall(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isFunctionCall(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	129	None	replace
477	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isVarDeclaration(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	129	None	replace
478	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	129	None	replace
479	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	74	None	replace
480	[BUG]  [BUGGY]  ConstructorUtil.isConstructorCall(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isConstructorCall(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isConstructorCall(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	74	None	replace
481	[BUG]  [BUGGY]  ConstructorUtil.isFunctionDeclaration(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isFunctionDeclaration(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isFunctionDeclaration(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	74	None	replace
482	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	15	None	replace
483	[BUG]  [BUGGY]  ||  callNode.getPropertyName().equals(JSC_PROPERTY_NAME_FN))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.getPropertyName().equals(JSC_PROPERTY_NAME_FN))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.getPropertyName().equals(JSC_PROPERTY_NAME_FN))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	15	None	replace
484	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isAssignmentOp(callNode))    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
485	[BUG]  [BUGGY]  NodeUtil.isAssignmentOp(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isAssignmentOp(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isAssignmentOp(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isAssignmentOp(callNode))    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
486	[BUG]  [BUGGY]  NodeUtil.isSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isAssignmentOp(callNode))    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
487	[BUG]  [BUGGY]  NodeUtil.isFunctionCall(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isFunctionCall(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isFunctionCall(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isAssignmentOp(callNode))    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
488	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunctionOp(callNode))  {  return  false;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunctionOp(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunctionOp(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isAssignmentOp(callNode))    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
489	[BUG]  [BUGGY]  NodeUtil.isName(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isName(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isName(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isAssignmentOp(callNode))    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
490	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	28	None	replace
491	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	28	None	replace
492	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	130	None	replace
493	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	130	None	replace
494	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  REGEXP_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  REGEXP_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  REGEXP_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	130	None	replace
495	[BUG]  [BUGGY]  ConstructorUtil.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	130	None	replace
496	[BUG]  [BUGGY]  ||  callNode.getType()  ==  Token.STRING)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.getType()  ==  Token.STRING)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.getType()  ==  Token.STRING)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.STRING)    {    return    false;    }    	non-compiled	[CE]  	203	None	replace
497	[BUG]  [BUGGY]  &&  callNode.getType()  ==  Token.STRING)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  callNode.getType()  ==  Token.STRING)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  callNode.getType()  ==  Token.STRING)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.STRING)    {    return    false;    }    	non-compiled	[CE]  	203	None	replace
498	[BUG]  [BUGGY]  ||  callNode.getType()  ==  Token.STRING)  {  return  false;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.getType()  ==  Token.STRING)  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.getType()  ==  Token.STRING)  {  return  false;	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.STRING)    {    return    false;    }    	non-compiled	[CE]  	203	None	replace
499	[BUG]  [BUGGY]  ||  callNode.getType()!=  Token.STRING)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.getType()!=  Token.STRING)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.getType()!=  Token.STRING)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.STRING)    {    return    false;    }    	non-compiled	[CE]  	203	None	replace
500	[BUG]  [BUGGY]  &&  callNode.getType()  ==  Token.STRING)  {  return  false;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  callNode.getType()  ==  Token.STRING)  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  callNode.getType()  ==  Token.STRING)  {  return  false;	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.STRING)    {    return    false;    }    	non-compiled	[CE]  	203	None	replace
501	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getLastChild()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getLastChild()))  {  return  false;  }	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	116	None	replace
502	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getString()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getString()))  {  return  false;  }	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	116	None	replace
503	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getNext()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getNext()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getNext()))  {  return  false;  }	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	116	None	replace
504	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getParent()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getParent()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getParent()))  {  return  false;  }	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	116	None	replace
505	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getType()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getType()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getType()))  {  return  false;  }	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	116	None	replace
506	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	90	None	replace
507	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  REGEXP_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  REGEXP_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  REGEXP_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	90	None	replace
508	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME.contains(callNode.getString())  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME.contains(callNode.getString())	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	90	None	replace
509	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getString()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getString()))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	194	None	replace
510	[BUG]  [BUGGY]  ||  callNode.getString().equals(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.getString().equals(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.getString().equals(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  ||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	82	None	replace
511	[BUG]  [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  +  1  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  +  1  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  +  1	  ||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	82	None	replace
512	[BUG]  [BUGGY]  ||  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  ||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	82	None	replace
513	[BUG]  [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  ||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	82	None	replace
514	[BUG]  [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  ||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	82	None	replace
515	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  compiler);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  compiler);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  compiler);	  NodeTraversal.traverse(compiler,    callNode,    new    MatchShallowStatement());    	non-compiled	[CE]  	119	None	replace
516	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  JSC_PROPERTY_NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  JSC_PROPERTY_NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  JSC_PROPERTY_NAME);	  NodeTraversal.traverse(compiler,    callNode,    new    MatchShallowStatement());    	non-compiled	[CE]  	119	None	replace
517	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  REGEXP_METHODS);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  REGEXP_METHODS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  REGEXP_METHODS);	  NodeTraversal.traverse(compiler,    callNode,    new    MatchShallowStatement());    	non-compiled	[CE]  	119	None	replace
518	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  this);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  this);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  this);	  NodeTraversal.traverse(compiler,    callNode,    new    MatchShallowStatement());    	non-compiled	[CE]  	119	None	replace
519	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  node);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  node);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(),  node);	  NodeTraversal.traverse(compiler,    callNode,    new    MatchShallowStatement());    	non-compiled	[CE]  	119	None	replace
520	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(this));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(this));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(this));	  NodeTraversal.traverse(compiler,    callNode,    new    MatchShallowStatement());    	non-compiled	[CE]  	119	None	replace
521	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  +  1));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  +  1));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  +  1));	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	37	None	replace
522	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))    {    return    false;    }    	non-compiled	[CE]  	20	None	replace
523	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))    {    return    false;    }    	non-compiled	[CE]  	20	None	replace
524	[BUG]  [BUGGY]  |  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  |  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	|  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))    {    return    false;    }    	non-compiled	[CE]  	20	None	replace
525	[BUG]  [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))    {    return    false;    }    	non-compiled	[CE]  	20	None	replace
526	[BUG]  [BUGGY]  allowSideEffects(callNode,  compiler))  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  allowSideEffects(callNode,  compiler))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode,  compiler))  {  return  false;  }	  allowSideEffects(callNode))    {    return    false;    }    	non-compiled	[CE]  	183	None	replace
527	[BUG]  [BUGGY]  enableSideEffects(callNode))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  enableSideEffects(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	enableSideEffects(callNode))  {  return  false;  }	  allowSideEffects(callNode))    {    return    false;    }    	non-compiled	[CE]  	183	None	replace
528	[BUG]  [BUGGY]  allowSideEffects(callNode))  {  return  true;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  allowSideEffects(callNode))  {  return  true;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode))  {  return  true;  }	  allowSideEffects(callNode))    {    return    false;    }    	non-compiled	[CE]  	183	None	replace
529	[BUG]  [BUGGY]  enableSideEffects(callNode,  compiler))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  enableSideEffects(callNode,  compiler))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	enableSideEffects(callNode,  compiler))  {  return  false;  }	  allowSideEffects(callNode))    {    return    false;    }    	non-compiled	[CE]  	183	None	replace
530	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    true;    }    	non-compiled	[CE]  	35	None	replace
531	[BUG]  [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    true;    }    	non-compiled	[CE]  	35	None	replace
532	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.isNoSideEffectsCall();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.isNoSideEffectsCall();  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.isNoSideEffectsCall();	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	58	None	replace
533	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	97	None	replace
534	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(node)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(node)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(node)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	97	None	replace
535	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode,  compiler)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode,  compiler)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode,  compiler)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	97	None	replace
536	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLocal  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLocal  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLocal	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild    	non-compiled	[CE]  	197	None	replace
537	[BUG]  [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild    	non-compiled	[CE]  	197	None	replace
538	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild    	non-compiled	[CE]  	197	None	replace
539	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    JSC_PROPERTY_NAME.equals(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	29	None	replace
540	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    JSC_PROPERTY_NAME.equals(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	29	None	replace
541	[BUG]  [BUGGY]  |  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  |  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	|  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	94	None	replace
542	[BUG]  [BUGGY]  ||  callNode.getType()  >=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.getType()  >=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.getType()  >=  Token.FUNCTION)  {  return  false;  }	  ||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	94	None	replace
543	[BUG]  [BUGGY]  ||  callNode.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalStateException( " ");  }	  ||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	94	None	replace
544	[BUG]  [BUGGY]  ||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;	  ||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	94	None	replace
545	[BUG]  [BUGGY]  ||  callNode.getType()  ==  Token.FUNCTION)  {  return  true;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.getType()  ==  Token.FUNCTION)  {  return  true;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.getType()  ==  Token.FUNCTION)  {  return  true;  }	  ||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	94	None	replace
546	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Throwables.throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));	  throw    new    IllegalStateException(   "Expected    NEW    node,    got:   "    +    Token.name(callNode.getType()));    	non-compiled	[CE]  	154	None	replace
547	[BUG]  [BUGGY]  Throwables.warning( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Throwables.warning( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Throwables.warning( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));	  throw    new    IllegalStateException(   "Expected    NEW    node,    got:   "    +    Token.name(callNode.getType()));    	non-compiled	[CE]  	154	None	replace
548	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Throwables.wrap(new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Throwables.wrap(new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));	  throw    new    IllegalStateException(   "Expected    NEW    node,    got:   "    +    Token.name(callNode.getType()));    	non-compiled	[CE]  	154	None	replace
549	[BUG]  [BUGGY]  Throwables.log( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Throwables.log( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Throwables.log( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));	  throw    new    IllegalStateException(   "Expected    NEW    node,    got:   "    +    Token.name(callNode.getType()));    	non-compiled	[CE]  	154	None	replace
550	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.CALL  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    callNode.getType()    ==    Token.CALL    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	40	None	replace
551	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    callNode.getType()    ==    Token.CALL    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	40	None	replace
552	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  REGEXP_METHODS.contains(callNode.getString()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  REGEXP_METHODS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  &&  REGEXP_METHODS.contains(callNode.getString()));	  return    callNode.getType()    ==    Token.CALL    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	40	None	replace
553	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  STRICT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  STRICT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  &&  STRICT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    callNode.getType()    ==    Token.CALL    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	40	None	replace
554	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  STRING_REGEXP_METHODS.contains(callNode.getString()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  STRING_REGEXP_METHODS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  &&  STRING_REGEXP_METHODS.contains(callNode.getString()));	  return    callNode.getType()    ==    Token.CALL    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	40	None	replace
555	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  DEFAULT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  DEFAULT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  &&  DEFAULT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    callNode.getType()    ==    Token.CALL    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	40	None	replace
556	[BUG]  [BUGGY]  Node  callNode  =  callNode.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Node  callNode  =  callNode.getLastChild();  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Node  callNode  =  callNode.getLastChild();	  Node    callNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	115	None	replace
557	[BUG]  [BUGGY]  Node  callNode  =  callNode.getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Node  callNode  =  callNode.getNext();  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Node  callNode  =  callNode.getNext();	  Node    callNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	115	None	replace
558	[BUG]  [BUGGY]  Node  callNode  =  callNode.cloneTree();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Node  callNode  =  callNode.cloneTree();  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Node  callNode  =  callNode.cloneTree();	  Node    callNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	115	None	replace
559	[BUG]  [BUGGY]  Node  callNode  =  callNode.removeFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Node  callNode  =  callNode.removeFirstChild();  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Node  callNode  =  callNode.removeFirstChild();	  Node    callNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	115	None	replace
560	[BUG]  [BUGGY]  Node  callNode  =  callNode.getParent();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Node  callNode  =  callNode.getParent();  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Node  callNode  =  callNode.getParent();	  Node    callNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	115	None	replace
561	[BUG]  [BUGGY]  Node  callNode  =  callNode.getAncestor(1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Node  callNode  =  callNode.getAncestor(1);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Node  callNode  =  callNode.getAncestor(1);	  Node    callNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	115	None	replace
562	[BUG]  [BUGGY]  return  REGEXP_METHODS.contains(callNode.getString())&&  OBJECT_METHODS.contains(callNode.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  REGEXP_METHODS.contains(callNode.getString())&&  OBJECT_METHODS.contains(callNode.getFirstChild());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  REGEXP_METHODS.contains(callNode.getString())&&  OBJECT_METHODS.contains(callNode.getFirstChild());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    REGEXP_METHODS.contains(callNode.getFirstChild());    	non-compiled	[CE]  	182	None	replace
563	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  REGEXP_METHODS.contains(callNode.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  REGEXP_METHODS.contains(callNode.getFirstChild());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  REGEXP_METHODS.contains(callNode.getFirstChild());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    REGEXP_METHODS.contains(callNode.getFirstChild());    	non-compiled	[CE]  	182	None	replace
564	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getLastChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getLastChild());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getLastChild());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    REGEXP_METHODS.contains(callNode.getFirstChild());    	non-compiled	[CE]  	182	None	replace
565	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    REGEXP_METHODS.contains(callNode.getFirstChild());    	non-compiled	[CE]  	182	None	replace
566	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getFirstChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getFirstChild());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getFirstChild());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    REGEXP_METHODS.contains(callNode.getFirstChild());    	non-compiled	[CE]  	182	None	replace
567	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getFirstChil  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getFirstChil  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getFirstChil	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    REGEXP_METHODS.contains(callNode.getFirstChild());    	non-compiled	[CE]  	182	None	replace
568	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getFirstChild  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getFirstChild  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getFirstChild	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    REGEXP_METHODS.contains(callNode.getFirstChild());    	non-compiled	[CE]  	182	None	replace
569	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getLastChild(),  compiler);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getLastChild(),  compiler);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getLastChild(),  compiler);	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild(),    compiler);    	non-compiled	[CE]  	118	None	replace
570	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  callNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  callNode);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  callNode);	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild(),    compiler);    	non-compiled	[CE]  	118	None	replace
571	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getNext(),  compiler);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getNext(),  compiler);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getNext(),  compiler);	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild(),    compiler);    	non-compiled	[CE]  	118	None	replace
572	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  compiler,  REGEXP_METHODS);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  compiler,  REGEXP_METHODS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  compiler,  REGEXP_METHODS);	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild(),    compiler);    	non-compiled	[CE]  	118	None	replace
573	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getString(),  compiler);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getString(),  compiler);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getString(),  compiler);	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild(),    compiler);    	non-compiled	[CE]  	118	None	replace
574	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  compiler,  callNode);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  compiler,  callNode);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  compiler,  callNode);	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild(),    compiler);    	non-compiled	[CE]  	118	None	replace
575	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getLastChild().getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	148	None	replace
576	[BUG]  [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getLastChild().getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	148	None	replace
577	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	2	None	replace
578	[BUG]  [BUGGY]  ||!callNode.isSideEffectsCall())  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||!callNode.isSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||!callNode.isSideEffectsCall())  {  return  false;  }	  ||!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	114	None	replace
579	[BUG]  [BUGGY]  ||!callNode.isNoSideEffectsFunction())  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||!callNode.isNoSideEffectsFunction())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||!callNode.isNoSideEffectsFunction())  {  return  false;  }	  ||!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	114	None	replace
580	[BUG]  [BUGGY]  ||!callNode.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||!callNode.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||!callNode.getType()  ==  Token.CALL)  {  return  false;  }	  ||!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	114	None	replace
581	[BUG]  [BUGGY]  ||!callNode.isNoSideEffects())  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||!callNode.isNoSideEffects())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||!callNode.isNoSideEffects())  {  return  false;  }	  ||!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	114	None	replace
582	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)  &&  NodeUtil.isName(callNode.getString()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)  &&  NodeUtil.isName(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)  &&  NodeUtil.isName(callNode.getString()))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	125	None	replace
583	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	125	None	replace
584	[BUG]  [BUGGY]  NodeUtil.isGet(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isGet(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isGet(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  NodeUtil.isCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	173	None	replace
585	[BUG]  [BUGGY]  NodeUtil.isConstructor(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isConstructor(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isConstructor(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  NodeUtil.isCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	173	None	replace
586	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(callNode)||  NodeUtil.isCall(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isFunctionDeclaration(callNode)||  NodeUtil.isCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isFunctionDeclaration(callNode)||  NodeUtil.isCall(callNode))  {  return  false;  }	  NodeUtil.isCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	173	None	replace
587	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;	  ||    JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))    {    return    false;    	non-compiled	[CE]  	133	None	replace
588	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;	  ||    JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))    {    return    false;    	non-compiled	[CE]  	133	None	replace
589	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))  {  return  true;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))  {  return  true;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))  {  return  true;	  ||    JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))    {    return    false;    	non-compiled	[CE]  	133	None	replace
590	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME_FN))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME_FN))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME_FN))  {  return  false;  }	  aughtExceptionHandler.handleMissingName(callNode.getString(),    JSC_PROPERTY_NAME))    {    return    false;    }    	non-compiled	[CE]  	163	None	replace
591	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(nameNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleMissingName(nameNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleMissingName(nameNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }	  aughtExceptionHandler.handleMissingName(callNode.getString(),    JSC_PROPERTY_NAME))    {    return    false;    }    	non-compiled	[CE]  	163	None	replace
592	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getString(),  name))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getString(),  name))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleMissingName(callNode.getString(),  name))  {  return  false;  }	  aughtExceptionHandler.handleMissingName(callNode.getString(),    JSC_PROPERTY_NAME))    {    return    false;    }    	non-compiled	[CE]  	163	None	replace
593	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME_FN),  name)  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME_FN),  name)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME_FN),  name)  {  return  false;  }	  aughtExceptionHandler.handleMissingName(callNode.getString(),    JSC_PROPERTY_NAME))    {    return    false;    }    	non-compiled	[CE]  	163	None	replace
594	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(node,  compiler);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(node,  compiler);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(node,  compiler);	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode,    compiler);    	non-compiled	[CE]  	79	None	replace
595	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler,  nameNode);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler,  nameNode);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler,  nameNode);	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode,    compiler);    	non-compiled	[CE]  	79	None	replace
596	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler,  REGEXP_METHODS);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler,  REGEXP_METHODS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler,  REGEXP_METHODS);	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode,    compiler);    	non-compiled	[CE]  	79	None	replace
597	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler,  OBJECT_METHODS);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler,  OBJECT_METHODS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler,  OBJECT_METHODS);	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode,    compiler);    	non-compiled	[CE]  	79	None	replace
598	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler,  node);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler,  node);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler,  node);	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode,    compiler);    	non-compiled	[CE]  	79	None	replace
599	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler,  callNode);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler,  callNode);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler,  callNode);	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode,    compiler);    	non-compiled	[CE]  	79	None	replace
600	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&    JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	103	None	replace
601	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&    JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	103	None	replace
602	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode.getString()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode.getString()))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	6	None	replace
603	[BUG]  [BUGGY]  NodeUtil.isSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getString()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getString()))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	6	None	replace
604	[BUG]  [BUGGY]  NodeUtil.isSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getString()))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getString()))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	6	None	replace
605	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME_FN);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME_FN);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME_FN);	  aughtExceptionHandler.handleMissingName(callNode.getString(),    JSC_PROPERTY_NAME);    	non-compiled	[CE]  	161	None	replace
606	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME,  name);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME,  name);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME,  name);	  aughtExceptionHandler.handleMissingName(callNode.getString(),    JSC_PROPERTY_NAME);    	non-compiled	[CE]  	161	None	replace
607	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(nameNode.getString(),  JSC_PROPERTY_NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleMissingName(nameNode.getString(),  JSC_PROPERTY_NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleMissingName(nameNode.getString(),  JSC_PROPERTY_NAME);	  aughtExceptionHandler.handleMissingName(callNode.getString(),    JSC_PROPERTY_NAME);    	non-compiled	[CE]  	161	None	replace
608	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)&&    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	96	None	replace
609	[BUG]  [BUGGY]  NodeUtil.isFunctionCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isFunctionCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isFunctionCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)&&    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	96	None	replace
610	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));    	non-compiled	[CE]  	159	None	replace
611	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));    	non-compiled	[CE]  	159	None	replace
612	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));    	non-compiled	[CE]  	159	None	replace
613	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChil  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChil  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChil	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));    	non-compiled	[CE]  	159	None	replace
614	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));    	non-compiled	[CE]  	159	None	replace
615	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	164	None	replace
616	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    JSC_PROPERTY_NAME.equals(callNode.getLocalName()))    {    return    false;    }    	non-compiled	[CE]  	36	None	replace
617	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    JSC_PROPERTY_NAME.equals(callNode.getLocalName()))    {    return    false;    }    	non-compiled	[CE]  	36	None	replace
618	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getSourceName(),  JSC_PROPERTY_NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getSourceName(),  JSC_PROPERTY_NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode.getSourceName(),  JSC_PROPERTY_NAME);	  NodeTraversal.traverse(compiler,    callNode.getPropertyName(),    JSC_PROPERTY_NAME);    	non-compiled	[CE]  	132	None	replace
619	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getPropertyName(),  JSC_PROPERTY_NAME,  name);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getPropertyName(),  JSC_PROPERTY_NAME,  name);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode.getPropertyName(),  JSC_PROPERTY_NAME,  name);	  NodeTraversal.traverse(compiler,    callNode.getPropertyName(),    JSC_PROPERTY_NAME);    	non-compiled	[CE]  	132	None	replace
620	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getFirstChild(),  JSC_PROPERTY_NAME);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getFirstChild(),  JSC_PROPERTY_NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode.getFirstChild(),  JSC_PROPERTY_NAME);	  NodeTraversal.traverse(compiler,    callNode.getPropertyName(),    JSC_PROPERTY_NAME);    	non-compiled	[CE]  	132	None	replace
621	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getLastChild(),  JSC_PROPERTY_NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getLastChild(),  JSC_PROPERTY_NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode.getLastChild(),  JSC_PROPERTY_NAME);	  NodeTraversal.traverse(compiler,    callNode.getPropertyName(),    JSC_PROPERTY_NAME);    	non-compiled	[CE]  	132	None	replace
622	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getLineno(),  JSC_PROPERTY_NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getLineno(),  JSC_PROPERTY_NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode.getLineno(),  JSC_PROPERTY_NAME);	  NodeTraversal.traverse(compiler,    callNode.getPropertyName(),    JSC_PROPERTY_NAME);    	non-compiled	[CE]  	132	None	replace
623	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getReturnType(),  JSC_PROPERTY_NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getReturnType(),  JSC_PROPERTY_NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode.getReturnType(),  JSC_PROPERTY_NAME);	  NodeTraversal.traverse(compiler,    callNode.getPropertyName(),    JSC_PROPERTY_NAME);    	non-compiled	[CE]  	132	None	replace
624	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getName(),  JSC_PROPERTY_NAME);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getName(),  JSC_PROPERTY_NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode.getName(),  JSC_PROPERTY_NAME);	  NodeTraversal.traverse(compiler,    callNode.getPropertyName(),    JSC_PROPERTY_NAME);    	non-compiled	[CE]  	132	None	replace
625	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	87	None	replace
626	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  +  1  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  +  1  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  +  1	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	87	None	replace
627	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	87	None	replace
628	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  + ", "  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  + ", "  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  + ", "	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	87	None	replace
629	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  + ": "  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  + ": "  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  + ": "	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	87	None	replace
630	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    	non-compiled	[CE]  	151	None	replace
631	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    	non-compiled	[CE]  	151	None	replace
632	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    	non-compiled	[CE]  	151	None	replace
633	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  return  true;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  return  true;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  return  true;	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    true;    	non-compiled	[CE]  	77	None	replace
634	[BUG]  [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  true;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  true;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  true;	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    true;    	non-compiled	[CE]  	77	None	replace
635	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(callNode.getString()))  {  return  false;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(callNode.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(callNode.getString()))  {  return  false;	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    true;    	non-compiled	[CE]  	77	None	replace
636	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))    {    return    false;    }    	non-compiled	[CE]  	19	None	replace
637	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))    {    return    false;    }    	non-compiled	[CE]  	19	None	replace
638	[BUG]  [BUGGY]  |  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  |  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	|  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))    {    return    false;    }    	non-compiled	[CE]  	19	None	replace
639	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))    {    return    false;    }    	non-compiled	[CE]  	19	None	replace
640	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getQualifiedName())||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getQualifiedName())||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getQualifiedName())||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))    {    return    false;    }    	non-compiled	[CE]  	19	None	replace
641	[BUG]  [BUGGY]  allowSideEffects(callNode.getJSPropertyName(),  compiler))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  allowSideEffects(callNode.getJSPropertyName(),  compiler))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode.getJSPropertyName(),  compiler))  {  return  false;  }	  allowSideEffects(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	139	None	replace
642	[BUG]  [BUGGY]  allowSideEffects(callNode.getJSType()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  allowSideEffects(callNode.getJSType()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode.getJSType()))  {  return  false;  }	  allowSideEffects(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	139	None	replace
643	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.FUNCTION  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    callNode.getType()    ==    Token.FUNCTION    ||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	64	None	replace
644	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FUNCTION  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FUNCTION  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FUNCTION	  return    callNode.getType()    ==    Token.FUNCTION    ||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	64	None	replace
645	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FUNCTION  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FUNCTION  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.FUNCTION  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FUNCTION	  return    callNode.getType()    ==    Token.FUNCTION    ||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	64	None	replace
646	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FU  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FU  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.FUNCTION  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FU	  return    callNode.getType()    ==    Token.FUNCTION    ||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	64	None	replace
647	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FU  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FU  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FU	  return    callNode.getType()    ==    Token.FUNCTION    ||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	64	None	replace
648	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	85	None	replace
649	[BUG]  [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	85	None	replace
650	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	85	None	replace
651	[BUG]  [BUGGY]  &&  callNode.getType()!=  Token.STRING)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  callNode.getType()!=  Token.STRING)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  callNode.getType()!=  Token.STRING)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.STRING)    {    return    false;    }    	non-compiled	[CE]  	202	None	replace
652	[BUG]  [BUGGY]  ||  callNode.getType()!=  Token.STRING)  {  return  false;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.getType()!=  Token.STRING)  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.getType()!=  Token.STRING)  {  return  false;	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.STRING)    {    return    false;    }    	non-compiled	[CE]  	202	None	replace
653	[BUG]  [BUGGY]  &&  callNode.getType()!=  Token.STRING)  {  return  false;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  callNode.getType()!=  Token.STRING)  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  callNode.getType()!=  Token.STRING)  {  return  false;	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.STRING)    {    return    false;    }    	non-compiled	[CE]  	202	None	replace
654	[BUG]  [BUGGY]  ||  NodeUtil.isCall(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isCall(callNode))  {  return  false;  }	  ||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	8	None	replace
655	[BUG]  [BUGGY]  ||  NodeUtil.isAssign(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isAssign(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isAssign(callNode))  {  return  false;  }	  ||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	8	None	replace
656	[BUG]  [BUGGY]  ||  NodeUtil.isVar(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isVar(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isVar(callNode))  {  return  false;  }	  ||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	8	None	replace
657	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  throw  new  IllegalStateException( " ");  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  throw  new  IllegalStateException( " ");  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  throw  new  IllegalStateException( " ");	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	78	None	replace
658	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	78	None	replace
659	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	78	None	replace
660	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	78	None	replace
661	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSideEffects(nameNode,  JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.throwAsSideEffects(nameNode,  JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.throwAsSideEffects(nameNode,  JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }	  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,    JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	178	None	replace
662	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,  JSC_PROPERTY_NAME,  nameNode.getString()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,  JSC_PROPERTY_NAME,  nameNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,  JSC_PROPERTY_NAME,  nameNode.getString()))  {  return  false;  }	  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,    JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	178	None	replace
663	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSideEffects(node,  JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.throwAsSideEffects(node,  JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.throwAsSideEffects(node,  JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }	  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,    JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	178	None	replace
664	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSideEffects(JS_PROPERTY_NAME,  JSC_PROPERTY_NAME,  nameNode.getString()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.throwAsSideEffects(JS_PROPERTY_NAME,  JSC_PROPERTY_NAME,  nameNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.throwAsSideEffects(JS_PROPERTY_NAME,  JSC_PROPERTY_NAME,  nameNode.getString()))  {  return  false;  }	  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,    JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	178	None	replace
665	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSideEffects(callNode,  JSC_PROPERTY_NAME,  JSC_PROPERTY_NAME.getString()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.throwAsSideEffects(callNode,  JSC_PROPERTY_NAME,  JSC_PROPERTY_NAME.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.throwAsSideEffects(callNode,  JSC_PROPERTY_NAME,  JSC_PROPERTY_NAME.getString()))  {  return  false;  }	  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,    JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	178	None	replace
666	[BUG]  [BUGGY]  allowSideEffects(callNode.getLastChild()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  allowSideEffects(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode.getLastChild()))  {  return  false;  }	  allowSideEffects(callNode.getPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	174	None	replace
667	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    	non-compiled	[CE]  	62	None	replace
668	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    	non-compiled	[CE]  	62	None	replace
669	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    	non-compiled	[CE]  	62	None	replace
670	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    else    if(compiler.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	21	None	replace
671	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    else    if(compiler.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	21	None	replace
672	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    else    if(compiler.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	21	None	replace
673	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    else    if(compiler.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	21	None	replace
674	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  true;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  true;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  true;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    else    if(compiler.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	21	None	replace
675	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  throw  new  IllegalStateException( " ");  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    else    if(compiler.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	21	None	replace
676	[BUG]  [BUGGY]  ||  NodeUtil.isSideEffectsCall(callNode))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isSideEffectsCall(callNode))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isSideEffectsCall(callNode))  {  throw  new  IllegalStateException( " ");  }	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	48	None	replace
677	[BUG]  [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isNoSideEffectsCall(callNode))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	48	None	replace
678	[BUG]  [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isNoSideEffectsCall(callNode))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));  }	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	48	None	replace
679	[BUG]  [BUGGY]  ||  NodeUtil.isFunctionCall(callNode))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isFunctionCall(callNode))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isFunctionCall(callNode))  {  throw  new  IllegalStateException( " ");  }	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	48	None	replace
680	[BUG]  [BUGGY]  ||  NodeUtil.isImmutableCall(callNode))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isImmutableCall(callNode))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isImmutableCall(callNode))  {  throw  new  IllegalStateException( " ");  }	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	48	None	replace
681	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkArgument(!NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkArgument(!NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }	  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	47	None	replace
682	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunctionCall(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isFunctionCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!NodeUtil.isFunctionCall(callNode))  {  return  false;  }	  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	47	None	replace
683	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableCall(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!NodeUtil.isImmutableCall(callNode))  {  return  false;  }	  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	47	None	replace
684	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGet(callNode))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isGet(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!NodeUtil.isGet(callNode))  {  return  false;  }	  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	47	None	replace
685	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isVarDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isVarDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!NodeUtil.isVarDeclaration(callNode))  {  return  false;  }	  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	47	None	replace
686	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  JSC_PROPERTY_NAME.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  JSC_PROPERTY_NAME.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    JSC_PROPERTY_NAME.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	137	None	replace
687	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  JSC_PROPERTY_NAME.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  JSC_PROPERTY_NAME.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    JSC_PROPERTY_NAME.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	137	None	replace
688	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  JSC_PROPERTY_NAME.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  JSC_PROPERTY_NAME.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    JSC_PROPERTY_NAME.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	137	None	replace
689	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  JSC_PROPERTY_NAME.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  JSC_PROPERTY_NAME.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  JSC_PROPERTY_NAME.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    JSC_PROPERTY_NAME.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	137	None	replace
690	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  JSC_PROPERTY_NAME.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  JSC_PROPERTY_NAME.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  JSC_PROPERTY_NAME.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    JSC_PROPERTY_NAME.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	137	None	replace
691	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	56	None	replace
692	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    callNode.getType()    ==    Token.NAME    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	39	None	replace
693	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    callNode.getType()    ==    Token.NAME    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	39	None	replace
694	[BUG]  [BUGGY]  return  callNode.getType()!=  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()!=  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()!=  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    callNode.getType()    ==    Token.NAME    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	39	None	replace
695	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  REGEXP_METHODS.contains(callNode.getString()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  REGEXP_METHODS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  REGEXP_METHODS.contains(callNode.getString()));	  return    callNode.getType()    ==    Token.NAME    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	39	None	replace
696	[BUG]  [BUGGY]  return  callNode.getType()!=  Token.NAME  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()!=  Token.NAME  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()!=  Token.NAME  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    callNode.getType()    ==    Token.NAME    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	39	None	replace
697	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  STRICT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  STRICT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  STRICT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    callNode.getType()    ==    Token.NAME    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	39	None	replace
698	[BUG]  [BUGGY]  NodeUtil.isSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	98	None	replace
699	[BUG]  [BUGGY]  &&  NodeUtil.isFunction(callNode))  {  return  true;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isFunction(callNode))  {  return  true;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isFunction(callNode))  {  return  true;  }	  &&    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	165	None	replace
700	[BUG]  [BUGGY]  &&  NodeUtil.isCall(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isCall(callNode))  {  return  false;  }	  &&    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	165	None	replace
701	[BUG]  [BUGGY]  &&  NodeUtil.isFunction(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isFunction(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isFunction(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  &&    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	165	None	replace
702	[BUG]  [BUGGY]  NodeUtil.isSideEffectsCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isSideEffectsCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isSideEffectsCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	51	None	replace
703	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	51	None	replace
704	[BUG]  [BUGGY]  NodeUtil.isExpressionNode(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isExpressionNode(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isExpressionNode(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	51	None	replace
705	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	109	None	replace
706	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	109	None	replace
707	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	109	None	replace
708	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	109	None	replace
709	[BUG]  [BUGGY]  NodeUtil.isFunctionCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isFunctionCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isFunctionCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  NodeUtil.isFunctionCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	55	None	replace
710	[BUG]  [BUGGY]  NodeUtil.isExpressionNode(callNode)||  NodeUtil.isFunctionCall(callNode))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isExpressionNode(callNode)||  NodeUtil.isFunctionCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isExpressionNode(callNode)||  NodeUtil.isFunctionCall(callNode))  {  return  false;  }	  NodeUtil.isFunctionCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	55	None	replace
711	[BUG]  [BUGGY]  NodeUtil.isName(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isName(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isName(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  NodeUtil.isFunctionCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	55	None	replace
712	[BUG]  [BUGGY]  NodeUtil.isCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  NodeUtil.isFunctionCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	55	None	replace
713	[BUG]  [BUGGY]  NodeUtil.isGet(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isGet(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isGet(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  NodeUtil.isFunctionCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	55	None	replace
714	[BUG]  [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	16	None	replace
715	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	16	None	replace
716	[BUG]  [BUGGY]  ||  callNode.isNoSideEffectsCall())  {  return  true;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.isNoSideEffectsCall())  {  return  true;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.isNoSideEffectsCall())  {  return  true;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.isNoSideEffectsCall())    {    return    true;    }    	non-compiled	[CE]  	25	None	replace
717	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.isNoSideEffectsCall())  {  return  true;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.isNoSideEffectsCall())  {  return  true;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.isNoSideEffectsCall())  {  return  true;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.isNoSideEffectsCall())    {    return    true;    }    	non-compiled	[CE]  	25	None	replace
718	[BUG]  [BUGGY]  &&  callNode.isNoSideEffectsCall())  {  return  true;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  callNode.isNoSideEffectsCall())  {  return  true;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  callNode.isNoSideEffectsCall())  {  return  true;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.isNoSideEffectsCall())    {    return    true;    }    	non-compiled	[CE]  	25	None	replace
719	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	61	None	replace
720	[BUG]  [BUGGY]  return  callNode.getString().equals(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().equals(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().equals(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	61	None	replace
721	[BUG]  [BUGGY]  return  callNode.getLastChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getLastChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getLastChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	61	None	replace
722	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  +  1);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  +  1);	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    	non-compiled	[CE]  	75	None	replace
723	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString(),  CONSTRUCTORS_WITHOUT_SIDEEFFECTS);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString(),  CONSTRUCTORS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString(),  CONSTRUCTORS_WITHOUT_SIDEEFFECTS);	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    	non-compiled	[CE]  	75	None	replace
724	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild());	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    	non-compiled	[CE]  	75	None	replace
725	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString(),  REGEXP_METHODS);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString(),  REGEXP_METHODS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString(),  REGEXP_METHODS);	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    	non-compiled	[CE]  	75	None	replace
726	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild());	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    	non-compiled	[CE]  	75	None	replace
727	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunctionCall(callNode));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isFunctionCall(callNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!NodeUtil.isFunctionCall(callNode));	  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode));    	non-compiled	[CE]  	46	None	replace
728	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGet(callNode));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isGet(callNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!NodeUtil.isGet(callNode));	  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode));    	non-compiled	[CE]  	46	None	replace
729	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableCall(callNode));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableCall(callNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!NodeUtil.isImmutableCall(callNode));	  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode));    	non-compiled	[CE]  	46	None	replace
730	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSideEffects(callNode));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSideEffects(callNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!NodeUtil.mayHaveSideEffects(callNode));	  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode));    	non-compiled	[CE]  	46	None	replace
731	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isVarDeclaration(callNode));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isVarDeclaration(callNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!NodeUtil.isVarDeclaration(callNode));	  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode));    	non-compiled	[CE]  	46	None	replace
732	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isName(callNode));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isName(callNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!NodeUtil.isName(callNode));	  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode));    	non-compiled	[CE]  	46	None	replace
733	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isCallHasSideEffects(callNode));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isCallHasSideEffects(callNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!NodeUtil.isCallHasSideEffects(callNode));	  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode));    	non-compiled	[CE]  	46	None	replace
734	[BUG]  [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  ||    NodeUtil.isNoSideEffectsCall(callNode)&&    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	135	None	replace
735	[BUG]  [BUGGY]  ||  NodeUtil.isName(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isName(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isName(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ||    NodeUtil.isNoSideEffectsCall(callNode)&&    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	135	None	replace
736	[BUG]  [BUGGY]  ||  NodeUtil.isFunctionCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isFunctionCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isFunctionCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ||    NodeUtil.isNoSideEffectsCall(callNode)&&    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	135	None	replace
737	[BUG]  [BUGGY]  ||  NodeUtil.isImmutableCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isImmutableCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isImmutableCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ||    NodeUtil.isNoSideEffectsCall(callNode)&&    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	135	None	replace
738	[BUG]  [BUGGY]  aughtException.from(JSC_PROPERTY_NAME,  nameNode.getString()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtException.from(JSC_PROPERTY_NAME,  nameNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtException.from(JSC_PROPERTY_NAME,  nameNode.getString()))  {  return  false;  }	  aughtException.from(JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	162	None	replace
739	[BUG]  [BUGGY]  aughtException.from(callNode,  JSC_PROPERTY_NAME.getString()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtException.from(callNode,  JSC_PROPERTY_NAME.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtException.from(callNode,  JSC_PROPERTY_NAME.getString()))  {  return  false;  }	  aughtException.from(JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	162	None	replace
740	[BUG]  [BUGGY]  aughtException.from(nameNode,  callNode.getString()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtException.from(nameNode,  callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtException.from(nameNode,  callNode.getString()))  {  return  false;  }	  aughtException.from(JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	162	None	replace
741	[BUG]  [BUGGY]  aughtException.from(JS_PROPERTY_NAME,  nameNode.getString()))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtException.from(JS_PROPERTY_NAME,  nameNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtException.from(JS_PROPERTY_NAME,  nameNode.getString()))  {  return  false;  }	  aughtException.from(JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	162	None	replace
742	[BUG]  [BUGGY]  aughtException.from(compiler,  callNode.getString()))  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtException.from(compiler,  callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtException.from(compiler,  callNode.getString()))  {  return  false;  }	  aughtException.from(JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	162	None	replace
743	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
744	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getLastChild(),  compiler))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getLastChild(),  compiler))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getLastChild(),  compiler))  {  return  false;  }	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild(),    compiler))    {    return    false;    }    	non-compiled	[CE]  	117	None	replace
745	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getString(),  compiler))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getString(),  compiler))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getString(),  compiler))  {  return  false;  }	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild(),    compiler))    {    return    false;    }    	non-compiled	[CE]  	117	None	replace
746	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getNext(),  compiler))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getNext(),  compiler))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getNext(),  compiler))  {  return  false;  }	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild(),    compiler))    {    return    false;    }    	non-compiled	[CE]  	117	None	replace
747	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  compiler))  {  return  true;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  compiler))  {  return  true;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  compiler))  {  return  true;  }	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild(),    compiler))    {    return    false;    }    	non-compiled	[CE]  	117	None	replace
748	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  callNode))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  callNode))  {  return  false;  }	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild(),    compiler))    {    return    false;    }    	non-compiled	[CE]  	117	None	replace
749	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getParent(),  compiler))  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getParent(),  compiler))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getParent(),  compiler))  {  return  false;  }	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild(),    compiler))    {    return    false;    }    	non-compiled	[CE]  	117	None	replace
750	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS,  REGEXP_METHODS);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS,  REGEXP_METHODS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS,  REGEXP_METHODS);	  NodeTraversal.traverse(compiler,    callNode,    JSC_PROPERTY_NAME,    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);    	non-compiled	[CE]  	149	None	replace
751	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME,  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS,  REGEXP_METHODS);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME,  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS,  REGEXP_METHODS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME,  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS,  REGEXP_METHODS);	  NodeTraversal.traverse(compiler,    callNode,    JSC_PROPERTY_NAME,    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);    	non-compiled	[CE]  	149	None	replace
752	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS,  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);	  NodeTraversal.traverse(compiler,    callNode,    JSC_PROPERTY_NAME,    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);    	non-compiled	[CE]  	149	None	replace
753	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);	  NodeTraversal.traverse(compiler,    callNode,    JSC_PROPERTY_NAME,    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);    	non-compiled	[CE]  	149	None	replace
754	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME,  CONSTRUCTORS_WITHOUT_SIDEEFFECTS,  REGEXP_METHODS);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME,  CONSTRUCTORS_WITHOUT_SIDEEFFECTS,  REGEXP_METHODS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME,  CONSTRUCTORS_WITHOUT_SIDEEFFECTS,  REGEXP_METHODS);	  NodeTraversal.traverse(compiler,    callNode,    JSC_PROPERTY_NAME,    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);    	non-compiled	[CE]  	149	None	replace
755	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  CONSTRUCTORS_WITHOUT_SIDEEFFECTS,  REGEXP_METHODS);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  CONSTRUCTORS_WITHOUT_SIDEEFFECTS,  REGEXP_METHODS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  CONSTRUCTORS_WITHOUT_SIDEEFFECTS,  REGEXP_METHODS);	  NodeTraversal.traverse(compiler,    callNode,    JSC_PROPERTY_NAME,    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);    	non-compiled	[CE]  	149	None	replace
756	[BUG]  [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	104	None	replace
757	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	104	None	replace
758	[BUG]  [BUGGY]  NodeUtil.isSideEffectsCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isSideEffectsCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isSideEffectsCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	54	None	replace
759	[BUG]  [BUGGY]  NodeUtil.isName(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isName(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isName(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	54	None	replace
760	[BUG]  [BUGGY]  return  callNode.getString()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	189	None	replace
761	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.FUNCTION  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	189	None	replace
762	[BUG]  [BUGGY]  return  callNode.getString()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString()  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	189	None	replace
763	[BUG]  [BUGGY]  return  callNode.getFirstChild().add(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getFirstChild().add(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getFirstChild().add(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	189	None	replace
764	[BUG]  [BUGGY]  |  NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  |  NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	|  NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	180	None	replace
765	[BUG]  [BUGGY]  return  callNode.getString().contains(JSC_PROPERTY_NAME_FN)&&  JSC_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(JSC_PROPERTY_NAME_FN)&&  JSC_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(JSC_PROPERTY_NAME_FN)&&  JSC_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	108	None	replace
766	[BUG]  [BUGGY]  return  callNode.getString().contains(JS_PROPERTY_NAME_FN)&&  JSC_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(JS_PROPERTY_NAME_FN)&&  JSC_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(JS_PROPERTY_NAME_FN)&&  JSC_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	108	None	replace
767	[BUG]  [BUGGY]  return  callNode.getString().contains(CONSTRUCTORS_WITHOUT_SIDEEFFECTS)&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(CONSTRUCTORS_WITHOUT_SIDEEFFECTS)&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(CONSTRUCTORS_WITHOUT_SIDEEFFECTS)&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));	  return    callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	108	None	replace
768	[BUG]  [BUGGY]  return  callNode.getFirstChild().contains(JSC_PROPERTY_NAME_FN)&&  JSC_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getFirstChild().contains(JSC_PROPERTY_NAME_FN)&&  JSC_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getFirstChild().contains(JSC_PROPERTY_NAME_FN)&&  JSC_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	111	None	replace
769	[BUG]  [BUGGY]  return  callNode.getLastChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getLastChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getLastChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));	  return    callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	111	None	replace
770	[BUG]  [BUGGY]  return  callNode.getLastChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getLastChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getLastChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));	  return    callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	111	None	replace
771	[BUG]  [BUGGY]  return  callNode.getLastChild().contains(JSC_PROPERTY_NAME_FN)&&  JSC_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getLastChild().contains(JSC_PROPERTY_NAME_FN)&&  JSC_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getLastChild().contains(JSC_PROPERTY_NAME_FN)&&  JSC_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	111	None	replace
772	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSideEffects(JS_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.throwAsSideEffects(JS_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.throwAsSideEffects(JS_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }	  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	177	None	replace
773	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,  nameNode.getString()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,  nameNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,  nameNode.getString()))  {  return  false;  }	  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	177	None	replace
774	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSideEffects(nameNode,  callNode.getString()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.throwAsSideEffects(nameNode,  callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.throwAsSideEffects(nameNode,  callNode.getString()))  {  return  false;  }	  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	177	None	replace
775	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSideEffects(new  JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.throwAsSideEffects(new  JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.throwAsSideEffects(new  JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }	  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	177	None	replace
776	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSideEffects(node,  callNode.getString()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.throwAsSideEffects(node,  callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.throwAsSideEffects(node,  callNode.getString()))  {  return  false;  }	  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	177	None	replace
777	[BUG]  [BUGGY]  ||  callNode.getString().equals(JSC_PROPERTY_NAME_FN))  {  return  true;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  callNode.getString().equals(JSC_PROPERTY_NAME_FN))  {  return  true;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.getString().equals(JSC_PROPERTY_NAME_FN))  {  return  true;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    true;    }    	non-compiled	[CE]  	32	None	replace
778	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  true;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  true;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  true;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    true;    }    	non-compiled	[CE]  	32	None	replace
779	[BUG]  [BUGGY]  aughtExceptionHandler.handleNoSideEffects(callNode,  compiler,  this);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleNoSideEffects(callNode,  compiler,  this);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleNoSideEffects(callNode,  compiler,  this);	  aughtExceptionHandler.handleNoSideEffects(callNode,    compiler);    	non-compiled	[CE]  	184	None	replace
780	[BUG]  [BUGGY]  aughtExceptionHandler.handleNoSideEffects(node,  compiler);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleNoSideEffects(node,  compiler);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleNoSideEffects(node,  compiler);	  aughtExceptionHandler.handleNoSideEffects(callNode,    compiler);    	non-compiled	[CE]  	184	None	replace
781	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(conSTRUCTORS_WITHOUT_SIDEEFFECTS.getString());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(conSTRUCTORS_WITHOUT_SIDEEFFECTS.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(conSTRUCTORS_WITHOUT_SIDEEFFECTS.getString());	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString());    	non-compiled	[CE]  	80	None	replace
782	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(constructCallHasSideEffects(callNode,  compiler));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(constructCallHasSideEffects(callNode,  compiler));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(constructCallHasSideEffects(callNode,  compiler));	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString());    	non-compiled	[CE]  	80	None	replace
783	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(constructCallHasSideEffects(callNode));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(constructCallHasSideEffects(callNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(constructCallHasSideEffects(callNode));	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString());    	non-compiled	[CE]  	80	None	replace
784	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	108	None	replace
785	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    JSC_PROPERTY_NAME.equals(callNode.getLocalName()))    {    return    false;    }    	non-compiled	[CE]  	31	None	replace
786	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    JSC_PROPERTY_NAME.equals(callNode.getLocalName()))    {    return    false;    }    	non-compiled	[CE]  	31	None	replace
787	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	102	None	replace
788	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false	  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	102	None	replace
789	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isForIn(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isForIn(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isForIn(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	52	None	replace
790	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	52	None	replace
791	[BUG]  [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()!=  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	188	None	replace
792	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getLastChild().getType()!=  Token.FUNCTION;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getLastChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getLastChild().getType()!=  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	188	None	replace
793	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild()  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild    	non-compiled	[CE]  	195	None	replace
794	[BUG]  [BUGGY]  ||  NodeUtil.isCall(callNode))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isCall(callNode))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isCall(callNode))  {  throw  new  IllegalStateException( " ");  }	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	48	None	replace
795	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode.getFirstChild()))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
796	[BUG]  [BUGGY]  ||  NodeUtil.isVarDeclaration(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isVarDeclaration(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isVarDeclaration(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ||    NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	99	None	replace
797	[BUG]  [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())    	non-compiled	[CE]  	168	None	replace
798	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getType())  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getType())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getType())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())    	non-compiled	[CE]  	168	None	replace
799	[BUG]  [BUGGY]  &&  NodeUtil.isStatement(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isStatement(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isStatement(callNode))  {  return  false;  }	  &&    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	171	None	replace
800	[BUG]  [BUGGY]  &&  NodeUtil.isFunctionDeclaration(callNode)||  callNode.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isFunctionDeclaration(callNode)||  callNode.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isFunctionDeclaration(callNode)||  callNode.getType()  ==  Token.CALL)  {  return  false;  }	  &&    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	172	None	replace
801	[BUG]  [BUGGY]  &&  NodeUtil.isFunctionDeclaration(callNode)||  callNode.getType()!=  Token.CALL)  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isFunctionDeclaration(callNode)||  callNode.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isFunctionDeclaration(callNode)||  callNode.getType()!=  Token.CALL)  {  return  false;  }	  &&    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	172	None	replace
802	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  REGEXP_METHODS.contains(callNode.getString()))  {  return  false;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  REGEXP_METHODS.contains(callNode.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  REGEXP_METHODS.contains(callNode.getString()))  {  return  false;	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	130	None	replace
803	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	85	None	replace
804	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()    	non-compiled	[CE]  	199	None	replace
805	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()    	non-compiled	[CE]  	199	None	replace
806	[BUG]  [BUGGY]  return  callNode.getType().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()    	non-compiled	[CE]  	199	None	replace
807	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    JSC_PROPERTY_NAME.equals(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	29	None	replace
808	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    JSC_PROPERTY_NAME.equals(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	29	None	replace
809	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    JSC_PROPERTY_NAME.equals(callNode.getLocalName()))    {    return    false;    }    	non-compiled	[CE]  	36	None	replace
810	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    JSC_PROPERTY_NAME.equals(callNode.getLocalName()))    {    return    false;    }    	non-compiled	[CE]  	36	None	replace
811	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isConstructorCall(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isConstructorCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isConstructorCall(callNode))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	71	None	replace
812	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isGetProp(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isGetProp(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isGetProp(callNode))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	71	None	replace
813	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild());  return  true;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild());  return  true;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild());  return  true;	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    return    true;    	non-compiled	[CE]  	191	None	replace
814	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(node.getString());  return  false;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(node.getString());  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(node.getString());  return  false;	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    return    true;    	non-compiled	[CE]  	191	None	replace
815	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(nameNode.getString()))  {  return  false;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(nameNode.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(nameNode.getString()))  {  return  false;	  Constructor    <    Node,    JSC_PROPERTY_NAME_FN.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	190	None	replace
816	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(node.getString()))  {  return  false;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(node.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(node.getString()))  {  return  false;	  Constructor    <    Node,    JSC_PROPERTY_NAME_FN.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	190	None	replace
817	[BUG]  [BUGGY]  NodeUtil.isCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  NodeUtil.isFunctionCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	55	None	replace
818	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	145	None	replace
819	[BUG]  [BUGGY]  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	145	None	replace
820	[BUG]  [BUGGY]  ||!callNode.getType())  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||!callNode.getType())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||!callNode.getType())  {  return  false;  }	  ||!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	114	None	replace
821	[BUG]  [BUGGY]  ||!callNode.hasChildren())  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||!callNode.hasChildren())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||!callNode.hasChildren())  {  return  false;  }	  ||!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	114	None	replace
822	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.NAME)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.NAME)  {  return  false;  }	  Preconditions.checkState(!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	141	None	replace
823	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  Preconditions.checkState(!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	141	None	replace
824	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  Preconditions.checkState(!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	141	None	replace
825	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isGetProp(callNode));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isGetProp(callNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!NodeUtil.isGetProp(callNode));	  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode));    	non-compiled	[CE]  	46	None	replace
826	[BUG]  [BUGGY]  ||  CallNodeUtil.isNoSideEffectsCall(node)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  CallNodeUtil.isNoSideEffectsCall(node)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  CallNodeUtil.isNoSideEffectsCall(node)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ||    CallNodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	100	None	replace
827	[BUG]  [BUGGY]  ||  CallNodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  CallNodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  CallNodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  ||    CallNodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	100	None	replace
828	[BUG]  [BUGGY]  ||  CallNodeUtil.isConstructorCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  CallNodeUtil.isConstructorCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  CallNodeUtil.isConstructorCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ||    CallNodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	100	None	replace
829	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  JSC_PROPERTY_NAME.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  JSC_PROPERTY_NAME.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));    	non-compiled	[CE]  	159	None	replace
830	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getString())  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	88	None	replace
831	[BUG]  [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	88	None	replace
832	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
833	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVar(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVar(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVar(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
834	[BUG]  [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get    	non-compiled	[CE]  	198	None	replace
835	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get    	non-compiled	[CE]  	198	None	replace
836	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  NodeUtil.mayHaveSideEffects(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	147	None	replace
837	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isCall(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isCall(callNode))  {  return  false;  }	  NodeUtil.mayHaveSideEffects(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	147	None	replace
838	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isConstructorCall(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isConstructorCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isConstructorCall(callNode))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	74	None	replace
839	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	74	None	replace
840	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  OBJECT_FUNCTIONS_WITHOUT_SIDEEFFECTS);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  OBJECT_FUNCTIONS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  OBJECT_FUNCTIONS_WITHOUT_SIDEEFFECTS);	  NodeTraversal.traverse(compiler,    callNode,    compiler);    	non-compiled	[CE]  	81	None	replace
841	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	34	None	replace
842	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	34	None	replace
843	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME,  CONSTRUCTORS_WITHOUT_SIDEEFFECTS);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME,  CONSTRUCTORS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME,  CONSTRUCTORS_WITHOUT_SIDEEFFECTS);	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	34	None	replace
844	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getLastChild()))  {  return  false;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getLastChild()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getLastChild()))  {  return  false;	  ||    JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))    {    return    false;    	non-compiled	[CE]  	133	None	replace
845	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;	  ||    JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))    {    return    false;    	non-compiled	[CE]  	133	None	replace
846	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  JSC_PROPERTY_NAME.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  JSC_PROPERTY_NAME.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	158	None	replace
847	[BUG]  [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	158	None	replace
848	[BUG]  [BUGGY]  return  callNode.getFirstChild().contains(CONSTRUCTORS_WITHOUT_SIDEEFFECTS)&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getFirstChild().contains(CONSTRUCTORS_WITHOUT_SIDEEFFECTS)&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getFirstChild().contains(CONSTRUCTORS_WITHOUT_SIDEEFFECTS)&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));	  return    callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	111	None	replace
849	[BUG]  [BUGGY]  allowSideEffects(callNode.getPropertyName(),  compiler))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  allowSideEffects(callNode.getPropertyName(),  compiler))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode.getPropertyName(),  compiler))  {  return  false;  }	  allowSideEffects(callNode.getPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	174	None	replace
850	[BUG]  [BUGGY]  &&!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	143	None	replace
851	[BUG]  [BUGGY]  if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	143	None	replace
852	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	143	None	replace
853	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.FUNCTION),  JSC_PROPERTY_NAME);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.FUNCTION),  JSC_PROPERTY_NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.FUNCTION),  JSC_PROPERTY_NAME);	  parent.replaceChild(callNode,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	186	None	replace
854	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.FUNCTION),  OBJECT_METHODS);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.FUNCTION),  OBJECT_METHODS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.FUNCTION),  OBJECT_METHODS);	  parent.replaceChild(callNode,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	186	None	replace
855	[BUG]  [BUGGY]  &&  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }	  &&    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	165	None	replace
856	[BUG]  [BUGGY]  &&  NodeUtil.isGet(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isGet(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isGet(callNode))  {  return  false;  }	  &&    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	165	None	replace
857	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString())  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.CALL  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString())	  return    callNode.getType()    ==    Token.CALL    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	110	None	replace
858	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()    	non-compiled	[CE]  	146	None	replace
859	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()    	non-compiled	[CE]  	146	None	replace
860	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()    	non-compiled	[CE]  	146	None	replace
861	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node:   "  +  Token.name(callNode.getLastChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node:   "  +  Token.name(callNode.getLastChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	throw  new  IllegalStateException( "Expected  NEW  node:   "  +  Token.name(callNode.getLastChild()));	  throw    new    IllegalStateException(   "Expected    NEW    node:   "    +    Token.name(callNode.getFirstChild()));    	non-compiled	[CE]  	156	None	replace
862	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node:   "  +  Token.name(callNode.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node:   "  +  Token.name(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	throw  new  IllegalStateException( "Expected  NEW  node:   "  +  Token.name(callNode.getString()));	  throw    new    IllegalStateException(   "Expected    NEW    node:   "    +    Token.name(callNode.getFirstChild()));    	non-compiled	[CE]  	156	None	replace
863	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node:  named   "  +  Token.name(callNode.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node:  named   "  +  Token.name(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	throw  new  IllegalStateException( "Expected  NEW  node:  named   "  +  Token.name(callNode.getFirstChild()));	  throw    new    IllegalStateException(   "Expected    NEW    node:   "    +    Token.name(callNode.getFirstChild()));    	non-compiled	[CE]  	156	None	replace
864	[BUG]  [BUGGY]  allowSideEffects(node))  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  allowSideEffects(node))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(node))  {  return  false;  }	  allowSideEffects(callNode))    {    return    false;    }    	non-compiled	[CE]  	183	None	replace
865	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild());  return  false;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild());  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild());  return  false;	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    return    false;    	non-compiled	[CE]  	192	None	replace
866	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	121	None	replace
867	[BUG]  [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	23	None	replace
868	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(callNode)||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isFunctionDeclaration(callNode)||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isFunctionDeclaration(callNode)||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	23	None	replace
869	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	180	None	replace
870	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    REGEXP_METHODS.contains(callNode.getFirstChild());    	non-compiled	[CE]  	182	None	replace
871	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  STRING_REGEXP_METHODS.contains(callNode.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  STRING_REGEXP_METHODS.contains(callNode.getFirstChild());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  STRING_REGEXP_METHODS.contains(callNode.getFirstChild());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    REGEXP_METHODS.contains(callNode.getFirstChild());    	non-compiled	[CE]  	182	None	replace
872	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  REGEXP_METHODS.contains(callNode.getString()))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  REGEXP_METHODS.contains(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  REGEXP_METHODS.contains(callNode.getString()))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	128	None	replace
873	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  ConSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  ConSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  ConSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	128	None	replace
874	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	128	None	replace
875	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  CALL_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  CALL_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  CALL_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	128	None	replace
876	[BUG]  [BUGGY]  ||  NodeUtil.isCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ||    NodeUtil.isNoSideEffectsCall(callNode)&&    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	135	None	replace
877	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode.getString()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode.getString()))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	6	None	replace
878	[BUG]  [BUGGY]  ||  NodeUtil.isGet(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isGet(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isGet(callNode))  {  return  false;  }	  ||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	8	None	replace
879	[BUG]  [BUGGY]  ||  NodeUtil.isStatement(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isStatement(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isStatement(callNode))  {  return  false;  }	  ||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	8	None	replace
880	[BUG]  [BUGGY]  aughtException.from(JSSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtException.from(JSSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtException.from(JSSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }	  aughtException.from(JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	162	None	replace
881	[BUG]  [BUGGY]  aughtException.from(JSSC_PROPERTY_NAME,  nameNode.getString()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtException.from(JSSC_PROPERTY_NAME,  nameNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtException.from(JSSC_PROPERTY_NAME,  nameNode.getString()))  {  return  false;  }	  aughtException.from(JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	162	None	replace
882	[BUG]  [BUGGY]  aughtException.from(node,  callNode.getString()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtException.from(node,  callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtException.from(node,  callNode.getString()))  {  return  false;  }	  aughtException.from(JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	162	None	replace
883	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }	  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	47	None	replace
884	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }	  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	47	None	replace
885	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  return  false;  }	  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	47	None	replace
886	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler))  {  return  false;  }	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild(),    compiler))    {    return    false;    }    	non-compiled	[CE]  	117	None	replace
887	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(nameNode.getFirstChild(),  compiler))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(nameNode.getFirstChild(),  compiler))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(nameNode.getFirstChild(),  compiler))  {  return  false;  }	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild(),    compiler))    {    return    false;    }    	non-compiled	[CE]  	117	None	replace
888	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  compiler))  {  return  false;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  compiler))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  compiler))  {  return  false;	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild(),    compiler))    {    return    false;    }    	non-compiled	[CE]  	117	None	replace
889	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	16	None	replace
890	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	16	None	replace
891	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node,  got:  ' "  +  Token.name(callNode.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node,  got:  ' "  +  Token.name(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	throw  new  IllegalStateException( "Expected  NEW  node,  got:  ' "  +  Token.name(callNode.getFirstChild()));	  throw    new    IllegalStateException(   "Expected    NEW    node,    got:   "    +    Token.name(callNode.getFirstChild()));    	non-compiled	[CE]  	157	None	replace
892	[BUG]  [BUGGY]  allowSideEffects(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  allowSideEffects(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;  }	  allowSideEffects(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	176	None	replace
893	[BUG]  [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));    	non-compiled	[CE]  	123	None	replace
894	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getType()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getType()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));    	non-compiled	[CE]  	123	None	replace
895	[BUG]  [BUGGY]  return  REGEXP_METHODS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  REGEXP_METHODS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  REGEXP_METHODS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));    	non-compiled	[CE]  	123	None	replace
896	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(node.getString()))  {  return  false;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(node.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(node.getString()))  {  return  false;	  ||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	113	None	replace
897	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(nameNode.getString()))  {  return  false;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(nameNode.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(nameNode.getString()))  {  return  false;	  ||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	113	None	replace
898	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node,  got:   "  +  Token.name(node.getType()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node,  got:   "  +  Token.name(node.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	throw  new  IllegalStateException( "Expected  NEW  node,  got:   "  +  Token.name(node.getType()));	  throw    new    IllegalStateException(   "Expected    NEW    node,    got:   "    +    Token.name(callNode.getType()));    	non-compiled	[CE]  	154	None	replace
899	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node,  got:  ' "  +  Token.name(callNode.getType()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node,  got:  ' "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	throw  new  IllegalStateException( "Expected  NEW  node,  got:  ' "  +  Token.name(callNode.getType()));	  throw    new    IllegalStateException(   "Expected    NEW    node,    got:   "    +    Token.name(callNode.getType()));    	non-compiled	[CE]  	154	None	replace
900	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSideEffects(JSSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.throwAsSideEffects(JSSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.throwAsSideEffects(JSSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }	  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	177	None	replace
901	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSideEffects(callNode,  JSC_PROPERTY_NAME.getString()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.throwAsSideEffects(callNode,  JSC_PROPERTY_NAME.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.throwAsSideEffects(callNode,  JSC_PROPERTY_NAME.getString()))  {  return  false;  }	  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	177	None	replace
902	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	127	None	replace
903	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isConstructorCall(callNode))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isConstructorCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isConstructorCall(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	127	None	replace
904	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	127	None	replace
905	[BUG]  [BUGGY]  ||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	43	None	replace
906	[BUG]  [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(node))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(node))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isNoSideEffectsCall(node))  {  return  false;  }	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	43	None	replace
907	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.mayHaveSideEffects(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.mayHaveSideEffects(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.mayHaveSideEffects(callNode.getFirstChild()))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	2	None	replace
908	[BUG]  [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  true;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  true;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  true;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.isNoSideEffectsCall())    {    return    true;    }    	non-compiled	[CE]  	25	None	replace
909	[BUG]  [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.isNoSideEffectsCall())    {    return    true;    }    	non-compiled	[CE]  	25	None	replace
910	[BUG]  [BUGGY]  return  callNode.getType()!=  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()!=  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()!=  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    callNode.getType()    ==    Token.NAME    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	39	None	replace
911	[BUG]  [BUGGY]  allowSideEffects(callNode.getJSParent()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  allowSideEffects(callNode.getJSParent()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode.getJSParent()))  {  return  false;  }	  allowSideEffects(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	139	None	replace
912	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    true;    }    	non-compiled	[CE]  	35	None	replace
913	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	104	None	replace
914	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	104	None	replace
915	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;	  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	104	None	replace
916	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  +  1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  +  1);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  +  1);	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    +    1));    	non-compiled	[CE]  	42	None	replace
917	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString())  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString())    	non-compiled	[CE]  	140	None	replace
918	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString())  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString())    	non-compiled	[CE]  	140	None	replace
919	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	70	None	replace
920	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isConstructorCall(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isConstructorCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isConstructorCall(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	70	None	replace
921	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode,  compiler))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode,  compiler))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode,  compiler))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.mayHaveSideEffects(callNode))    {    return    false;    }    	non-compiled	[CE]  	126	None	replace
922	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.mayHaveSideEffects(callNode))    {    return    false;    }    	non-compiled	[CE]  	126	None	replace
923	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(node)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(node)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(node)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.mayHaveSideEffects(callNode))    {    return    false;    }    	non-compiled	[CE]  	126	None	replace
924	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(nameNode,  compiler);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(nameNode,  compiler);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(nameNode,  compiler);	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode,    compiler);    	non-compiled	[CE]  	79	None	replace
925	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(compiler,  callNode);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(compiler,  callNode);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(compiler,  callNode);	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode,    compiler);    	non-compiled	[CE]  	79	None	replace
926	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler.getParent());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler.getParent());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler.getParent());	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode,    compiler);    	non-compiled	[CE]  	79	None	replace
927	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(sourceName,  callNode,  compiler);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(sourceName,  callNode,  compiler);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(sourceName,  callNode,  compiler);	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode,    compiler);    	non-compiled	[CE]  	79	None	replace
928	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isGetProp(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isGetProp(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isGetProp(callNode.getFirstChild()))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	3	None	replace
929	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	3	None	replace
930	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVar(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVar(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVar(callNode.getFirstChild()))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	3	None	replace
931	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVar(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVar(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVar(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	12	None	replace
932	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	12	None	replace
933	[BUG]  [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	63	None	replace
934	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getString()  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	83	None	replace
935	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	83	None	replace
936	[BUG]  [BUGGY]  return  callNode.contains(CONSTRUCTORS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.contains(CONSTRUCTORS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.contains(CONSTRUCTORS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	150	None	replace
937	[BUG]  [BUGGY]  return  callNode.containsKey(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.containsKey(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.containsKey(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	150	None	replace
938	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getParent(),  JSC_PROPERTY_NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getParent(),  JSC_PROPERTY_NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode.getParent(),  JSC_PROPERTY_NAME);	  NodeTraversal.traverse(compiler,    callNode.getPropertyName(),    JSC_PROPERTY_NAME);    	non-compiled	[CE]  	132	None	replace
939	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getType(),  JSC_PROPERTY_NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getType(),  JSC_PROPERTY_NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode.getType(),  JSC_PROPERTY_NAME);	  NodeTraversal.traverse(compiler,    callNode.getPropertyName(),    JSC_PROPERTY_NAME);    	non-compiled	[CE]  	132	None	replace
940	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	95	None	replace
941	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(node)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(node)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(node)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	95	None	replace
942	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())    	non-compiled	[CE]  	93	None	replace
943	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())    	non-compiled	[CE]  	93	None	replace
944	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(node.getType()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(node.getType()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(node.getType()))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	26	None	replace
945	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node:   "  +  Token.name(node.getType()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node:   "  +  Token.name(node.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	throw  new  IllegalStateException( "Expected  NEW  node:   "  +  Token.name(node.getType()));	  throw    new    IllegalStateException(   "Expected    NEW    node:   "    +    Token.name(callNode.getType()));    	non-compiled	[CE]  	155	None	replace
946	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node:  named "  +  Token.name(callNode.getType()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node:  named "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	throw  new  IllegalStateException( "Expected  NEW  node:  named "  +  Token.name(callNode.getType()));	  throw    new    IllegalStateException(   "Expected    NEW    node:   "    +    Token.name(callNode.getType()));    	non-compiled	[CE]  	155	None	replace
947	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node:  got  ' "  +  Token.name(callNode.getType()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node:  got  ' "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	throw  new  IllegalStateException( "Expected  NEW  node:  got  ' "  +  Token.name(callNode.getType()));	  throw    new    IllegalStateException(   "Expected    NEW    node:   "    +    Token.name(callNode.getType()));    	non-compiled	[CE]  	155	None	replace
948	[BUG]  [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getType())||  callNode.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getType())||  callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  JSC_PROPERTY_NAME.equals(callNode.getType())||  callNode.isNoSideEffectsCall())  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	131	None	replace
949	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(node.getString()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(node.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(node.getString()))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	33	None	replace
950	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.contains(callNode.getString()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.contains(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.contains(callNode.getString()))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	33	None	replace
951	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY),  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY),  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.EMPTY),  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);	  parent.replaceChild(callNode,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	187	None	replace
952	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY),  JSC_PROPERTY_NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY),  JSC_PROPERTY_NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.EMPTY),  JSC_PROPERTY_NAME);	  parent.replaceChild(callNode,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	187	None	replace
953	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY),  OBJECT_METHODS);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY),  OBJECT_METHODS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.EMPTY),  OBJECT_METHODS);	  parent.replaceChild(callNode,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	187	None	replace
954	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY,  OBJECT_METHODS));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY,  OBJECT_METHODS));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.EMPTY,  OBJECT_METHODS));	  parent.replaceChild(callNode,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	187	None	replace
955	[BUG]  [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	24	None	replace
956	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(callNode)||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isFunctionDeclaration(callNode)||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isFunctionDeclaration(callNode)||  JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	24	None	replace
957	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVar(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVar(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVar(callNode))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
958	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isConstructor(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isConstructor(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isConstructor(callNode))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
959	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode.getFirstChild()))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	7	None	replace
960	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getLastChild()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getLastChild()))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	15	None	replace
961	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	44	None	replace
962	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	44	None	replace
963	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	44	None	replace
964	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	44	None	replace
965	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;	  ConstructorUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	44	None	replace
966	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isCall(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isCall(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isCall(callNode.getFirstChild()))  {  return  false;  }	  NodeUtil.mayHaveSideEffects(callNode)&&    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	124	None	replace
967	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isVar(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isVar(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isVar(callNode.getFirstChild()))  {  return  false;  }	  NodeUtil.mayHaveSideEffects(callNode)&&    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	124	None	replace
968	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	90	None	replace
969	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	59	None	replace
970	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	59	None	replace
971	[BUG]  [BUGGY]  &&!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	201	None	replace
972	[BUG]  [BUGGY]  if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	201	None	replace
973	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);	  Preconditions.checkState(!callNode.isNoSideEffectsCall());    	non-compiled	[CE]  	142	None	replace
974	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffects());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffects());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!callNode.isNoSideEffects());	  Preconditions.checkState(!callNode.isNoSideEffectsCall());    	non-compiled	[CE]  	142	None	replace
975	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME);	  Preconditions.checkState(!callNode.isNoSideEffectsCall());    	non-compiled	[CE]  	142	None	replace
976	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	58	None	replace
977	[BUG]  [BUGGY]  return  constructorCallHasSideEffects.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  constructorCallHasSideEffects.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  constructorCallHasSideEffects.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	58	None	replace
978	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	129	None	replace
979	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	89	None	replace
980	[BUG]  [BUGGY]  &&!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.STRING)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.STRING)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.STRING)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.STRING)    {    return    false;    }    	non-compiled	[CE]  	202	None	replace
981	[BUG]  [BUGGY]  if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()!=  Token.STRING)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()!=  Token.STRING)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()!=  Token.STRING)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.STRING)    {    return    false;    }    	non-compiled	[CE]  	202	None	replace
982	[BUG]  [BUGGY]  aughtExceptionHandler.handleNoSideEffects(node);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleNoSideEffects(node);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleNoSideEffects(node);	  aughtExceptionHandler.handleNoSideEffects(callNode);    	non-compiled	[CE]  	185	None	replace
983	[BUG]  [BUGGY]  NodeUtil.isStatement(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isStatement(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isStatement(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  NodeUtil.isFunction(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	13	None	replace
984	[BUG]  [BUGGY]  NodeUtil.isConstructorCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isConstructorCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isConstructorCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  NodeUtil.isFunctionDeclaration(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	73	None	replace
985	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(callNode)||  NodeUtil.isStatementBlock(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isFunctionDeclaration(callNode)||  NodeUtil.isStatementBlock(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isFunctionDeclaration(callNode)||  NodeUtil.isStatementBlock(callNode))  {  return  false;  }	  NodeUtil.isFunctionDeclaration(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	73	None	replace
986	[BUG]  [BUGGY]  aughtException.from(JSSC_PROPERTY_NAME,  callNode.getType()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtException.from(JSSC_PROPERTY_NAME,  callNode.getType()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtException.from(JSSC_PROPERTY_NAME,  callNode.getType()))  {  return  false;  }	  aughtException.from(JSC_PROPERTY_NAME,    callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	167	None	replace
987	[BUG]  [BUGGY]  aughtException.from(node,  callNode.getType()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtException.from(node,  callNode.getType()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtException.from(node,  callNode.getType()))  {  return  false;  }	  aughtException.from(JSC_PROPERTY_NAME,    callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	167	None	replace
988	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	76	None	replace
989	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	76	None	replace
990	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&    JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	103	None	replace
991	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isImmutableCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	136	None	replace
992	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  JSC_PROPERTY_NAME.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  JSC_PROPERTY_NAME.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.add(callNode.getString()));    	non-compiled	[CE]  	160	None	replace
993	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString())||  JSC_PROPERTY_NAME_FN.add(callNode.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString())||  JSC_PROPERTY_NAME_FN.add(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString())||  JSC_PROPERTY_NAME_FN.add(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.add(callNode.getString()));    	non-compiled	[CE]  	160	None	replace
994	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))    {    return    false;    }    	non-compiled	[CE]  	20	None	replace
995	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))    {    return    false;    }    	non-compiled	[CE]  	20	None	replace
996	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))    {    return    false;    }    	non-compiled	[CE]  	20	None	replace
997	[BUG]  [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isGetProp(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isGetProp(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isGetProp(callNode.getFirstChild()))  {  return  false;  }	  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	193	None	replace
998	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION	  return    callNode.getType()    ==    Token.FUNCTION    ||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	64	None	replace
999	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getLastChild().getType()  ==  Token.FUNCTION  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getLastChild().getType()  ==  Token.FUNCTION  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getLastChild().getType()  ==  Token.FUNCTION	  return    callNode.getType()    ==    Token.FUNCTION    ||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	64	None	replace
1000	[BUG]  [BUGGY]  &&!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.STRING)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.STRING)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.STRING)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.STRING)    {    return    false;    }    	non-compiled	[CE]  	203	None	replace
1001	[BUG]  [BUGGY]  if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.STRING)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.STRING)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(!callNode.isNoSideEffectsCall()  &&  callNode.getType()  ==  Token.STRING)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.STRING)    {    return    false;    }    	non-compiled	[CE]  	203	None	replace
1002	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    JSC_PROPERTY_NAME.equals(callNode.getName()))    {    return    false;    }    	non-compiled	[CE]  	30	None	replace
1003	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    JSC_PROPERTY_NAME.equals(callNode.getName()))    {    return    false;    }    	non-compiled	[CE]  	30	None	replace
1004	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    JSC_PROPERTY_NAME.equals(callNode.getName()))    {    return    false;    }    	non-compiled	[CE]  	30	None	replace
1005	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  throw  new  IllegalStateException( " ");  }	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	78	None	replace
1006	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  throw  new  IllegalStateException( " "));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  throw  new  IllegalStateException( " "));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  throw  new  IllegalStateException( " "));	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	78	None	replace
1007	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  throw  new  IllegalStateException( " ");  }	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	78	None	replace
1008	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(callNode.getString()))  {  throw  new  IllegalStateException( " ");  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(callNode.getString()))  {  throw  new  IllegalStateException( " ");  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(callNode.getString()))  {  throw  new  IllegalStateException( " ");	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	78	None	replace
1009	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS,  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS,  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS,  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);	  NodeTraversal.traverse(compiler,    callNode,    JSC_PROPERTY_NAME,    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);    	non-compiled	[CE]  	149	None	replace
1010	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS,  JSC_PROPERTY_NAME);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS,  JSC_PROPERTY_NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS,  JSC_PROPERTY_NAME);	  NodeTraversal.traverse(compiler,    callNode,    JSC_PROPERTY_NAME,    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);    	non-compiled	[CE]  	149	None	replace
1011	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(compiler.getFirstChild(),  callNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(compiler.getFirstChild(),  callNode);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(compiler.getFirstChild(),  callNode);	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild(),    compiler);    	non-compiled	[CE]  	118	None	replace
1012	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(nameNode.getFirstChild(),  compiler);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(nameNode.getFirstChild(),  compiler);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(nameNode.getFirstChild(),  compiler);	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild(),    compiler);    	non-compiled	[CE]  	118	None	replace
1013	[BUG]  [BUGGY]  return  callNode.add(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.add(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.add(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	189	None	replace
1014	[BUG]  [BUGGY]  return  callNode.add(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.getType()  ==  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.add(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.add(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	189	None	replace
1015	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))    {    return    false;    }    	non-compiled	[CE]  	19	None	replace
1016	[BUG]  [BUGGY]  &&  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }	  &&    NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	152	None	replace
1017	[BUG]  [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  &&    NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	152	None	replace
1018	[BUG]  [BUGGY]  &&  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }	  &&    NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	152	None	replace
1019	[BUG]  [BUGGY]  &&  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }	  &&    NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	152	None	replace
1020	[BUG]  [BUGGY]  &&  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isGetProp(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isGetProp(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isGetProp(callNode))  {  return  false;  }	  &&    NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	152	None	replace
1021	[BUG]  [BUGGY]  &&  NodeUtil.isCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }	  &&    NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	152	None	replace
1022	[BUG]  [BUGGY]  ||  NodeUtil.isGetProp(callNode))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isGetProp(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isGetProp(callNode))  {  return  false;  }	  ||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	69	None	replace
1023	[BUG]  [BUGGY]  parent.replaceChild(callNode,  JSC_PROPERTY_NAME))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  JSC_PROPERTY_NAME))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  JSC_PROPERTY_NAME))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    else    if(compiler.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	21	None	replace
1024	[BUG]  [BUGGY]  Preconditions.checkState(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsC  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsC  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsC	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    else    if(compiler.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	21	None	replace
1025	[BUG]  [BUGGY]  Preconditions.checkState(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffects  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffects  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffects	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    else    if(compiler.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	21	None	replace
1026	[BUG]  [BUGGY]  parent.replaceChild(callNode,  JSC_PROPERTY_NAME))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  JSC_PROPERTY_NAME))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  JSC_PROPERTY_NAME))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    else    if(compiler.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	21	None	replace
1027	[BUG]  [BUGGY]  Preconditions.checkState(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    else    if(compiler.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	21	None	replace
1028	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    else    if(compiler.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	21	None	replace
1029	[BUG]  [BUGGY]  Preconditions.checkState(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall()  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall()	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    else    if(compiler.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	21	None	replace
1030	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild    	non-compiled	[CE]  	197	None	replace
1031	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild    	non-compiled	[CE]  	197	None	replace
1032	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild    	non-compiled	[CE]  	197	None	replace
1033	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSideEffects(JSSC_PROPERTY_NAME,  JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.throwAsSideEffects(JSSC_PROPERTY_NAME,  JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.throwAsSideEffects(JSSC_PROPERTY_NAME,  JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }	  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,    JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	178	None	replace
1034	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChil  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChil  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChil	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChil    	non-compiled	[CE]  	196	None	replace
1035	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(constructCallHasSideEffects(callNode.getString()  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(constructCallHasSideEffects(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(constructCallHasSideEffects(callNode.getString()	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	87	None	replace
1036	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	56	None	replace
1037	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isConstructorCall(callNode))  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isConstructorCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isConstructorCall(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	56	None	replace
1038	[BUG]  [BUGGY]  &&!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.NAME)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.NAME)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()!=    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  	200	None	replace
1039	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    	non-compiled	[CE]  	62	None	replace
1040	[BUG]  [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    	non-compiled	[CE]  	62	None	replace
1041	[BUG]  [BUGGY]  NodeUtil.isCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }	  NodeUtil.isCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	173	None	replace
1042	[BUG]  [BUGGY]  NodeUtil.isStatement(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isStatement(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isStatement(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  NodeUtil.isCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	173	None	replace
1043	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isForIn(callNode))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isForIn(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isForIn(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isAssignmentOp(callNode))    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
1044	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isAssignmentOp(callNode))    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
1045	[BUG]  [BUGGY]  ||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    	non-compiled	[CE]  	49	None	replace
1046	[BUG]  [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode,  compiler))  {  return  false;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode,  compiler))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isNoSideEffectsCall(callNode,  compiler))  {  return  false;	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    	non-compiled	[CE]  	49	None	replace
1047	[BUG]  [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(node))  {  return  false;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(node))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isNoSideEffectsCall(node))  {  return  false;	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    	non-compiled	[CE]  	49	None	replace
1048	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.startsWith(callNode.getString()))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.startsWith(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.startsWith(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	112	None	replace
1049	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(node.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleMissingName(node.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleMissingName(node.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }	  aughtExceptionHandler.handleMissingName(callNode.getString(),    JSC_PROPERTY_NAME))    {    return    false;    }    	non-compiled	[CE]  	163	None	replace
1050	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	122	None	replace
1051	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	122	None	replace
1052	[BUG]  [BUGGY]  &&!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  	144	None	replace
1053	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(node.getJSPropertyName()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(node.getJSPropertyName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(node.getJSPropertyName()))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	101	None	replace
1054	[BUG]  [BUGGY]  ||  REGEXP_METHODS.contains(callNode.getString()  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  REGEXP_METHODS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  REGEXP_METHODS.contains(callNode.getString()	  ||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	82	None	replace
1055	[BUG]  [BUGGY]  ||  conSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  conSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  conSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  ||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	82	None	replace
1056	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()    	non-compiled	[CE]  	86	None	replace
1057	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()    	non-compiled	[CE]  	86	None	replace
1058	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.isNoSideEffectsCall())  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	22	None	replace
1059	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	28	None	replace
1060	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.contains(callNode.getString()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.contains(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.contains(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	28	None	replace
1061	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.startsWith(callNode.getString()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.startsWith(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.startsWith(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	28	None	replace
1062	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode));	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode));    	non-compiled	[CE]  	45	None	replace
1063	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(callNode));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(callNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isGetProp(callNode));	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode));    	non-compiled	[CE]  	45	None	replace
1064	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	98	None	replace
1065	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(node)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(node)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(node)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	98	None	replace
1066	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    	non-compiled	[CE]  	151	None	replace
1067	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    	non-compiled	[CE]  	151	None	replace
1068	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	84	None	replace
1069	[BUG]  [BUGGY]  return  REGEXP_METHODS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  REGEXP_METHODS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  REGEXP_METHODS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	84	None	replace
1070	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.getType()  ==  Token.FUNCTION)  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)&&    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	96	None	replace
1071	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(node)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(node)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(node)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)&&    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	96	None	replace
1072	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getLastChild()))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	125	None	replace
1073	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.mayHaveSideEffects(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.mayHaveSideEffects(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.mayHaveSideEffects(callNode.getFirstChild()))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	125	None	replace
1074	[BUG]  [BUGGY]  &&  NodeUtil.isNoSideEffectsCall(node)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isNoSideEffectsCall(node)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isNoSideEffectsCall(node)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  &&    NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	134	None	replace
1075	[BUG]  [BUGGY]  &&  NodeUtil.isImmutableCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isImmutableCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isImmutableCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  &&    NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	134	None	replace
1076	[BUG]  [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	181	None	replace
1077	[BUG]  [BUGGY]  return  REGEXP_METHODS.contains(callNode.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  REGEXP_METHODS.contains(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  REGEXP_METHODS.contains(callNode.getFirstChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	181	None	replace
1078	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	181	None	replace
1079	[BUG]  [BUGGY]  return  callNode.getString().contains(CONSTRUCTORS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(CONSTRUCTORS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(CONSTRUCTORS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	92	None	replace
1080	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	72	None	replace
1081	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	60	None	replace
1082	[BUG]  [BUGGY]  return  callNode.getType()!=  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()!=  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()!=  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    callNode.getType()    ==    Token.CALL    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	40	None	replace
1083	[BUG]  [BUGGY]  return  callNode.getType()!=  Token.CALL  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()!=  Token.CALL  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()!=  Token.CALL  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    callNode.getType()    ==    Token.CALL    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	40	None	replace
1084	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));	  return    callNode.getType()    ==    Token.CALL    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	40	None	replace
1085	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	27	None	replace
1086	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	27	None	replace
1087	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getType(),  JSC_PROPERTY_NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getType(),  JSC_PROPERTY_NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleMissingName(callNode.getType(),  JSC_PROPERTY_NAME);	  aughtExceptionHandler.handleMissingName(callNode.getPropertyName(),    JSC_PROPERTY_NAME);    	non-compiled	[CE]  	175	None	replace
1088	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getFirstChild(),  JSC_PROPERTY_NAME);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getFirstChild(),  JSC_PROPERTY_NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleMissingName(callNode.getFirstChild(),  JSC_PROPERTY_NAME);	  aughtExceptionHandler.handleMissingName(callNode.getPropertyName(),    JSC_PROPERTY_NAME);    	non-compiled	[CE]  	175	None	replace
1089	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	106	None	replace
1090	[BUG]  [BUGGY]  return  callNode.getString().contains(CONSTRUCTORS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().contains(CONSTRUCTORS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(CONSTRUCTORS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	61	None	replace
1091	[BUG]  [BUGGY]  return  callNode.getString().indexOf(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)+  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getString().indexOf(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)+  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().indexOf(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)+  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	61	None	replace
1092	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(node.getType()));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(node.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(node.getType()));	  throw    new    IllegalStateException(   "Expected    NEW    node,    got   "    +    Token.name(callNode.getType()));    	non-compiled	[CE]  	153	None	replace
1093	[BUG]  [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	170	None	replace
1094	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getLocalName()))    {    return    false;    }    	non-compiled	[CE]  	18	None	replace
1095	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getLocalName()))    {    return    false;    }    	non-compiled	[CE]  	18	None	replace
1096	[BUG]  [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	38	None	replace
1097	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	38	None	replace
1098	[BUG]  [BUGGY]  allowSideEffects(node.getType()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  allowSideEffects(node.getType()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(node.getType()))  {  return  false;  }	  allowSideEffects(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	166	None	replace
1099	[BUG]  [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }	  ||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	94	None	replace
1100	[BUG]  [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getType())  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getType())  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getType())  ==  Token.FUNCTION)  {  return  false;  }	  ||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	94	None	replace
1101	[BUG]  [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	94	None	replace
1102	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(node.getString()))  {  return  true;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(node.getString()))  {  return  true;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(node.getString()))  {  return  true;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    true;    }    	non-compiled	[CE]  	32	None	replace
1103	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	78	None	replace
1104	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  throw  new  IllegalStateException( "Expected  NEW  node:  got "  +  Token.name(callNode.getType()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  throw  new  IllegalStateException( "Expected  NEW  node:  got "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  throw  new  IllegalStateException( "Expected  NEW  node:  got "  +  Token.name(callNode.getType()));	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	78	None	replace
1105	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  throw  new  IllegalStateException( "Expected  CALL  node,  got "  +  Token.name(callNode.getType()));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  throw  new  IllegalStateException( "Expected  CALL  node,  got "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  throw  new  IllegalStateException( "Expected  CALL  node,  got "  +  Token.name(callNode.getType()));	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	78	None	replace
1106	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	52	None	replace
1107	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	121	None	replace
1108	[BUG]  [BUGGY]  allowSideEffects(callNode.getJSPropertyName(),  JSC_PROPERTY_NAME_FN))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  allowSideEffects(callNode.getJSPropertyName(),  JSC_PROPERTY_NAME_FN))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode.getJSPropertyName(),  JSC_PROPERTY_NAME_FN))  {  return  false;  }	  allowSideEffects(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	139	None	replace
1109	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVar(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVar(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isVar(callNode.getFirstChild()))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
1110	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!NodeUtil.isFunction(callNode))  {  return  false;  }	  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	47	None	replace
1111	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	181	None	replace
1112	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getFirstChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	181	None	replace
1113	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getJSReferenceName()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getJSReferenceName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getJSReferenceName()))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	101	None	replace
1114	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getJSElementName()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getJSElementName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getJSElementName()))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	101	None	replace
1115	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	130	None	replace
1116	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isVarDeclaration(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	130	None	replace
1117	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	74	None	replace
1118	[BUG]  [BUGGY]  aughtException.from(JSC_PROPERTY_NAME,  JSC_PROPERTY_NAME_FN,  callNode.getType()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtException.from(JSC_PROPERTY_NAME,  JSC_PROPERTY_NAME_FN,  callNode.getType()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtException.from(JSC_PROPERTY_NAME,  JSC_PROPERTY_NAME_FN,  callNode.getType()))  {  return  false;  }	  aughtException.from(JSC_PROPERTY_NAME,    callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	167	None	replace
1119	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.get  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.get  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.get	  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	28	None	replace
1120	[BUG]  [BUGGY]  Preconditions.checkArgument(!callNode.isNoSideEffectsCall());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkArgument(!callNode.isNoSideEffectsCall());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkArgument(!callNode.isNoSideEffectsCall());	  Preconditions.checkState(!callNode.isNoSideEffectsCall());    	non-compiled	[CE]  	142	None	replace
1121	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())    	non-compiled	[CE]  	168	None	replace
1122	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())    	non-compiled	[CE]  	168	None	replace
1123	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));    	non-compiled	[CE]  	123	None	replace
1124	[BUG]  [BUGGY]  allowSideEffects(callNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  allowSideEffects(callNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    else    if(compiler.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	21	None	replace
1125	[BUG]  [BUGGY]  allowSideEffects(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  allowSideEffects(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    else    if(compiler.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	21	None	replace
1126	[BUG]  [BUGGY]  parent.replaceChild(callNode,  JSC_PROPERTY_NAME);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  JSC_PROPERTY_NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  JSC_PROPERTY_NAME);	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    else    if(compiler.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	21	None	replace
1127	[BUG]  [BUGGY]  allowSideEffects(callNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  allowSideEffects(callNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    else    if(compiler.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	21	None	replace
1128	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    else    if(compiler.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	21	None	replace
1129	[BUG]  [BUGGY]  allowSideEffects(callNode.getString(),  CONSTRUCTORS_WITHOUT_SIDEEFFECTS))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  allowSideEffects(callNode.getString(),  CONSTRUCTORS_WITHOUT_SIDEEFFECTS))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode.getString(),  CONSTRUCTORS_WITHOUT_SIDEEFFECTS))  {  return  false;  }	  allowSideEffects(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	176	None	replace
1130	[BUG]  [BUGGY]  allowSideEffects(callNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  allowSideEffects(callNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }	  allowSideEffects(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	176	None	replace
1131	[BUG]  [BUGGY]  if(NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	180	None	replace
1132	[BUG]  [BUGGY]  &&  NodeUtil.isStatementBlock(callNode))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isStatementBlock(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isStatementBlock(callNode))  {  return  false;  }	  &&    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	172	None	replace
1133	[BUG]  [BUGGY]  &&  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }	  &&    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	172	None	replace
1134	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getFirstChild()))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    true;    }    	non-compiled	[CE]  	32	None	replace
1135	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    JSC_PROPERTY_NAME.equals(callNode.getName()))    {    return    false;    }    	non-compiled	[CE]  	30	None	replace
1136	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.FUNCTION,  JSC_PROPERTY));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.FUNCTION,  JSC_PROPERTY));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.FUNCTION,  JSC_PROPERTY));	  parent.replaceChild(callNode,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	186	None	replace
1137	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.FUNCTION,  getTarget()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.FUNCTION,  getTarget()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.FUNCTION,  getTarget()));	  parent.replaceChild(callNode,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	186	None	replace
1138	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isName(callNode.getString()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isName(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isName(callNode.getString()))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	6	None	replace
1139	[BUG]  [BUGGY]  Node  callNode  =  node.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Node  callNode  =  node.getFirstChild();  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Node  callNode  =  node.getFirstChild();	  Node    callNode    =    callNode.getFirstChild();    	non-compiled	[CE]  	115	None	replace
1140	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	85	None	replace
1141	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	37	None	replace
1142	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME,  OBJECT_METHODS_WITHOUT_SIDEEFFECTS);	  NodeTraversal.traverse(compiler,    callNode,    JSC_PROPERTY_NAME,    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);    	non-compiled	[CE]  	149	None	replace
1143	[BUG]  [BUGGY]  ConstructorUtil.isVarDeclaration(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ConstructorUtil.isVarDeclaration(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isVarDeclaration(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  ConstructorUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	71	None	replace
1144	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.addAll(callNode.getString());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.addAll(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.addAll(callNode.getString());	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString());    	non-compiled	[CE]  	80	None	replace
1145	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));    	non-compiled	[CE]  	159	None	replace
1146	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));    	non-compiled	[CE]  	159	None	replace
1147	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isVarDeclaration(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isVarDeclaration(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.mayHaveSideEffects(callNode))    {    return    false;    }    	non-compiled	[CE]  	126	None	replace
1148	[BUG]  [BUGGY]  NodeUtil.isCall(callNode)&&  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isCall(callNode)&&  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isCall(callNode)&&  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.mayHaveSideEffects(callNode))    {    return    false;    }    	non-compiled	[CE]  	126	None	replace
1149	[BUG]  [BUGGY]  NodeUtil.isStatementBlock(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isStatementBlock(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isStatementBlock(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.mayHaveSideEffects(callNode))    {    return    false;    }    	non-compiled	[CE]  	126	None	replace
1150	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  callNode.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  callNode.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  callNode.getFirstChild().getType()!=  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	188	None	replace
1151	[BUG]  [BUGGY]  ||  CallNodeUtil.isVarDeclaration(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  CallNodeUtil.isVarDeclaration(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  CallNodeUtil.isVarDeclaration(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ||    CallNodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	100	None	replace
1152	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getFirstChild()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    JSC_PROPERTY_NAME.equals(callNode.getLocalName()))    {    return    false;    }    	non-compiled	[CE]  	31	None	replace
1153	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME,  JSC_PROPERTY_NAME);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME,  JSC_PROPERTY_NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME,  JSC_PROPERTY_NAME);	  aughtExceptionHandler.handleMissingName(callNode.getString(),    JSC_PROPERTY_NAME);    	non-compiled	[CE]  	161	None	replace
1154	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY,  getJSType()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY,  getJSType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.EMPTY,  getJSType()));	  parent.replaceChild(callNode,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	187	None	replace
1155	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY,  getTarget()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY,  getTarget()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.EMPTY,  getTarget()));	  parent.replaceChild(callNode,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	187	None	replace
1156	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY,  getFunctionName()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY,  getFunctionName()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.EMPTY,  getFunctionName()));	  parent.replaceChild(callNode,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	187	None	replace
1157	[BUG]  [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isImmutableValue(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isImmutableValue(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isImmutableValue(callNode.getFirstChild()))  {  return  false;  }	  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	193	None	replace
1158	[BUG]  [BUGGY]  return  callNode.getFirstChild().getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getFirstChild().getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getFirstChild().getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	92	None	replace
1159	[BUG]  [BUGGY]  return  callNode.getFirstChild().getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getFirstChild().getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getFirstChild().getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	92	None	replace
1160	[BUG]  [BUGGY]  ||  NodeUtil.isCall(callNode))  {  return  false;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isCall(callNode))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isCall(callNode))  {  return  false;	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    	non-compiled	[CE]  	49	None	replace
1161	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	90	None	replace
1162	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getName())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getName())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getName())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getLocalName()))    {    return    false;    }    	non-compiled	[CE]  	18	None	replace
1163	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  JSC_PROPERTY_NAME))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  JSC_PROPERTY_NAME))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  JSC_PROPERTY_NAME))  {  return  false;  }	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	116	None	replace
1164	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  JSC_PROPERTY_NAME_FN))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  JSC_PROPERTY_NAME_FN))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  JSC_PROPERTY_NAME_FN))  {  return  false;  }	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	116	None	replace
1165	[BUG]  [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	170	None	replace
1166	[BUG]  [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	170	None	replace
1167	[BUG]  [BUGGY]  if(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	170	None	replace
1168	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(node));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(node));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(node));	  NodeTraversal.traverse(compiler,    callNode,    new    MatchShallowStatement());    	non-compiled	[CE]  	119	None	replace
1169	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(false));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(false));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement(false));	  NodeTraversal.traverse(compiler,    callNode,    new    MatchShallowStatement());    	non-compiled	[CE]  	119	None	replace
1170	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getReferenceName(),  JSC_PROPERTY_NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getReferenceName(),  JSC_PROPERTY_NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleMissingName(callNode.getReferenceName(),  JSC_PROPERTY_NAME);	  aughtExceptionHandler.handleMissingName(callNode.getPropertyName(),    JSC_PROPERTY_NAME);    	non-compiled	[CE]  	175	None	replace
1171	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChil  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChil  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChil	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild    	non-compiled	[CE]  	195	None	replace
1172	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isCall(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isCall(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	129	None	replace
1173	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableCall(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isImmutableCall(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	129	None	replace
1174	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString	  return    callNode.getType()    ==    Token.CALL    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	110	None	replace
1175	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChil  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChil  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChil	  return    callNode.getType()    ==    Token.CALL    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	110	None	replace
1176	[BUG]  [BUGGY]  &&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	194	None	replace
1177	[BUG]  [BUGGY]  if(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	194	None	replace
1178	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  JSC_PROPERTY_NAME_FN.add(callNode.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  JSC_PROPERTY_NAME_FN.add(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  JSC_PROPERTY_NAME_FN.add(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.add(callNode.getString()));    	non-compiled	[CE]  	160	None	replace
1179	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.add(callNode.getString())  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.add(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.add(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.add(callNode.getString()));    	non-compiled	[CE]  	160	None	replace
1180	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.add(callNode.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.add(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.add(callNode.getFirstChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.add(callNode.getString()));    	non-compiled	[CE]  	160	None	replace
1181	[BUG]  [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  true;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  true;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  true;  }	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	43	None	replace
1182	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get    	non-compiled	[CE]  	198	None	replace
1183	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChil  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChil  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChil	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	122	None	replace
1184	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.isNoSideEffectsCall())  {  return  true;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.isNoSideEffectsCall())  {  return  true;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.isNoSideEffectsCall())  {  return  true;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.isNoSideEffectsCall())    {    return    true;    }    	non-compiled	[CE]  	25	None	replace
1185	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	128	None	replace
1186	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  MISSING_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  MISSING_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  MISSING_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	128	None	replace
1187	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	145	None	replace
1188	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  builder);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  builder);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  builder);	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild(),    compiler);    	non-compiled	[CE]  	118	None	replace
1189	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getReferenceName(),  JSC_PROPERTY_NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getReferenceName(),  JSC_PROPERTY_NAME);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode.getReferenceName(),  JSC_PROPERTY_NAME);	  NodeTraversal.traverse(compiler,    callNode.getPropertyName(),    JSC_PROPERTY_NAME);    	non-compiled	[CE]  	132	None	replace
1190	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	17	None	replace
1191	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())    	non-compiled	[CE]  	93	None	replace
1192	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	7	None	replace
1193	[BUG]  [BUGGY]  NodeUtil.isCall(callNode)&&  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isCall(callNode)&&  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isCall(callNode)&&  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	7	None	replace
1194	[BUG]  [BUGGY]  if(callNode.getType()  ==  Token.NAME  ||  JSC_PROPERTY_NAME.equals(callNode.getType())||  callNode.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(callNode.getType()  ==  Token.NAME  ||  JSC_PROPERTY_NAME.equals(callNode.getType())||  callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(callNode.getType()  ==  Token.NAME  ||  JSC_PROPERTY_NAME.equals(callNode.getType())||  callNode.isNoSideEffectsCall())  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType())||    callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	131	None	replace
1195	[BUG]  [BUGGY]  return  CallNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CallNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CallNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	150	None	replace
1196	[BUG]  [BUGGY]  NodeUtil.isCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
1197	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
1198	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  JSC_PROPERTY_NAME.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  JSC_PROPERTY_NAME.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    JSC_PROPERTY_NAME.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	137	None	replace
1199	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getProp(Node.SOURCENAME_PROP)))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getProp(Node.SOURCENAME_PROP)))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getProp(Node.SOURCENAME_PROP)))  {  return  false;  }	  ||    JSC_PROPERTY_NAME.equals(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	26	None	replace
1200	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    REGEXP_METHODS.contains(callNode.getFirstChild());    	non-compiled	[CE]  	182	None	replace
1201	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild());	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	59	None	replace
1202	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	59	None	replace
1203	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild());	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	59	None	replace
1204	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CallNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CallNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CallNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	63	None	replace
1205	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getQualifiedName())&&  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getQualifiedName())&&  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getQualifiedName())&&  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))    {    return    false;    }    	non-compiled	[CE]  	19	None	replace
1206	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getQualifiedName())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getQualifiedName())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getQualifiedName())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))    {    return    false;    }    	non-compiled	[CE]  	19	None	replace
1207	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  callNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  callNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  callNode.getLastChild().getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	148	None	replace
1208	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isVarDeclaration(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	136	None	replace
1209	[BUG]  [BUGGY]  allowSideEffects(callNode.getPropertyName(),  JSC_PROPERTY_NAME_FN))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  allowSideEffects(callNode.getPropertyName(),  JSC_PROPERTY_NAME_FN))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode.getPropertyName(),  JSC_PROPERTY_NAME_FN))  {  return  false;  }	  allowSideEffects(callNode.getPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	174	None	replace
1210	[BUG]  [BUGGY]  NodeUtil.isFunctionCall(callNode)||  NodeUtil.isStatementBlock(callNode))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isFunctionCall(callNode)||  NodeUtil.isStatementBlock(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isFunctionCall(callNode)||  NodeUtil.isStatementBlock(callNode))  {  return  false;  }	  NodeUtil.isFunctionCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	55	None	replace
1211	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
1212	[BUG]  [BUGGY]  NodeUtil.isCall(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isCall(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isCall(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
1213	[BUG]  [BUGGY]  NodeUtil.isSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
1214	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getNext());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getNext());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getNext());	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    	non-compiled	[CE]  	75	None	replace
1215	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowSideEffects());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowSideEffects());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowSideEffects());	  NodeTraversal.traverse(compiler,    callNode,    compiler);    	non-compiled	[CE]  	81	None	replace
1216	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowSideEffectsCall());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowSideEffectsCall());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowSideEffectsCall());	  NodeTraversal.traverse(compiler,    callNode,    compiler);    	non-compiled	[CE]  	81	None	replace
1217	[BUG]  [BUGGY]  NodeUtil.isCall(callNode)&&  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isCall(callNode)&&  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isCall(callNode)&&  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isAssignmentOp(callNode))    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
1218	[BUG]  [BUGGY]  NodeUtil.isCall(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isCall(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isCall(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isAssignmentOp(callNode))    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
1219	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isAssignmentOp(callNode))    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
1220	[BUG]  [BUGGY]  NodeUtil.isExpressionNode(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isExpressionNode(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isExpressionNode(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  NodeUtil.isFunctionDeclaration(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	73	None	replace
1221	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	38	None	replace
1222	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	38	None	replace
1223	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild());  return  false;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild());  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getLastChild());  return  false;	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    return    false;    	non-compiled	[CE]  	192	None	replace
1224	[BUG]  [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  + ", "  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  + ", "  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  + ", "	  ||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	82	None	replace
1225	[BUG]  [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  + ". "  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  + ". "  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  + ". "	  ||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	82	None	replace
1226	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));    	non-compiled	[CE]  	158	None	replace
1227	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isVarDeclaration(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isVarDeclaration(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	95	None	replace
1228	[BUG]  [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	24	None	replace
1229	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	84	None	replace
1230	[BUG]  [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode)&&  OBJECT_METHODS.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode)&&  OBJECT_METHODS.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isNoSideEffectsCall(callNode)&&  OBJECT_METHODS.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ||    NodeUtil.isNoSideEffectsCall(callNode)&&    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	135	None	replace
1231	[BUG]  [BUGGY]  ||  NodeUtil.isVarDeclaration(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isVarDeclaration(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isVarDeclaration(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  ||    NodeUtil.isNoSideEffectsCall(callNode)&&    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	135	None	replace
1232	[BUG]  [BUGGY]  ||  NodeUtil.isGetProp(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isGetProp(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isGetProp(callNode.getFirstChild()))  {  return  false;  }	  ||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	1	None	replace
1233	[BUG]  [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.isNoSideEffectsCall())  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	22	None	replace
1234	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));	  throw    new    IllegalStateException(   "Expected    NEW    node,    got   "    +    Token.name(callNode.getType()));    	non-compiled	[CE]  	153	None	replace
1235	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChil  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChil  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChil	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChil    	non-compiled	[CE]  	196	None	replace
1236	[BUG]  [BUGGY]  return  callNode.getType()!=  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()!=  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()!=  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    callNode.getType()    ==    Token.FUNCTION    ||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	64	None	replace
1237	[BUG]  [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&  JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  JSC_PROPERTY_NAME.equals(callNode.getString())&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	23	None	replace
1238	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	3	None	replace
1239	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getFirstChild());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());    	non-compiled	[CE]  	62	None	replace
1240	[BUG]  [BUGGY]  NodeUtil.isStatementBlock(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isStatementBlock(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isStatementBlock(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	70	None	replace
1241	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	189	None	replace
1242	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstCh  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstCh  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstCh	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild    	non-compiled	[CE]  	197	None	replace
1243	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	72	None	replace
1244	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  READ_REGEXP_METHODS.contains(callNode.getString()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  READ_REGEXP_METHODS.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  READ_REGEXP_METHODS.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&    REGEXP_METHODS.contains(callNode.getString()));    	non-compiled	[CE]  	41	None	replace
1245	[BUG]  [BUGGY]  aughtException.from(JSC_PROPERTY_NAME,  JSC_PROPERTY_NAME_FN,  callNode.getString()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtException.from(JSC_PROPERTY_NAME,  JSC_PROPERTY_NAME_FN,  callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtException.from(JSC_PROPERTY_NAME,  JSC_PROPERTY_NAME_FN,  callNode.getString()))  {  return  false;  }	  aughtException.from(JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	162	None	replace
1246	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getString(),  JSC_PROPERTY_NAME_FN))  {  return  false;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getString(),  JSC_PROPERTY_NAME_FN))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getString(),  JSC_PROPERTY_NAME_FN))  {  return  false;	  Constructor    <    Node,    JSC_PROPERTY_NAME_FN.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	190	None	replace
1247	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getString()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getString()))  {  return  false;  }	  Constructor    <    Node,    JSC_PROPERTY_NAME_FN.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	190	None	replace
1248	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.get  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.get  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.get	  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	112	None	replace
1249	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&    JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	112	None	replace
1250	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	12	None	replace
1251	[BUG]  [BUGGY]  aughtExceptionHandler.handleNoSideEffects(callNode,  JSC_PROPERTY_NAME_FN);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleNoSideEffects(callNode,  JSC_PROPERTY_NAME_FN);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleNoSideEffects(callNode,  JSC_PROPERTY_NAME_FN);	  aughtExceptionHandler.handleNoSideEffects(callNode,    compiler);    	non-compiled	[CE]  	184	None	replace
1252	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getFirstChild()))  {  return  false;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getFirstChild()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getFirstChild()))  {  return  false;	  ||    JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))    {    return    false;    	non-compiled	[CE]  	133	None	replace
1253	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler,  context);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler,  context);  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler,  context);	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode,    compiler);    	non-compiled	[CE]  	79	None	replace
1254	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(jsNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.handleMissingName(jsNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleMissingName(jsNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }	  aughtExceptionHandler.handleMissingName(callNode.getString(),    JSC_PROPERTY_NAME))    {    return    false;    }    	non-compiled	[CE]  	163	None	replace
1255	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node,  got:   "  +  Token.name(callNode.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node,  got:   "  +  Token.name(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	throw  new  IllegalStateException( "Expected  NEW  node,  got:   "  +  Token.name(callNode.getString()));	  throw    new    IllegalStateException(   "Expected    NEW    node,    got:   "    +    Token.name(callNode.getFirstChild()));    	non-compiled	[CE]  	157	None	replace
1256	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  + ". "  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  + ". "  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  + ". "	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	87	None	replace
1257	[BUG]  [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString())||    JSC_PROPERTY_NAME.equals(callNode.getLocalName()))    {    return    false;    }    	non-compiled	[CE]  	36	None	replace
1258	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()    	non-compiled	[CE]  	199	None	replace
1259	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()    	non-compiled	[CE]  	199	None	replace
1260	[BUG]  [BUGGY]  Preconditions.checkArgument(!NodeUtil.isNoSideEffectsCall(callNode));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkArgument(!NodeUtil.isNoSideEffectsCall(callNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkArgument(!NodeUtil.isNoSideEffectsCall(callNode));	  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode));    	non-compiled	[CE]  	46	None	replace
1261	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isCall(callNode));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isCall(callNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!NodeUtil.isCall(callNode));	  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode));    	non-compiled	[CE]  	46	None	replace
1262	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(callNode));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isFunction(callNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!NodeUtil.isFunction(callNode));	  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode));    	non-compiled	[CE]  	46	None	replace
1263	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isExpressionNode(callNode));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!NodeUtil.isExpressionNode(callNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!NodeUtil.isExpressionNode(callNode));	  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode));    	non-compiled	[CE]  	46	None	replace
1264	[BUG]  [BUGGY]  NodeUtil.isCall(callNode)||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isCall(callNode)||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isCall(callNode)||  NodeUtil.isVarDeclaration(callNode))  {  return  false;  }	  NodeUtil.isCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	173	None	replace
1265	[BUG]  [BUGGY]  allowSideEffects(callNode.getType(),  JSC_PROPERTY_NAME))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  allowSideEffects(callNode.getType(),  JSC_PROPERTY_NAME))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode.getType(),  JSC_PROPERTY_NAME))  {  return  false;  }	  allowSideEffects(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	166	None	replace
1266	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(callNode.getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.remove(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    +    1));    	non-compiled	[CE]  	42	None	replace
1267	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getString()  +  1));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getString()  +  1));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.get(callNode.getString()  +  1));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    +    1));    	non-compiled	[CE]  	42	None	replace
1268	[BUG]  [BUGGY]  &&!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.STRING)  {  return  false;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  &&!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.STRING)  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.STRING)  {  return  false;	  if(!callNode.isNoSideEffectsCall()    ||    callNode.getType()    ==    Token.STRING)    {    return    false;    }    	non-compiled	[CE]  	203	None	replace
1269	[BUG]  [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	164	None	replace
1270	[BUG]  [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	164	None	replace
1271	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()	  return    callNode.getType()    ==    Token.NAME    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString())    	non-compiled	[CE]  	138	None	replace
1272	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "Expected  NEW  node:  got   "  +  Token.name(callNode.getFirstChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Throw  new  IllegalStateException( "Expected  NEW  node:  got   "  +  Token.name(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Throw  new  IllegalStateException( "Expected  NEW  node:  got   "  +  Token.name(callNode.getFirstChild()));	  throw    new    IllegalStateException(   "Expected    NEW    node:   "    +    Token.name(callNode.getFirstChild()));    	non-compiled	[CE]  	156	None	replace
1273	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node:  got  ' "  +  Token.name(callNode.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node:  got  ' "  +  Token.name(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	throw  new  IllegalStateException( "Expected  NEW  node:  got  ' "  +  Token.name(callNode.getFirstChild()));	  throw    new    IllegalStateException(   "Expected    NEW    node:   "    +    Token.name(callNode.getFirstChild()));    	non-compiled	[CE]  	156	None	replace
1274	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()))  {  return  false;  }	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	76	None	replace
1275	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()))  {  return  false;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()))  {  return  false;  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()))  {  return  false;	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	76	None	replace
1276	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }	  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))    {    return    false;    	non-compiled	[CE]  	76	None	replace
1277	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isVarDeclaration(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isVarDeclaration(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }	  NodeUtil.isNoSideEffectsCall(callNode)&&    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	2	None	replace
1278	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild()));	  return    callNode.getType()    ==    Token.CALL    &&    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	40	None	replace
1279	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "Expected  NEW  node,  got:   "  +  Token.name(callNode.getType()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Throw  new  IllegalStateException( "Expected  NEW  node,  got:   "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Throw  new  IllegalStateException( "Expected  NEW  node,  got:   "  +  Token.name(callNode.getType()));	  throw    new    IllegalStateException(   "Expected    NEW    node,    got:   "    +    Token.name(callNode.getType()));    	non-compiled	[CE]  	154	None	replace
1280	[BUG]  [BUGGY]  ||  NodeUtil.isSideEffectsCall(callNode))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isSideEffectsCall(callNode))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isSideEffectsCall(callNode))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got   "  +  Token.name(callNode.getType()));  }	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	48	None	replace
1281	[BUG]  [BUGGY]  ||  NodeUtil.isCall(callNode))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got "  +  Token.name(callNode.getType()));  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||  NodeUtil.isCall(callNode))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got "  +  Token.name(callNode.getType()));  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isCall(callNode))  {  throw  new  IllegalStateException( "Expected  NEW  node,  got "  +  Token.name(callNode.getType()));  }	  ||    NodeUtil.isNoSideEffectsCall(callNode))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	48	None	replace
1282	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  builder))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  builder))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  builder))  {  return  false;  }	  Constructor    <    Node,    JSC_PROPERTY_NAME>    constructorCallHasSideEffects(callNode.getFirstChild(),    compiler))    {    return    false;    }    	non-compiled	[CE]  	117	None	replace
1283	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS)  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!callNode.isNoSideEffectsCall()  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS)  {  return  false;  }	  Preconditions.checkState(!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	141	None	replace
1284	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	58	None	replace
1285	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	58	None	replace
1286	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild());  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	58	None	replace
1287	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSideEffects(JASC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.throwAsSideEffects(JASC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.throwAsSideEffects(JASC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }	  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	177	None	replace
1288	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,  callNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,  callNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,  callNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }	  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,    callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	177	None	replace
1289	[BUG]  [BUGGY]  ||(callNode.getType()!=  Token.FUNCTION  &&  callNode.getFirstChild().getType()  ==  Token.CALL))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||(callNode.getType()!=  Token.FUNCTION  &&  callNode.getFirstChild().getType()  ==  Token.CALL))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||(callNode.getType()!=  Token.FUNCTION  &&  callNode.getFirstChild().getType()  ==  Token.CALL))  {  return  false;  }	  ||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	94	None	replace
1290	[BUG]  [BUGGY]  ||(callNode.getType()!=  Token.FUNCTION  &&  callNode.getFirstChild().getType()!=  Token.CALL))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||(callNode.getType()!=  Token.FUNCTION  &&  callNode.getFirstChild().getType()!=  Token.CALL))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||(callNode.getType()!=  Token.FUNCTION  &&  callNode.getFirstChild().getType()!=  Token.CALL))  {  return  false;  }	  ||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	94	None	replace
1291	[BUG]  [BUGGY]  ||(callNode.getType()!=  Token.FUNCTION  &&  callNode.isNoSideEffectsCall()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||(callNode.getType()!=  Token.FUNCTION  &&  callNode.isNoSideEffectsCall()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||(callNode.getType()!=  Token.FUNCTION  &&  callNode.isNoSideEffectsCall()))  {  return  false;  }	  ||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	94	None	replace
1292	[BUG]  [BUGGY]  ||(callNode.getType()!=  Token.FUNCTION  &&  callNode.getFirstChild().getType()  ==  Token.NAME))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||(callNode.getType()!=  Token.FUNCTION  &&  callNode.getFirstChild().getType()  ==  Token.NAME))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||(callNode.getType()!=  Token.FUNCTION  &&  callNode.getFirstChild().getType()  ==  Token.NAME))  {  return  false;  }	  ||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	94	None	replace
1293	[BUG]  [BUGGY]  ||(callNode.getType()!=  Token.FUNCTION  &&  callNode.getFirstChild().getType()  ==  Token.FUNCTION))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||(callNode.getType()!=  Token.FUNCTION  &&  callNode.getFirstChild().getType()  ==  Token.FUNCTION))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||(callNode.getType()!=  Token.FUNCTION  &&  callNode.getFirstChild().getType()  ==  Token.FUNCTION))  {  return  false;  }	  ||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	94	None	replace
1294	[BUG]  [BUGGY]  ||!constructorCallHasSideEffects(callNode,  compiler))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||!constructorCallHasSideEffects(callNode,  compiler))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||!constructorCallHasSideEffects(callNode,  compiler))  {  return  false;  }	  ||!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	114	None	replace
1295	[BUG]  [BUGGY]  ||!callNode.isNoSideEffectsAs())  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  ||!callNode.isNoSideEffectsAs())  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||!callNode.isNoSideEffectsAs())  {  return  false;  }	  ||!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	114	None	replace
1296	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	109	None	replace
1297	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	109	None	replace
1298	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));	  return    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	109	None	replace
1299	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkArgument(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	127	None	replace
1300	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isCall(callNode)||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isCall(callNode)||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isCall(callNode)||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	127	None	replace
1301	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isVarDeclaration(callNode)||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	127	None	replace
1302	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isCall(callNode));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Preconditions.checkState(NodeUtil.isCall(callNode));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isCall(callNode));	  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode));    	non-compiled	[CE]  	45	None	replace
1303	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "Expected  NEW  node:  got   "  +  Token.name(callNode.getType()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  Throw  new  IllegalStateException( "Expected  NEW  node:  got   "  +  Token.name(callNode.getType()));  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Throw  new  IllegalStateException( "Expected  NEW  node:  got   "  +  Token.name(callNode.getType()));	  throw    new    IllegalStateException(   "Expected    NEW    node:   "    +    Token.name(callNode.getType()));    	non-compiled	[CE]  	155	None	replace
1304	[BUG]  [BUGGY]  NodeUtil.isAssignmentOp(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isAssignmentOp(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isAssignmentOp(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  NodeUtil.isFunction(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	13	None	replace
1305	[BUG]  [BUGGY]  NodeUtil.isVar(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  NodeUtil.isVar(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isVar(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  NodeUtil.isFunction(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	13	None	replace
1306	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getName())||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getName())||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getName())||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))    {    return    false;    }    	non-compiled	[CE]  	20	None	replace
1307	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getSimpleName())||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(       "Expected  NEW  node,  got       "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {      [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getSimpleName())||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }  [BUGGY]      }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getSimpleName())||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||    JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))    {    return    false;    }    	non-compiled	[CE]  	20	None	replace
