bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	12	None	replace
2	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	12	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	12	None	replace
4	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	12	None	replace
5	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	12	None	replace
6	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getString()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getString()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getString()))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	12	None	replace
7	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode.getFirstChild()))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	12	None	replace
8	[BUG]  [BUGGY]  ||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isFunction(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
9	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
10	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
11	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
13	[BUG]  [BUGGY]  NodeUtil.isFunction(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeUtil.isFunction(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isFunction(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
14	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isAssignmentOp(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
15	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
16	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
17	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
18	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
19	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getQualifiedName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
20	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getSimpleName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
21	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  else  if(compiler.isNoSideEffectsCall())  {  return  false;  }	  return    true;    	non-compiled	[CE]  	1	None	replace
22	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  false;  }	  return    true;    	non-compiled	[CE]  	1	None	replace
23	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  return    true;    	non-compiled	[CE]  	1	None	replace
24	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  return    true;    	non-compiled	[CE]  	1	None	replace
25	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  true;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  true;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())||  callNode.isNoSideEffectsCall())  {  return  true;  }	  return    true;    	non-compiled	[CE]  	1	None	replace
26	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	3	None	replace
27	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	3	None	replace
28	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getType())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	3	None	replace
29	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getType()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	3	None	replace
30	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	3	None	replace
31	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getType())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	3	None	replace
32	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    true;    }    	non-compiled	[CE]  	7	None	replace
33	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    true;    }    	non-compiled	[CE]  	7	None	replace
34	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    true;    }    	non-compiled	[CE]  	7	None	replace
35	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  true;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    true;    }    	non-compiled	[CE]  	7	None	replace
36	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())||  JSC_PROPERTY_NAME.equals(callNode.getLocalName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    true;    }    	non-compiled	[CE]  	7	None	replace
37	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	19	None	replace
38	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	19	None	replace
39	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	19	None	replace
40	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	19	None	replace
41	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getString()));  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getString()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	19	None	replace
42	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  +  1));  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  +  1));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  +  1));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	19	None	replace
43	[BUG]  [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
44	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode));	  if(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode));	  if(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
48	[BUG]  [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isNoSideEffectsCall(callNode))  {  throw  new  IllegalStateException( " ");  }	  if(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
49	[BUG]  [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;	  if(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
50	[BUG]  [BUGGY]  ||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	13	None	replace
51	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	13	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	13	None	replace
53	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	13	None	replace
54	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	13	None	replace
55	[BUG]  [BUGGY]  NodeUtil.isFunctionCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeUtil.isFunctionCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isFunctionCall(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	13	None	replace
56	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	13	None	replace
57	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	18	None	replace
58	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	18	None	replace
59	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	18	None	replace
60	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	18	None	replace
61	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	18	None	replace
62	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	18	None	replace
63	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	20	None	replace
64	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.FUNCTION  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	20	None	replace
65	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	20	None	replace
66	[BUG]  [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  callNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	20	None	replace
67	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	20	None	replace
68	[BUG]  [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	20	None	replace
69	[BUG]  [BUGGY]  ||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	10	None	replace
70	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	10	None	replace
71	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	10	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	10	None	replace
73	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeUtil.isFunctionDeclaration(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isFunctionDeclaration(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	10	None	replace
74	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	10	None	replace
75	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());	      	non-compiled	[CE]  	8	None	replace
76	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;	      	non-compiled	[CE]  	8	None	replace
77	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  true;  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  true;  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  true;	      	non-compiled	[CE]  	8	None	replace
78	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  throw  new  IllegalStateException( " ");  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  throw  new  IllegalStateException( " ");  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  throw  new  IllegalStateException( " ");	      	non-compiled	[CE]  	8	None	replace
79	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler);  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler);  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode,  compiler);	      	non-compiled	[CE]  	8	None	replace
80	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString());  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString());  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString());	      	non-compiled	[CE]  	8	None	replace
81	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  compiler);  [CE]  [FE]                                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  compiler);  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  compiler);	      	non-compiled	[CE]  	8	None	replace
82	[BUG]  [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	15	None	replace
83	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	15	None	replace
84	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	15	None	replace
85	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	15	None	replace
86	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	15	None	replace
87	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	15	None	replace
88	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	17	None	replace
89	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	17	None	replace
90	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	17	None	replace
91	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	17	None	replace
92	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	17	None	replace
93	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	17	None	replace
94	[BUG]  [BUGGY]  ||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
95	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
96	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
97	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
98	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
99	[BUG]  [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
100	[BUG]  [BUGGY]  ||  CallNodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ||  CallNodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  CallNodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
101	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	6	None	replace
102	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	6	None	replace
103	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	6	None	replace
104	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	6	None	replace
105	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	6	None	replace
106	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	16	None	replace
107	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	16	None	replace
108	[BUG]  [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getString().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	16	None	replace
109	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	16	None	replace
110	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.CALL  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	16	None	replace
111	[BUG]  [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getFirstChild().contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  JSC_PROPERTY_NAME_FN.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	16	None	replace
112	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getString())&&  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	2	None	replace
113	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getString()))  {  return  false;	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	2	None	replace
114	[BUG]  [BUGGY]  ||!callNode.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ||!callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||!callNode.isNoSideEffectsCall())  {  return  false;  }	  if(!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
115	[BUG]  [BUGGY]  Node  callNode  =  callNode.getFirstChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  Node  callNode  =  callNode.getFirstChild();  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Node  callNode  =  callNode.getFirstChild();	  if(!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
116	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild()))  {  return  false;  }	  if(!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
117	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  compiler))  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  compiler))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  compiler))  {  return  false;  }	  if(!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
118	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  compiler);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  compiler);  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME>  constructorCallHasSideEffects(callNode.getFirstChild(),  compiler);	  if(!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
119	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement());  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  new  MatchShallowStatement());	      	non-compiled	[CE]  	8	None	replace
120	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(node.getString());  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(node.getString());  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(node.getString());	      	non-compiled	[CE]  	8	None	replace
121	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	19	None	replace
122	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	19	None	replace
123	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	19	None	replace
124	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	12	None	replace
125	[BUG]  [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	ConstructorUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	12	None	replace
126	[BUG]  [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.mayHaveSideEffects(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	10	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;	  if(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
131	[BUG]  [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())||  callNode.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(JSC_PROPERTY_NAME.equals(callNode.getType())||  callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(JSC_PROPERTY_NAME.equals(callNode.getType())||  callNode.isNoSideEffectsCall())  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	3	None	replace
132	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getPropertyName(),  JSC_PROPERTY_NAME);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeTraversal.traverse(compiler,  callNode.getPropertyName(),  JSC_PROPERTY_NAME);  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode.getPropertyName(),  JSC_PROPERTY_NAME);	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
133	[BUG]  [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))  {  return  false;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ||  JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))  {  return  false;  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))  {  return  false;	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
134	[BUG]  [BUGGY]  &&  NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  &&  NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
135	[BUG]  [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  ||  NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	||  NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
136	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
137	[BUG]  [BUGGY]  return  JSC_PROPERTY_NAME.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  JSC_PROPERTY_NAME.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  JSC_PROPERTY_NAME.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	16	None	replace
138	[BUG]  [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString())  [CE]  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString())  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.getType()  ==  Token.NAME  &&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	16	None	replace
139	[BUG]  [BUGGY]  allowSideEffects(callNode.getJSPropertyName()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  allowSideEffects(callNode.getJSPropertyName()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode.getJSPropertyName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getJSPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	6	None	replace
140	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString())  [CE]  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString())  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	17	None	replace
141	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall())  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall())  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!callNode.isNoSideEffectsCall())  {  return  false;  }	  if(!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
142	[BUG]  [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  Preconditions.checkState(!callNode.isNoSideEffectsCall());  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Preconditions.checkState(!callNode.isNoSideEffectsCall());	  if(!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
143	[BUG]  [BUGGY]  if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
144	[BUG]  [BUGGY]  if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.NAME)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
145	[BUG]  [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [CE]  [FE]        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	15	None	replace
146	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [CE]  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	15	None	replace
147	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.mayHaveSideEffects(callNode)||  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	13	None	replace
148	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getLastChild().getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	20	None	replace
149	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME,  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME,  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeTraversal.traverse(compiler,  callNode,  JSC_PROPERTY_NAME,  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	2	None	replace
150	[BUG]  [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  callNode.contains(OBJECT_METHODS_WITHOUT_SIDEEFFECTS)||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	18	None	replace
151	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.add(callNode.getString());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	18	None	replace
152	[BUG]  [BUGGY]  &&  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  &&  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isFunction(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
153	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node,  got "  +  Token.name(callNode.getType()));  [CE]  [FE]        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node,  got "  +  Token.name(callNode.getType()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	throw  new  IllegalStateException( "Expected  NEW  node,  got "  +  Token.name(callNode.getType()));	  return    true;    	non-compiled	[CE]  	1	None	replace
154	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getType()));	  return    true;    	non-compiled	[CE]  	1	None	replace
155	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node: "  +  Token.name(callNode.getType()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node: "  +  Token.name(callNode.getType()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	throw  new  IllegalStateException( "Expected  NEW  node: "  +  Token.name(callNode.getType()));	  return    true;    	non-compiled	[CE]  	1	None	replace
156	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node: "  +  Token.name(callNode.getFirstChild()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node: "  +  Token.name(callNode.getFirstChild()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	throw  new  IllegalStateException( "Expected  NEW  node: "  +  Token.name(callNode.getFirstChild()));	  return    true;    	non-compiled	[CE]  	1	None	replace
157	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getFirstChild()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getFirstChild()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	throw  new  IllegalStateException( "Expected  NEW  node,  got: "  +  Token.name(callNode.getFirstChild()));	  return    true;    	non-compiled	[CE]  	1	None	replace
158	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getFirstChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	16	None	replace
159	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.contains(callNode.getLastChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	16	None	replace
160	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.add(callNode.getString()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.add(callNode.getString()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  JSC_PROPERTY_NAME_FN.add(callNode.getString()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    JSC_PROPERTY_NAME_FN.contains(callNode.getString()));    	non-compiled	[CE]  	16	None	replace
161	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME);  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME);	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    true;    }    	non-compiled	[CE]  	7	None	replace
162	[BUG]  [BUGGY]  aughtException.from(JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  aughtException.from(JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtException.from(JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    true;    }    	non-compiled	[CE]  	7	None	replace
163	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleMissingName(callNode.getString(),  JSC_PROPERTY_NAME))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    true;    }    	non-compiled	[CE]  	7	None	replace
164	[BUG]  [BUGGY]  if(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isFunction(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
165	[BUG]  [BUGGY]  &&  NodeUtil.isFunction(callNode))  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  &&  NodeUtil.isFunction(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isFunction(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunction(callNode))    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
166	[BUG]  [BUGGY]  allowSideEffects(callNode.getType()))  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  allowSideEffects(callNode.getType()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode.getType()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	3	None	replace
167	[BUG]  [BUGGY]  aughtException.from(JSC_PROPERTY_NAME,  callNode.getType()))  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  aughtException.from(JSC_PROPERTY_NAME,  callNode.getType()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtException.from(JSC_PROPERTY_NAME,  callNode.getType()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getType()))    {    return    false;    }    	non-compiled	[CE]  	3	None	replace
168	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())  [CE]  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	17	None	replace
169	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild())&&  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())    	non-compiled	[CE]  	17	None	replace
170	[BUG]  [BUGGY]  if(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	13	None	replace
171	[BUG]  [BUGGY]  &&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  &&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isExpressionNode(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isExpressionNode(callNode))    {    return    false;    }    	non-compiled	[CE]  	13	None	replace
172	[BUG]  [BUGGY]  &&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  &&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	&&  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	10	None	replace
173	[BUG]  [BUGGY]  NodeUtil.isCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  NodeUtil.isCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	NodeUtil.isCall(callNode)||  NodeUtil.isFunctionDeclaration(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isFunctionDeclaration(callNode))    {    return    false;    }    	non-compiled	[CE]  	10	None	replace
174	[BUG]  [BUGGY]  allowSideEffects(callNode.getPropertyName()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  allowSideEffects(callNode.getPropertyName()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode.getPropertyName()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
175	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getPropertyName(),  JSC_PROPERTY_NAME);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  aughtExceptionHandler.handleMissingName(callNode.getPropertyName(),  JSC_PROPERTY_NAME);  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleMissingName(callNode.getPropertyName(),  JSC_PROPERTY_NAME);	  if(JSC_PROPERTY_NAME.equals(callNode.getPropertyName()))    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
176	[BUG]  [BUGGY]  allowSideEffects(callNode.getString()))  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  allowSideEffects(callNode.getString()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	2	None	replace
177	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	2	None	replace
178	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,  JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,  JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.throwAsSideEffects(JSC_PROPERTY_NAME,  JSC_PROPERTY_NAME,  callNode.getString()))  {  return  false;  }	  if(JSC_PROPERTY_NAME.equals(callNode.getString()))    {    return    false;    }    	non-compiled	[CE]  	2	None	replace
179	[BUG]  [BUGGY]  if(NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(NodeUtil.isNoSideEffectsCall(callNode)&&  callNode.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
180	[BUG]  [BUGGY]  if(NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(NodeUtil.isNoSideEffectsCall(callNode)||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    callNode.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
181	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild()));	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	19	None	replace
182	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getFirstChild());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getFirstChild());  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())&&  REGEXP_METHODS.contains(callNode.getFirstChild());	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()));    	non-compiled	[CE]  	19	None	replace
183	[BUG]  [BUGGY]  allowSideEffects(callNode))  {  return  false;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  allowSideEffects(callNode))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	allowSideEffects(callNode))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
184	[BUG]  [BUGGY]  aughtExceptionHandler.handleNoSideEffects(callNode,  compiler);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  aughtExceptionHandler.handleNoSideEffects(callNode,  compiler);  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleNoSideEffects(callNode,  compiler);	  if(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
185	[BUG]  [BUGGY]  aughtExceptionHandler.handleNoSideEffects(callNode);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  aughtExceptionHandler.handleNoSideEffects(callNode);  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	aughtExceptionHandler.handleNoSideEffects(callNode);	  if(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
186	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.FUNCTION));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.FUNCTION));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.FUNCTION));	  if(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
187	[BUG]  [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  parent.replaceChild(callNode,  new  Node(Token.EMPTY));  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	parent.replaceChild(callNode,  new  Node(Token.EMPTY));	  if(NodeUtil.isNoSideEffectsCall(callNode))    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
188	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  callNode.getFirstChild().getType()!=  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	20	None	replace
189	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString())&&  callNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    callNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	20	None	replace
190	[BUG]  [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getString()))  {  return  false;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getString()))  {  return  false;  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Constructor  <  Node,  JSC_PROPERTY_NAME_FN.contains(callNode.getString()))  {  return  false;	      	non-compiled	[CE]  	8	None	replace
191	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  return  true;  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  return  true;  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  return  true;	      	non-compiled	[CE]  	8	None	replace
192	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  return  false;  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  return  false;  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  return  false;	      	non-compiled	[CE]  	8	None	replace
193	[BUG]  [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	Context.checkState(NodeUtil.isNoSideEffectsCall(callNode)||  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	12	None	replace
194	[BUG]  [BUGGY]  if(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(NodeUtil.isNoSideEffectsCall(callNode)&&  NodeUtil.isName(callNode.getFirstChild()))  {  return  false;  }	  if(NodeUtil.isNoSideEffectsCall(callNode)||    NodeUtil.isName(callNode.getFirstChild()))    {    return    false;    }    	non-compiled	[CE]  	12	None	replace
195	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChild	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	18	None	replace
196	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChil  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChil  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getLastChil	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	18	None	replace
197	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getFirstChild	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString());    	non-compiled	[CE]  	18	None	replace
198	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get  [CE]  [FE]        AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.get	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	15	None	replace
199	[BUG]  [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()  [CE]  [FE]          AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	return  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getType()	  return    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString())||    OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()    	non-compiled	[CE]  	15	None	replace
200	[BUG]  [BUGGY]  if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.NAME)  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.NAME)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
201	[BUG]  [BUGGY]  if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
202	[BUG]  [BUGGY]  if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.STRING)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.STRING)  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()!=  Token.STRING)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
203	[BUG]  [BUGGY]  if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.STRING)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    static  boolean  constructorCallHasSideEffects(  Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {    [BUGGY]  if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.STRING)  {  return  false;  }  [BUGGY]    }  Node  nameNode  =  callNode.getFirstChild();  if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.29649972666444047	692	692	7	replace	if(!callNode.isNoSideEffectsCall()  ||  callNode.getType()  ==  Token.STRING)  {  return  false;  }	  if(!callNode.isNoSideEffectsCall())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
