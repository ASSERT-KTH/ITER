bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  ConSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();    [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  ConSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  [BUGGY]    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	696	697	7	replace	if(nameNode.getType()  ==  Token.NAME  &&  ConSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {	  if(nameNode.getType()!=    Token.NAME    &&    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))    {    	non-compiled	[CE]  	6	None	replace
2	[BUG]  [BUGGY]  if(nameNode.getType()!=  Token.NAME  &&  ConSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();    [BUGGY]  if(nameNode.getType()!=  Token.NAME  &&  ConSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  [BUGGY]    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	696	697	7	replace	if(nameNode.getType()!=  Token.NAME  &&  ConSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {	  if(nameNode.getType()!=    Token.NAME    &&    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))    {    	non-compiled	[CE]  	6	None	replace
3	[BUG]  [BUGGY]  if  (nameNode.getType()  ==  Token.NAME  ||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();    [BUGGY]  if  (nameNode.getType()  ==  Token.NAME  ||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  [BUGGY]    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	696	697	7	replace	if  (nameNode.getType()  ==  Token.NAME  ||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {	  if    (nameNode.getType()    ==    Token.NAME    &&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))    {    	non-compiled	[CE]  	3	None	replace
4	[BUG]  [BUGGY]  if  (nameNode.getType()!=  Token.NAME  ||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();    [BUGGY]  if  (nameNode.getType()!=  Token.NAME  ||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  [BUGGY]    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	696	697	7	replace	if  (nameNode.getType()!=  Token.NAME  ||  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {	  if    (nameNode.getType()    ==    Token.NAME    &&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))    {    	non-compiled	[CE]  	3	None	replace
5	[BUG]  [BUGGY]  Node  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();    [BUGGY]  Node  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString());  [BUGGY]    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	696	697	7	replace	Node  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString());	      	non-compiled	[CE]  	4	None	replace
6	[BUG]  [BUGGY]  Node  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  =  nameNode.getFirstChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();    [BUGGY]  Node  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  =  nameNode.getFirstChild();  [BUGGY]    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	696	697	7	replace	Node  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  =  nameNode.getFirstChild();	      	non-compiled	[CE]  	4	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();    [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS);  [BUGGY]    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	696	697	7	replace	NodeTraversal.traverse(compiler,  nameNode,  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS);	      	non-compiled	[CE]  	4	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  this);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();    [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  this);  [BUGGY]    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	696	697	7	replace	NodeTraversal.traverse(compiler,  nameNode,  this);	      	non-compiled	[CE]  	4	None	replace
9	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getLastChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();    [BUGGY]  Node  nameNode  =  callNode.getLastChild();  [BUGGY]    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	696	697	7	replace	Node  nameNode  =  callNode.getLastChild();	      	non-compiled	[CE]  	4	None	replace
10	[BUG]  [BUGGY]  Node  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.put(nameNode.getString(),  nameNode);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();    [BUGGY]  Node  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.put(nameNode.getString(),  nameNode);  [BUGGY]    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	696	697	7	replace	Node  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.put(nameNode.getString(),  nameNode);	      	non-compiled	[CE]  	4	None	replace
11	[BUG]  [BUGGY]  Node  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  =  nameNode.getLastChild();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();    [BUGGY]  Node  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  =  nameNode.getLastChild();  [BUGGY]    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	696	697	7	replace	Node  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  =  nameNode.getLastChild();	      	non-compiled	[CE]  	4	None	replace
12	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  ConSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();    [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  ConSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  [BUGGY]    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	696	697	7	replace	if(nameNode.getType()  ==  Token.NAME  &&  ConSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {	  if(nameNode.getType()!=    Token.NAME    &&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))    {    	non-compiled	[CE]  	5	None	replace
13	[BUG]  [BUGGY]  if(nameNode.getType()!=  Token.NAME  &&  ConSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();    [BUGGY]  if(nameNode.getType()!=  Token.NAME  &&  ConSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  [BUGGY]    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	696	697	7	replace	if(nameNode.getType()!=  Token.NAME  &&  ConSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {	  if(nameNode.getType()!=    Token.NAME    &&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))    {    	non-compiled	[CE]  	5	None	replace
14	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString())||  nameNode.getType()!=  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();    [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString())||  nameNode.getType()!=  Token.FUNCTION)  {  [BUGGY]    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	696	697	7	replace	if(nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString())||  nameNode.getType()!=  Token.FUNCTION)  {	  if(nameNode.getType()!=    Token.NAME    &&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))    {    	non-compiled	[CE]  	5	None	replace
15	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();    [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString());  [BUGGY]    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	696	697	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString());	      	non-compiled	[CE]  	4	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  new  MatchShallowStatement());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();    [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  new  MatchShallowStatement());  [BUGGY]    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	696	697	7	replace	NodeTraversal.traverse(compiler,  nameNode,  new  MatchShallowStatement());	      	non-compiled	[CE]  	4	None	replace
17	[BUG]  [BUGGY]  if(nameNode.getType()!=  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString())||  nameNode.getType()!=  Token.FUNCTION)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();    [BUGGY]  if(nameNode.getType()!=  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString())||  nameNode.getType()!=  Token.FUNCTION)  {  [BUGGY]    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	696	697	7	replace	if(nameNode.getType()!=  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString())||  nameNode.getType()!=  Token.FUNCTION)  {	  if(nameNode.getType()!=    Token.NAME    &&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))    {    	non-compiled	[CE]  	5	None	replace
18	[BUG]  [BUGGY]  if(nameNode.getType()!=  Token.ASSIGN  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();    [BUGGY]  if(nameNode.getType()!=  Token.ASSIGN  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  [BUGGY]    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	696	697	7	replace	if(nameNode.getType()!=  Token.ASSIGN  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {	  if(nameNode.getType()!=    Token.NAME    &&    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))    {    	non-compiled	[CE]  	6	None	replace
19	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  return  false;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();    [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  return  false;  [BUGGY]    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	696	697	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  return  false;	      	non-compiled	[CE]  	4	None	replace
20	[BUG]  [BUGGY]  Node  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  =  callNode.getFirstChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();    [BUGGY]  Node  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  =  callNode.getFirstChild();  [BUGGY]    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	696	697	7	replace	Node  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  =  callNode.getFirstChild();	      	non-compiled	[CE]  	4	None	replace
21	[BUG]  [BUGGY]  if(nameNode.getType()!=  Token.ASSIGN  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();    [BUGGY]  if(nameNode.getType()!=  Token.ASSIGN  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  [BUGGY]    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	696	697	7	replace	if(nameNode.getType()!=  Token.ASSIGN  &&  CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {	  if(nameNode.getType()!=    Token.NAME    &&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))    {    	non-compiled	[CE]  	5	None	replace
22	[BUG]  [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  ConstructorStatement.WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }  Node  nameNode  =  callNode.getFirstChild();    [BUGGY]  if(nameNode.getType()  ==  Token.NAME  &&  ConstructorStatement.WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  [BUGGY]    CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	696	697	7	replace	if(nameNode.getType()  ==  Token.NAME  &&  ConstructorStatement.WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {	  if(nameNode.getType()!=    Token.NAME    &&    CONSTRUCTORS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))    {    	non-compiled	[CE]  	5	None	replace
