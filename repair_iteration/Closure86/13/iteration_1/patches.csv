bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  nameNode  =  callNode.removeLastChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  Node  nameNode  =  callNode.removeLastChild();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	Node  nameNode  =  callNode.removeLastChild();	  Node    nameNode    =    callNode.removeFirstChild();    	non-compiled	[CE]  	8	None	replace
2	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAncestor(2);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  Node  nameNode  =  callNode.getAncestor(2);  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	Node  nameNode  =  callNode.getAncestor(2);	  Node    nameNode    =    callNode.getAncestor(1);    	non-compiled	[CE]  	6	None	replace
3	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getNameNode();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  Node  nameNode  =  callNode.getNameNode();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	Node  nameNode  =  callNode.getNameNode();	  Node    nameNode    =    callNode.getAncestor(1);    	non-compiled	[CE]  	6	None	replace
4	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAncestor(3);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  Node  nameNode  =  callNode.getAncestor(3);  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	Node  nameNode  =  callNode.getAncestor(3);	  Node    nameNode    =    callNode.getAncestor(1);    	non-compiled	[CE]  	6	None	replace
5	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getParent();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  Node  nameNode  =  callNode.getParent();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	Node  nameNode  =  callNode.getParent();	  Node    nameNode    =    callNode.getNext();    	non-compiled	[CE]  	2	None	replace
6	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAstRoot(JSC_PROPERTY_NAME);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  Node  nameNode  =  callNode.getAstRoot(JSC_PROPERTY_NAME);  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	Node  nameNode  =  callNode.getAstRoot(JSC_PROPERTY_NAME);	  Node    nameNode    =    callNode.getLocalName();    	non-compiled	[CE]  	5	None	replace
7	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getSimpleName();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  Node  nameNode  =  callNode.getSimpleName();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	Node  nameNode  =  callNode.getSimpleName();	  Node    nameNode    =    callNode.getLocalName();    	non-compiled	[CE]  	5	None	replace
8	[BUG]  [BUGGY]  Node  nameNode  =  node.getLastChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  Node  nameNode  =  node.getLastChild();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	Node  nameNode  =  node.getLastChild();	  Node    nameNode    =    node.getFirstChild();    	non-compiled	[CE]  	9	None	replace
9	[BUG]  [BUGGY]  NameNode  nameNode  =  callNode.getFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  NameNode  nameNode  =  callNode.getFirstChild();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	NameNode  nameNode  =  callNode.getFirstChild();	  Node    nameNode    =    node.getFirstChild();    	non-compiled	[CE]  	9	None	replace
10	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString());  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(nameNode.getString());	      	non-compiled	[CE]  	7	None	replace
11	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()));  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()));  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()));	      	non-compiled	[CE]  	7	None	replace
12	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  return  false;  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  return  false;  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString()))  {  return  false;	      	non-compiled	[CE]  	7	None	replace
13	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getString(),  JSC_PROPERTY_NAME_FN);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  Node  nameNode  =  callNode.getString(),  JSC_PROPERTY_NAME_FN);  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	Node  nameNode  =  callNode.getString(),  JSC_PROPERTY_NAME_FN);	  Node    nameNode    =    callNode.getString();    	non-compiled	[CE]  	4	None	replace
14	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getQualifiedName();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  Node  nameNode  =  callNode.getQualifiedName();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	Node  nameNode  =  callNode.getQualifiedName();	  Node    nameNode    =    callNode.getString();    	non-compiled	[CE]  	4	None	replace
15	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getString()  +  1;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  Node  nameNode  =  callNode.getString()  +  1;  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	Node  nameNode  =  callNode.getString()  +  1;	  Node    nameNode    =    callNode.getString();    	non-compiled	[CE]  	4	None	replace
16	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getAssignedValue();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  Node  nameNode  =  callNode.getAssignedValue();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	Node  nameNode  =  callNode.getAssignedValue();	  Node    nameNode    =    callNode.getLocalName();    	non-compiled	[CE]  	5	None	replace
17	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.add(callNode.getString());	      	non-compiled	[CE]  	7	None	replace
18	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getfirstChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  Node  nameNode  =  callNode.getfirstChild();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	Node  nameNode  =  callNode.getfirstChild();	  Node    nameNode    =    callNode.getLastChild();    	non-compiled	[CE]  	1	None	replace
19	[BUG]  [BUGGY]  Node  nameNode  =  callNode.next();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  Node  nameNode  =  callNode.next();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	Node  nameNode  =  callNode.next();	  Node    nameNode    =    callNode.getLastChild();    	non-compiled	[CE]  	1	None	replace
20	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getProp(Node.SOURCENAME_PROP);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  Node  nameNode  =  callNode.getProp(Node.SOURCENAME_PROP);  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	Node  nameNode  =  callNode.getProp(Node.SOURCENAME_PROP);	  Node    nameNode    =    callNode.getType();    	non-compiled	[CE]  	3	None	replace
21	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getPrevious();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  Node  nameNode  =  callNode.getPrevious();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	Node  nameNode  =  callNode.getPrevious();	  Node    nameNode    =    callNode.getNext();    	non-compiled	[CE]  	2	None	replace
22	[BUG]  [BUGGY]  Node  nameNode  =  callNode.toString();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  Node  nameNode  =  callNode.toString();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	Node  nameNode  =  callNode.toString();	  Node    nameNode    =    callNode.cloneTree();    	non-compiled	[CE]  	10	None	replace
23	[BUG]  [BUGGY]  Node  nameNode  =  callNode.getNext(),  JSC_PROPERTY_NAME_FN);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  Node  nameNode  =  callNode.getNext(),  JSC_PROPERTY_NAME_FN);  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	Node  nameNode  =  callNode.getNext(),  JSC_PROPERTY_NAME_FN);	  Node    nameNode    =    callNode.getNext();    	non-compiled	[CE]  	2	None	replace
24	[BUG]  [BUGGY]  Node  nameNode  =  this.callNode.getFirstChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  Node  nameNode  =  this.callNode.getFirstChild();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	Node  nameNode  =  this.callNode.getFirstChild();	  Node    nameNode    =    callNode.getLastChild();    	non-compiled	[CE]  	1	None	replace
25	[BUG]  [BUGGY]  Node  nameNode  =  n.getFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  Node  nameNode  =  n.getFirstChild();  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	Node  nameNode  =  n.getFirstChild();	  Node    nameNode    =    callNode.getType();    	non-compiled	[CE]  	3	None	replace
26	[BUG]  [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(callNode.getString()))  {  return  false;	      	non-compiled	[CE]  	7	None	replace
27	[BUG]  [BUGGY]  Node  nameNode  =  callNode.removeChild(node);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  callNode,  AbstractCompiler  compiler)  {  if  (callNode.getType()  !=  Token.NEW)  {  throw  new  IllegalStateException(     "Expected  NEW  node,  got     "  +  Token.name(callNode.getType()));  }  if  (callNode.isNoSideEffectsCall())  {  return  false;  }    [BUGGY]  Node  nameNode  =  callNode.removeChild(node);  [BUGGY]    if  (nameNode.getType()  ==  Token.NAME  &&  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))  {  return  false;  }  return  true;  }  [CLASS]  NodeUtil  VarCollector  MatchNameNode  MatchNodeType  MatchDeclaration  MatchNotFunction  MatchShallowStatement  [METHOD]  constructorCallHasSideEffects  [RETURN_TYPE]  boolean  Node  callNode  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS  CONSTRUCTORS_WITHOUT_SIDE_EFFECTS  OBJECT_METHODS_WITHOUT_SIDEEFFECTS  REGEXP_METHODS  STRING_REGEXP_METHODS  defines  boolean  Node  callNode  nameNode  String  JSC_PROPERTY_NAME_FN  name  Map  vars  int  type  	projects/Closure86/src/com/google/javascript/jscomp/NodeUtil.java	0.3779644730092272	695	695	7	replace	Node  nameNode  =  callNode.removeChild(node);	  Node    nameNode    =    callNode.removeFirstChild();    	non-compiled	[CE]  	8	None	replace
