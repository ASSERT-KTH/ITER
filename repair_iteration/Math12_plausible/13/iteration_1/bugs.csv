bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    r  =  FastMath.sin(alpha);  [CE]  cannot  find  symbol  r  [FE]    AssertionError  [CONTEXT]    final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [BUGGY]    r  =  FastMath.sin(alpha);  [BUGGY]  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	    r  =  FastMath.sin(alpha);		non-compiled	[CE]  cannot  find  symbol  r	26	None	add
2	[BUG]  [BUGGY]    random  =  RandomMath.sin(alpha);  [CE]  cannot  find  symbol  alpha  [FE]      AssertionError  [CONTEXT]    final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [BUGGY]    random  =  RandomMath.sin(alpha);  [BUGGY]  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	    random  =  RandomMath.sin(alpha);		non-compiled	[CE]  cannot  find  symbol  alpha	26	None	add
3	[BUG]  [BUGGY]    r  =  FastMath.log(y);  [CE]  cannot  find  symbol  r  [FE]        AssertionError  [CONTEXT]    final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [BUGGY]    r  =  FastMath.log(y);  [BUGGY]  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	    r  =  FastMath.log(y);		non-compiled	[CE]  cannot  find  symbol  r	26	None	add
4	[BUG]  [BUGGY]  timeout  [FE]    AssertionError  [CONTEXT]    final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY;  [BUGGY]  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	add	nextGaussian  =  Double.POSITIVE_INFINITY;	nextGaussian  =  Double.NaN;  	compilable	timeout	25	1	replace
5	[BUG]  [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY;  timeout  [FE]    AssertionError  [CONTEXT]    final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY;  [BUGGY]  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	nextGaussian  =  Double.POSITIVE_INFINITY;	nextGaussian  =  Double.NaN;  	compilable	timeout	25	1	replace
6	[BUG]  [BUGGY]    double  random  =  random  *  FastMath.sin(alpha);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError  [CONTEXT]    final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [BUGGY]    double  random  =  random  *  FastMath.sin(alpha);  [BUGGY]  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	    double  random  =  random  *  FastMath.sin(alpha);		non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	26	None	add
7	[BUG]  [BUGGY]    double  random  =  random  *  FastMath.log(x);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]      AssertionError  [CONTEXT]    final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [BUGGY]    double  random  =  random  *  FastMath.log(x);  [BUGGY]  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	    double  random  =  random  *  FastMath.log(x);		non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	26	None	add
8	[BUG]  [BUGGY]    double  random  =  random  *  FastMath.log(y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError  [CONTEXT]    final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [BUGGY]    double  random  =  random  *  FastMath.log(y);  [BUGGY]  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	    double  random  =  random  *  FastMath.log(y);		non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	26	None	add
9	[BUG]  [BUGGY]    y  =  nextDouble();  [CE]  cannot  find  symbol  y  [FE]    AssertionError  [CONTEXT]    final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [BUGGY]    y  =  nextDouble();  [BUGGY]  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	    y  =  nextDouble();		non-compiled	[CE]  cannot  find  symbol  y	26	None	add
10	[BUG]  [BUGGY]    if(nextGaussian!=  null)  {  random  =  Math.pow(10,  random);  }  else  {  random  =  Math.sin(alpha);  }  [CE]  incomparable  types:  double  and  <null>  [FE]      AssertionError  [CONTEXT]    final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [BUGGY]    if(nextGaussian!=  null)  {  random  =  Math.pow(10,  random);  }  else  {  random  =  Math.sin(alpha);  }  [BUGGY]  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	    if(nextGaussian!=  null)  {  random  =  Math.pow(10,  random);  }  else  {  random  =  Math.sin(alpha);  }		non-compiled	[CE]  incomparable  types:  double  and  <null>	26	None	add
11	[BUG]  [BUGGY]    if(nextGaussian!=  null)  {  random  =  Math.pow(10,  random);  }  else  {  random  =  Math.sqrt(0,  random);  }  [CE]  incomparable  types:  double  and  <null>  [FE]        AssertionError  [CONTEXT]    final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  [BUGGY]    if(nextGaussian!=  null)  {  random  =  Math.pow(10,  random);  }  else  {  random  =  Math.sqrt(0,  random);  }  [BUGGY]  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	    if(nextGaussian!=  null)  {  random  =  Math.pow(10,  random);  }  else  {  random  =  Math.sqrt(0,  random);  }		non-compiled	[CE]  incomparable  types:  double  and  <null>	26	None	add
