bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.log(r);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  double  random  =  x  *  FastMath.log(r);  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  random  =  x  *  FastMath.log(r);	  double    random    =    x    *    FastMath.log(y);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	6	None	replace
2	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.sin(y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  double  random  =  x  *  FastMath.sin(y);  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  random  =  x  *  FastMath.sin(y);	  double    random    =    x    *    FastMath.sin(alpha);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	19	None	replace
3	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.sin(r);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  double  random  =  x  *  FastMath.sin(r);  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  random  =  x  *  FastMath.sin(r);	  double    random    =    x    *    FastMath.sin(alpha);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	19	None	replace
4	[BUG]  [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY;  random  =  Double.POSITIVE_INFINITY;  [CE]  variable  random  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY;  random  =  Double.POSITIVE_INFINITY;  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	nextGaussian  =  Double.POSITIVE_INFINITY;  random  =  Double.POSITIVE_INFINITY;	  nextGaussian    =    Double.POSITIVE_INFINITY;    r    =    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	13	None	replace
5	[BUG]  [BUGGY]  nGaussian  =  Double.POSITIVE_INFINITY;  [CE]  cannot  find  symbol  nGaussian  [FE]            AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  nGaussian  =  Double.POSITIVE_INFINITY;  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	nGaussian  =  Double.POSITIVE_INFINITY;	  nextGaussian    =    Double.POSITIVE_INFINITY;    nGaussian    =    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  cannot  find  symbol  nGaussian	22	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  if(nextGaussian  ==  Double.POSITIVE_INFINITY)  {  nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  }  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	add	if(nextGaussian  ==  Double.POSITIVE_INFINITY)  {  nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  }	  nextGaussian    =    Double.POSITIVE_INFINITY;    nextGaussian    =    Double.POSITIVE_INFINITY);    	compilable	  [FE]  AssertionError  	31	6	replace
7	[BUG]  [BUGGY]  if(nextGaussian  ==  Double.POSITIVE_INFINITY)  {  nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  if(nextGaussian  ==  Double.POSITIVE_INFINITY)  {  nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  }  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	if(nextGaussian  ==  Double.POSITIVE_INFINITY)  {  nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  }	  nextGaussian    =    Double.POSITIVE_INFINITY;    nextGaussian    =    Double.POSITIVE_INFINITY);    	compilable	  [FE]  AssertionError  	31	6	replace
8	[BUG]  [BUGGY]  random  =  nextGaussian;  [CE]  variable  random  might  already  have  been  assigned  [FE]            AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  random  =  nextGaussian;  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	random  =  nextGaussian;	  random    =    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	23	None	replace
9	[BUG]  [BUGGY]  secondGaussian  =  Double.POSITIVE_INFINITY;  [CE]  cannot  find  symbol  secondGaussian  [FE]              AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  secondGaussian  =  Double.POSITIVE_INFINITY;  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	secondGaussian  =  Double.POSITIVE_INFINITY;	  nextGaussian    =    Double.POSITIVE_INFINITY;    secondGaussian    =    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  cannot  find  symbol  secondGaussian	12	None	replace
10	[BUG]  [BUGGY]  double  random  =  nextGaussian  *  FastMath.log(x);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  double  random  =  nextGaussian  *  FastMath.log(x);  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  random  =  nextGaussian  *  FastMath.log(x);	  double    random    =    y    *    FastMath.log(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	30	None	replace
11	[BUG]  [BUGGY]  double  random  =  r  *  FastMath.sin(x);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]                  AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  double  random  =  r  *  FastMath.sin(x);  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  random  =  r  *  FastMath.sin(x);	  double    random    =    r    *    FastMath.log(y);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	7	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  nextGaussian    =    Double.POSITIVE_INFINITY;    nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	add	nextGaussian        =        Double.POSITIVE_INFINITY;        nextGaussian    =    Double.POSITIVE_INFINITY;    nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;	  	compilable	  [FE]  AssertionError  	10	3	add
13	[BUG]  [BUGGY]  nextGaussian    =    Double.POSITIVE_INFINITY;    nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  nextGaussian    =    Double.POSITIVE_INFINITY;    nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	nextGaussian        =        Double.POSITIVE_INFINITY;        nextGaussian    =    Double.POSITIVE_INFINITY;    nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;	  	compilable	  [FE]  AssertionError  	10	3	add
14	[BUG]  [BUGGY]  nextGaussian    =    Double.POSITIVE_INFINITY;    nextGaussian  =  Double.POSITIVE_INFINITY;  r  =  FastMath.sin(alpha);  nextGaussian  =  Double.POSITIVE_INFINITY;  [CE]  cannot  find  symbol  r  [FE]      AssertionError    [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  nextGaussian    =    Double.POSITIVE_INFINITY;    nextGaussian  =  Double.POSITIVE_INFINITY;  r  =  FastMath.sin(alpha);  nextGaussian  =  Double.POSITIVE_INFINITY;  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	nextGaussian        =        Double.POSITIVE_INFINITY;        nextGaussian    =    Double.POSITIVE_INFINITY;    r  =  FastMath.sin(alpha);  nextGaussian  =  Double.POSITIVE_INFINITY;	  	non-compiled	[CE]  cannot  find  symbol  r	10	None	add
15	[BUG]  [BUGGY]  double  r  =  FastMath.sin(x);  [CE]  cannot  find  symbol  x  [FE]            AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  double  r  =  FastMath.sin(x);  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  r  =  FastMath.sin(x);	  double    r    =    FastMath.sin(alpha);    	non-compiled	[CE]  cannot  find  symbol  x	32	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  double  r  =  FastMath.sin(nextGaussian);  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	add	double  r  =  FastMath.sin(nextGaussian);	  double    r    =    FastMath.sin(alpha);    	compilable	  [FE]  AssertionError  	32	6	replace
17	[BUG]  [BUGGY]  double  r  =  FastMath.sin(nextGaussian);  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  double  r  =  FastMath.sin(nextGaussian);  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  r  =  FastMath.sin(nextGaussian);	  double    r    =    FastMath.sin(alpha);    	compilable	  [FE]  AssertionError  	32	6	replace
18	[BUG]  [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(x,  alpha);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(x,  alpha);  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  random  =  nextGaussian  *  FastMath.sin(x,  alpha);	  double    random    =    nextGaussian    *    FastMath.sin(alpha);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	27	None	replace
19	[BUG]  [BUGGY]  double  random  =  r  *  FastMath.sin(x,  alpha);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  double  random  =  r  *  FastMath.sin(x,  alpha);  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  random  =  r  *  FastMath.sin(x,  alpha);	  double    random    =    r    *    FastMath.sin(alpha);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	20	None	replace
20	[BUG]  [BUGGY]  double  y  =  random.nextDouble();  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  double  y  =  random.nextDouble();  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  y  =  random.nextDouble();	  double    y    =    nextDouble();    	non-compiled	[CE]  double  cannot  be  dereferenced	5	None	replace
21	[BUG]  [BUGGY]  double  y  =  random.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]      AssertionError    [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  double  y  =  random.doubleValue();  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  y  =  random.doubleValue();	  double    y    =    nextDouble();    	non-compiled	[CE]  double  cannot  be  dereferenced	5	None	replace
22	[BUG]  [BUGGY]  double  y  =  nextDouble();  double  y  =  nextDouble();  [CE]  variable  y  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  double  y  =  nextDouble();  double  y  =  nextDouble();  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double    y    =    nextDouble();    double  y  =  nextDouble();	  	non-compiled	[CE]  variable  y  is  already  defined  in  method  nextGaussian()	4	None	add
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  double  y  =  nextDouble();  double  x  =  nextDouble();  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	add	double    y    =    nextDouble();    double  x  =  nextDouble();	  	compilable	  [FE]  AssertionError  	4	3	add
24	[BUG]  [BUGGY]  double  y  =  nextDouble();  double  x  =  nextDouble();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  double  y  =  nextDouble();  double  x  =  nextDouble();  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double    y    =    nextDouble();    double  x  =  nextDouble();	  	compilable	  [FE]  AssertionError  	4	3	add
25	[BUG]  [BUGGY]  double  y  =  nextDouble();  Double  y  =  nextDouble();  [CE]  variable  y  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError    [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  double  y  =  nextDouble();  Double  y  =  nextDouble();  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double    y    =    nextDouble();    Double  y  =  nextDouble();	  	non-compiled	[CE]  variable  y  is  already  defined  in  method  nextGaussian()	4	None	add
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY  +  1;  nextGaussian  =  Double.POSITIVE_INFINITY  +  1;  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	add	nextGaussian    =    Double.POSITIVE_INFINITY    +    1;    nextGaussian  =  Double.POSITIVE_INFINITY  +  1;	  timeout    	compilable	  [FE]  AssertionError  	14	3	add
27	[BUG]  [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY  +  1;  nextGaussian  =  Double.POSITIVE_INFINITY  +  1;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY  +  1;  nextGaussian  =  Double.POSITIVE_INFINITY  +  1;  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	nextGaussian    =    Double.POSITIVE_INFINITY    +    1;    nextGaussian  =  Double.POSITIVE_INFINITY  +  1;	  timeout    	compilable	  [FE]  AssertionError  	14	3	add
28	[BUG]  [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY  +  1;  secondGaussian  =  Double.POSITIVE_INFINITY  +  1;  [CE]  cannot  find  symbol  secondGaussian  [FE]              AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY  +  1;  secondGaussian  =  Double.POSITIVE_INFINITY  +  1;  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	nextGaussian    =    Double.POSITIVE_INFINITY    +    1;    secondGaussian  =  Double.POSITIVE_INFINITY  +  1;	  timeout    	non-compiled	[CE]  cannot  find  symbol  secondGaussian	14	None	add
29	[BUG]  [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY  +  1;  r  =  Double.POSITIVE_INFINITY  +  1;  [CE]  cannot  find  symbol  r  [FE]                AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY  +  1;  r  =  Double.POSITIVE_INFINITY  +  1;  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	nextGaussian    =    Double.POSITIVE_INFINITY    +    1;    r  =  Double.POSITIVE_INFINITY  +  1;	  timeout    	non-compiled	[CE]  cannot  find  symbol  r	14	None	add
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  nextGaussian  =  FastMath.log(nextGaussian);  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	add	nextGaussian  =  FastMath.log(nextGaussian);	  r    =    FastMath.log(nextGaussian);    	compilable	  [FE]  AssertionError  	29	5	replace
31	[BUG]  [BUGGY]  nextGaussian  =  FastMath.log(nextGaussian);  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  nextGaussian  =  FastMath.log(nextGaussian);  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	nextGaussian  =  FastMath.log(nextGaussian);	  r    =    FastMath.log(nextGaussian);    	compilable	  [FE]  AssertionError  	29	5	replace
32	[BUG]  [BUGGY]  r  =  FastMath.sin(nextGaussian);  [CE]  cannot  find  symbol  r  [FE]            AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  r  =  FastMath.sin(nextGaussian);  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	r  =  FastMath.sin(nextGaussian);	  r    =    FastMath.sin(x);    	non-compiled	[CE]  cannot  find  symbol  r	18	None	replace
33	[BUG]  [BUGGY]  double  random  =  y  *  FastMath.sin(alpha);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  double  random  =  y  *  FastMath.sin(alpha);  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  random  =  y  *  FastMath.sin(alpha);	  double    random    =    x    *    FastMath.sin(alpha);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	19	None	replace
34	[BUG]  [BUGGY]  r  =  FastMath.sin(y);  [CE]  cannot  find  symbol  r  [FE]            AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  r  =  FastMath.sin(y);  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	r  =  FastMath.sin(y);	  r    =    FastMath.sin(x);    	non-compiled	[CE]  cannot  find  symbol  r	18	None	replace
35	[BUG]  [BUGGY]  random  =  Double.POSITIVE_INFINITY  +  1;  [CE]  variable  random  might  already  have  been  assigned  [FE]            AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  random  =  Double.POSITIVE_INFINITY  +  1;  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	random  =  Double.POSITIVE_INFINITY  +  1;	  random    =    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	23	None	replace
36	[BUG]  [BUGGY]  r  =  FastMath.log(random);  [CE]  cannot  find  symbol  r  [FE]                AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  r  =  FastMath.log(random);  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	r  =  FastMath.log(random);	  r    =    FastMath.log(nextGaussian);    	non-compiled	[CE]  cannot  find  symbol  r	29	None	replace
37	[BUG]  [BUGGY]  double  y  =  random();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  double  y  =  random();  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double  y  =  random();	  double    y    =    nextDouble();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  if(nextGaussian  ==  Double.POSITIVE_INFINITY)  {  nextGaussian  =  Double.POSITIVE_INFINITY;  }  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	add	if(nextGaussian  ==  Double.POSITIVE_INFINITY)  {  nextGaussian  =  Double.POSITIVE_INFINITY;  }	  nextGaussian    =    Double.POSITIVE_INFINITY;    nextGaussian    =    Double.POSITIVE_INFINITY;    	compilable	  [FE]  AssertionError  	11	6	replace
39	[BUG]  [BUGGY]  if(nextGaussian  ==  Double.POSITIVE_INFINITY)  {  nextGaussian  =  Double.POSITIVE_INFINITY;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  if(nextGaussian  ==  Double.POSITIVE_INFINITY)  {  nextGaussian  =  Double.POSITIVE_INFINITY;  }  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	if(nextGaussian  ==  Double.POSITIVE_INFINITY)  {  nextGaussian  =  Double.POSITIVE_INFINITY;  }	  nextGaussian    =    Double.POSITIVE_INFINITY;    nextGaussian    =    Double.POSITIVE_INFINITY;    	compilable	  [FE]  AssertionError  	11	6	replace
40	[BUG]  [BUGGY]  nextGaussian    =    Double.POSITIVE_INFINITY;    nextGaussian  =  Double.POSITIVE_INFINITY;  secondGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  [CE]  cannot  find  symbol  secondGaussian  [FE]    AssertionError    [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  nextGaussian    =    Double.POSITIVE_INFINITY;    nextGaussian  =  Double.POSITIVE_INFINITY;  secondGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	nextGaussian        =        Double.POSITIVE_INFINITY;        nextGaussian    =    Double.POSITIVE_INFINITY;    secondGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;	  	non-compiled	[CE]  cannot  find  symbol  secondGaussian	10	None	add
41	[BUG]  [BUGGY]  nextGaussian    =    Double.POSITIVE_INFINITY;    nextGaussian  =  Double.POSITIVE_INFINITY;  nGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  [CE]  cannot  find  symbol  nGaussian  [FE]      AssertionError    [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  nextGaussian    =    Double.POSITIVE_INFINITY;    nextGaussian  =  Double.POSITIVE_INFINITY;  nGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	nextGaussian        =        Double.POSITIVE_INFINITY;        nextGaussian    =    Double.POSITIVE_INFINITY;    nGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;	  	non-compiled	[CE]  cannot  find  symbol  nGaussian	10	None	add
42	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY  /  1;  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	add	nextGaussian  =  Double.POSITIVE_INFINITY  /  1;	  nextGaussian    =    Double.POSITIVE_INFINITY    +    1;    timeout    	compilable	timeout	15	1	replace
43	[BUG]  [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY  /  1;  timeout  [FE]            AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  nextGaussian  =  Double.POSITIVE_INFINITY  /  1;  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	nextGaussian  =  Double.POSITIVE_INFINITY  /  1;	  nextGaussian    =    Double.POSITIVE_INFINITY    +    1;    timeout    	compilable	timeout	15	1	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  nextGaussian    =    Double.POSITIVE_INFINITY;    nextGaussian  =  Double.POSITIVE_INFINITY;  if(nextGaussian  ==  Double.POSITIVE_INFINITY)  {  nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  }  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	add	nextGaussian        =        Double.POSITIVE_INFINITY;        nextGaussian    =    Double.POSITIVE_INFINITY;    if(nextGaussian  ==  Double.POSITIVE_INFINITY)  {  nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  }	  	compilable	  [FE]  AssertionError  	10	3	add
45	[BUG]  [BUGGY]  nextGaussian    =    Double.POSITIVE_INFINITY;    nextGaussian  =  Double.POSITIVE_INFINITY;  if(nextGaussian  ==  Double.POSITIVE_INFINITY)  {  nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  nextGaussian    =    Double.POSITIVE_INFINITY;    nextGaussian  =  Double.POSITIVE_INFINITY;  if(nextGaussian  ==  Double.POSITIVE_INFINITY)  {  nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  }  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	nextGaussian        =        Double.POSITIVE_INFINITY;        nextGaussian    =    Double.POSITIVE_INFINITY;    if(nextGaussian  ==  Double.POSITIVE_INFINITY)  {  nextGaussian  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  }	  	compilable	  [FE]  AssertionError  	10	3	add
46	[BUG]  [BUGGY]  random  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  random  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;  [BUGGY]      }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	random  =  Double.POSITIVE_INFINITY;  nextGaussian  =  Double.POSITIVE_INFINITY;	  nextGaussian    =    Double.POSITIVE_INFINITY;    nextGaussian    =    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	11	None	replace
47	[BUG]  [BUGGY]  random  =  Math.pow(10,  y);  [CE]  cannot  find  symbol  y  [FE]              AssertionError      [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  random  =  Math.pow(10,  y);  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	random  =  Math.pow(10,  y);	  random    =    Math.pow(10,    alpha);    	non-compiled	[CE]  cannot  find  symbol  y	3	None	replace
48	[BUG]  [BUGGY]  double  y  =  nextDouble();  double  y  =  random();  [CE]  variable  y  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]        final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;      [BUGGY]  double  y  =  nextDouble();  double  y  =  random();  [BUGGY]      nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	double    y    =    nextDouble();    double  y  =  random();	  	non-compiled	[CE]  variable  y  is  already  defined  in  method  nextGaussian()	4	None	add
