bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  nextGaussian  *  FastMath.sin(x);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	double  r  =  nextGaussian  *  FastMath.sin(x);	  double    r    =    nextGaussian    *    FastMath.cos(x);    timeout    	compilable	timeout	37	1	replace
2	[BUG]  [BUGGY]  double  r  =  nextGaussian  *  FastMath.sin(x);  timeout  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  nextGaussian  *  FastMath.sin(x);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  r  =  nextGaussian  *  FastMath.sin(x);	  double    r    =    nextGaussian    *    FastMath.cos(x);    timeout    	compilable	timeout	37	1	replace
3	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  x  *  FastMath.cos(nextGaussian);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	double  r  =  x  *  FastMath.cos(nextGaussian);	  double    r    =    nextGaussian    *    FastMath.cos(x);    timeout    	compilable	timeout	37	1	replace
4	[BUG]  [BUGGY]  double  r  =  x  *  FastMath.cos(nextGaussian);  timeout  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  x  *  FastMath.cos(nextGaussian);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  r  =  x  *  FastMath.cos(nextGaussian);	  double    r    =    nextGaussian    *    FastMath.cos(x);    timeout    	compilable	timeout	37	1	replace
5	[BUG]  [BUGGY]  if(Double.isNaN(x)||  Double.isNaN(nextGaussian))  {  return  alpha;  }  [CE]  cannot  find  symbol  r  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  if(Double.isNaN(x)||  Double.isNaN(nextGaussian))  {  return  alpha;  }  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	if(Double.isNaN(x)||  Double.isNaN(nextGaussian))  {  return  alpha;  }	  if(Double.isNaN(x)||    Double.isNaN(y))    {    return    alpha;    }    	non-compiled	[CE]  cannot  find  symbol  r	17	None	replace
6	[BUG]  [BUGGY]  final  double  r  =  FastMath.sin(y);  final  double  r  =  FastMath.sin(y);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r  =  FastMath.sin(y);  final  double  r  =  FastMath.sin(y);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r    =    FastMath.sin(y);    final  double  r  =  FastMath.sin(y);	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	42	None	add
7	[BUG]  [BUGGY]  final  double  r  =  FastMath.sin(y);  final  double  r  =  FastMath.sin(x);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r  =  FastMath.sin(y);  final  double  r  =  FastMath.sin(x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r    =    FastMath.sin(y);    final  double  r  =  FastMath.sin(x);	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	42	None	add
8	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.log(y));  final  double  r=  FastMath.sqrt(2  *  FastMath.log(y));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.log(y));  final  double  r=  FastMath.sqrt(2  *  FastMath.log(y));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(2    *    FastMath.log(y));    final  double  r=  FastMath.sqrt(2  *  FastMath.log(y));	  timeout    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	1	None	add
9	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.log(y));  final  double  r=  FastMath.sqrt(2  *  FastMath.log(x));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.log(y));  final  double  r=  FastMath.sqrt(2  *  FastMath.log(x));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(2    *    FastMath.log(y));    final  double  r=  FastMath.sqrt(2  *  FastMath.log(x));	  timeout    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	1	None	add
10	[BUG]  [BUGGY]  double  y  =  nextGaussian();  [CE]  variable  y  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  y  =  nextGaussian();  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  y  =  nextGaussian();	  y    =    nextGaussian();    	non-compiled	[CE]  variable  y  is  already  defined  in  method  nextGaussian()	41	None	replace
11	[BUG]  [BUGGY]  timeout  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(1  *  FastMath.log(y));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r=  FastMath.sqrt(1  *  FastMath.log(y));	  final    double    r=    FastMath.sqrt(1    *    FastMath.log(x));    timeout    	compilable	timeout	4	1	replace
12	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(1  *  FastMath.log(y));  timeout  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(1  *  FastMath.log(y));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r=  FastMath.sqrt(1  *  FastMath.log(y));	  final    double    r=    FastMath.sqrt(1    *    FastMath.log(x));    timeout    	compilable	timeout	4	1	replace
13	[BUG]  [BUGGY]  double  r  =  nextGaussian();  double  r  =  nextGaussian();  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]    StackOverflowError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  nextGaussian();  double  r  =  nextGaussian();  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double    r    =    nextGaussian();    double  r  =  nextGaussian();	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	7	None	add
14	[BUG]  [BUGGY]  double  r  =  nextGaussian();  Double  r  =  nextGaussian();  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]      StackOverflowError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  nextGaussian();  Double  r  =  nextGaussian();  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double    r    =    nextGaussian();    Double  r  =  nextGaussian();	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	7	None	add
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(-3  *  FastMath.cos(alpha));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r=  FastMath.sqrt(-3  *  FastMath.cos(alpha));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.cos(alpha));    final    double    r=    FastMath.sqrt(-3    *    FastMath.cos(alpha));    	compilable	  [FE]  AssertionError  	28	4	replace
16	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(-3  *  FastMath.cos(alpha));  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(-3  *  FastMath.cos(alpha));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r=  FastMath.sqrt(-3  *  FastMath.cos(alpha));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.cos(alpha));    final    double    r=    FastMath.sqrt(-3    *    FastMath.cos(alpha));    	compilable	  [FE]  AssertionError  	28	4	replace
17	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(y));  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(y));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(y));  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(y));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(-2    *    FastMath.cos(y));    final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(y));	  timeout    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	32	None	add
18	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(y));  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(x));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(y));  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(x));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(-2    *    FastMath.cos(y));    final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(x));	  timeout    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	32	None	add
19	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(alpha));  final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(alpha));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(alpha));  final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(alpha));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(-2    *    FastMath.sin(alpha));    final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(alpha));	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	12	None	add
20	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(alpha));  final  double  r=  FastMath.sqrt(-3  *  FastMath.sin(alpha));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(alpha));  final  double  r=  FastMath.sqrt(-3  *  FastMath.sin(alpha));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(-2    *    FastMath.sin(alpha));    final  double  r=  FastMath.sqrt(-3  *  FastMath.sin(alpha));	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	12	None	add
21	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(x));  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(x));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(x));  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(x));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(-2    *    FastMath.cos(x));    final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(x));	  timeout    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	39	None	add
22	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(x));  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(y));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(x));  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(y));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(-2    *    FastMath.cos(x));    final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(y));	  timeout    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	39	None	add
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    StackOverflowError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  nextDouble();  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	double  r  =  nextDouble();	  double    r    =    nextGaussian();    	compilable	  [FE]  AssertionError  	8	6	replace
24	[BUG]  [BUGGY]  double  r  =  nextDouble();  [FE]  AssertionError  [FE]    StackOverflowError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  nextDouble();  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  r  =  nextDouble();	  double    r    =    nextGaussian();    	compilable	  [FE]  AssertionError  	8	6	replace
25	[BUG]  [BUGGY]  double  r  =  random.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  random.doubleValue();  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  r  =  random.doubleValue();	  double    r    =    nextGaussian.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	49	None	replace
26	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.sin(alpha));  final  double  r=  FastMath.sqrt(2  *  FastMath.sin(alpha));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.sin(alpha));  final  double  r=  FastMath.sqrt(2  *  FastMath.sin(alpha));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(2    *    FastMath.sin(alpha));    final  double  r=  FastMath.sqrt(2  *  FastMath.sin(alpha));	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	44	None	add
27	[BUG]  [BUGGY]  timeout  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(x  *  FastMath.log(y));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r=  FastMath.sqrt(x  *  FastMath.log(y));	  final    double    r=    FastMath.sqrt(2    *    FastMath.log(y));    timeout    	compilable	timeout	2	1	replace
28	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(x  *  FastMath.log(y));  timeout  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(x  *  FastMath.log(y));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r=  FastMath.sqrt(x  *  FastMath.log(y));	  final    double    r=    FastMath.sqrt(2    *    FastMath.log(y));    timeout    	compilable	timeout	2	1	replace
29	[BUG]  [BUGGY]  if(Double.isNaN(nextGaussian)||  Double.isNaN(alpha))  {  return  alpha;  }  [CE]  cannot  find  symbol  r  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  if(Double.isNaN(nextGaussian)||  Double.isNaN(alpha))  {  return  alpha;  }  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	if(Double.isNaN(nextGaussian)||  Double.isNaN(alpha))  {  return  alpha;  }	  if(Double.isNaN(x)||    Double.isNaN(alpha))    {    return    alpha;    }    	non-compiled	[CE]  cannot  find  symbol  r	16	None	replace
30	[BUG]  [BUGGY]  final  double  r  =  FastMath.sin(nextGaussian);  final  double  r  =  FastMath.sin(nextGaussian);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r  =  FastMath.sin(nextGaussian);  final  double  r  =  FastMath.sin(nextGaussian);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r    =    FastMath.sin(nextGaussian);    final  double  r  =  FastMath.sin(nextGaussian);	  timeout    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	30	None	add
31	[BUG]  [BUGGY]  final  double  r  =  FastMath.sin(nextGaussian);  Final  double  r  =  FastMath.sin(nextGaussian);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r  =  FastMath.sin(nextGaussian);  Final  double  r  =  FastMath.sin(nextGaussian);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r    =    FastMath.sin(nextGaussian);    Final  double  r  =  FastMath.sin(nextGaussian);	  timeout    	non-compiled	[CE]  not  a  statement	30	None	add
32	[BUG]  [BUGGY]  double  r  =  FastMath.sin(x,  y,  alpha);  [CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  FastMath.sin(x,  y,  alpha);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  r  =  FastMath.sin(x,  y,  alpha);	  double    r    =    FastMath.sin(x,    y);    	non-compiled	[CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;	38	None	replace
33	[BUG]  [BUGGY]  double  r  =  FastMath.sin(y,  x);  [CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  FastMath.sin(y,  x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  r  =  FastMath.sin(y,  x);	  double    r    =    FastMath.sin(x,    y);    	non-compiled	[CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;	38	None	replace
34	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.sin(nextGaussian,  y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  random  =  x  *  FastMath.sin(nextGaussian,  y);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  random  =  x  *  FastMath.sin(nextGaussian,  y);	  double    random    =    nextGaussian    *    FastMath.sin(x,    y);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	29	None	replace
35	[BUG]  [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(x,  y,  alpha);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(x,  y,  alpha);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  random  =  nextGaussian  *  FastMath.sin(x,  y,  alpha);	  double    random    =    nextGaussian    *    FastMath.sin(x,    y);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	29	None	replace
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r  =  FastMath.log(x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r  =  FastMath.log(x);	  final    double    r    =    FastMath.sin(y);    	compilable	  [FE]  AssertionError  	43	6	replace
37	[BUG]  [BUGGY]  final  double  r  =  FastMath.log(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r  =  FastMath.log(x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r  =  FastMath.log(x);	  final    double    r    =    FastMath.sin(y);    	compilable	  [FE]  AssertionError  	43	6	replace
38	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r  =  FastMath.sin(alpha);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r  =  FastMath.sin(alpha);	  final    double    r    =    FastMath.sin(nextGaussian);    timeout    	compilable	  [FE]  AssertionError  	31	6	replace
39	[BUG]  [BUGGY]  final  double  r  =  FastMath.sin(alpha);  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r  =  FastMath.sin(alpha);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r  =  FastMath.sin(alpha);	  final    double    r    =    FastMath.sin(nextGaussian);    timeout    	compilable	  [FE]  AssertionError  	31	6	replace
40	[BUG]  [BUGGY]  final  double  random  =  FastMath.sin(x,  y,  alpha);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  random  =  FastMath.sin(x,  y,  alpha);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  random  =  FastMath.sin(x,  y,  alpha);	  final    double    random    =    FastMath.sin(x,    y);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	25	None	replace
41	[BUG]  [BUGGY]  double  r  =  FastMath.sin(y);  double  r  =  FastMath.sin(y);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  FastMath.sin(y);  double  r  =  FastMath.sin(y);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double    r    =    FastMath.sin(y);    double  r  =  FastMath.sin(y);	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	47	None	add
42	[BUG]  [BUGGY]  double  r  =  FastMath.sin(y);  Double  r  =  FastMath.sin(y);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  FastMath.sin(y);  Double  r  =  FastMath.sin(y);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double    r    =    FastMath.sin(y);    Double  r  =  FastMath.sin(y);	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	47	None	add
43	[BUG]  [BUGGY]  double  r  =  FastMath.sin(y);  double  r  =  FastMath.sin(x);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  FastMath.sin(y);  double  r  =  FastMath.sin(x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double    r    =    FastMath.sin(y);    double  r  =  FastMath.sin(x);	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	47	None	add
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.cos(y));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r=  FastMath.sqrt(2  *  FastMath.cos(y));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.cos(x));    timeout    	compilable	  [FE]  AssertionError  	40	6	replace
45	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.cos(y));  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.cos(y));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r=  FastMath.sqrt(2  *  FastMath.cos(y));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.cos(x));    timeout    	compilable	  [FE]  AssertionError  	40	6	replace
46	[BUG]  [BUGGY]  double  r  =  FastMath.sin(x,  alpha,  y);  [CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  FastMath.sin(x,  alpha,  y);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  r  =  FastMath.sin(x,  alpha,  y);	  double    r    =    FastMath.sin(x,    alpha);    	non-compiled	[CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;	18	None	replace
47	[BUG]  [BUGGY]  if(Double.isNaN(x)||  Double.isNaN(y))  {  return  random;  }  [CE]  cannot  find  symbol  r  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  if(Double.isNaN(x)||  Double.isNaN(y))  {  return  random;  }  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	if(Double.isNaN(x)||  Double.isNaN(y))  {  return  random;  }	  if(Double.isNaN(x)||    Double.isNaN(alpha))    {    return    random;    }    	non-compiled	[CE]  cannot  find  symbol  r	35	None	replace
48	[BUG]  [BUGGY]  if(Double.isNaN(y)||  Double.isNaN(alpha))  {  return  random;  }  [CE]  cannot  find  symbol  r  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  if(Double.isNaN(y)||  Double.isNaN(alpha))  {  return  random;  }  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	if(Double.isNaN(y)||  Double.isNaN(alpha))  {  return  random;  }	  if(Double.isNaN(x)||    Double.isNaN(alpha))    {    return    random;    }    	non-compiled	[CE]  cannot  find  symbol  r	35	None	replace
49	[BUG]  [BUGGY]  final  double  random  =  FastMath.cos(x,  y,  alpha);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  random  =  FastMath.cos(x,  y,  alpha);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  random  =  FastMath.cos(x,  y,  alpha);	  final    double    random    =    FastMath.cos(x,    y);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	24	None	replace
50	[BUG]  [BUGGY]  double  r  =  nextGaussian  *  FastMath.cos(x);  double  r  =  nextGaussian  *  FastMath.cos(x);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  nextGaussian  *  FastMath.cos(x);  double  r  =  nextGaussian  *  FastMath.cos(x);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double    r    =    nextGaussian    *    FastMath.cos(x);    double  r  =  nextGaussian  *  FastMath.cos(x);	  timeout    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	36	None	add
51	[BUG]  [BUGGY]  double  r  =  nextGaussian  *  FastMath.cos(x);  Double  r  =  nextGaussian  *  FastMath.cos(x);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  nextGaussian  *  FastMath.cos(x);  Double  r  =  nextGaussian  *  FastMath.cos(x);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double    r    =    nextGaussian    *    FastMath.cos(x);    Double  r  =  nextGaussian  *  FastMath.cos(x);	  timeout    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	36	None	add
52	[BUG]  [BUGGY]  double  r  =  nextGaussian  *  FastMath.cos(x);  double  r  =  nextGaussian  *  FastMath.cos(y);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]                    AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  nextGaussian  *  FastMath.cos(x);  double  r  =  nextGaussian  *  FastMath.cos(y);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double    r    =    nextGaussian    *    FastMath.cos(x);    double  r  =  nextGaussian  *  FastMath.cos(y);	  timeout    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	36	None	add
53	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.sin(nextGaussian,  alpha);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  random  =  x  *  FastMath.sin(nextGaussian,  alpha);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  random  =  x  *  FastMath.sin(nextGaussian,  alpha);	  double    random    =    nextGaussian    *    FastMath.sin(x,    alpha);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	21	None	replace
54	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.cos(x));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r=  FastMath.sqrt(2  *  FastMath.cos(x));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.cos(y));    timeout    	compilable	  [FE]  AssertionError  	33	6	replace
55	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.cos(x));  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.cos(x));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r=  FastMath.sqrt(2  *  FastMath.cos(x));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.cos(y));    timeout    	compilable	  [FE]  AssertionError  	33	6	replace
56	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.cos(y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  random  =  x  *  FastMath.cos(y);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  random  =  x  *  FastMath.cos(y);	  double    random    =    x    *    FastMath.cos(nextGaussian);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	11	None	replace
57	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.sin(y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  random  =  x  *  FastMath.sin(y);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  random  =  x  *  FastMath.sin(y);	  double    random    =    x    *    FastMath.sin(nextGaussian);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	20	None	replace
58	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(1  *  FastMath.log(x));  final  double  r=  FastMath.sqrt(1  *  FastMath.log(x));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(1  *  FastMath.log(x));  final  double  r=  FastMath.sqrt(1  *  FastMath.log(x));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(1    *    FastMath.log(x));    final  double  r=  FastMath.sqrt(1  *  FastMath.log(x));	  timeout    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	3	None	add
59	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sin(2  *  FastMath.sin(alpha));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r=  FastMath.sin(2  *  FastMath.sin(alpha));	  final    double    r=    FastMath.sqrt(2    *    FastMath.sin(alpha));    	compilable	  [FE]  AssertionError  	45	6	replace
60	[BUG]  [BUGGY]  final  double  r=  FastMath.sin(2  *  FastMath.sin(alpha));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sin(2  *  FastMath.sin(alpha));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r=  FastMath.sin(2  *  FastMath.sin(alpha));	  final    double    r=    FastMath.sqrt(2    *    FastMath.sin(alpha));    	compilable	  [FE]  AssertionError  	45	6	replace
61	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.cos(alpha));  final  double  r=  FastMath.sqrt(2  *  FastMath.cos(alpha));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.cos(alpha));  final  double  r=  FastMath.sqrt(2  *  FastMath.cos(alpha));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(2    *    FastMath.cos(alpha));    final  double  r=  FastMath.sqrt(2  *  FastMath.cos(alpha));	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	14	None	add
62	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(1  *  FastMath.cos(alpha));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r=  FastMath.sqrt(1  *  FastMath.cos(alpha));	  final    double    r=    FastMath.sqrt(2    *    FastMath.cos(alpha));    	compilable	  [FE]  AssertionError  	15	6	replace
63	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(1  *  FastMath.cos(alpha));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(1  *  FastMath.cos(alpha));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r=  FastMath.sqrt(1  *  FastMath.cos(alpha));	  final    double    r=    FastMath.sqrt(2    *    FastMath.cos(alpha));    	compilable	  [FE]  AssertionError  	15	6	replace
64	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(x));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(x));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.sin(alpha));    	compilable	timeout	13	1	replace
65	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(x));  timeout  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(x));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(x));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.sin(alpha));    	compilable	timeout	13	1	replace
66	[BUG]  [BUGGY]  double  nextGaussian  =  y  *  FastMath.cos(alpha);  [CE]  cannot  find  symbol  r  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  nextGaussian  =  y  *  FastMath.cos(alpha);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  nextGaussian  =  y  *  FastMath.cos(alpha);	  double    nextGaussian    =    x    *    FastMath.cos(alpha);    	non-compiled	[CE]  cannot  find  symbol  r	9	None	replace
67	[BUG]  [BUGGY]  double  nextGaussian  =  x  *  FastMath.cos(y);  [CE]  cannot  find  symbol  r  [FE]                    AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  nextGaussian  =  x  *  FastMath.cos(y);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  nextGaussian  =  x  *  FastMath.cos(y);	  double    nextGaussian    =    x    *    FastMath.cos(alpha);    	non-compiled	[CE]  cannot  find  symbol  r	9	None	replace
68	[BUG]  [BUGGY]  final  double  r  =  FastMath.sin(x,  y,  alpha);  [CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r  =  FastMath.sin(x,  y,  alpha);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r  =  FastMath.sin(x,  y,  alpha);	  final    double    r    =    FastMath.sin(x,    alpha);    	non-compiled	[CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;	19	None	replace
69	[BUG]  [BUGGY]  final  double  r  =  FastMath.sin(x,  alpha,  y);  [CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r  =  FastMath.sin(x,  alpha,  y);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r  =  FastMath.sin(x,  alpha,  y);	  final    double    r    =    FastMath.sin(x,    alpha);    	non-compiled	[CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;	19	None	replace
70	[BUG]  [BUGGY]  double  r  =  random();  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  random();  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  r  =  random();	  double    r    =    nextGaussian();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
71	[BUG]  [BUGGY]  double  r  =  random  *  FastMath.cos(x);  [CE]  variable  random  might  not  have  been  initialized  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  random  *  FastMath.cos(x);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  r  =  random  *  FastMath.cos(x);	  double    r    =    nextGaussian    *    FastMath.cos(x);    timeout    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	37	None	replace
72	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(1  *  FastMath.log(x));  final  double  r=  FastMath.sqrt(1  *  FastMath.log(y));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(1  *  FastMath.log(x));  final  double  r=  FastMath.sqrt(1  *  FastMath.log(y));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(1    *    FastMath.log(x));    final  double  r=  FastMath.sqrt(1  *  FastMath.log(y));	  timeout    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	3	None	add
73	[BUG]  [BUGGY]  final  double  random  =  FastMath.cos(x,  y  +  1);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  random  =  FastMath.cos(x,  y  +  1);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  random  =  FastMath.cos(x,  y  +  1);	  final    double    random    =    FastMath.cos(x,    y);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	24	None	replace
74	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(y));  final  double  r=  FastMath.sqrt(-3  *  FastMath.cos(y));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(y));  final  double  r=  FastMath.sqrt(-3  *  FastMath.cos(y));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(-2    *    FastMath.cos(y));    final  double  r=  FastMath.sqrt(-3  *  FastMath.cos(y));	  timeout    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	32	None	add
75	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(x));  final  double  r=  FastMath.sqrt(-3  *  FastMath.cos(x));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.cos(x));  final  double  r=  FastMath.sqrt(-3  *  FastMath.cos(x));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(-2    *    FastMath.cos(x));    final  double  r=  FastMath.sqrt(-3  *  FastMath.cos(x));	  timeout    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	39	None	add
76	[BUG]  [BUGGY]  if(Double.isNaN(y)||  Double.isNaN(alpha))  {  return  alpha;  }  [CE]  cannot  find  symbol  r  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  if(Double.isNaN(y)||  Double.isNaN(alpha))  {  return  alpha;  }  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	if(Double.isNaN(y)||  Double.isNaN(alpha))  {  return  alpha;  }	  if(Double.isNaN(x)||    Double.isNaN(alpha))    {    return    alpha;    }    	non-compiled	[CE]  cannot  find  symbol  r	16	None	replace
77	[BUG]  [BUGGY]  double  r  =  nextGaussian  *  FastMath.cos(x);  double  r  =  nextGaussian  *  FastMath.sin(x);  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  nextGaussian  *  FastMath.cos(x);  double  r  =  nextGaussian  *  FastMath.sin(x);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double    r    =    nextGaussian    *    FastMath.cos(x);    double  r  =  nextGaussian  *  FastMath.sin(x);	  timeout    	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	36	None	add
78	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  FastMath.sin(alpha);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	double  r  =  FastMath.sin(alpha);	  double    r    =    FastMath.sin(y);    	compilable	  [FE]  AssertionError  	48	6	replace
79	[BUG]  [BUGGY]  double  r  =  FastMath.sin(alpha);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  FastMath.sin(alpha);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  r  =  FastMath.sin(alpha);	  double    r    =    FastMath.sin(y);    	compilable	  [FE]  AssertionError  	48	6	replace
80	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(y));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(y));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.sin(alpha));    	compilable	timeout	13	1	replace
81	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(y));  timeout  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(y));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(y));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.sin(alpha));    	compilable	timeout	13	1	replace
82	[BUG]  [BUGGY]  if(Double.isNaN(nextGaussian)||  Double.isNaN(y))  {  return  alpha;  }  [CE]  cannot  find  symbol  r  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  if(Double.isNaN(nextGaussian)||  Double.isNaN(y))  {  return  alpha;  }  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	if(Double.isNaN(nextGaussian)||  Double.isNaN(y))  {  return  alpha;  }	  if(Double.isNaN(x)||    Double.isNaN(y))    {    return    alpha;    }    	non-compiled	[CE]  cannot  find  symbol  r	17	None	replace
83	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(1  *  FastMath.log(x),  y);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(1  *  FastMath.log(x),  y);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r=  FastMath.sqrt(1  *  FastMath.log(x),  y);	  final    double    r=    FastMath.sqrt(1    *    FastMath.log(x));    timeout    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	4	None	replace
84	[BUG]  [BUGGY]  final  double  random  =  FastMath.cos(nextGaussian);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  random  =  FastMath.cos(nextGaussian);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  random  =  FastMath.cos(nextGaussian);	  final    double    random    =    FastMath.cos(y);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	46	None	replace
85	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(x),  y);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(x),  y);  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r=  FastMath.sqrt(-2  *  FastMath.log(x),  y);	  final    double    r=    FastMath.sqrt(-2    *    FastMath.log(x));    final    double    r=    FastMath.sqrt(-2    *    FastMath.log(y));    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	23	None	replace
86	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(1  *  FastMath.sin(alpha));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r=  FastMath.sqrt(1  *  FastMath.sin(alpha));	  final    double    r=    FastMath.sqrt(2    *    FastMath.sin(alpha));    	compilable	  [FE]  AssertionError  	45	6	replace
87	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(1  *  FastMath.sin(alpha));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(1  *  FastMath.sin(alpha));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r=  FastMath.sqrt(1  *  FastMath.sin(alpha));	  final    double    r=    FastMath.sqrt(2    *    FastMath.sin(alpha));    	compilable	  [FE]  AssertionError  	45	6	replace
88	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(-3  *  FastMath.log(x));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r=  FastMath.sqrt(-3  *  FastMath.log(x));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.log(x));    final    double    r=    FastMath.sqrt(-3    *    FastMath.log(x));    	compilable	  [FE]  AssertionError  	34	6	replace
89	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(-3  *  FastMath.log(x));  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(-3  *  FastMath.log(x));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r=  FastMath.sqrt(-3  *  FastMath.log(x));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.log(x));    final    double    r=    FastMath.sqrt(-3    *    FastMath.log(x));    	compilable	  [FE]  AssertionError  	34	6	replace
90	[BUG]  [BUGGY]  double  y  =  random.nextDouble();  [CE]  variable  y  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  y  =  random.nextDouble();  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  y  =  random.nextDouble();	  double    y    =    nextDouble();    	non-compiled	[CE]  variable  y  is  already  defined  in  method  nextGaussian()	10	None	replace
91	[BUG]  [BUGGY]  double  r  =  FastMath.sin(alpha,  x);  [CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  r  =  FastMath.sin(alpha,  x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  r  =  FastMath.sin(alpha,  x);	  double    r    =    FastMath.sin(x,    alpha);    	non-compiled	[CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;	18	None	replace
92	[BUG]  [BUGGY]  double  random  =  y  *  FastMath.sin(nextGaussian);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  random  =  y  *  FastMath.sin(nextGaussian);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  random  =  y  *  FastMath.sin(nextGaussian);	  double    random    =    x    *    FastMath.sin(nextGaussian);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	20	None	replace
93	[BUG]  [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(x,  y  +  1);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(x,  y  +  1);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  random  =  nextGaussian  *  FastMath.sin(x,  y  +  1);	  double    random    =    nextGaussian    *    FastMath.sin(x,    y);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	29	None	replace
94	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sin(-2  *  FastMath.sin(alpha));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	final  double  r=  FastMath.sin(-2  *  FastMath.sin(alpha));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.sin(alpha));    	compilable	  [FE]  AssertionError  	13	6	replace
95	[BUG]  [BUGGY]  final  double  r=  FastMath.sin(-2  *  FastMath.sin(alpha));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sin(-2  *  FastMath.sin(alpha));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r=  FastMath.sin(-2  *  FastMath.sin(alpha));	  final    double    r=    FastMath.sqrt(-2    *    FastMath.sin(alpha));    	compilable	  [FE]  AssertionError  	13	6	replace
96	[BUG]  [BUGGY]  double  y  =  random.nextGaussian();  [CE]  variable  y  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  y  =  random.nextGaussian();  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  y  =  random.nextGaussian();	  double    y    =    nextDouble();    	non-compiled	[CE]  variable  y  is  already  defined  in  method  nextGaussian()	10	None	replace
97	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(alpha));  final  double  r=  FastMath.cos(-2  *  FastMath.sin(alpha));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(-2  *  FastMath.sin(alpha));  final  double  r=  FastMath.cos(-2  *  FastMath.sin(alpha));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(-2    *    FastMath.sin(alpha));    final  double  r=  FastMath.cos(-2  *  FastMath.sin(alpha));	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	12	None	add
98	[BUG]  [BUGGY]  final  double  r  =  FastMath.sin(alpha,  x);  [CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r  =  FastMath.sin(alpha,  x);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final  double  r  =  FastMath.sin(alpha,  x);	  final    double    r    =    FastMath.sin(x,    alpha);    	non-compiled	[CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;	19	None	replace
99	[BUG]  [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.sin(alpha));  final  double  r=  FastMath.cos(2  *  FastMath.sin(alpha));  [CE]  variable  r  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  final  double  r=  FastMath.sqrt(2  *  FastMath.sin(alpha));  final  double  r=  FastMath.cos(2  *  FastMath.sin(alpha));  [BUGGY]      random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	final    double    r=    FastMath.sqrt(2    *    FastMath.sin(alpha));    final  double  r=  FastMath.cos(2  *  FastMath.sin(alpha));	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  nextGaussian()	44	None	add
100	[BUG]  [BUGGY]  double  random  =  y  *  FastMath.cos(nextGaussian);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;      [BUGGY]  double  random  =  y  *  FastMath.cos(nextGaussian);  [BUGGY]      final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	double  random  =  y  *  FastMath.cos(nextGaussian);	  double    random    =    x    *    FastMath.cos(nextGaussian);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	11	None	replace
