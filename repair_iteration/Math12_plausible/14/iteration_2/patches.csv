bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  random  *  FastMath.PI;  double  x  =  random  *  FastMath.PI;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  FastMath.PI;  double  x  =  random  *  FastMath.PI;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    FastMath.PI;    double  x  =  random  *  FastMath.PI;	  	non-compiled	[CE]  unreachable  statement	25	None	add
2	[BUG]  [BUGGY]  return  random  *  FastMath.PI;  if(nextGaussian  ==  0)  {  return  random  *  FastMath.PI;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  FastMath.PI;  if(nextGaussian  ==  0)  {  return  random  *  FastMath.PI;  }  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    FastMath.PI;    if(nextGaussian  ==  0)  {  return  random  *  FastMath.PI;  }	  	non-compiled	[CE]  unreachable  statement	25	None	add
3	[BUG]  [BUGGY]  return  random  *  FastMath.PI;  if(nextGaussian  ==  0.0)  {  return  random  *  FastMath.PI;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  FastMath.PI;  if(nextGaussian  ==  0.0)  {  return  random  *  FastMath.PI;  }  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    FastMath.PI;    if(nextGaussian  ==  0.0)  {  return  random  *  FastMath.PI;  }	  	non-compiled	[CE]  unreachable  statement	25	None	add
4	[BUG]  [BUGGY]  random  =  nextGaussian  *  FastMath.sin(random);  [CE]  variable  random  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  random  =  nextGaussian  *  FastMath.sin(random);  [BUGGY]      return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	random  =  nextGaussian  *  FastMath.sin(random);	  random    =    random    *    FastMath.sin(nextGaussian);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	17	None	replace
5	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(nextGaussian);  [CE]  cannot  find  symbol  r  [FE]                  AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  random  =  r  *  FastMath.sin(nextGaussian);  [BUGGY]      return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	random  =  r  *  FastMath.sin(nextGaussian);	  random    =    random    *    FastMath.sin(nextGaussian);    	non-compiled	[CE]  cannot  find  symbol  r	17	None	replace
6	[BUG]  [BUGGY]  final  double  random  =  Math.PI  /  random;  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  final  double  random  =  Math.PI  /  random;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	final  double  random  =  Math.PI  /  random;	  return    random    *    Math.PI    /    random;    final    double    random    =    Math.PI    /    random;    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	33	None	replace
7	[BUG]  [BUGGY]  final  double  random  =  Math.PI  /  alpha;  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  final  double  random  =  Math.PI  /  alpha;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	final  double  random  =  Math.PI  /  alpha;	  return    random    *    Math.PI    /    random;    final    double    random    =    Math.PI    /    random;    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	33	None	replace
8	[BUG]  [BUGGY]  double  random  =  Math.cos(x,  y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  double  random  =  Math.cos(x,  y);  [BUGGY]      return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  Math.cos(x,  y);	  double    random    =    Math.cos(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	8	None	replace
9	[BUG]  [BUGGY]  return  random  *  Math.PI  /  2;  double  r  =  FastMath.sqrt(-2  *  FastMath.log(x));  random  =  r  *  FastMath.cos(alpha);  [CE]  cannot  find  symbol  x  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  2;  double  r  =  FastMath.sqrt(-2  *  FastMath.log(x));  random  =  r  *  FastMath.cos(alpha);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    2;    double  r  =  FastMath.sqrt(-2  *  FastMath.log(x));  random  =  r  *  FastMath.cos(alpha);	  	non-compiled	[CE]  cannot  find  symbol  x	36	None	add
10	[BUG]  [BUGGY]  return  random  *  Math.PI  /  2;  double  r  =  FastMath.sqrt(2  *  FastMath.log(x));  random  =  r  *  FastMath.cos(alpha);  [CE]  cannot  find  symbol  x  [FE]      AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  2;  double  r  =  FastMath.sqrt(2  *  FastMath.log(x));  random  =  r  *  FastMath.cos(alpha);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    2;    double  r  =  FastMath.sqrt(2  *  FastMath.log(x));  random  =  r  *  FastMath.cos(alpha);	  	non-compiled	[CE]  cannot  find  symbol  x	36	None	add
11	[BUG]  [BUGGY]  return  random  *  Math.PI  /  2;  double  r  =  FastMath.sqrt(-2  *  FastMath.log(x));  [CE]  cannot  find  symbol  x  [FE]        AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  2;  double  r  =  FastMath.sqrt(-2  *  FastMath.log(x));  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    2;    double  r  =  FastMath.sqrt(-2  *  FastMath.log(x));	  	non-compiled	[CE]  cannot  find  symbol  x	36	None	add
12	[BUG]  [BUGGY]  double  random  =  Math.pow(Math.log(x));  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  double  random  =  Math.pow(Math.log(x));  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  Math.pow(Math.log(x));	  return    random    *    Math.PI    /    random;    double    random    =    Math.pow(Math.log(x));    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	40	None	replace
13	[BUG]  [BUGGY]  return  x  *  Math.PI  /  random;  [CE]  cannot  find  symbol  x  [FE]            AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  x  *  Math.PI  /  random;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  x  *  Math.PI  /  random;	  return    random    *    Math.PI    /    random;    double    random    =    Math.pow(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  x	40	None	replace
14	[BUG]  [BUGGY]  return  random  *  Math.pow(10,  nextGaussian);  double  nextGaussian  =  Math.pow(10,  nextGaussian);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.pow(10,  nextGaussian);  double  nextGaussian  =  Math.pow(10,  nextGaussian);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.pow(10,    nextGaussian);    double  nextGaussian  =  Math.pow(10,  nextGaussian);	  	non-compiled	[CE]  unreachable  statement	14	None	add
15	[BUG]  [BUGGY]  return  random  *  Math.pow(10,  nextGaussian);  x  =  Math.pow(10,  nextGaussian);  [CE]  cannot  find  symbol  x  [FE]      AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.pow(10,  nextGaussian);  x  =  Math.pow(10,  nextGaussian);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.pow(10,    nextGaussian);    x  =  Math.pow(10,  nextGaussian);	  	non-compiled	[CE]  cannot  find  symbol  x	14	None	add
16	[BUG]  [BUGGY]  return  random  *  Math.pow(10,  nextGaussian);  double  nextGaussian  =  Math.pow(10,  random);  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.pow(10,  nextGaussian);  double  nextGaussian  =  Math.pow(10,  random);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.pow(10,    nextGaussian);    double  nextGaussian  =  Math.pow(10,  random);	  	non-compiled	[CE]  unreachable  statement	14	None	add
17	[BUG]  [BUGGY]  double  random  =  Math.cos(nextGaussian,  x);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]                  AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  double  random  =  Math.cos(nextGaussian,  x);  [BUGGY]      return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  Math.cos(nextGaussian,  x);	  double    random    =    Math.cos(x,    nextGaussian);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	9	None	replace
18	[BUG]  [BUGGY]  double  random  =  random  *  Math.PI  /  x;  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  double  random  =  random  *  Math.PI  /  x;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  random  *  Math.PI  /  x;	  return    random    *    Math.PI    /    random;    double    random    =    random    *    Math.PI    /    random;    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	32	None	replace
19	[BUG]  [BUGGY]  double  random  =  random  *  Math.PI  /  r;  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  double  random  =  random  *  Math.PI  /  r;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  random  *  Math.PI  /  r;	  return    random    *    Math.PI    /    random;    double    random    =    random    *    Math.PI    /    random;    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	32	None	replace
20	[BUG]  [BUGGY]  double  random  =  nextGaussian  *  FastMath.log(x,  y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  double  random  =  nextGaussian  *  FastMath.log(x,  y);  [BUGGY]      return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  nextGaussian  *  FastMath.log(x,  y);	  double    random    =    nextGaussian    *    FastMath.log(y);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	10	None	replace
21	[BUG]  [BUGGY]  if(nextGaussian  ==  Math.PI)  {  return  random  *  Math.PI  /  random;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  if(nextGaussian  ==  Math.PI)  {  return  random  *  Math.PI  /  random;  }  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	if(nextGaussian  ==  Math.PI)  {  return  random  *  Math.PI  /  random;  }	  return    random    *    Math.PI    /    random;    if(nextGaussian    ==    Math.PI)    {    return    random    *    Math.PI    /    random;    }    	non-compiled	[CE]  missing  return  statement	22	None	replace
22	[BUG]  [BUGGY]  double  random  =  Math.PI  /  random;  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  double  random  =  Math.PI  /  random;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  Math.PI  /  random;	  return    random    *    Math.PI    /    random;    double    random    =    Math.PI    /    random;    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	21	None	replace
23	[BUG]  [BUGGY]  double  random  =  Math.PI  /  alpha;  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  double  random  =  Math.PI  /  alpha;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  Math.PI  /  alpha;	  return    random    *    Math.PI    /    random;    double    random    =    Math.PI    /    random;    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	21	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  FastMath.PI  /  FastMath.PI;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	add	return  random  *  FastMath.PI  /  FastMath.PI;	  return    random    *    FastMath.PI;    	compilable	  [FE]  AssertionError  	26	3	replace
25	[BUG]  [BUGGY]  return  random  *  FastMath.PI  /  FastMath.PI;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  FastMath.PI  /  FastMath.PI;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  random  *  FastMath.PI  /  FastMath.PI;	  return    random    *    FastMath.PI;    	compilable	  [FE]  AssertionError  	26	3	replace
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  /  FastMath.PI;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	add	return  random  /  FastMath.PI;	  return    random    *    FastMath.PI;    	compilable	  [FE]  AssertionError  	26	6	replace
27	[BUG]  [BUGGY]  return  random  /  FastMath.PI;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  /  FastMath.PI;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  random  /  FastMath.PI;	  return    random    *    FastMath.PI;    	compilable	  [FE]  AssertionError  	26	6	replace
28	[BUG]  [BUGGY]  return  random  *  Math.pow(10,  x);  [CE]  cannot  find  symbol  x  [FE]              AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.pow(10,  x);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  random  *  Math.pow(10,  x);	  return    random    *    Math.pow(10,    alpha);    	non-compiled	[CE]  cannot  find  symbol  x	16	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  /  nextGaussian;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	add	return  random  /  nextGaussian;	  return    random    *    nextGaussian;    	compilable	  [FE]  AssertionError  	5	5	replace
30	[BUG]  [BUGGY]  return  random  /  nextGaussian;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  /  nextGaussian;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  random  /  nextGaussian;	  return    random    *    nextGaussian;    	compilable	  [FE]  AssertionError  	5	5	replace
31	[BUG]  [BUGGY]  return  Random.doubleToLongBits(random);  [CE]  cannot  find  symbol  Random  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  Random.doubleToLongBits(random);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  Random.doubleToLongBits(random);	  return    nextGaussian;    	non-compiled	[CE]  cannot  find  symbol  Random	13	None	replace
32	[BUG]  [BUGGY]  return  random  *  nextGaussian;  double  nextGaussian  =  random  *  FastMath.sin(nextGaussian);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  nextGaussian;  double  nextGaussian  =  random  *  FastMath.sin(nextGaussian);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    nextGaussian;    double  nextGaussian  =  random  *  FastMath.sin(nextGaussian);	  	non-compiled	[CE]  unreachable  statement	4	None	add
33	[BUG]  [BUGGY]  return  random  *  nextGaussian;  double  nextGaussian  =  random  *  FastMath.sin(x);  [CE]  cannot  find  symbol  x  [FE]      AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  nextGaussian;  double  nextGaussian  =  random  *  FastMath.sin(x);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    nextGaussian;    double  nextGaussian  =  random  *  FastMath.sin(x);	  	non-compiled	[CE]  cannot  find  symbol  x	4	None	add
34	[BUG]  [BUGGY]  return  random  *  nextGaussian;  double  nextGaussian  =  random  *  FastMath.cos(x);  [CE]  cannot  find  symbol  x  [FE]        AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  nextGaussian;  double  nextGaussian  =  random  *  FastMath.cos(x);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    nextGaussian;    double  nextGaussian  =  random  *  FastMath.cos(x);	  	non-compiled	[CE]  cannot  find  symbol  x	4	None	add
35	[BUG]  [BUGGY]  double  random  =  nextGaussian  *  FastMath.cos(x);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  double  random  =  nextGaussian  *  FastMath.cos(x);  [BUGGY]      return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  nextGaussian  *  FastMath.cos(x);	  double    random    =    x    *    FastMath.cos(r);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	19	None	replace
36	[BUG]  [BUGGY]  double  random  =  Math.pow(Math.PI  /  alpha);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  double  random  =  Math.pow(Math.PI  /  alpha);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  Math.pow(Math.PI  /  alpha);	  return    random    *    Math.PI    /    random;    double    random    =    Math.pow(Math.PI    /    random);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	39	None	replace
37	[BUG]  [BUGGY]  double  random  =  Math.pow(Math.PI  /  x);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  double  random  =  Math.pow(Math.PI  /  x);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  Math.pow(Math.PI  /  x);	  return    random    *    Math.PI    /    random;    double    random    =    Math.pow(Math.PI    /    random);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	39	None	replace
38	[BUG]  [BUGGY]  double  random  =  r  *  FastMath.log(nextGaussian);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  double  random  =  r  *  FastMath.log(nextGaussian);  [BUGGY]      return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  r  *  FastMath.log(nextGaussian);	  double    random    =    x    *    FastMath.log(nextGaussian);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	11	None	replace
39	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.sin(nextGaussian,  y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  double  random  =  x  *  FastMath.sin(nextGaussian,  y);  [BUGGY]      return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  x  *  FastMath.sin(nextGaussian,  y);	  double    random    =    nextGaussian    *    FastMath.sin(x,    y);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	20	None	replace
40	[BUG]  [BUGGY]  double  random  =  y  *  FastMath.sin(x,  nextGaussian);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  double  random  =  y  *  FastMath.sin(x,  nextGaussian);  [BUGGY]      return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  y  *  FastMath.sin(x,  nextGaussian);	  double    random    =    nextGaussian    *    FastMath.sin(x,    y);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	20	None	replace
41	[BUG]  [BUGGY]  return  random.NaN;  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random.NaN;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  random.NaN;	  return    Random.NaN;    	non-compiled	[CE]  double  cannot  be  dereferenced	41	None	replace
42	[BUG]  [BUGGY]  return  random  *  Math.PI  /  nextGaussian;  double  r  =  FastMath.sqrt(-2  *  FastMath.log(x));  random  =  r  *  FastMath.cos(alpha);  [CE]  cannot  find  symbol  x  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  nextGaussian;  double  r  =  FastMath.sqrt(-2  *  FastMath.log(x));  random  =  r  *  FastMath.cos(alpha);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    nextGaussian;    double  r  =  FastMath.sqrt(-2  *  FastMath.log(x));  random  =  r  *  FastMath.cos(alpha);	  	non-compiled	[CE]  cannot  find  symbol  x	28	None	add
43	[BUG]  [BUGGY]  return  random  *  Math.PI  /  nextGaussian;  double  r  =  FastMath.sqrt(-2  *  FastMath.log(x));  random  =  r  *  FastMath.cos(nextGaussian);  [CE]  cannot  find  symbol  x  [FE]      AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  nextGaussian;  double  r  =  FastMath.sqrt(-2  *  FastMath.log(x));  random  =  r  *  FastMath.cos(nextGaussian);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    nextGaussian;    double  r  =  FastMath.sqrt(-2  *  FastMath.log(x));  random  =  r  *  FastMath.cos(nextGaussian);	  	non-compiled	[CE]  cannot  find  symbol  x	28	None	add
44	[BUG]  [BUGGY]  return  random  *  Math.PI  /  nextGaussian;  double  r  =  FastMath.sqrt(2  *  FastMath.log(x));  random  =  r  *  FastMath.cos(alpha);  [CE]  cannot  find  symbol  x  [FE]        AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  nextGaussian;  double  r  =  FastMath.sqrt(2  *  FastMath.log(x));  random  =  r  *  FastMath.cos(alpha);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    nextGaussian;    double  r  =  FastMath.sqrt(2  *  FastMath.log(x));  random  =  r  *  FastMath.cos(alpha);	  	non-compiled	[CE]  cannot  find  symbol  x	28	None	add
45	[BUG]  [BUGGY]  return  nextGaussian;  nextGaussian  =  Double.NaN;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  nextGaussian;  nextGaussian  =  Double.NaN;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    nextGaussian;    nextGaussian  =  Double.NaN;	  	non-compiled	[CE]  unreachable  statement	12	None	add
46	[BUG]  [BUGGY]  return  nextGaussian;  double  nextGaussian  =  random  *  FastMath.cos(x);  [CE]  cannot  find  symbol  x  [FE]      AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  nextGaussian;  double  nextGaussian  =  random  *  FastMath.cos(x);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    nextGaussian;    double  nextGaussian  =  random  *  FastMath.cos(x);	  	non-compiled	[CE]  cannot  find  symbol  x	12	None	add
47	[BUG]  [BUGGY]  return  nextGaussian;  double  nextGaussian  =  random  *  FastMath.sin(x);  [CE]  cannot  find  symbol  x  [FE]        AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  nextGaussian;  double  nextGaussian  =  random  *  FastMath.sin(x);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    nextGaussian;    double  nextGaussian  =  random  *  FastMath.sin(x);	  	non-compiled	[CE]  cannot  find  symbol  x	12	None	add
48	[BUG]  [BUGGY]  double  random  =  r  *  FastMath.log(y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  double  random  =  r  *  FastMath.log(y);  [BUGGY]      return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  r  *  FastMath.log(y);	  double    random    =    r    *    FastMath.log(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	7	None	replace
49	[BUG]  [BUGGY]  if(nextGaussian!=  Math.PI)  {  return  random  *  Math.PI  /  random;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  if(nextGaussian!=  Math.PI)  {  return  random  *  Math.PI  /  random;  }  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	if(nextGaussian!=  Math.PI)  {  return  random  *  Math.PI  /  random;  }	  return    random    *    Math.PI    /    random;    if(nextGaussian!=    Math.PI)    {    return    random    *    Math.PI    /    random;    }    	non-compiled	[CE]  missing  return  statement	23	None	replace
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  2.0;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	add	return  random  *  Math.PI  /  2.0;	  return    random    *    Math.PI    /    2;    	compilable	  [FE]  AssertionError  	37	6	replace
51	[BUG]  [BUGGY]  return  random  *  Math.PI  /  2.0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  2.0;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  random  *  Math.PI  /  2.0;	  return    random    *    Math.PI    /    2;    	compilable	  [FE]  AssertionError  	37	6	replace
52	[BUG]  [BUGGY]  double  random  =  r  *  FastMath.sin(nextGaussian);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  double  random  =  r  *  FastMath.sin(nextGaussian);  [BUGGY]      return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  r  *  FastMath.sin(nextGaussian);	  double    random    =    nextGaussian    *    FastMath.sin(r);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	3	None	replace
53	[BUG]  [BUGGY]  return  RandomMath.sin(random);  [CE]  cannot  find  symbol  RandomMath  [FE]            AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  RandomMath.sin(random);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  RandomMath.sin(random);	  return    alpha;    	non-compiled	[CE]  cannot  find  symbol  RandomMath	30	None	replace
54	[BUG]  [BUGGY]  double  random  =  y  *  FastMath.log(nextGaussian);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  double  random  =  y  *  FastMath.log(nextGaussian);  [BUGGY]      return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  y  *  FastMath.log(nextGaussian);	  double    random    =    nextGaussian    *    FastMath.log(y);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	10	None	replace
55	[BUG]  [BUGGY]  return  random  *  nextGaussian;  double  nextGaussian  =  random  *  nextGaussian;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  nextGaussian;  double  nextGaussian  =  random  *  nextGaussian;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    nextGaussian;    double  nextGaussian  =  random  *  nextGaussian;	  	non-compiled	[CE]  unreachable  statement	4	None	add
56	[BUG]  [BUGGY]  return  random  *  nextGaussian;  if(nextGaussian!=  0.0)  {  if(x  >  random)  {  return  random  *  nextGaussian;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  nextGaussian;  if(nextGaussian!=  0.0)  {  if(x  >  random)  {  return  random  *  nextGaussian;  }  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    nextGaussian;    if(nextGaussian!=  0.0)  {  if(x  >  random)  {  return  random  *  nextGaussian;  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
57	[BUG]  [BUGGY]  return  random  *  nextGaussian;  if(nextGaussian  ==  0.0)  {  if(x  >  random)  {  return  random  *  nextGaussian;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  nextGaussian;  if(nextGaussian  ==  0.0)  {  if(x  >  random)  {  return  random  *  nextGaussian;  }  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    nextGaussian;    if(nextGaussian  ==  0.0)  {  if(x  >  random)  {  return  random  *  nextGaussian;  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
58	[BUG]  [BUGGY]  return  Random.NaN  -  random;  [CE]  cannot  find  symbol  Random  [FE]            AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  Random.NaN  -  random;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  Random.NaN  -  random;	  return    Random.NaN;    	non-compiled	[CE]  cannot  find  symbol  Random	41	None	replace
59	[BUG]  [BUGGY]  return  nextGaussian;  double  nextGaussian  =  random  *  FastMath.log(x);  [CE]  cannot  find  symbol  x  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  nextGaussian;  double  nextGaussian  =  random  *  FastMath.log(x);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    nextGaussian;    double  nextGaussian  =  random  *  FastMath.log(x);	  	non-compiled	[CE]  cannot  find  symbol  x	12	None	add
60	[BUG]  [BUGGY]  return  random  *  Math.PI  /  nextGaussian;  double  nextGaussian  =  random  *  Math.PI  /  nextGaussian;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  nextGaussian;  double  nextGaussian  =  random  *  Math.PI  /  nextGaussian;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    nextGaussian;    double  nextGaussian  =  random  *  Math.PI  /  nextGaussian;	  	non-compiled	[CE]  unreachable  statement	28	None	add
61	[BUG]  [BUGGY]  return  random  *  Math.PI  /  nextGaussian;  double  nextGaussian  =  Math.PI  /  random;  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  nextGaussian;  double  nextGaussian  =  Math.PI  /  random;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    nextGaussian;    double  nextGaussian  =  Math.PI  /  random;	  	non-compiled	[CE]  unreachable  statement	28	None	add
62	[BUG]  [BUGGY]  return  random  *  Math.PI  /  nextGaussian;  if(nextGaussian  >=  0.0)  {  return  random  *  Math.PI  /  nextGaussian;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  nextGaussian;  if(nextGaussian  >=  0.0)  {  return  random  *  Math.PI  /  nextGaussian;  }  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    nextGaussian;    if(nextGaussian  >=  0.0)  {  return  random  *  Math.PI  /  nextGaussian;  }	  	non-compiled	[CE]  unreachable  statement	28	None	add
63	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.log(r);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  double  random  =  x  *  FastMath.log(r);  [BUGGY]      return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  x  *  FastMath.log(r);	  double    random    =    r    *    FastMath.log(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	7	None	replace
64	[BUG]  [BUGGY]  return  random  *  Math.PI  /  2;  double  p  =  random  *  Math.PI  /  2;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  2;  double  p  =  random  *  Math.PI  /  2;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    2;    double  p  =  random  *  Math.PI  /  2;	  	non-compiled	[CE]  unreachable  statement	36	None	add
65	[BUG]  [BUGGY]  return  random  *  Math.PI  /  2;  if(nextGaussian  >=  Math.PI)  {  return  random  *  Math.PI  /  2;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  2;  if(nextGaussian  >=  Math.PI)  {  return  random  *  Math.PI  /  2;  }  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    2;    if(nextGaussian  >=  Math.PI)  {  return  random  *  Math.PI  /  2;  }	  	non-compiled	[CE]  unreachable  statement	36	None	add
66	[BUG]  [BUGGY]  return  random  *  Math.PI  /  2;  if(nextGaussian  >=  Math.PI)  {  if(x  >  random)  {  return  random  *  Math.PI  /  2;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  2;  if(nextGaussian  >=  Math.PI)  {  if(x  >  random)  {  return  random  *  Math.PI  /  2;  }  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    2;    if(nextGaussian  >=  Math.PI)  {  if(x  >  random)  {  return  random  *  Math.PI  /  2;  }	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
67	[BUG]  [BUGGY]  return  random  *  Math.pow(10,  nextGaussian);  double  nextGaussian  =  random  *  Math.pow(10,  nextGaussian);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.pow(10,  nextGaussian);  double  nextGaussian  =  random  *  Math.pow(10,  nextGaussian);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.pow(10,    nextGaussian);    double  nextGaussian  =  random  *  Math.pow(10,  nextGaussian);	  	non-compiled	[CE]  unreachable  statement	14	None	add
68	[BUG]  [BUGGY]  double  random  =  random  *  Math.PI  /  random;  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  double  random  =  random  *  Math.PI  /  random;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  random  *  Math.PI  /  random;	  return    random    *    Math.PI    /    random;    double    random    =    random    *    Math.PI    /    random;    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	32	None	replace
69	[BUG]  [BUGGY]  random  =  nextGaussian  *  FastMath.sin(nextGaussian);  [CE]  variable  random  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  random  =  nextGaussian  *  FastMath.sin(nextGaussian);  [BUGGY]      return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	random  =  nextGaussian  *  FastMath.sin(nextGaussian);	  random    =    random    *    FastMath.sin(nextGaussian);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	17	None	replace
70	[BUG]  [BUGGY]  return  random  *  FastMath.PI;  double  p  =  random  *  FastMath.PI;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  FastMath.PI;  double  p  =  random  *  FastMath.PI;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    FastMath.PI;    double  p  =  random  *  FastMath.PI;	  	non-compiled	[CE]  unreachable  statement	25	None	add
71	[BUG]  [BUGGY]  return  random  *  FastMath.PI;  double  PI  =  random  *  FastMath.PI;  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  FastMath.PI;  double  PI  =  random  *  FastMath.PI;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    FastMath.PI;    double  PI  =  random  *  FastMath.PI;	  	non-compiled	[CE]  unreachable  statement	25	None	add
72	[BUG]  [BUGGY]  return  random  *  FastMath.PI;  double  p  =  random  *  FastMath.PI  +  nextGaussian;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  FastMath.PI;  double  p  =  random  *  FastMath.PI  +  nextGaussian;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    FastMath.PI;    double  p  =  random  *  FastMath.PI  +  nextGaussian;	  	non-compiled	[CE]  unreachable  statement	25	None	add
73	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  2  +  1;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	add	return  random  *  Math.PI  /  2  +  1;	  return    random    *    Math.PI    /    2;    	compilable	  [FE]  AssertionError  	37	6	replace
74	[BUG]  [BUGGY]  return  random  *  Math.PI  /  2  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  2  +  1;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  random  *  Math.PI  /  2  +  1;	  return    random    *    Math.PI    /    2;    	compilable	  [FE]  AssertionError  	37	6	replace
75	[BUG]  [BUGGY]  return  random  *  Math.PI  /  y;  [CE]  cannot  find  symbol  y  [FE]          AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  y;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  random  *  Math.PI  /  y;	  return    random    *    Math.PI    /    random;    double    random    =    Math.pow(Math.log(x));    	non-compiled	[CE]  cannot  find  symbol  y	40	None	replace
76	[BUG]  [BUGGY]  return  random  *  FastMath.PI;  double  x  =  FastMath.sqrt(-2  *  FastMath.log(x));  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  FastMath.PI;  double  x  =  FastMath.sqrt(-2  *  FastMath.log(x));  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    FastMath.PI;    double  x  =  FastMath.sqrt(-2  *  FastMath.log(x));	  	non-compiled	[CE]  unreachable  statement	25	None	add
77	[BUG]  [BUGGY]  return  random  *  FastMath.PI;  double  x  =  FastMath.sqrt(2  *  FastMath.log(x));  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  FastMath.PI;  double  x  =  FastMath.sqrt(2  *  FastMath.log(x));  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    FastMath.PI;    double  x  =  FastMath.sqrt(2  *  FastMath.log(x));	  	non-compiled	[CE]  unreachable  statement	25	None	add
78	[BUG]  [BUGGY]  return  random  *  FastMath.PI;  double  x  =  FastMath.sqrt(-2  *  FastMath.log(x));  random  =  x  *  FastMath.cos(x);  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  FastMath.PI;  double  x  =  FastMath.sqrt(-2  *  FastMath.log(x));  random  =  x  *  FastMath.cos(x);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    FastMath.PI;    double  x  =  FastMath.sqrt(-2  *  FastMath.log(x));  random  =  x  *  FastMath.cos(x);	  	non-compiled	[CE]  unreachable  statement	25	None	add
79	[BUG]  [BUGGY]  return  random  *  Math.PI  /  2;  double  y  =  FastMath.sqrt(-2  *  FastMath.log(y));  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  2;  double  y  =  FastMath.sqrt(-2  *  FastMath.log(y));  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    2;    double  y  =  FastMath.sqrt(-2  *  FastMath.log(y));	  	non-compiled	[CE]  unreachable  statement	36	None	add
80	[BUG]  [BUGGY]  return  random  *  Math.PI  /  2;  double  y  =  FastMath.sqrt(-2  *  FastMath.log(y));  return  random  *  Math.PI  /  2;  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  2;  double  y  =  FastMath.sqrt(-2  *  FastMath.log(y));  return  random  *  Math.PI  /  2;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    2;    double  y  =  FastMath.sqrt(-2  *  FastMath.log(y));  return  random  *  Math.PI  /  2;	  	non-compiled	[CE]  unreachable  statement	36	None	add
81	[BUG]  [BUGGY]  return  random  *  Math.PI  /  2;  double  y  =  FastMath.sqrt(2  *  FastMath.log(y));  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  2;  double  y  =  FastMath.sqrt(2  *  FastMath.log(y));  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    2;    double  y  =  FastMath.sqrt(2  *  FastMath.log(y));	  	non-compiled	[CE]  unreachable  statement	36	None	add
82	[BUG]  [BUGGY]  return  random  *  Math.pow(10,  y);  [CE]  cannot  find  symbol  y  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.pow(10,  y);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  random  *  Math.pow(10,  y);	  return    random    *    Math.pow(10,    nextGaussian);    	non-compiled	[CE]  cannot  find  symbol  y	15	None	replace
83	[BUG]  [BUGGY]  return  random  *  nextGaussian;  if(nextGaussian!=  null)  {  return  random  *  nextGaussian;  }  [CE]  incomparable  types:  double  and  <null>  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  nextGaussian;  if(nextGaussian!=  null)  {  return  random  *  nextGaussian;  }  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    nextGaussian;    if(nextGaussian!=  null)  {  return  random  *  nextGaussian;  }	  	non-compiled	[CE]  incomparable  types:  double  and  <null>	4	None	add
84	[BUG]  [BUGGY]  return  random  *  nextGaussian;  if(nextGaussian  <  =  0.0)  {  return  random  *  nextGaussian;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  nextGaussian;  if(nextGaussian  <  =  0.0)  {  return  random  *  nextGaussian;  }  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    nextGaussian;    if(nextGaussian  <  =  0.0)  {  return  random  *  nextGaussian;  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
85	[BUG]  [BUGGY]  return  random  *  Math.PI  /  alpha;  double  random  =  Math.PI  /  random;  [CE]  cannot  find  symbol  alpha  [FE]        AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  alpha;  double  random  =  Math.PI  /  random;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  random  *  Math.PI  /  alpha;  double  random  =  Math.PI  /  random;	  return    random    *    Math.PI    /    random;    double    random    =    Math.PI    /    random;    	non-compiled	[CE]  cannot  find  symbol  alpha	21	None	replace
86	[BUG]  [BUGGY]  double  random  =  Math.pow(Math.log(y));  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  double  random  =  Math.pow(Math.log(y));  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  Math.pow(Math.log(y));	  return    random    *    Math.PI    /    random;    double    random    =    Math.pow(Math.log(x));    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	40	None	replace
87	[BUG]  [BUGGY]  double  random  =  Math.sin(x);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]                AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  double  random  =  Math.sin(x);  [BUGGY]      return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  Math.sin(x);	  double    random    =    Math.cos(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	8	None	replace
88	[BUG]  [BUGGY]  return  random  *  Math.PI  /  nextGaussian;  if(nextGaussian  <  =  Math.PI)  {  return  random  *  Math.PI  /  nextGaussian;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  nextGaussian;  if(nextGaussian  <  =  Math.PI)  {  return  random  *  Math.PI  /  nextGaussian;  }  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    nextGaussian;    if(nextGaussian  <  =  Math.PI)  {  return  random  *  Math.PI  /  nextGaussian;  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
89	[BUG]  [BUGGY]  return  random  *  Math.PI  /  nextGaussian;  if(nextGaussian!=  Math.PI)  {  return  random  *  Math.PI  /  nextGaussian;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  nextGaussian;  if(nextGaussian!=  Math.PI)  {  return  random  *  Math.PI  /  nextGaussian;  }  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    nextGaussian;    if(nextGaussian!=  Math.PI)  {  return  random  *  Math.PI  /  nextGaussian;  }	  	non-compiled	[CE]  unreachable  statement	28	None	add
90	[BUG]  [BUGGY]  return  random  *  Math.PI  /  nextGaussian;  if(nextGaussian!=  Math.PI)  {  return  random  *  Math.PI  /  nextGaussian;  }  else  {  return  Math.PI  /  nextGaussian;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.PI  /  nextGaussian;  if(nextGaussian!=  Math.PI)  {  return  random  *  Math.PI  /  nextGaussian;  }  else  {  return  Math.PI  /  nextGaussian;  }  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    nextGaussian;    if(nextGaussian!=  Math.PI)  {  return  random  *  Math.PI  /  nextGaussian;  }  else  {  return  Math.PI  /  nextGaussian;  }	  	non-compiled	[CE]  unreachable  statement	28	None	add
91	[BUG]  [BUGGY]  return  nextGaussian;  double  nextGaussian  =  random  *  FastMath.cos(nextGaussian);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  nextGaussian;  double  nextGaussian  =  random  *  FastMath.cos(nextGaussian);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    nextGaussian;    double  nextGaussian  =  random  *  FastMath.cos(nextGaussian);	  	non-compiled	[CE]  unreachable  statement	12	None	add
92	[BUG]  [BUGGY]  return  nextGaussian;  if(nextGaussian!=  null)  {  return  random;  }  [CE]  incomparable  types:  double  and  <null>  [FE]      AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  nextGaussian;  if(nextGaussian!=  null)  {  return  random;  }  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    nextGaussian;    if(nextGaussian!=  null)  {  return  random;  }	  	non-compiled	[CE]  incomparable  types:  double  and  <null>	12	None	add
93	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(nextGaussian);  [CE]  cannot  find  symbol  x  [FE]                AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  random  =  x  *  FastMath.sin(nextGaussian);  [BUGGY]      return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	random  =  x  *  FastMath.sin(nextGaussian);	  random    =    random    *    FastMath.sin(nextGaussian);    	non-compiled	[CE]  cannot  find  symbol  x	17	None	replace
94	[BUG]  [BUGGY]  double  random  =  random  *  Math.PI  /  nextGaussian;  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  double  random  =  random  *  Math.PI  /  nextGaussian;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  random  *  Math.PI  /  nextGaussian;	  return    random    *    Math.PI    /    random;    double    random    =    random    *    Math.PI    /    random;    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	32	None	replace
95	[BUG]  [BUGGY]  return  random  *  Math.pow(10,  nextGaussian);  return  random  *  Math.pow(10,  nextGaussian);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  Math.pow(10,  nextGaussian);  return  random  *  Math.pow(10,  nextGaussian);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.pow(10,    nextGaussian);    return  random  *  Math.pow(10,  nextGaussian);	  	non-compiled	[CE]  unreachable  statement	14	None	add
96	[BUG]  [BUGGY]  return  Random.nextDouble(r);  [CE]  cannot  find  symbol  r  [FE]            AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  Random.nextDouble(r);  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  Random.nextDouble(r);	  return    alpha;    	non-compiled	[CE]  cannot  find  symbol  r	30	None	replace
97	[BUG]  [BUGGY]  return  random  *  alpha;  [CE]  cannot  find  symbol  alpha  [FE]                AssertionError      [CONTEXT]      final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }      [BUGGY]  return  random  *  alpha;  [BUGGY]        }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  random  *  alpha;	  return    random    *    x;    	non-compiled	[CE]  cannot  find  symbol  alpha	6	None	replace
