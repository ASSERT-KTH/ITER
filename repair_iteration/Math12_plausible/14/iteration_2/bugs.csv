bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  random  *  Math.PI  /  x;  [CE]  cannot  find  symbol  x  [FE]    AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  Math.PI  /  x;  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  random  *  Math.PI  /  x;	  return    random    *    Math.PI    /    random;    	non-compiled	[CE]  cannot  find  symbol  x	7	None	replace
2	[BUG]  [BUGGY]  return  random  *  Math.PI  /  r;  [CE]  cannot  find  symbol  r  [FE]      AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  Math.PI  /  r;  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  random  *  Math.PI  /  r;	  return    random    *    Math.PI    /    random;    	non-compiled	[CE]  cannot  find  symbol  r	7	None	replace
3	[BUG]  [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(r);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(r);  [BUGGY]    return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  nextGaussian  *  FastMath.sin(r);	      double    random    =    r    *    FastMath.sin(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	3	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  nextGaussian;  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	add	return  random  *  nextGaussian;	  return    random    *    r;    	compilable	  [FE]  AssertionError  	5	6	replace
5	[BUG]  [BUGGY]  return  random  *  nextGaussian;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  nextGaussian;  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  random  *  nextGaussian;	  return    random    *    r;    	compilable	  [FE]  AssertionError  	5	6	replace
6	[BUG]  [BUGGY]  return  random  *  x;  [CE]  cannot  find  symbol  x  [FE]            AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  x;  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  random  *  x;	  return    random    *    r;    	non-compiled	[CE]  cannot  find  symbol  x	5	None	replace
7	[BUG]  [BUGGY]  double  random  =  r  *  FastMath.log(x);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  double  random  =  r  *  FastMath.log(x);  [BUGGY]    return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  r  *  FastMath.log(x);	      double    random    =    x    *    FastMath.log(y);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	12	None	replace
8	[BUG]  [BUGGY]  double  random  =  Math.cos(x);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  double  random  =  Math.cos(x);  [BUGGY]    return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  Math.cos(x);	      double    random    =    Math.cos(nextGaussian);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	13	None	replace
9	[BUG]  [BUGGY]  double  random  =  Math.cos(x,  nextGaussian);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]              AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  double  random  =  Math.cos(x,  nextGaussian);  [BUGGY]    return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  Math.cos(x,  nextGaussian);	      double    random    =    Math.cos(nextGaussian);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	13	None	replace
10	[BUG]  [BUGGY]  double  random  =  nextGaussian  *  FastMath.log(y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  double  random  =  nextGaussian  *  FastMath.log(y);  [BUGGY]    return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  nextGaussian  *  FastMath.log(y);	      double    random    =    nextGaussian    *    FastMath.log(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	9	None	replace
11	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.log(nextGaussian);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  double  random  =  x  *  FastMath.log(nextGaussian);  [BUGGY]    return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  x  *  FastMath.log(nextGaussian);	      double    random    =    nextGaussian    *    FastMath.log(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	9	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  nextGaussian;  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	add	return  nextGaussian;	  return    r;    	compilable	  [FE]  AssertionError  	4	5	replace
13	[BUG]  [BUGGY]  return  nextGaussian;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  nextGaussian;  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  nextGaussian;	  return    r;    	compilable	  [FE]  AssertionError  	4	5	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  Math.pow(10,  nextGaussian);  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	add	return  random  *  Math.pow(10,  nextGaussian);	  return    random    *    Math.pow(10,    r);    	compilable	  [FE]  AssertionError  	14	6	replace
15	[BUG]  [BUGGY]  return  random  *  Math.pow(10,  nextGaussian);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  Math.pow(10,  nextGaussian);  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  random  *  Math.pow(10,  nextGaussian);	  return    random    *    Math.pow(10,    r);    	compilable	  [FE]  AssertionError  	14	6	replace
16	[BUG]  [BUGGY]  return  random  *  Math.pow(10,  alpha);  [CE]  cannot  find  symbol  alpha  [FE]          AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  Math.pow(10,  alpha);  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  random  *  Math.pow(10,  alpha);	  return    random    *    Math.pow(10,    r);    	non-compiled	[CE]  cannot  find  symbol  alpha	14	None	replace
17	[BUG]  [BUGGY]  random  =  random  *  FastMath.sin(nextGaussian);  [CE]  variable  random  might  already  have  been  assigned  [FE]            AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  random  =  random  *  FastMath.sin(nextGaussian);  [BUGGY]    return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	random  =  random  *  FastMath.sin(nextGaussian);	      random    =    random    *    FastMath.sin(x);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	10	None	replace
18	[BUG]  [BUGGY]  random  =  random  *  FastMath.sin(r);  [CE]  cannot  find  symbol  r  [FE]              AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  random  =  random  *  FastMath.sin(r);  [BUGGY]    return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	random  =  random  *  FastMath.sin(r);	      random    =    random    *    FastMath.sin(x);    	non-compiled	[CE]  cannot  find  symbol  r	10	None	replace
19	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.cos(r);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  double  random  =  x  *  FastMath.cos(r);  [BUGGY]    return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  x  *  FastMath.cos(r);	      double    random    =    r    *    FastMath.cos(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	2	None	replace
20	[BUG]  [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(x,  y);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  double  random  =  nextGaussian  *  FastMath.sin(x,  y);  [BUGGY]    return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  nextGaussian  *  FastMath.sin(x,  y);	      double    random    =    nextGaussian    *    FastMath.sin(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	8	None	replace
21	[BUG]  [BUGGY]  return  random  *  Math.PI  /  random;  double  random  =  Math.PI  /  random;  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  Math.PI  /  random;  double  random  =  Math.PI  /  random;  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    random;    double  random  =  Math.PI  /  random;	  	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	6	None	add
22	[BUG]  [BUGGY]  return  random  *  Math.PI  /  random;  if(nextGaussian  ==  Math.PI)  {  return  random  *  Math.PI  /  random;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  Math.PI  /  random;  if(nextGaussian  ==  Math.PI)  {  return  random  *  Math.PI  /  random;  }  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    random;    if(nextGaussian  ==  Math.PI)  {  return  random  *  Math.PI  /  random;  }	  	non-compiled	[CE]  unreachable  statement	6	None	add
23	[BUG]  [BUGGY]  return  random  *  Math.PI  /  random;  if(nextGaussian!=  Math.PI)  {  return  random  *  Math.PI  /  random;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  Math.PI  /  random;  if(nextGaussian!=  Math.PI)  {  return  random  *  Math.PI  /  random;  }  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    random;    if(nextGaussian!=  Math.PI)  {  return  random  *  Math.PI  /  random;  }	  	non-compiled	[CE]  unreachable  statement	6	None	add
24	[BUG]  [BUGGY]  double  random  =  nextGaussian  *  FastMath.cos(r);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  double  random  =  nextGaussian  *  FastMath.cos(r);  [BUGGY]    return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  nextGaussian  *  FastMath.cos(r);	      double    random    =    r    *    FastMath.cos(nextGaussian);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	1	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  FastMath.PI;  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	add	return  random  *  FastMath.PI;	  return    random    *    r;    	compilable	  [FE]  AssertionError  	5	6	replace
26	[BUG]  [BUGGY]  return  random  *  FastMath.PI;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  FastMath.PI;  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  random  *  FastMath.PI;	  return    random    *    r;    	compilable	  [FE]  AssertionError  	5	6	replace
27	[BUG]  [BUGGY]  return  random  *  Math.PI  /  alpha;  [CE]  cannot  find  symbol  alpha  [FE]    AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  Math.PI  /  alpha;  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  random  *  Math.PI  /  alpha;	  return    random    *    Math.PI    /    random;    	non-compiled	[CE]  cannot  find  symbol  alpha	7	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  Math.PI  /  nextGaussian;  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	add	return  random  *  Math.PI  /  nextGaussian;	  return    random    *    Math.PI    /    random;    	compilable	  [FE]  AssertionError  	7	6	replace
29	[BUG]  [BUGGY]  return  random  *  Math.PI  /  nextGaussian;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  Math.PI  /  nextGaussian;  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  random  *  Math.PI  /  nextGaussian;	  return    random    *    Math.PI    /    random;    	compilable	  [FE]  AssertionError  	7	6	replace
30	[BUG]  [BUGGY]  return  alpha;  [CE]  cannot  find  symbol  alpha  [FE]        AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  alpha;  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  alpha;	  return    r;    	non-compiled	[CE]  cannot  find  symbol  alpha	4	None	replace
31	[BUG]  [BUGGY]  double  random  =  y  *  FastMath.log(x);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  double  random  =  y  *  FastMath.log(x);  [BUGGY]    return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  y  *  FastMath.log(x);	      double    random    =    x    *    FastMath.log(y);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	12	None	replace
32	[BUG]  [BUGGY]  return  random  *  Math.PI  /  random;  double  random  =  random  *  Math.PI  /  random;  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  Math.PI  /  random;  double  random  =  random  *  Math.PI  /  random;  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    random;    double  random  =  random  *  Math.PI  /  random;	  	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	6	None	add
33	[BUG]  [BUGGY]  return  random  *  Math.PI  /  random;  final  double  random  =  Math.PI  /  random;  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]      AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  Math.PI  /  random;  final  double  random  =  Math.PI  /  random;  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    random;    final  double  random  =  Math.PI  /  random;	  	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	6	None	add
34	[BUG]  [BUGGY]  double  random  =  x  *  FastMath.sin(r);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]            AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  double  random  =  x  *  FastMath.sin(r);  [BUGGY]    return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	double  random  =  x  *  FastMath.sin(r);	      double    random    =    r    *    FastMath.sin(x);    	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	3	None	replace
35	[BUG]  [BUGGY]  random  =  random  *  FastMath.sin(y);  [CE]  cannot  find  symbol  y  [FE]            AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  random  =  random  *  FastMath.sin(y);  [BUGGY]    return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	random  =  random  *  FastMath.sin(y);	      random    =    random    *    FastMath.sin(x);    	non-compiled	[CE]  cannot  find  symbol  y	10	None	replace
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  Math.PI  /  2;  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	add	return  random  *  Math.PI  /  2;	  return    random    *    Math.PI    /    random;    	compilable	  [FE]  AssertionError  	7	6	replace
37	[BUG]  [BUGGY]  return  random  *  Math.PI  /  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  Math.PI  /  2;  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  random  *  Math.PI  /  2;	  return    random    *    Math.PI    /    random;    	compilable	  [FE]  AssertionError  	7	6	replace
38	[BUG]  [BUGGY]  return  random  *  Math.PI  /  secondGaussian;  [CE]  cannot  find  symbol  secondGaussian  [FE]      AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  Math.PI  /  secondGaussian;  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  random  *  Math.PI  /  secondGaussian;	  return    random    *    Math.PI    /    random;    	non-compiled	[CE]  cannot  find  symbol  secondGaussian	7	None	replace
39	[BUG]  [BUGGY]  return  random  *  Math.PI  /  random;  double  random  =  Math.pow(Math.PI  /  random);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  Math.PI  /  random;  double  random  =  Math.pow(Math.PI  /  random);  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    random;    double  random  =  Math.pow(Math.PI  /  random);	  	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	6	None	add
40	[BUG]  [BUGGY]  return  random  *  Math.PI  /  random;  double  random  =  Math.pow(Math.log(x));  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]      AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  random  *  Math.PI  /  random;  double  random  =  Math.pow(Math.log(x));  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return    random    *    Math.PI    /    random;    double  random  =  Math.pow(Math.log(x));	  	non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	6	None	add
41	[BUG]  [BUGGY]  return  Random.NaN;  [CE]  cannot  find  symbol  Random  [FE]        AssertionError    [CONTEXT]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }    [BUGGY]  return  Random.NaN;  [BUGGY]      }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	return  Random.NaN;	  return    r;    	non-compiled	[CE]  cannot  find  symbol  Random	4	None	replace
