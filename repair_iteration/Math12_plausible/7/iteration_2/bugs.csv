bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  *  y;  final  double  alpha  =  2  *  FastMath.PI  *  y;  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  *  y;  final  double  alpha  =  2  *  FastMath.PI  *  y;  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final    double    alpha    =    2    *    FastMath.PI    *    y;    final  double  alpha  =  2  *  FastMath.PI  *  y;	  	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	3	None	add
2	[BUG]  [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  x;  final  double  alpha  =  2  *  FastMath.PI  /  x;  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  x;  final  double  alpha  =  2  *  FastMath.PI  /  x;  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final    double    alpha    =    2    *    FastMath.PI    /    x;    final  double  alpha  =  2  *  FastMath.PI  /  x;	  	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	1	None	add
3	[BUG]  [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  x;  final  double  alpha  =  2  *  FastMath.PI  /  y;  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]      AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  x;  final  double  alpha  =  2  *  FastMath.PI  /  y;  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final    double    alpha    =    2    *    FastMath.PI    /    x;    final  double  alpha  =  2  *  FastMath.PI  /  y;	  	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	1	None	add
4	[BUG]  [BUGGY]  final  double  x  =  nextGaussian();  final  double  y  =  nextDouble();  [CE]  variable  x  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  x  =  nextGaussian();  final  double  y  =  nextDouble();  [BUGGY]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  x  =  nextGaussian();  final  double  y  =  nextDouble();	      x    =    nextDouble();    final    double    y    =    nextDouble();    	non-compiled	[CE]  variable  x  is  already  defined  in  method  nextGaussian()	7	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  x  +  1;  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	final  double  alpha  =  2  *  FastMath.PI  /  x  +  1;	  final    double    alpha    =    2    *    FastMath.PI    /    x;    	compilable	  [FE]  AssertionError  	2	3	replace
6	[BUG]  [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  x  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  x  +  1;  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  alpha  =  2  *  FastMath.PI  /  x  +  1;	  final    double    alpha    =    2    *    FastMath.PI    /    x;    	compilable	  [FE]  AssertionError  	2	3	replace
7	[BUG]  [BUGGY]  final  double  x  =  nextGaussian();  [CE]  variable  x  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  x  =  nextGaussian();  [BUGGY]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  x  =  nextGaussian();	      double    x    =    nextDouble();    final    double    y    =    nextDouble();    	non-compiled	[CE]  variable  x  is  already  defined  in  method  nextGaussian()	6	None	replace
8	[BUG]  [BUGGY]  final  double  x  =  random.nextDouble();  final  double  y  =  nextDouble();  [CE]  variable  x  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  x  =  random.nextDouble();  final  double  y  =  nextDouble();  [BUGGY]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  x  =  random.nextDouble();  final  double  y  =  nextDouble();	      double    x    =    nextDouble();    final    double    y    =    nextDouble();    	non-compiled	[CE]  variable  x  is  already  defined  in  method  nextGaussian()	6	None	replace
9	[BUG]  [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  *  x;  final  double  alpha  =  3  *  FastMath.PI  *  x;  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  *  x;  final  double  alpha  =  3  *  FastMath.PI  *  x;  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final    double    alpha    =    3    *    FastMath.PI    *    x;    final  double  alpha  =  3  *  FastMath.PI  *  x;	  	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	13	None	add
10	[BUG]  [BUGGY]  timeout  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  double  alpha  =  x  *  FastMath.sin(nextGaussian);  [BUGGY]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	double  alpha  =  x  *  FastMath.sin(nextGaussian);	      double    alpha    =    nextGaussian    *    FastMath.sin(x);    	compilable	timeout	11	1	replace
11	[BUG]  [BUGGY]  double  alpha  =  x  *  FastMath.sin(nextGaussian);  timeout  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  double  alpha  =  x  *  FastMath.sin(nextGaussian);  [BUGGY]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  alpha  =  x  *  FastMath.sin(nextGaussian);	      double    alpha    =    nextGaussian    *    FastMath.sin(x);    	compilable	timeout	11	1	replace
12	[BUG]  [BUGGY]  double  alpha  =  nextGaussian  *  FastMath.sin(x,  y);  [CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  double  alpha  =  nextGaussian  *  FastMath.sin(x,  y);  [BUGGY]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  alpha  =  nextGaussian  *  FastMath.sin(x,  y);	      double    alpha    =    nextGaussian    *    FastMath.sin(x);    	non-compiled	[CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;	11	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  y;  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	final  double  alpha  =  2  *  FastMath.PI  /  y;	  final    double    alpha    =    2    *    FastMath.PI    *    y;    	compilable	  [FE]  AssertionError  	4	6	replace
14	[BUG]  [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  y;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  y;  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  alpha  =  2  *  FastMath.PI  /  y;	  final    double    alpha    =    2    *    FastMath.PI    *    y;    	compilable	  [FE]  AssertionError  	4	6	replace
15	[BUG]  [BUGGY]  final  double  y  =  nextGaussian().doubleValue();  [CE]  variable  y  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  y  =  nextGaussian().doubleValue();  [BUGGY]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  y  =  nextGaussian().doubleValue();	      final    double    y    =    nextGaussian();    	non-compiled	[CE]  variable  y  is  already  defined  in  method  nextGaussian()	10	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  double  alpha  =  FastMath.cos(x);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	double  alpha  =  FastMath.cos(x);	      	compilable	  [FE]  AssertionError  	5	6	replace
17	[BUG]  [BUGGY]  double  alpha  =  FastMath.cos(x);  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  double  alpha  =  FastMath.cos(x);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  alpha  =  FastMath.cos(x);	      	compilable	  [FE]  AssertionError  	5	6	replace
18	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  double  alpha  =  nextGaussian();  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	double  alpha  =  nextGaussian();	      	compilable	  [FE]  StackOverflowError  	5	6	replace
19	[BUG]  [BUGGY]  double  alpha  =  nextGaussian();  [FE]  StackOverflowError  [FE]              AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  double  alpha  =  nextGaussian();  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  alpha  =  nextGaussian();	      	compilable	  [FE]  StackOverflowError  	5	6	replace
20	[BUG]  [BUGGY]  double  x  =  nextGaussian();  [CE]  variable  x  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  double  x  =  nextGaussian();  [BUGGY]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  x  =  nextGaussian();	      double    x    =    nextDouble();    	non-compiled	[CE]  variable  x  is  already  defined  in  method  nextGaussian()	12	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  /  x;  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	final  double  alpha  =  3  *  FastMath.PI  /  x;	  final    double    alpha    =    3    *    FastMath.PI    *    x;    	compilable	  [FE]  AssertionError  	14	3	replace
22	[BUG]  [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  /  x;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  /  x;  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  alpha  =  3  *  FastMath.PI  /  x;	  final    double    alpha    =    3    *    FastMath.PI    *    x;    	compilable	  [FE]  AssertionError  	14	3	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  *  y;  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	final  double  alpha  =  3  *  FastMath.PI  *  y;	  final    double    alpha    =    3    *    FastMath.PI    *    x;    	compilable	  [FE]  AssertionError  	14	6	replace
24	[BUG]  [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  *  y;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  *  y;  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  alpha  =  3  *  FastMath.PI  *  y;	  final    double    alpha    =    3    *    FastMath.PI    *    x;    	compilable	  [FE]  AssertionError  	14	6	replace
25	[BUG]  [BUGGY]  timeout  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  double  alpha  =  x  *  FastMath.cos(nextGaussian);  [BUGGY]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	double  alpha  =  x  *  FastMath.cos(nextGaussian);	      double    alpha    =    nextGaussian    *    FastMath.cos(x);    	compilable	timeout	9	1	replace
26	[BUG]  [BUGGY]  double  alpha  =  x  *  FastMath.cos(nextGaussian);  timeout  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  double  alpha  =  x  *  FastMath.cos(nextGaussian);  [BUGGY]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  alpha  =  x  *  FastMath.cos(nextGaussian);	      double    alpha    =    nextGaussian    *    FastMath.cos(x);    	compilable	timeout	9	1	replace
27	[BUG]  [BUGGY]  double  alpha  =  random  *  FastMath.cos(x);  [CE]  variable  random  might  not  have  been  initialized  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  double  alpha  =  random  *  FastMath.cos(x);  [BUGGY]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  alpha  =  random  *  FastMath.cos(x);	      double    alpha    =    nextGaussian    *    FastMath.cos(x);    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	9	None	replace
28	[BUG]  [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  *  random;  [CE]  variable  random  might  not  have  been  initialized  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  *  random;  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  alpha  =  2  *  FastMath.PI  *  random;	  final    double    alpha    =    2    *    FastMath.PI    *    y;    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	4	None	replace
29	[BUG]  [BUGGY]  double  alpha  =  random  *  FastMath.sin(x);  [CE]  variable  random  might  not  have  been  initialized  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  double  alpha  =  random  *  FastMath.sin(x);  [BUGGY]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  alpha  =  random  *  FastMath.sin(x);	      double    alpha    =    nextGaussian    *    FastMath.sin(x);    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	11	None	replace
30	[BUG]  [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  random;  [CE]  variable  random  might  not  have  been  initialized  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  /  random;  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  alpha  =  2  *  FastMath.PI  /  random;	  final    double    alpha    =    2    *    FastMath.PI    /    x;    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	2	None	replace
31	[BUG]  [BUGGY]  final  double  y  =  random();  [CE]  variable  y  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  y  =  random();  [BUGGY]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  y  =  random();	      final    double    y    =    nextGaussian();    	non-compiled	[CE]  variable  y  is  already  defined  in  method  nextGaussian()	10	None	replace
32	[BUG]  [BUGGY]  final  double  x  =  nextDouble();  [CE]  variable  x  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  x  =  nextDouble();  [BUGGY]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  x  =  nextDouble();	      double    x    =    nextDouble();    final    double    y    =    nextDouble();    	non-compiled	[CE]  variable  x  is  already  defined  in  method  nextGaussian()	6	None	replace
33	[BUG]  [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  *  x;  final  double  alpha  =  3  *  FastMath.PI  *  y;  [CE]  variable  alpha  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  alpha  =  3  *  FastMath.PI  *  x;  final  double  alpha  =  3  *  FastMath.PI  *  y;  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final    double    alpha    =    3    *    FastMath.PI    *    x;    final  double  alpha  =  3  *  FastMath.PI  *  y;	  	non-compiled	[CE]  variable  alpha  is  already  defined  in  method  nextGaussian()	13	None	add
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  alpha  =  FastMath.cos(x);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	final  double  alpha  =  FastMath.cos(x);	      	compilable	  [FE]  AssertionError  	5	6	replace
35	[BUG]  [BUGGY]  final  double  alpha  =  FastMath.cos(x);  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  alpha  =  FastMath.cos(x);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  alpha  =  FastMath.cos(x);	      	compilable	  [FE]  AssertionError  	5	6	replace
36	[BUG]  [BUGGY]  timeout  [FE]              AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  alpha  =  nextGaussian  *  FastMath.cos(x);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	final  double  alpha  =  nextGaussian  *  FastMath.cos(x);	      	compilable	timeout	5	1	replace
37	[BUG]  [BUGGY]  final  double  alpha  =  nextGaussian  *  FastMath.cos(x);  timeout  [FE]              AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  alpha  =  nextGaussian  *  FastMath.cos(x);  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final  double  alpha  =  nextGaussian  *  FastMath.cos(x);	      	compilable	timeout	5	1	replace
38	[BUG]  [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  *  y;  Final  double  alpha  =  2  *  FastMath.PI  *  y;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  final  double  alpha  =  2  *  FastMath.PI  *  y;  Final  double  alpha  =  2  *  FastMath.PI  *  y;  [BUGGY]    final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	final    double    alpha    =    2    *    FastMath.PI    *    y;    Final  double  alpha  =  2  *  FastMath.PI  *  y;	  	non-compiled	[CE]  not  a  statement	3	None	add
39	[BUG]  [BUGGY]  double  x  =  random.nextDouble();  [CE]  variable  x  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  double  x  =  random.nextDouble();  [BUGGY]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	double  x  =  random.nextDouble();	      double    x    =    nextDouble();    	non-compiled	[CE]  variable  x  is  already  defined  in  method  nextGaussian()	12	None	replace
40	[BUG]  [BUGGY]  x  =  nextGaussian();  [CE]  cannot  assign  a  value  to  final  variable  x  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();    [BUGGY]  x  =  nextGaussian();  [BUGGY]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	x  =  nextGaussian();	      x    =    nextDouble();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  x	8	None	replace
