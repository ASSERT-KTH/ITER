bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    random  =  r  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  [BUGGY]    random  =  r  *  FastMath.sin(alpha);  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	    random  =  r  *  FastMath.sin(alpha);		non-compiled	[CE]  variable  random  might  already  have  been  assigned	20	None	add
2	[BUG]  [BUGGY]    r  =  FastMath.sin(x);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]        AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  [BUGGY]    r  =  FastMath.sin(x);  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	    r  =  FastMath.sin(x);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	20	None	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(r);  [BUGGY]  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian  =  random  *  FastMath.sin(r);	nextGaussian  =  r  *  FastMath.sin(alpha);  	compilable	  [FE]  AssertionError  	19	3	replace
4	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(r);  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(r);  [BUGGY]  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian  =  random  *  FastMath.sin(r);	nextGaussian  =  r  *  FastMath.sin(alpha);  	compilable	  [FE]  AssertionError  	19	3	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(x);  [BUGGY]  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian  =  r  *  FastMath.sin(x);	nextGaussian  =  r  *  FastMath.sin(alpha);  	compilable	  [FE]  AssertionError  	19	6	replace
6	[BUG]  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(x);  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(x);  [BUGGY]  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian  =  r  *  FastMath.sin(x);	nextGaussian  =  r  *  FastMath.sin(alpha);  	compilable	  [FE]  AssertionError  	19	6	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(alpha);  [BUGGY]  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian  =  random  *  FastMath.sin(alpha);	nextGaussian  =  r  *  FastMath.sin(alpha);  	compilable	  [FE]  AssertionError  	19	6	replace
8	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(alpha);  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(alpha);  [BUGGY]  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian  =  random  *  FastMath.sin(alpha);	nextGaussian  =  r  *  FastMath.sin(alpha);  	compilable	  [FE]  AssertionError  	19	6	replace
9	[BUG]  [BUGGY]    r  =  random  *  FastMath.sin(x);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]      AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  [BUGGY]    r  =  random  *  FastMath.sin(x);  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	    r  =  random  *  FastMath.sin(x);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	20	None	add
10	[BUG]  [BUGGY]    random  =  random  *  FastMath.sin(x);  [CE]  variable  random  might  already  have  been  assigned  [FE]        AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  [BUGGY]    random  =  random  *  FastMath.sin(x);  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	    random  =  random  *  FastMath.sin(x);		non-compiled	[CE]  variable  random  might  already  have  been  assigned	20	None	add
