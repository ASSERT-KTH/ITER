25	[BUG]    [BUGGY]    nextGaussian    =    random    *    FastMath.sin(alpha);    double    nextGaussian    =    random    *    FastMath.sin(alpha);    [FE]    AssertionError    [FE]        AssertionError        [CONTEXT]        public    double    nextGaussian()    {    final    double    random;    if    (Double.isNaN(nextGaussian))    {    final    double    x    =    nextDouble();    final    double    y    =    nextDouble();    final    double    alpha    =    2    *    FastMath.PI    *    x;    final    double    r=    FastMath.sqrt(-2    *    FastMath.log(y));    random    =    r    *    FastMath.cos(alpha);        [BUGGY]    nextGaussian    =    random    *    FastMath.sin(alpha);    double    nextGaussian    =    random    *    FastMath.sin(alpha);    [BUGGY]        }    else    {    random    =    nextGaussian;    nextGaussian    =    Double.NaN;    }    return    random;    }    [CLASS]    BitsStreamGenerator    [METHOD]    nextGaussian    [RETURN_TYPE]    double    [VARIABLES]    double    alpha    nextGaussian    r    random    x    y    boolean    	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	double  nextGaussian  =  random  *  FastMath.sin(alpha);	  nextGaussian    =    random    *    FastMath.sin(alpha);    double    nextGaussian    =    random    *    FastMath.sin(alpha);    	plausible		28	0
25	[BUG]    [BUGGY]    nextGaussian    =    random    *    FastMath.sin(alpha);    double    nextGaussian    =    random    *    FastMath.sin(alpha);    [FE]    AssertionError    [FE]        AssertionError        [CONTEXT]        public    double    nextGaussian()    {    final    double    random;    if    (Double.isNaN(nextGaussian))    {    final    double    x    =    nextDouble();    final    double    y    =    nextDouble();    final    double    alpha    =    2    *    FastMath.PI    *    x;    final    double    r=    FastMath.sqrt(-2    *    FastMath.log(y));    random    =    r    *    FastMath.cos(alpha);        [BUGGY]    nextGaussian    =    random    *    FastMath.sin(alpha);    double    nextGaussian    =    random    *    FastMath.sin(alpha);    [BUGGY]        }    else    {    random    =    nextGaussian;    nextGaussian    =    Double.NaN;    }    return    random;    }    [CLASS]    BitsStreamGenerator    [METHOD]    nextGaussian    [RETURN_TYPE]    double    [VARIABLES]    double    alpha    nextGaussian    r    random    x    y    boolean    	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	double  nextGaussian  =  random  *  FastMath.sin(r);	  nextGaussian    =    random    *    FastMath.sin(alpha);    double    nextGaussian    =    random    *    FastMath.sin(alpha);    	plausible		28	0
85	[BUG]    [BUGGY]    nextGaussian    =    x    *    FastMath.sin(alpha);    [FE]    AssertionError    [FE]        AssertionError        [CONTEXT]        public    double    nextGaussian()    {    final    double    random;    if    (Double.isNaN(nextGaussian))    {    final    double    x    =    nextDouble();    final    double    y    =    nextDouble();    final    double    alpha    =    2    *    FastMath.PI    *    x;    final    double    r=    FastMath.sqrt(-2    *    FastMath.log(y));    random    =    r    *    FastMath.cos(alpha);        [BUGGY]    nextGaussian    =    x    *    FastMath.sin(alpha);    [BUGGY]        }    else    {    random    =    nextGaussian;    nextGaussian    =    Double.NaN;    }    return    random;    }    [CLASS]    BitsStreamGenerator    [METHOD]    nextGaussian    [RETURN_TYPE]    double    [VARIABLES]    double    alpha    nextGaussian    r    random    x    y    boolean    	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian  =  x  *  FastMath.sin(nextGaussian);	  nextGaussian    =    x    *    FastMath.sin(alpha);    	plausible		15	0
